<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文章导航</title>
    <url>/posts/blog-navigation/</url>
    <content><![CDATA[<p>文章导航</p>
<a id="more"></a>
<h2 id="App自动化测试"><a href="#App自动化测试" class="headerlink" title="App自动化测试:"></a>App自动化测试:</h2><p><a href="https://hiyongz.github.io/posts/app-testing-tools-for-uiautomator2/">App自动化测试工具Uiautomator2</a><br><a href="https://hiyongz.github.io/posts/app-testing-tools-for-airtestproject/">App自动化测试工具Airtest</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mobile-app-testing/">测试题库：app自动化测试</a><br><a href="https://hiyongz.github.io/posts/selenium-appium-keycode/">UI自动化测试：键盘输入之Android keycode</a><br><a href="https://hiyongz.github.io/posts/selenium-appium-webdriver-wait/">selenium/appium 等待方式介绍</a><br><a href="https://hiyongz.github.io/posts/appium-automatic-traversal-test-appcrawler/">App自动化测试 | AppCrawler自动遍历测试</a><br><a href="https://hiyongz.github.io/posts/appium-automatic-traversal-test-monkey/">App自动化测试 | 自动遍历测试之Monkey工具</a><br><a href="https://hiyongz.github.io/posts/android-mumu-emulator-pin-code/">解决网易mumu模拟器忘记PIN码</a><br><a href="https://hiyongz.github.io/posts/appium-android-webview/">App自动化测试 | Android WebView测试</a><br><a href="https://hiyongz.github.io/posts/appium-locator-uiautomator/">App自动化测试 | Appium元素定位（二）</a><br><a href="https://hiyongz.github.io/posts/appium-locator/">App自动化测试 | Appium元素定位（一）</a><br><a href="https://hiyongz.github.io/posts/appium-android-controls/">App自动化测试 | App控件定位</a><br><a href="https://hiyongz.github.io/posts/appium-install-and-architecture/">App自动化测试 | Appium 介绍及环境安装</a><br><a href="https://hiyongz.github.io/posts/appium-locator-operate/">App自动化测试 | Appium控件交互</a><br><a href="https://hiyongz.github.io/posts/appium-adb/">App自动化测试 | Android ADB原理及常用命令</a></p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h2><p><a href="https://hiyongz.github.io/posts/linux-copying-files-using-scp-or-rsync/">使用SCP或Rsync实现Linux主机之间文件、目录的复制</a><br><a href="https://hiyongz.github.io/posts/linux-password-less-ssh-login-for-multiple-remote-servers/">配置多台服务器之间ssh免密登录</a><br><a href="https://hiyongz.github.io/posts/linux-and-windows-create-files-certain-size/">Linux和Windows创建指定大小文件方法</a><br><a href="https://hiyongz.github.io/posts/linux-shell-for-getopt/">Linux Bash之getopt命令行参数解析</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-linux-shell/">测试题库：Linux、Shell</a><br><a href="https://hiyongz.github.io/posts/linux-shell-bash-programing/">Linux Bash编程</a><br><a href="https://hiyongz.github.io/posts/linux-shell-programming-grep-sed-awk/">Linux三剑客grep、awk和sed介绍</a><br><a href="https://hiyongz.github.io/posts/linux-regular-expression-and-python-regex/">Python正则表达式</a><br><a href="https://hiyongz.github.io/posts/linux-shell-performance-command-guide/">Linux常用命令：性能命令</a><br><a href="https://hiyongz.github.io/posts/linux-centos-configure-tutorials/">Centos 虚拟机配置</a><br><a href="https://hiyongz.github.io/posts/linux-shell-networking-management-guide/">Linux常用命令：网络命令</a><br><a href="https://hiyongz.github.io/posts/linux-shell-file-command-guide/">Linux常用命令：文件操作命令</a><br><a href="https://hiyongz.github.io/posts/linux-kernel-and-shell-introduce/">Linux系统介绍：内核、shell及软件包管理</a></p>
<h2 id="Web自动化测试"><a href="#Web自动化测试" class="headerlink" title="Web自动化测试:"></a>Web自动化测试:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-web-testing/">测试题库：Web自动化测试</a><br><a href="https://hiyongz.github.io/posts/selenium-appium-keycode/">UI自动化测试：键盘输入之Android keycode</a><br><a href="https://hiyongz.github.io/posts/selenium-grid-for-parallel-execute-script/">Selenium Grid：在多个主机上并行执行自动化脚本</a><br><a href="https://hiyongz.github.io/posts/selenium-architecture-introduce/">Selenium自动化测试框架介绍</a><br><a href="https://hiyongz.github.io/posts/selenium-appium-webdriver-wait/">selenium/appium 等待方式介绍</a><br><a href="https://hiyongz.github.io/posts/selenium-javascript/">Web自动化测试 | 执行JavaScript脚本</a><br><a href="https://hiyongz.github.io/posts/selenium-xpath-and-CSS-Selector-locator/">Web自动化测试 | xpath &amp; CSS Selector定位</a><br><a href="https://hiyongz.github.io/posts/selenium-browsers/">Web自动化测试 | 多浏览器测试</a><br><a href="https://hiyongz.github.io/posts/selenium-select/">Web自动化测试 | Select下拉框</a><br><a href="https://hiyongz.github.io/posts/selenium-switch_to/">Web自动化测试 | switch_to</a><br><a href="https://hiyongz.github.io/posts/selenium-actionchains-touchaction/">Web自动化测试 | ActionChains、TouchAction</a><br><a href="https://hiyongz.github.io/posts/selenium-webelement-operate/">Web自动化测试 | 元素操作</a><br><a href="https://hiyongz.github.io/posts/selenium_webelement_locator/">Web自动化测试 | Web元素定位</a></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h2><p><a href="https://hiyongz.github.io/posts/windows-shortcuts/">常用Windows 快捷键</a><br><a href="https://hiyongz.github.io/posts/windows-shell-command/">常用Windows cmd命令</a><br><a href="https://hiyongz.github.io/posts/windows-shell-for-networking-management/">Windows 网络管理命令</a></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它:"></a>其它:</h2><p><a href="https://hiyongz.github.io/posts/macos-bigsur-hackintosh-installation-tutorial/">黑苹果安装笔记</a><br><a href="https://hiyongz.github.io/posts/markdown-basic-syntax/">markdown基本语法介绍</a><br><a href="https://hiyongz.github.io/posts/personal-blog-hexo-construction-guide/">Hexo+Github/Gitee 搭建个人博客</a><br><a href="https://hiyongz.github.io/posts/personal-blog-hexo-construction-guide2/">Hexo个人博客主题配置</a><br><a href="https://hiyongz.github.io/posts/front-end-for-typora-css/">typora主题配置：公众号一键排版</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-blog-build/">使用jenkins实现hexo博客自动发布</a></p>
<h2 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-docker/">测试题库：docker容器</a><br><a href="https://hiyongz.github.io/posts/container-docker-dockerfile/">容器技术介绍：Dockerfile语法指令及Docker镜像构建</a><br><a href="https://hiyongz.github.io/posts/container-docker-command/">容器技术介绍：Docker常用命令</a><br><a href="https://hiyongz.github.io/posts/container-docker-guide/">容器技术介绍：Docker简介及安装</a></p>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试:"></a>性能测试:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-performance-testing/">测试题库：性能测试</a><br><a href="https://hiyongz.github.io/posts/performance-monitoring-for-server-with-prometheus/">系统性能监控：Prometheus + Grafana 监控服务器性能</a><br><a href="https://hiyongz.github.io/posts/performance-testing-for-performance-monitoring-system/">JMeter性能监控系统：Jmeter + InfluxDB + Grafana</a><br><a href="https://hiyongz.github.io/posts/performance-testing-jmeter-concurrency/">JMeter性能测试：JMeter多用户并发模拟及压测结果分析</a><br><a href="https://hiyongz.github.io/posts/performance-testing-using-jmeter/">JMeter性能测试：JMeter安装及脚本录制回放</a></p>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成:"></a>持续集成:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-continuous-integration/">测试题库：持续集成</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-blog-build/">使用jenkins实现hexo博客自动发布</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-api/">持续集成：Jenkins API简单使用</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-example/">持续集成：jenkins + pytest + selenium + Git + Allure自动化测试</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins/">持续集成平台Jenkins介绍</a><br><a href="https://hiyongz.github.io/posts/container-docker-for-jenkins-install/">Docker搭建持续集成平台Jenkins</a></p>
<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试:"></a>接口测试:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-requests/">测试题库：接口自动化测试</a><br><a href="https://hiyongz.github.io/posts/api-test-mitmproxy-guide/">mitmproxy 代理工具介绍：rewrite和map local实现</a><br><a href="https://hiyongz.github.io/posts/api-test-charles-guide/">接口测试代理工具charles mock测试</a><br><a href="https://hiyongz.github.io/posts/api-test-requests/">接口测试框架Requests</a><br><a href="https://hiyongz.github.io/posts/api-test-charles-ca-certificate-install/">charles SSL证书安装</a><br><a href="https://hiyongz.github.io/posts/api-test-and-web-protocol/">接口测试简介及 Web 服务架构</a><br><a href="https://hiyongz.github.io/posts/api-test-curl-guide/">cURL工具介绍及简单使用</a><br><a href="https://hiyongz.github.io/posts/api-test-postman-guide/">Postman安装与使用</a></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库:"></a>数据库:</h2><p><a href="https://hiyongz.github.io/posts/database-for-mysql-advance/">MySQL数据库进阶知识点</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mysql/">测试题库：MySQL数据库</a><br><a href="https://hiyongz.github.io/posts/database-for-mysql-operate/">MySQL数据库基础入门</a><br><a href="https://hiyongz.github.io/posts/database-for-mysql-install-on-linux-and-windows/">MySQL数据库安装配置详细教程</a></p>
<h2 id="测试开发"><a href="#测试开发" class="headerlink" title="测试开发:"></a>测试开发:</h2><p><a href="https://hiyongz.github.io/posts/database-for-mysql-advance/">MySQL数据库进阶知识点</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-continuous-integration/">测试题库：持续集成</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-docker/">测试题库：docker容器</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mysql/">测试题库：MySQL数据库</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-blog-build/">使用jenkins实现hexo博客自动发布</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-api/">持续集成：Jenkins API简单使用</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-example/">持续集成：jenkins + pytest + selenium + Git + Allure自动化测试</a><br><a href="https://hiyongz.github.io/posts/container-docker-dockerfile/">容器技术介绍：Dockerfile语法指令及Docker镜像构建</a><br><a href="https://hiyongz.github.io/posts/database-for-mysql-operate/">MySQL数据库基础入门</a><br><a href="https://hiyongz.github.io/posts/database-for-mysql-install-on-linux-and-windows/">MySQL数据库安装配置详细教程</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins/">持续集成平台Jenkins介绍</a><br><a href="https://hiyongz.github.io/posts/container-docker-for-jenkins-install/">Docker搭建持续集成平台Jenkins</a><br><a href="https://hiyongz.github.io/posts/container-docker-command/">容器技术介绍：Docker常用命令</a><br><a href="https://hiyongz.github.io/posts/container-docker-guide/">容器技术介绍：Docker简介及安装</a></p>
<h2 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架:"></a>测试框架:</h2><p><a href="https://hiyongz.github.io/posts/pytest-plugin/">Pytest插件开发</a><br><a href="https://hiyongz.github.io/posts/pytest-parametrize/">Pytest测试框架（四）：pytest 参数化用例</a><br><a href="https://hiyongz.github.io/posts/pytest-allure-report/">Pytest测试框架（五）：pytest + allure生成测试报告</a><br><a href="https://hiyongz.github.io/posts/pytest-fixture/">Pytest测试框架（三）：pytest fixture 用法</a><br><a href="https://hiyongz.github.io/posts/pytest-xunit-style-of-setup-teardown/">Pytest测试框架（二）：pytest 的setup/teardown方法</a><br><a href="https://hiyongz.github.io/posts/install-pytest-and-run-test/">Pytest测试框架（一）：pytest安装及用例执行</a></p>
<h2 id="测试理论"><a href="#测试理论" class="headerlink" title="测试理论:"></a>测试理论:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-test-theory/">测试题库：测试理论</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-software-testing/">软件测试理论</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-white-box-testing/">白盒测试方法介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-black-box-testing/">黑盒测试方法介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-testing-platform/">常用测试平台</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-testing-technology/">测试技术介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-testing-process/">测试流程介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-software-develop-management/">软件开发流程与项目管理</a></p>
<h2 id="测试题库"><a href="#测试题库" class="headerlink" title="测试题库:"></a>测试题库:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-algorithm/">测试题库：算法</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-continuous-integration/">测试题库：持续集成</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-docker/">测试题库：docker容器</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-linux-shell/">测试题库：Linux、Shell</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mobile-app-testing/">测试题库：app自动化测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mysql/">测试题库：MySQL数据库</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-performance-testing/">测试题库：性能测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-python/">测试题库：Python</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-requests/">测试题库：接口自动化测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-soft-skills-question/">测试题库：软技能问题</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-test-theory/">测试题库：测试理论</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-web-testing/">测试题库：Web自动化测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-network/">测试题库：计算机网络</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mayijinfu/">测试开发</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-question-bank/">问题</a></p>
<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试:"></a>渗透测试:</h2><p><a href="https://hiyongz.github.io/posts/api-test-security-testing-netdiscover-tool/">Netdiscover网络扫描工具</a><br><a href="https://hiyongz.github.io/posts/api-test-security-testing-hydra-tool/">hydra暴力破解工具</a><br><a href="https://hiyongz.github.io/posts/api-test-security-testing-nmap-tool/">Nmap扫描工具介绍</a></p>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理:"></a>版本管理:</h2><p><a href="https://hiyongz.github.io/posts/git-generate-ssh-public-key-guide/">同一台电脑配置Gitee、Github 的 Git SSH公钥</a><br><a href="https://hiyongz.github.io/posts/git-install-and-guide/">Git简易教程-安装及简单使用</a></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法:"></a>算法:</h2><p><a href="https://hiyongz.github.io/posts/algorithm-notes-for-bitwise-operation/">算法笔记：位运算</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-binary-search/">常见搜索算法（二）：二分查找</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-dfs-bfs/">常见搜索算法（一）：深度优先和广度优先搜索</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-graph-tree-and-heap/">算法笔记：树、堆和图</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-hash-table/">算法笔记：哈希表、映射和集合</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-leetcode/">数据结构与算法-LeetCode</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-linear-list/">算法笔记：数组、链表、栈和队列</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-algorithmic-complexity/">算法笔记：时间复杂度和空间复杂度</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-sorting-algorithms/">算法笔记：排序算法</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-dynamic-programming/">算法笔记：递归、动态规划</a></p>
<h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言:"></a>编程语言:</h2><p><a href="https://hiyongz.github.io/posts/python-notes-for-string-interning/">Python内存驻留机制</a><br><a href="https://hiyongz.github.io/posts/python-library-for-pyyaml/">Python yaml文件读写</a><br><a href="https://hiyongz.github.io/posts/python-library-for-json/">Python json文件读写</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-passing-arguments-in-function/">Python函数的参数类型</a><br><a href="https://hiyongz.github.io/posts/python-library-for-click/">Python 命令行参数解析之 Click</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-anonymous-function/">Python笔记：lambda匿名函数</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-new-and-init/">Python中的<strong>new</strong>、<strong>init</strong>以及metaclass</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-reflection/">Python反射介绍</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-coroutines/">Python协程</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-function-closures/">Python中的闭包</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-bitwise-operation/">算法笔记：位运算</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-binary-search/">常见搜索算法（二）：二分查找</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-object-and-copy/">Python对象及内存管理机制</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-dfs-bfs/">常见搜索算法（一）：深度优先和广度优先搜索</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-multi-process/">Python多线程与多进程</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-graph-tree-and-heap/">算法笔记：树、堆和图</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-hash-table/">算法笔记：哈希表、映射和集合</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-getopt/">Python笔记：命令行参数解析</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-linear-list/">算法笔记：数组、链表、栈和队列</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-python/">测试题库：Python</a><br><a href="https://hiyongz.github.io/posts/algorithm-notes-for-sorting-algorithms/">算法笔记：排序算法</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-datetime/">Python笔记：日期时间获取与转换</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-decorator/">Python笔记：Python装饰器</a><br><a href="https://hiyongz.github.io/posts/python-scapy-for-packet-build-and-parser/">Python Scapy 报文构造和解析</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-variable-and-attribute/">Python笔记：属性值设置和判断变量是否存在</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-string/">Python笔记：字符串操作</a><br><a href="https://hiyongz.github.io/posts/python-notes-for-list/">Python笔记：List相关操作</a><br><a href="https://hiyongz.github.io/posts/Python-Enhancement-Proposals/">Python PEP—Python增强提案</a><br><a href="https://hiyongz.github.io/posts/python-vscode-jupyter-notebook/">VSCode + Python环境配置</a><br><a href="https://hiyongz.github.io/posts/linux-regular-expression-and-python-regex/">Python正则表达式</a></p>
<h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试:"></a>自动化测试:</h2><p><a href="https://hiyongz.github.io/posts/app-testing-tools-for-uiautomator2/">App自动化测试工具Uiautomator2</a><br><a href="https://hiyongz.github.io/posts/app-testing-tools-for-airtestproject/">App自动化测试工具Airtest</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-mobile-app-testing/">测试题库：app自动化测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-performance-testing/">测试题库：性能测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-requests/">测试题库：接口自动化测试</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-test-theory/">测试题库：测试理论</a><br><a href="https://hiyongz.github.io/posts/software-testing-points-for-web-testing/">测试题库：Web自动化测试</a><br><a href="https://hiyongz.github.io/posts/selenium-appium-keycode/">UI自动化测试：键盘输入之Android keycode</a><br><a href="https://hiyongz.github.io/posts/selenium-grid-for-parallel-execute-script/">Selenium Grid：在多个主机上并行执行自动化脚本</a><br><a href="https://hiyongz.github.io/posts/api-test-security-testing-netdiscover-tool/">Netdiscover网络扫描工具</a><br><a href="https://hiyongz.github.io/posts/pytest-plugin/">Pytest插件开发</a><br><a href="https://hiyongz.github.io/posts/api-test-security-testing-hydra-tool/">hydra暴力破解工具</a><br><a href="https://hiyongz.github.io/posts/performance-monitoring-for-server-with-prometheus/">系统性能监控：Prometheus + Grafana 监控服务器性能</a><br><a href="https://hiyongz.github.io/posts/api-test-security-testing-nmap-tool/">Nmap扫描工具介绍</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-api/">持续集成：Jenkins API简单使用</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins-example/">持续集成：jenkins + pytest + selenium + Git + Allure自动化测试</a><br><a href="https://hiyongz.github.io/posts/selenium-architecture-introduce/">Selenium自动化测试框架介绍</a><br><a href="https://hiyongz.github.io/posts/continuous-integration-for-jenkins/">持续集成平台Jenkins介绍</a><br><a href="https://hiyongz.github.io/posts/performance-testing-for-performance-monitoring-system/">JMeter性能监控系统：Jmeter + InfluxDB + Grafana</a><br><a href="https://hiyongz.github.io/posts/container-docker-for-jenkins-install/">Docker搭建持续集成平台Jenkins</a><br><a href="https://hiyongz.github.io/posts/performance-testing-jmeter-concurrency/">JMeter性能测试：JMeter多用户并发模拟及压测结果分析</a><br><a href="https://hiyongz.github.io/posts/selenium-appium-webdriver-wait/">selenium/appium 等待方式介绍</a><br><a href="https://hiyongz.github.io/posts/performance-testing-using-jmeter/">JMeter性能测试：JMeter安装及脚本录制回放</a><br><a href="https://hiyongz.github.io/posts/container-docker-guide/">容器技术介绍：Docker简介及安装</a><br><a href="https://hiyongz.github.io/posts/api-test-mitmproxy-guide/">mitmproxy 代理工具介绍：rewrite和map local实现</a><br><a href="https://hiyongz.github.io/posts/api-test-charles-guide/">接口测试代理工具charles mock测试</a><br><a href="https://hiyongz.github.io/posts/api-test-requests/">接口测试框架Requests</a><br><a href="https://hiyongz.github.io/posts/api-test-charles-ca-certificate-install/">charles SSL证书安装</a><br><a href="https://hiyongz.github.io/posts/api-test-and-web-protocol/">接口测试简介及 Web 服务架构</a><br><a href="https://hiyongz.github.io/posts/api-test-curl-guide/">cURL工具介绍及简单使用</a><br><a href="https://hiyongz.github.io/posts/api-test-postman-guide/">Postman安装与使用</a><br><a href="https://hiyongz.github.io/posts/appium-automatic-traversal-test-appcrawler/">App自动化测试 | AppCrawler自动遍历测试</a><br><a href="https://hiyongz.github.io/posts/appium-automatic-traversal-test-monkey/">App自动化测试 | 自动遍历测试之Monkey工具</a><br><a href="https://hiyongz.github.io/posts/android-mumu-emulator-pin-code/">解决网易mumu模拟器忘记PIN码</a><br><a href="https://hiyongz.github.io/posts/appium-android-webview/">App自动化测试 | Android WebView测试</a><br><a href="https://hiyongz.github.io/posts/appium-locator-uiautomator/">App自动化测试 | Appium元素定位（二）</a><br><a href="https://hiyongz.github.io/posts/appium-locator/">App自动化测试 | Appium元素定位（一）</a><br><a href="https://hiyongz.github.io/posts/appium-android-controls/">App自动化测试 | App控件定位</a><br><a href="https://hiyongz.github.io/posts/appium-install-and-architecture/">App自动化测试 | Appium 介绍及环境安装</a><br><a href="https://hiyongz.github.io/posts/pytest-parametrize/">Pytest测试框架（四）：pytest 参数化用例</a><br><a href="https://hiyongz.github.io/posts/appium-locator-operate/">App自动化测试 | Appium控件交互</a><br><a href="https://hiyongz.github.io/posts/appium-adb/">App自动化测试 | Android ADB原理及常用命令</a><br><a href="https://hiyongz.github.io/posts/pytest-allure-report/">Pytest测试框架（五）：pytest + allure生成测试报告</a><br><a href="https://hiyongz.github.io/posts/pytest-fixture/">Pytest测试框架（三）：pytest fixture 用法</a><br><a href="https://hiyongz.github.io/posts/pytest-xunit-style-of-setup-teardown/">Pytest测试框架（二）：pytest 的setup/teardown方法</a><br><a href="https://hiyongz.github.io/posts/install-pytest-and-run-test/">Pytest测试框架（一）：pytest安装及用例执行</a><br><a href="https://hiyongz.github.io/posts/selenium-javascript/">Web自动化测试 | 执行JavaScript脚本</a><br><a href="https://hiyongz.github.io/posts/selenium-xpath-and-CSS-Selector-locator/">Web自动化测试 | xpath &amp; CSS Selector定位</a><br><a href="https://hiyongz.github.io/posts/selenium-browsers/">Web自动化测试 | 多浏览器测试</a><br><a href="https://hiyongz.github.io/posts/selenium-select/">Web自动化测试 | Select下拉框</a><br><a href="https://hiyongz.github.io/posts/selenium-switch_to/">Web自动化测试 | switch_to</a><br><a href="https://hiyongz.github.io/posts/selenium-actionchains-touchaction/">Web自动化测试 | ActionChains、TouchAction</a><br><a href="https://hiyongz.github.io/posts/selenium-webelement-operate/">Web自动化测试 | 元素操作</a><br><a href="https://hiyongz.github.io/posts/selenium_webelement_locator/">Web自动化测试 | Web元素定位</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-software-testing/">软件测试理论</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-white-box-testing/">白盒测试方法介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-black-box-testing/">黑盒测试方法介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-testing-platform/">常用测试平台</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-testing-technology/">测试技术介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-testing-process/">测试流程介绍</a><br><a href="https://hiyongz.github.io/posts/test-theory-for-software-develop-management/">软件开发流程与项目管理</a></p>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络:"></a>计算机网络:</h2><p><a href="https://hiyongz.github.io/posts/software-testing-points-for-network/">测试题库：计算机网络</a><br><a href="https://hiyongz.github.io/posts/network-cookies-session-and-token/">Session、Cookie和Token介绍</a><br><a href="https://hiyongz.github.io/posts/api-test-security-testing-netdiscover-tool/">Netdiscover网络扫描工具</a><br><a href="https://hiyongz.github.io/posts/python-scapy-for-packet-build-and-parser/">Python Scapy 报文构造和解析</a><br><a href="https://hiyongz.github.io/posts/api-test-mitmproxy-guide/">mitmproxy 代理工具介绍：rewrite和map local实现</a><br><a href="https://hiyongz.github.io/posts/api-test-charles-guide/">接口测试代理工具charles mock测试</a><br><a href="https://hiyongz.github.io/posts/api-test-and-web-protocol/">接口测试简介及 Web 服务架构</a><br><a href="https://hiyongz.github.io/posts/network-tcpdump-and-wireshark/">使用tshark命令解析tcpdump抓取的数据包</a><br><a href="https://hiyongz.github.io/posts/api-test-curl-guide/">cURL工具介绍及简单使用</a><br><a href="https://hiyongz.github.io/posts/tcp-ip-protocol-architecture-model%20_internet-layer/">TCP/IP协议架构介绍（二）：网络层</a><br><a href="https://hiyongz.github.io/posts/tcp-ip-protocol-architecture-model_link-layer/">TCP/IP协议架构介绍（一）：网络接口层</a><br><a href="https://hiyongz.github.io/posts/tcp-ip-protocol-architecture-model_transport-layer/">TCP/IP协议架构介绍（三）：传输层</a><br><a href="https://hiyongz.github.io/posts/tcp-ip-protocol-architecture-model_application-layer/">TCP/IP协议架构介绍（四）：应用层</a></p>
<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读:"></a>阅读:</h2><p><a href="https://hiyongz.github.io/posts/reading-notes-for-the-attention-merchants/">读书笔记 | 你是你自己注意力的主人吗？</a><br><a href="https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/">《时间简史》- 广义相对论</a><br><a href="https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4/">《时间简史》- 空间和时间</a><br><a href="https://hiyongz.github.io/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80/">金融小知识：通货膨胀</a><br><a href="https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%93%88%E5%8B%83%E7%BA%A2%E7%A7%BB/">读书笔记：《时间简史》- 哈勃红移</a><br><a href="https://hiyongz.github.io/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E5%95%86%E8%AA%89/">投资理财-商誉</a></p>
<center><b>--THE END--<b></center>

]]></content>
  </entry>
  <entry>
    <title>VBSscript实现后台运行Windows bat脚本</title>
    <url>/posts/windows-notes-for-running-a-bat-file-in-background/</url>
    <content><![CDATA[<p>VBScript 是Visual Basic 语言的轻量级版本，本文介绍使用VBS实现在后台运行bat脚本。</p>
<a id="more"></a>
<p>先编写一个简单的bat脚本（test_bat.bat）：使用Python打开一个简单的 http 服务器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> start</span><br><span class="line">cmd /k <span class="string">&quot;python -m http.server 8100&quot;</span></span><br><span class="line"><span class="built_in">echo</span> end</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p>
<p>下面来测试一下这个脚本，双击test_bat.bat，会打开如下窗口：</p>
<p><img src="python-http-server.png" width="70%" height="70%" /></p>
<p>浏览器访问 <a href="http://127.0.0.1:8100/">http://127.0.0.1:8100/</a></p>
<p><img src="python-http-server2.png" width="70%" height="70%" /></p>
<p>可以看到HTTP服务搭建成功。</p>
<p>也可以使用 <code>netstat</code> 命令查看8100端口对应服务是否启动：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -nao | findstr 8100</span><br><span class="line">  TCP    0.0.0.0:8100           0.0.0.0:0              LISTENING       17220</span><br><span class="line">  TCP    127.0.0.1:1024         127.0.0.1:8100         TIME_WAIT       0</span><br><span class="line">$ </span><br><span class="line">$ tasklist | findstr 17220</span><br><span class="line">python.exe                   17220 Console                    1     18,800 K</span><br></pre></td></tr></table></figure></p>
<p>如何实现在后台运行呢？可以使用VBScript来实现。</p>
<p>编写vbs文件test_bat.vbs：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set WshShell = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>) </span><br><span class="line">WshShell.Run chr(34) &amp; <span class="string">&quot;test_bat.bat&quot;</span> &amp; Chr(34), 0</span><br></pre></td></tr></table></figure><br><code>0</code> 表示后台运行，如果设置为1，会显示cmd窗口。</p>
<p>双击test_bat.vbs运行，浏览器访问 <a href="http://127.0.0.1:8100/">http://127.0.0.1:8100/</a> 查看服务是否启动 或者使用如下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -nao | findstr 8100</span><br><span class="line">  TCP    0.0.0.0:8100           0.0.0.0:0              LISTENING       1788</span><br><span class="line"></span><br><span class="line">$ tasklist | findstr 1788</span><br><span class="line">python.exe                    1788 Console                    1     18,680 K</span><br></pre></td></tr></table></figure><br>可以看到HTTP server启动成功。</p>
<p>杀掉HTTP server：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ taskkill -pid 1788 -f -t</span><br><span class="line">SUCCESS: The process with PID 1788 (child process of PID 18576) has been terminated.</span><br></pre></td></tr></table></figure></p>
<p>如果bat脚本需要传入参数怎么实现呢？可以使用WScript.Arguments对象获取参数，下面直接给出实现方式，将端口号作为参数传入：</p>
<p>test_bat2.bat：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> start</span><br><span class="line">python -m http.server %1</span><br><span class="line"><span class="built_in">echo</span> end</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><br>test_bat2.vbs：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dim args</span><br><span class="line">Set args = WScript.Arguments</span><br><span class="line">Set WshShell = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>) </span><br><span class="line"></span><br><span class="line">WshShell.run <span class="string">&quot;cmd /c &quot;</span> &amp;args(0) &amp;args(1),0</span><br></pre></td></tr></table></figure></p>
<p>cmd命令窗口运行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ test_bat2.vbs test_bat2.bat <span class="string">&quot; 8100&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>在实际使用过程中，通常不会手动双击运行脚本，比如在自动化测试中，需要自动启动一个<a href="https://blog.csdn.net/u010698107/article/details/112727035">tshark抓包</a>程序, 我们只需要它在后台运行。下面举一个Python运行bat脚本的示例程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_bat</span>(<span class="params">self, port</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;启动 HTTP server</span></span><br><span class="line"><span class="string">    :port: 服务端口号</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.stop_process(port)</span><br><span class="line">    dir_path = os.path.dirname(os.path.realpath(__file__))  <span class="comment"># 当前路径</span></span><br><span class="line">    print(dir_path)</span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">f&#x27;<span class="subst">&#123;dir_path&#125;</span>/test_bat.vbs &quot;<span class="subst">&#123;dir_path&#125;</span>/test_bat.bat&quot; &quot; <span class="subst">&#123;port&#125;</span>&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> self.check_process(port):</span><br><span class="line">            print(<span class="string">&quot;http server successfully&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    print(<span class="string">&quot;http server started failed&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>完整代码：<a href="https://github.com/hiyongz/ShellNotes/blob/main/test_vbs.py">https://github.com/hiyongz/ShellNotes/blob/main/test_vbs.py</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 | 助推</title>
    <url>/posts/reading-notes-for-nudge/</url>
    <content><![CDATA[<p>《助推》是诺贝尔经济学奖得主理查德·塞勒的著作，副标题为“如何做出有关健康、财富与幸福的最佳决策”，由于我们可能无法做出完全理性的选择，通过使用助推，可以引导人们做出更好的选择。任何能够显著改变社会人行为的因素都可以被称为“助推”。<br><a id="more"></a></p>
<p>助推包括6 个原则：</p>
<ul>
<li>动机（i<strong>N</strong>centives）</li>
<li>理解权衡（<strong>U</strong>nderstand mappings）</li>
<li>默认选项（<strong>D</strong>efault）</li>
<li>反馈（<strong>G</strong>ive feedback）</li>
<li>预计错误（<strong>E</strong>xpect error）</li>
<li>结构性复合选择（<strong>S</strong>tructure complex choices）</li>
</ul>
<p>各取一个字母恰好是“助推”（nudges）。</p>
<p>通过助推的方式引导人们选择是不是剥夺了人们的选择自由呢？泰勒提出了“自由主义的温和专制主义”，自由主义是目的，即保证人们的选择自由，“温和专制主义”就是选择设计者不包含强制的色彩的为人们的提供选择，引导人们决策。</p>
<p>为什么需要“温和的专制主义”，也就是“助推”呢？泰勒认为人并不是“经济人”，而是“社会人”，并非完全理性的，人类的预见大都因为带有偏差而不可靠。</p>
<p>人类包括两种思维方式，一种是直觉和自动的，称为“直觉思维系统”；另外一种是思考和理性的，称为“理性思维系统”，它更有计划性和自觉性。</p>
<p>由于我们所处的世界信息繁杂，疲于应付各类事务，不可能仔细思考和分析每一件事情，所以大多情况下我们做判断或者决策时，往往依靠的是经验法则，多数情况下既快速又有效，但它可能会导致系统偏差，以色列籍心理学家阿莫斯·特沃斯基和丹尼尔·卡尼曼提出了三项经验法则—锚定法则、可得性法则和代表性法则。</p>
<p><strong>锚定法则</strong>意思是你会在锚定一个已知数字的基础上沿着你认为正确的方向进行调整，而我们做出的调整往往不够，导致出现偏差。</p>
<p><strong>可得性法则</strong>：我们会根据相关例子的情况对发生某些风险的可能性做出判断。如果人们能够轻而易举地回忆起有关的例子，他们便会对这种风险更为在意。人们会认为一种令人记忆犹新的风险（比如“9·11”恐怖袭击事件引起的后遗症）会比一种人们并不熟悉的风险（比如日光浴或温度日益升高的夏天）更严重。同理，最近发生的事件会比较早发生的事件对我们的行为造成更大的影响。</p>
<p><strong>代表性法则</strong>是说当有人问你A属于B的可能性有多大时，你（或者说你的直觉思维系统）会首先问自己A与B有多少相似性（即A能在多大程度上“代表”B）。它可能会导致人们对日常生活中的许多事情产生严重的误解，比如幸存者偏差。</p>
<p>除了依靠经验法则来决策外，还有一种心态就是过度自信，不愿意承认自己的无知，或者对自己认识不清，关于这方面的论证推荐《知识的错觉》这本书。</p>
<p>人类身上还有<strong>损失厌恶</strong>和<strong>现状偏差</strong>的认知心理，人们憎恶失去属于自己的东西，失去某件东西使你难过的程度比你得到这件东西使你快乐的程度要大一倍，这一现象称为“损失厌恶”，它使人具有一种强烈的保持现状的欲望，产生惰性。它阻止我们改变现有的状况，即便这些改变对我们非常有益。“现状偏差”是说人们总体上更倾向于保持现有的状况，采取一种“顺从”的态度。</p>
<p>根据人类身上的“损失厌恶”和“现状偏差”，可以某项选择被设计为“默认”，<strong>在很多情况下，默认选项的助推极为强大，因为消费者会感觉（无论对错）默认选项是被默认选项设计者所认可的选择，不管这些设计者是企业老板、政府工作人员还是电视节目策划者。</strong></p>
<p>我们生活中是充满诱惑的，比如各种广告刺激你的欲望。我们大多数人都知道它的存在，比如计划减肥，但是在行动时往往不能按照计划执行，难以抵制来自各方面的诱惑，因为有时候跟随自己的内心会非常惬意，充满竞争的市场总会使我们不由自主地做出不太好的选择。比如理财广告教你合理投资，但不能阻止借贷平台借给人们钱。我们非常容易受到他人言行的左右（关于群体心理的论述推荐《乌合之众》），社会影响左右了人们的认知。</p>
<p>社会影响主要分为两种：</p>
<ul>
<li><p>第一种是信息。如果有许多人都持同一种观点，做同一件事情，那么你会认为他们的观点和做法也是最适合自己的。</p>
</li>
<li><p>第二种是同侪压力。如果你非常在意别人对你的看法（也许你会错误地感到别人总在注意你），那么你很可能会选择随大流，从而避免别人对你的非议。</p>
</li>
</ul>
<p>我们可以利用这种从众心理来进行助推，通过告诉人们其他人在做什么来进行社会引导，比如“本小区80%的人都打了疫苗”。</p>
<p>另外，措辞的助推力也很大，不同的阐述方式会影响人们的决策，他们的理性思维系统往往懒得将看到的信息变换一种说法，看看是否会得出一个不同的结论。</p>
<p>由此可见，人类的决策水平也并不怎么样。即便经过再三思考，也不一定能够做出对自己最有利的选择，特别是在那些缺乏经验和相关知识的领域，很难做出好的选择。比如你选择不同的冰淇淋口味是很容易的，但是可能选择一个好的投资方案就比较困难了。</p>
<p>因此，可以设计更好的选择体系使人们更容易选择。那么，一名选择设计者（能够间接影响到其他人的选择行为）如何优化选择体系呢？</p>
<p>诺曼认为，设计者应当牢记，产品的使用者是每天被大量选择和提示淹没的社会人。所设计的选择体系能够体现出你对用户行为的深刻理解，应当保证人们的直觉思维系统不受到迷惑。下面介绍几种助推方式：</p>
<p>一、设计最佳的默认选项</p>
<p>由于人们的惰性、现状偏差等心态，人们在面对选择时，内心都会有一个默认选项，那便是不需要选择者付出任何努力的选项。当面临复杂和困难的选择时，人们可能会在很大程度上宁愿选择一个符合感性理解的默认选项。</p>
<p>二、为可预见的错误提供人性化设计</p>
<p>人人都会犯错误，“人有权利犯错误”。一个设计精妙的系统允许它的使用者出错，并对此给予最大限度的宽容。</p>
<p>三、提供透明有效的信息反馈</p>
<p>设计精妙的反馈系统能够提示人们的行为是否得当，比如设计“出错预警”。</p>
<p>四、简化复杂的选择体系</p>
<p>使各种选择的相关信息更容易被理解，比如将数字信息转化成更容易实施的内容。</p>
<p>五、选择动机</p>
<p>选择设计者必须要设计出一种动机体系，针对不同的人设定不同的动机选项，给予人们一个生产好产品和卖出好价格的动机。</p>
<p>设计动机选项的一种方法是对某种特定选择体系提出下列 4 个问题：谁使用？谁选择？谁掏钱？谁受益？</p>
<p><strong>设法助推并使人们按照之前从未选择过的方向行事是一件好事。选项设计有时候就是帮助人们学到一些东西，从而使他们在未来做出更好的选择。</strong></p>
<p>我们生活中遇到的大多数的选择其实都是由私人选择设计者（企业）或者公共选择设计者（政府）设计的，不管他们是为了自己的利益或者造福大众，我们受到影响是无可争议的。助推无处不在，极大地影响我们的决定。由于我们的精力有限，离不开他们提供的选择。助推者的道德和能力非常关键，他们提供的选择直接关系到客户的利益，因此选择设计的透明度是非常重要的，公开性原则是一种限制和实施助推的很好的原则，客户可以更清楚的了解提供服务的数量、质量以及需要支付的费用。比如最近美团因垄断被罚款事件，这是由于助推者的自利性，损害了人们的利益。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS APP自动化：class chain定位方法</title>
    <url>/posts/app-testing-for-ios-location-with-classChain/</url>
    <content><![CDATA[<p>在<a href="https://blog.csdn.net/u010698107/article/details/120318075">iOS APP自动化：predicate定位</a>中介绍了iOS APP的predicate定位方法，本文介绍与XPath语法比较类似的class chain定位方法。</p>
<a id="more"></a>
<h1 id="class-chain-定位"><a href="#class-chain-定位" class="headerlink" title="class chain 定位"></a>class chain 定位</h1><p>class chain 定位方法由<strong><a href="https://github.com/mykola-mokhnach">mykola-mokhnach</a></strong>开发，和XPath比较类似，可以实现分层查询，但它的查询性能更高，通过将class chain查询映射到一系列的XCUITest调用中，仅查找子节点，不像XPath那样递归地查询整个UI树。</p>
<p>class chain 支持Predicate字符串匹配，下面介绍class chain 定位方法。</p>
<h2 id="儿子节点搜索"><a href="#儿子节点搜索" class="headerlink" title="儿子节点搜索"></a>儿子节点搜索</h2><p>选择儿子元素，类似于XPath语法中的反斜杠<code>/</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XCUIElementTypeWindow[`label BEGINSWITH <span class="string">&quot;text&quot;</span>`][-1] <span class="comment"># 选择label以foo开头的最后一个</span></span><br><span class="line">XCUIElementTypeWindow/XCUIElementTypeButton[3] <span class="comment"># 选择window的儿子元素XCUIElementTypeButton的第3个（索引从1开始）</span></span><br><span class="line">XCUIElementTypeWindow/*[3]  <span class="comment"># 选择window的第3个儿子元素</span></span><br><span class="line">XCUIElementTypeWindow <span class="comment"># 选择所有子窗口</span></span><br><span class="line">XCUIElementTypeWindow[2] <span class="comment"># 选择第二个窗口</span></span><br><span class="line">XCUIElementTypeWindow[2]/XCUIElementTypeAny <span class="comment"># 选择第二个子窗口的所有子元素</span></span><br></pre></td></tr></table></figure>
<h2 id="子孙节点搜索"><a href="#子孙节点搜索" class="headerlink" title="子孙节点搜索"></a>子孙节点搜索</h2><p>类似于XPath语法中的双反斜杠<code>//</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**/XCUIElementTypeCell[`name BEGINSWITH <span class="string">&quot;A&quot;</span>`][-1]/XCUIElementTypeButton[10] <span class="comment"># 选择name以A开头的最后一个Cell元素的第10个子元素</span></span><br><span class="line">**/XCUIElementTypeCell[`name BEGINSWITH <span class="string">&quot;B&quot;</span>`] <span class="comment"># 选择name以B开头的所有Cell元素</span></span><br><span class="line">**/XCUIElementTypeCell[`name BEGINSWITH <span class="string">&quot;C&quot;</span>`]/XCUIElementTypeButton[10] <span class="comment"># 选择name以C开头的第一个Cell元素的第10个子元素</span></span><br><span class="line">**/XCUIElementTypeCell[`name BEGINSWITH <span class="string">&quot;D&quot;</span>`]/**/XCUIElementTypeButton <span class="comment"># 选择name以D开头的第一个Cell元素下所有后代Button</span></span><br></pre></td></tr></table></figure>
<p>使用class chain定位是需要注意以下几点：</p>
<ul>
<li>Predicate字符串要写到中括号中，并且使用反引号包裹。</li>
<li>Predicate表达式应该写在索引前面</li>
</ul>
<h1 id="class-chain定位示例"><a href="#class-chain定位示例" class="headerlink" title="class chain定位示例"></a>class chain定位示例</h1><p>使用<a href="https://github.com/openatx/facebook-wda">facebook-wda</a>进行元素点击操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = c.session(<span class="string">&#x27;com.apple.Preferences&#x27;</span>) <span class="comment"># 打开设置</span></span><br><span class="line"></span><br><span class="line">s(classChain=<span class="string">&#x27;XCUIElementTypeWindow/**/XCUIElementTypeCell[`label BEGINSWITH &quot;屏幕&quot;`]&#x27;</span>).click() <span class="comment"># 点击【屏幕使用时间】</span></span><br><span class="line">s(classChain=<span class="string">&#x27;**/XCUIElementTypeCell[`label BEGINSWITH &quot;屏幕&quot;`]&#x27;</span>).click()</span><br><span class="line">s(classChain=<span class="string">&#x27;**/XCUIElementTypeTable/*[`name == &quot;通知&quot;`]&#x27;</span>).click() <span class="comment"># 点击【通知】</span></span><br><span class="line">s(classChain=<span class="string">&#x27;**/XCUIElementTypeCell[7]&#x27;</span>).click() <span class="comment"># 点击【通知】</span></span><br></pre></td></tr></table></figure>
<p>上面的定位语句也可以使用XPath语法，对应如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s(xpath=<span class="string">&#x27;//XCUIElementTypeWindow//XCUIElementTypeCell[starts-with(@label,&quot;屏幕&quot;)]&#x27;</span>).click()</span><br><span class="line">s(xpath=<span class="string">&#x27;//XCUIElementTypeCell[starts-with(@label,&quot;屏幕&quot;)]&#x27;</span>).click()</span><br><span class="line">s(xpath=<span class="string">&#x27;//XCUIElementTypeTable/*[@name=&quot;通知&quot;]&#x27;</span>).click()</span><br><span class="line">s(xpath=<span class="string">&#x27;//XCUIElementTypeCell[7]&#x27;</span>).click()</span><br></pre></td></tr></table></figure></p>
<p>XPath定位效率比class chain低，建议使用class chain来进行定位。</p>
<p><strong>参考文档：</strong></p>
<ol>
<li><p><a href="https://github.com/facebookarchive/WebDriverAgent/wiki/Class-Chain-Queries-Construction-Rules">https://github.com/facebookarchive/WebDriverAgent/wiki/Class-Chain-Queries-Construction-Rules</a></p>
</li>
<li><p><a href="https://github.com/appium/appium-xcuitest-driver/pull/391">https://github.com/appium/appium-xcuitest-driver/pull/391</a></p>
</li>
</ol>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言并发编程：互斥锁</title>
    <url>/posts/golang-concurrent-synchronization-for-mutex/</url>
    <content><![CDATA[<p>在并发编程中，多个Goroutine访问同一块内存资源时可能会出现竞态条件，我们需要在临界区中使用适当的同步操作来以避免竞态条件。Go 语言中提供了很多同步工具，本文将介绍互斥锁Mutex和读写锁RWMutex的使用方法。</p>
<a id="more"></a>
<h1 id="互斥锁Mutex"><a href="#互斥锁Mutex" class="headerlink" title="互斥锁Mutex"></a>互斥锁Mutex</h1><h2 id="Mutex介绍"><a href="#Mutex介绍" class="headerlink" title="Mutex介绍"></a>Mutex介绍</h2><p>Go 语言的同步工具主要由 sync 包提供，互斥锁 (Mutex) 与读写锁 (RWMutex) 就是sync 包中的方法。</p>
<p>互斥锁可以用来保护一个临界区，保证同一时刻只有一个 goroutine 处于该临界区内。主要包括锁定（Lock方法）和解锁（Unlock方法）两个操作，首先对进入临界区的goroutine进行锁定，离开时进行解锁。</p>
<p>使用互斥锁 (Mutex)时要注意以下几点：</p>
<ol>
<li>不要重复锁定互斥锁，否则会阻塞，也可能会导致死锁（deadlock）；</li>
<li>要对互斥锁进行解锁，这也是为了避免重复锁定；</li>
<li>不要对未锁定或者已解锁的互斥锁解锁；</li>
<li>不要在多个函数之间直接传递互斥锁，sync.Mutex类型属于值类型，将它传给一个函数时，会产生一个副本，在函数中对锁的操作不会影响原锁</li>
</ol>
<p>总之，一个互斥锁只用来保护一个临界区，加锁后记得解锁，对于每一个锁定操作，都要有且只有一个对应的解锁操作，也就是加锁和解锁要成对出现，最保险的做法时使用<strong>defer语句</strong>解锁。</p>
<h2 id="Mutex使用实例"><a href="#Mutex使用实例" class="headerlink" title="Mutex使用实例"></a>Mutex使用实例</h2><p>下面的代码模拟取钱和存钱操作：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    mutex   sync.Mutex</span><br><span class="line">    balance <span class="keyword">int</span></span><br><span class="line">    protecting <span class="keyword">uint</span>  <span class="comment">// 是否加锁</span></span><br><span class="line">    sign = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">10</span>) <span class="comment">//通道，用于等待所有goroutine</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deposit</span><span class="params">(value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sign &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> protecting == <span class="number">1</span> &#123;</span><br><span class="line">        mutex.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;余额: %d\n&quot;</span>, balance)</span><br><span class="line">    balance += value</span><br><span class="line">    fmt.Printf(<span class="string">&quot;存 %d 后的余额: %d\n&quot;</span>, value, balance)</span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">withdraw</span><span class="params">(value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sign &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> protecting == <span class="number">1</span> &#123;</span><br><span class="line">        mutex.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;余额: %d\n&quot;</span>, balance)</span><br><span class="line">    balance -= value</span><br><span class="line">    fmt.Printf(<span class="string">&quot;取 %d 后的余额: %d\n&quot;</span>, value, balance)</span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> withdraw(<span class="number">500</span>) <span class="comment">// 取500</span></span><br><span class="line">        <span class="keyword">go</span> deposit(<span class="number">500</span>)  <span class="comment">// 存500</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		&lt;-sign</span><br><span class="line">	&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;当前余额: %d\n&quot;</span>, balance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    balance = <span class="number">1000</span> <span class="comment">// 初始账户余额为1000</span></span><br><span class="line">    flag.UintVar(&amp;protecting, <span class="string">&quot;protecting&quot;</span>, <span class="number">0</span>, <span class="string">&quot;是否加锁，0表示不加锁，1表示加锁&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码中，使用了通道来让主 goroutine 等待其他 goroutine 运行结束，每个子goroutine在运行结束之前向通道发送一个元素，主 goroutine 在最后从这个通道接收元素，接收次数与子goroutine个数相同。接收完后就会退出主goroutine。</p>
</blockquote>
<p>代码使用协程实现多次（5次）对一个账户进行存钱和取钱的操作，先来看不加锁的情况：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">当前余额: <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>可以看到出现了混乱，比如第二次1000的余额取500后还是1000，这种对同一资源的竞争出现了竞态条件(Race Condition)。</p>
<p>下面来看加锁的执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1500</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">当前余额: <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>加锁后就正常了。</p>
<p>下面介绍更细化的互斥锁：读/写互斥锁RWMutex。</p>
<h1 id="读写锁RWMutex"><a href="#读写锁RWMutex" class="headerlink" title="读写锁RWMutex"></a>读写锁RWMutex</h1><h2 id="RWMutex介绍"><a href="#RWMutex介绍" class="headerlink" title="RWMutex介绍"></a>RWMutex介绍</h2><p>读/写互斥锁RWMutex包含了读锁和写锁，分别对共享资源的“读操作”和“写操作”进行保护。sync.RWMutex类型中的Lock方法和Unlock方法分别用于对写锁进行锁定和解锁，而它的RLock方法和RUnlock方法则分别用于对读锁进行锁定和解锁。</p>
<p>有了互斥锁Mutex，为什么还需要读写锁呢？因为在很多并发操作中，并发读取占比很大，写操作相对较少，读写锁可以并发读取，这样可以提供服务性能。读写锁具有以下特征：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>读写锁</th>
<th>读锁</th>
<th>写锁</th>
</tr>
</thead>
<tbody>
<tr>
<td>读锁</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>写锁</td>
<td>No</td>
<td>No</td>
</tr>
</tbody>
</table>
</div>
<p>也就是说，</p>
<ul>
<li>如果某个共享资源受到读锁和写锁保护时，其它goroutine不能进行写操作。换句话说就是读写操作和写写操作不能并行执行，也就是读写互斥；</li>
<li>受读锁保护时，可以同时进行多个读操作。</li>
</ul>
<p>在使用读写锁时，还需要注意：</p>
<ol>
<li>不要对未锁定的读写锁解锁；</li>
<li>对读锁不能使用写锁解锁</li>
<li>对写锁不能使用读锁解锁</li>
</ol>
<h2 id="RWMutex使用实例"><a href="#RWMutex使用实例" class="headerlink" title="RWMutex使用实例"></a>RWMutex使用实例</h2><p>改写前面的取钱和存钱操作，添加查询余额的方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// account 代表计数器。</span></span><br><span class="line"><span class="keyword">type</span> account <span class="keyword">struct</span> &#123;</span><br><span class="line">	num <span class="keyword">uint</span>         <span class="comment">// 操作次数</span></span><br><span class="line">	balance <span class="keyword">int</span>		 <span class="comment">// 余额</span></span><br><span class="line">	rwMu  *sync.RWMutex <span class="comment">// 读写锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sign = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">15</span>) <span class="comment">//通道，用于等待所有goroutine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看余额：使用读锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *account)</span> <span class="title">check</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sign &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">	c.rwMu.RLock()</span><br><span class="line">	<span class="keyword">defer</span> c.rwMu.RUnlock()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d 次操作后的余额: %d\n&quot;</span>, c.num, c.balance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存钱：写锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *account)</span> <span class="title">deposit</span><span class="params">(value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sign &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    c.rwMu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> c.rwMu.Unlock()	</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;余额: %d\n&quot;</span>, c.balance)   </span><br><span class="line">	c.num += <span class="number">1</span></span><br><span class="line">    c.balance += value</span><br><span class="line">    fmt.Printf(<span class="string">&quot;存 %d 后的余额: %d\n&quot;</span>, value, c.balance)</span><br><span class="line">    fmt.Println() </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取钱：写锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *account)</span> <span class="title">withdraw</span><span class="params">(value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sign &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">	c.rwMu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> c.rwMu.Unlock()	  </span><br><span class="line">	fmt.Printf(<span class="string">&quot;余额: %d\n&quot;</span>, c.balance)     </span><br><span class="line">	c.num += <span class="number">1</span></span><br><span class="line">    c.balance -= value</span><br><span class="line">	fmt.Printf(<span class="string">&quot;取 %d 后的余额: %d\n&quot;</span>, value, c.balance)</span><br><span class="line">    fmt.Println() 	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := account&#123;<span class="number">0</span>, <span class="number">1000</span>, <span class="built_in">new</span>(sync.RWMutex)&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> c.withdraw(<span class="number">500</span>) <span class="comment">// 取500</span></span><br><span class="line">        <span class="keyword">go</span> c.deposit(<span class="number">500</span>)  <span class="comment">// 存500</span></span><br><span class="line">		<span class="keyword">go</span> c.check()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">15</span>; i++ &#123;</span><br><span class="line">		&lt;-sign</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d 次操作后的余额: %d\n&quot;</span>, c.num, c.balance)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 次操作后的余额: <span class="number">500</span></span><br><span class="line"><span class="number">1</span> 次操作后的余额: <span class="number">500</span></span><br><span class="line"><span class="number">1</span> 次操作后的余额: <span class="number">500</span></span><br><span class="line"><span class="number">1</span> 次操作后的余额: <span class="number">500</span></span><br><span class="line"><span class="number">1</span> 次操作后的余额: <span class="number">500</span></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1500</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">1000</span></span><br><span class="line">取 <span class="number">500</span> 后的余额: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">余额: <span class="number">500</span></span><br><span class="line">存 <span class="number">500</span> 后的余额: <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span> 次操作后的余额: <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>读写锁和互斥锁的不同之处在于读写锁把对共享资源的读操作和写操作分开了，可以实现更复杂的访问控制。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>读写锁也是一种互斥锁，它是互斥锁的扩展。在使用时需要注意：</p>
<ol>
<li>加锁后一定要解锁</li>
<li>不要重复加锁或者解锁</li>
<li>不解锁未锁定的锁</li>
<li>不要传递互斥锁</li>
</ol>
<center><b>--THE END--<b></center>



]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础语法（三）：结构体及方法</title>
    <url>/posts/golang-notes-for-struct-and-method/</url>
    <content><![CDATA[<p>结构体类型可以用来保存不同类型的数据，也可以通过方法的形式来声明它的行为。本文将介绍go语言中的结构体和方法，以及“继承”的实现方法。</p>
<a id="more"></a>
<h1 id="结构体类型"><a href="#结构体类型" class="headerlink" title="结构体类型"></a>结构体类型</h1><p>结构体类型（struct）在go语言中具有重要地位，它是实现go语言面向对象编程的重要工具。go语言中没有类的概念，可以使用结构体实现类似的功能，传统的OOP（Object-Oriented Programming）思想中的继承在go中可以通过嵌入字段的方式实现。</p>
<p>结构体的声明与定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用关键字 type 和 struct 定义名字为Person结构体</span></span><br><span class="line"><span class="keyword">type</span> Robot <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	height <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化及赋值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过var声明</span></span><br><span class="line"><span class="keyword">var</span> r1 Robot</span><br><span class="line">r1.name = <span class="string">&quot;Optimus Prime&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量直接赋值</span></span><br><span class="line">r2 := Robot&#123;name: <span class="string">&quot;Optimus Prime&quot;</span>&#125;</span><br><span class="line">r3 := Robot&#123;<span class="string">&quot;Optimus Prime&quot;</span>, <span class="number">100</span>&#125; <span class="comment">//如果不加字段名，值必须按定义顺序给出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new 函数</span></span><br><span class="line">r4 := <span class="built_in">new</span>(Robot)</span><br><span class="line">r4.name = <span class="string">&quot;Optimus Prime&quot;</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">r5 := &amp;Robot&#123;&#125;</span><br><span class="line">r5.name = r1.name</span><br></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>go语言中的函数和方法是有区别的，方法必须有名字，必须隶属于某一个类型，这个类型通过方法声明中的接收者（receiver）声明定义。</p>
<p>接收者声明位于关键字func和方法名称之间的圆括号中，必须包含确切的名称和类型字面量。</p>
<ul>
<li>类型就是当前方法所属的类型</li>
<li>名称用于当前方法中引用它所属类型的值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Robot <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	height <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Robot)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;	</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;name: %s, height: %d&quot;</span>,r.name, r.height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r1 := Robot&#123;name: <span class="string">&quot;Optimus Prime&quot;</span>, height: <span class="number">100</span>&#125;</span><br><span class="line">	fmt.Println(r1)  <span class="comment">// 结果： name: Optimus Prime, height: 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从String()方法的接收者声明可以看出它隶属于Robot类型，接收者名称为r。</p>
<h1 id="结构体内嵌：“继承”与“重写”"><a href="#结构体内嵌：“继承”与“重写”" class="headerlink" title="结构体内嵌：“继承”与“重写”"></a>结构体内嵌：“继承”与“重写”</h1><p>Go 语言中没有继承的概念，具体原因和理念可参考官网：<a href="https://golang.org/doc/faq#inheritance">Why is there no type inheritance?</a></p>
<p>go语言可以通过嵌入字段来实现类似继承的效果，来看下面的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Skills <span class="keyword">struct</span> &#123;</span><br><span class="line">	speak <span class="keyword">string</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Skills)</span> <span class="title">Speak</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(s.speak)	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Robot <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span> <span class="comment">// 姓名</span></span><br><span class="line">	height <span class="keyword">int</span> <span class="comment">// 身高</span></span><br><span class="line">	Skills</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	skill := Skills&#123;speak: <span class="string">&quot;hello !&quot;</span>&#125;</span><br><span class="line">	skill.Speak()</span><br><span class="line">	</span><br><span class="line">	robot := Robot&#123;</span><br><span class="line">		name: <span class="string">&quot;Optimus Prime&quot;</span>,</span><br><span class="line">		Skills: skill,</span><br><span class="line">	&#125;</span><br><span class="line">	robot.Speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>嵌入字段的方法集合会被合并到被嵌入类型的方法集合中。上面代码中，<code>robot.Speak()</code> 会调用嵌入字段Skills的Speak()方法，类似于继承了Skills的Speak()方法。执行结果如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello !</span><br><span class="line">hello !</span><br></pre></td></tr></table></figure>
<p>下面添加一个Robot类型的Speak()方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Robot)</span> <span class="title">Speak</span><span class="params">()</span></span> &#123;	</span><br><span class="line">	fmt.Printf(<span class="string">&quot;My name is %s, &quot;</span>,r.name)</span><br><span class="line">	r.Skills.Speak()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么再次执行，会执行哪个Speak()方法呢？答案是Robot类型的Speak()方法，嵌入字段Skills的Speak()方法被“屏蔽”了，也就是说，被嵌入类型的方法覆盖了嵌入字段的同名方法，这与方法重写类似。</p>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello !</span><br><span class="line">My name is Optimus Prime, hello !</span><br></pre></td></tr></table></figure>
<p>可以通过链式的选择表达式，选择到嵌入字段的字段或方法，<code>r.Skills.Speak()</code> 就调用了嵌入字段Skills的Speak()方法。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>需要注意的是Go 语言虽然支持面向对象编程，但是它没有继承的概念，可以通过嵌入字段的方式来实现类似继承的功能，这种组合方法相比多重继承更加简洁。</p>
<center><b>--THE END--<b></center>



]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub Actions实现Hexo博客自动发布</title>
    <url>/posts/continuous-integration-for-blog-build-with-github-actions/</url>
    <content><![CDATA[<p>我在<a href="https://blog.csdn.net/u010698107/article/details/115888855">使用jenkins实现hexo博客自动发布</a>中介绍了可以使用jenkins实现博客自动发布，其实还有一种更简单的方法，就是GitHub提供的持续集成服务：GitHub Actions。下面就来介绍一下如何使用GitHub Actions来实现将hexo博客自动编译及发布到GitHub Pages和Gitee pages上。</p>
<a id="more"></a>
<h1 id="GitHub-Actions-简介"><a href="#GitHub-Actions-简介" class="headerlink" title="GitHub Actions 简介"></a>GitHub Actions 简介</h1><p>GitHub Actions把代码拉取，打包，触发测试，发布等操作当成一个个的actions，持续集成就是将这些actions组合起来，jenkins也类似。</p>
<p>在项目的<code>.github/workflows</code> 目录中创建一个yaml格式的workflow 文件来编写GitHub Actions 工作流程，GitHub会自动运行该文件。workflow语法可参考：<a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions</a></p>
<p>开发者可以将actions放到代码仓库供其他开发者引用，可以到官网搜索开源的actions：<a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p>
<p>可以使用GitHub Actions实现博客自动发布，将静态博客页面部署到多个服务器上，比如GitHub Pages，Gitee pages以及云服务器上。本文使用GitHub Actions实现将Hexo博客自动编译并发布到GitHub Pages 和 Gitee pages上，并且实现Gitee pages自动更新。</p>
<p>下面介绍具体的配置流程。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="博客仓库"><a href="#博客仓库" class="headerlink" title="博客仓库"></a>博客仓库</h2><p>我的个人博客是使用 hexo 框架搭建的，搭建方法可参考<a href="https://blog.csdn.net/u010698107/article/details/113781267">Hexo+Github/Gitee 搭建个人博客</a>。</p>
<p>主要包括三个仓库：</p>
<ul>
<li>私有仓库Blog：存储 Hexo 项目文章以及源代码</li>
<li>Github公共仓库hiyongz.github.io：存储编译之后的静态页面。</li>
<li>Gitee公共仓库：内容和hiyongz.github.io一样，只是使用的服务不同。</li>
</ul>
<p>使用GitHub Actions要实现的是当Blog仓库指定目录有更新时，触发自动编译并部署博客到hiyongz.github.io仓库中，并将hiyongz.github.io仓库同步到Gitee公共仓库，同步完成后，更新Gitee Pages。</p>
<h2 id="GitHub-Token配置"><a href="#GitHub-Token配置" class="headerlink" title="GitHub Token配置"></a>GitHub Token配置</h2><p>配置发布秘钥，用于将生成的静态博客文件 push 至 GitHub Pages 所在的仓库hiyongz.github.io：</p>
<p><strong>1、生成秘钥</strong></p>
<p>执行如下命令生成公钥和私钥，替换邮件地址为你的github邮箱地址，其实也可以不使用邮箱，这里只是为了便于辨识。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f hexo-deploy-key -t rsa -C <span class="string">&quot;username@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>命令执行后会生成两个文件：<code>hexo-deploy-key</code> 和 <code>hexo-deploy-key.pub</code> 。</p>
<p><strong>2、将公钥添加到Github Pages仓库中</strong></p>
<p>步骤：hiyongz.github.io仓库 -&gt; Settings -&gt; Deploy keys -&gt; Add deploy key</p>
<ul>
<li>Title设置为 <code>HEXO_DEPLOY_PUB</code> (可以根据自己喜好设置)</li>
<li>Key填写 <code>github-deploy-key.pub</code> 文件内容</li>
<li>勾选 <code>Allow write access</code> 选项</li>
</ul>
<p><img src="public-repo-keys.jpg" width="80%" height="80%" /></p>
<p><strong>3、将私钥添加到博客源码仓库中</strong></p>
<p>步骤：博客仓库 -&gt; Settings -&gt; Secrets -&gt; New repository secret</p>
<ul>
<li>Name 填写 <code>HEXO_DEPLOY_KEY</code> 。</li>
<li>Value 填写 <code>github-deploy-key</code> 文件内容。</li>
</ul>
<p><img src="blog-repo-keys.jpg" width="80%" height="80%" /></p>
<h2 id="Gitee-Token配置"><a href="#Gitee-Token配置" class="headerlink" title="Gitee Token配置"></a>Gitee Token配置</h2><p>Gitee Token配置和Github类似。</p>
<p>秘钥不需要重新生成，直接使用前面生成的秘钥。</p>
<p><strong>1、将公钥添加到Gitee Pages仓库中</strong></p>
<p>步骤：gitee pages仓库 -&gt; 管理 -&gt; 公钥管理 -&gt; 添加部署公钥</p>
<p>和github一样需要对仓库有写权限，点击【添加个人公钥】</p>
<p><img src="gitee-pages-public-pages.jpg" width="80%" height="80%" /></p>
<p>复制粘贴文件 <code>github-deploy-key.pub</code> 中的内容</p>
<p><img src="gitee-pages-public-pages2.jpg" width="80%" height="80%" /></p>
<p><strong>2、将私钥添加到Github的博客源码仓库中</strong></p>
<p>不需要重新创建，直接使用 <code>HEXO_DEPLOY_KEY</code> 就行。</p>
<p><strong>3、配置Gitee 帐号的密码</strong></p>
<p>步骤：Github博客仓库 -&gt; Settings -&gt; Secrets -&gt; New repository secret</p>
<ul>
<li>Name 填写 <code>GITEE_PASSWORD</code> 。</li>
<li>Value 填写Gitee 帐号的密码。</li>
</ul>
<p><img src="github-actions-secrets.jpg" width="80%" height="80%" /></p>
<h1 id="配置workflow文件"><a href="#配置workflow文件" class="headerlink" title="配置workflow文件"></a>配置workflow文件</h1><p>下面来配置 Github Actions，编写workflow文件。</p>
<p>在博客仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，yaml文件名可以随意设置。</p>
<p>下面是我的workflow文件（参考了<a href="https://github.com/marketplace/actions/hexo-action#%F0%9F%8D%8Cexample-workflow---hexo-deploy">Hexo Action</a>和<a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a>提供的例子）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">paths-ignore:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/_GoNotes/**&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/_JavaNotes/**&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/_PythonNotes/**&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/_drafts/**&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.github/**&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">github用户名</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">github邮箱</span></span><br><span class="line">        <span class="attr">commit_msg:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;ion)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">sync:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 源仓库</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">git@github.com:hiyongz/hiyongz.github.io.git</span></span><br><span class="line">          <span class="comment"># 目标仓库</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">git@gitee.com:hiyong/hiyong.git</span></span><br><span class="line">  <span class="attr">reload-pages:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">sync</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">hiyong</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">hiyong/hiyong</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>部分字段解释：</p>
<p>1、name：workflow 名称</p>
<p>2、on：触发 workflow 的事件</p>
<ul>
<li><code>push</code>：push事件</li>
<li><code>paths-ignore</code>：忽略指定的目录，也就是在忽略路径外的其它目录文件改动时才触发。</li>
<li>还可以设置多种触发条件，比如支持cron语法实现定时触发，参考<a href="https://docs.github.com/cn/actions/reference/events-that-trigger-workflows">这里</a>。</li>
</ul>
<p>3、jobs：执行任务</p>
<ul>
<li><code>build</code>：博客编译和发布，发布到Github Pages</li>
<li><code>sync</code>：将更新后的hiyongz.github.io仓库同步到Gitee</li>
<li><code>reload-pages</code>：自动更新 Pages，因为Gitee Pages不像GitHub Pages 那样提交代码就自动更新。</li>
<li><code>runs-on</code>：运行环境，支持windows，Ubuntu和macOS</li>
<li><code>steps</code>：指定每个 Job 的运行步骤</li>
<li><code>sma11black/hexo-action@v1.0.3</code>：博客构建发布，引用了<a href="https://github.com/marketplace/actions/hexo-action#%F0%9F%8D%8Cexample-workflow---hexo-deploy">Hexo Action</a>：</li>
<li><code>wearerequired/git-mirror-action@master</code>：仓库同步，引用了<a href="https://github.com/marketplace/actions/git-mirror-action">git-mirror-action</a></li>
<li><code>yanglbme/gitee-pages-action@main</code>：自动更新Gitee Pages，引用了<a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a></li>
</ul>
<p>更多workflow语法可参考 <a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">Workflow syntax for GitHub Actions</a> 。</p>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>更新文章后push到博客仓库，如果满足条件，博客仓库中的Actions会自动触发：</p>
<p><img src="github-actions-workflow.jpg" width="80%" height="80%" /></p>
<p>有可能报如下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: Need phone captcha validation, please follow wechat official account <span class="string">&quot;Gitee&quot;</span> to <span class="built_in">bind</span> account to turn off authentication.</span><br></pre></td></tr></table></figure>
<p>微信公众号关注Gitee，绑定Gitee账号就可以了。</p>
<p>查看hiyongz.github.io和Gitee仓库可以发现有新的更新，并且博客也更新了，这样实现了博客的自动发布，只要将文章写好push到博客仓库就什么也不用管了。</p>
<p>如果Actions执行失败会收到一个邮件。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了GitHub Actions外，还可以使用<a href="https://travis-ci.org/">Travis CI</a>实现持续集成，它可以绑定Github 上的项目。</p>
<p>使用这些持续集成工具能有效提升效率，比如每次文章更新上传后，GitHub Actions会自动触发编译发布操作，只专注写文章就行了。</p>
<p><strong>参考文档：</strong></p>
<ol>
<li><p>GitHub Actions 快速入门：<a href="https://docs.github.com/cn/actions/quickstart">https://docs.github.com/cn/actions/quickstart</a></p>
</li>
<li><p>GitHub Actions：<a href="https://github.com/actions">https://github.com/actions</a></p>
</li>
<li><p>Gitee Pages Action：<a href="https://github.com/marketplace/actions/gitee-pages-action">https://github.com/marketplace/actions/gitee-pages-action</a></p>
</li>
<li><p>git-mirror-action：<a href="https://github.com/marketplace/actions/git-mirror-action">https://github.com/marketplace/actions/git-mirror-action</a></p>
</li>
<li><p>Hexo Action：<a href="https://github.com/marketplace/actions/hexo-action">https://github.com/marketplace/actions/hexo-action</a></p>
</li>
<li><p>awesome-actions：<a href="https://github.com/sdras/awesome-actions">awesome-actions</a></p>
</li>
<li><p><a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p>
</li>
<li><p>workflow语法: <a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions</a></p>
</li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>测试开发</category>
        <category>持续集成</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Hexo</tag>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash编程：Fisher–Yates shuffle 洗牌算法</title>
    <url>/posts/linux-shell-bash-fisher-yates-shuffle-algorithm/</url>
    <content><![CDATA[<p>本文介绍使用shell语法来实现Fisher–Yates shuffle 洗牌算法。</p>
<a id="more"></a>
<h1 id="Fisher-Yates-shuffle-算法简介"><a href="#Fisher-Yates-shuffle-算法简介" class="headerlink" title="Fisher-Yates shuffle 算法简介"></a>Fisher-Yates shuffle 算法简介</h1><p>Fisher–Yates shuffle 洗牌算法可以用于对数组进行随机排列，它的时间复杂度为O(n)，伪代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">To shuffle an array a of n elements (indices 0..n-1):</span><br><span class="line"><span class="keyword">for</span> i from n - 1 downto 1 <span class="keyword">do</span></span><br><span class="line">	j = random <span class="built_in">integer</span> with 0 &lt;= j &lt;= i</span><br><span class="line">	exchange a[j] and a[i]</span><br></pre></td></tr></table></figure>
<p>假定有一个数组a=[1, 2, 3, 4, 5, 6, 7, 8, 9]，数组长度为n，打乱a中元素的具体迭代步骤如下：</p>
<ol>
<li>生成一个[0, n-1]区间的随机数k；</li>
<li>将第k个元素和第n-1个元素进行交换；</li>
<li>进行下一轮迭代，生成一个[0, n-2]区间的随机数k，将第k个元素和第n-2个元素进行交换， 迭代次数为n-1次：从n-1取到1；</li>
<li>最终得到一个打乱的数组。</li>
</ol>
<p>下表是一个数组的具体打乱过程，打乱后的数组是(9 4 8 1 2 3 5 6 7)</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>随机数</th>
<th>原数组</th>
<th>新数组</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-8：6</td>
<td>a = (1 2 3 4 5 6 7 8 9)</td>
<td>交换a[8]和a[6] ：(1 2 3 4 5 6 9 8 7)</td>
</tr>
<tr>
<td>0-7：5</td>
<td>a = (1 2 3 4 5 6 9 8 7)</td>
<td>交换a[7]和a[5] ：(1 2 3 4 5 8 9 6 7)</td>
</tr>
<tr>
<td>0-6：4</td>
<td>a = (1 2 3 4 5 8 9 6 7)</td>
<td>交换a[6]和a[4] ：(1 2 3 4 9 8 5 6 7)</td>
</tr>
<tr>
<td>0-5：2</td>
<td>a = (1 2 3 4 9 8 5 6 7)</td>
<td>交换a[5]和a[2] ：(1 2 8 4 9 3 5 6 7)</td>
</tr>
<tr>
<td>0-4：1</td>
<td>a = (1 2 8 4 9 3 5 6 7)</td>
<td>交换a[4]和a[1] ：(1 9 8 4 2 3 5 6 7)</td>
</tr>
<tr>
<td>0-3：0</td>
<td>a = (1 9 8 4 2 3 5 6 7)</td>
<td>交换a[3]和a[0] ：(4 9 8 1 2 3 5 6 7)</td>
</tr>
<tr>
<td>0-2：2</td>
<td>a = (4 9 8 1 2 3 5 6 7)</td>
<td>交换a[2]和a[2] ：(4 9 8 1 2 3 5 6 7)</td>
</tr>
<tr>
<td>0-1：0</td>
<td>a = (4 9 8 1 2 3 5 6 7)</td>
<td>交换a[1]和a[0] ：(9 4 8 1 2 3 5 6 7)</td>
</tr>
</tbody>
</table>
</div>
<h1 id="shell实现"><a href="#shell实现" class="headerlink" title="shell实现"></a>shell实现</h1><p>shuffle.sh : </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shuffle</span></span>() &#123;</span><br><span class="line">   <span class="built_in">local</span> i tmp size max rand</span><br><span class="line">   <span class="comment"># 打乱顺序</span></span><br><span class="line">   <span class="comment"># Knuth-Fisher-Yates shuffle algorithm</span></span><br><span class="line">   size=<span class="variable">$&#123;#my_array[*]&#125;</span></span><br><span class="line">   max=$(( <span class="number">32767</span> / size * size ))</span><br><span class="line">   <span class="comment"># echo &quot;max: $max&quot;</span></span><br><span class="line">   <span class="keyword">for</span> ((i=size-1; i&gt;0; i--)); <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">while</span> (( (rand=<span class="variable">$RANDOM</span>) &gt;= max )); <span class="keyword">do</span> :; <span class="keyword">done</span></span><br><span class="line">      rand=$(( rand % (i+<span class="number">1</span>) ))    </span><br><span class="line">      <span class="comment"># 交换</span></span><br><span class="line">      tmp=<span class="variable">$&#123;my_array[i]&#125;</span> </span><br><span class="line">      my_array[i]=<span class="variable">$&#123;my_array[rand]&#125;</span> </span><br><span class="line">      my_array[rand]=<span class="variable">$tmp</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$&#123;my_array[*]&#125;</span></span><br><span class="line">   <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my_array=(1 2 3 4 5 6 7 8 9)</span><br><span class="line">shuffle</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_array[*]&#125;</span></span><br></pre></td></tr></table></figure>
<p>执行效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh shuffle.sh </span><br><span class="line">1 2 3 4 9 6 7 8 5</span><br><span class="line">1 8 3 4 9 6 7 2 5</span><br><span class="line">7 8 3 4 9 6 1 2 5</span><br><span class="line">7 8 6 4 9 3 1 2 5</span><br><span class="line">7 8 6 9 4 3 1 2 5</span><br><span class="line">7 9 6 8 4 3 1 2 5</span><br><span class="line">7 6 9 8 4 3 1 2 5</span><br><span class="line">7 6 9 8 4 3 1 2 5</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://www.geeksforgeeks.org/shuffle-a-given-array-using-fisher-yates-shuffle-algorithm/">https://www.geeksforgeeks.org/shuffle-a-given-array-using-fisher-yates-shuffle-algorithm/</a></li>
<li><a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top">https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top</a></li>
<li><a href="https://stackoverflow.com/questions/5533569/simple-method-to-shuffle-the-elements-of-an-array-in-bash-shell">https://stackoverflow.com/questions/5533569/simple-method-to-shuffle-the-elements-of-an-array-in-bash-shell</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言并发编程：原子操作</title>
    <url>/posts/golang-concurrent-synchronization-for-atomic-operation/</url>
    <content><![CDATA[<p>在程序执行过程中，操作系统会进行线程调度，同一时刻能同时执行的程序数量跟CPU的内核线程数有关，比如4核CPU，同时最多只能有4个线程。Go 语言中的运行时系统也会对goroutine进行调度，调度器会频繁地让goroutine处于中断或者运行状态，这就不能保证代码执行的原子性（atomicity），即使使用互斥锁也不能保证原子性操作。Go语言中的atomic包提供了原子操作方法，下面来介绍它的使用方法。</p>
<a id="more"></a>
<p>原子操作过程中是不允许中断的，是绝对并发安全的。由于原子操作不允许中断，所以它非常影响系统执行效率，因此，Go 语言的sync/atomic包只针对少数数据类型提供了原子操作函数。</p>
<h1 id="atomic原子操作类型和方法"><a href="#atomic原子操作类型和方法" class="headerlink" title="atomic原子操作类型和方法"></a>atomic原子操作类型和方法</h1><p>支持的数据类型主要有7个：int32、int64、uint32、uint64、uintptr，Pointer（unsafe包）以及Value类型，Value类型可以用来存储任意类型的值。</p>
<p>对这些类型的操作函数包括：</p>
<ul>
<li>增加 (Add)：<code>atomic.AddInt32(addr *int32, delta int32)</code></li>
<li>加载（Load）：<code>atomic.LoadInt32(addr *int32)</code></li>
<li>存储（Store）：<code>atomic.LoadInt32(addr *int32)</code></li>
<li>交换（Swap）：<code>atomic.SwapInt32(addr *int32, new int32)</code></li>
<li>比较并交换（CompareAndSwap）: <code>atomic.CompareAndSwapInt32(addr *int32, old int32, new int32)</code></li>
</ul>
<p>其中，unsafe.Pointer类型没有add操作，Value类型只要Load和Store两个方法。</p>
<p>注意，第一个参数值为被操作值的指针，原子操作根据指针定位到该值的内存地址，操作这个内存地址上的数据。</p>
<h1 id="Add-增加"><a href="#Add-增加" class="headerlink" title="Add 增加"></a>Add 增加</h1><p>Add可以用于增加操作：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num := <span class="keyword">int32</span>(<span class="number">20</span>)</span><br><span class="line">	atomic.AddInt32(&amp;num, <span class="number">3</span>)</span><br><span class="line">	fmt.Println(num)  <span class="comment">// 23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add也可以做减法操作，其中AddInt32的第二个参数int32是有符号整型，所以delta值设置为负整数就是减法操作了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="keyword">int32</span>(<span class="number">18</span>)</span><br><span class="line">atomic.AddInt32(&amp;num, <span class="number">-3</span>)</span><br><span class="line">fmt.Println(num)</span><br></pre></td></tr></table></figure>
<p>而uint32和uint64是无符号的，如果想对这两种类型做减法操作需要做一下转换，比如先把delta值转换为有符号类型，然后再转换为无符号类型：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="keyword">uint32</span>(<span class="number">18</span>)</span><br><span class="line">delta := <span class="keyword">int32</span>(<span class="number">-3</span>)</span><br><span class="line">atomic.AddUint32(&amp;num, <span class="keyword">uint32</span>(delta))</span><br><span class="line">fmt.Println(num)</span><br></pre></td></tr></table></figure>
<p>也可以使用如下方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">atomic.AddUint32(&amp;num, ^<span class="keyword">uint32</span>(-(<span class="number">-3</span>)<span class="number">-1</span>))</span><br></pre></td></tr></table></figure>
<h1 id="Load-加载"><a href="#Load-加载" class="headerlink" title="Load 加载"></a>Load 加载</h1><p>Load可以实现对值的原子读取：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="keyword">int32</span>(<span class="number">20</span>)</span><br><span class="line">atomic.LoadInt32(&amp;num)</span><br><span class="line">fmt.Println(atomic.LoadInt32(&amp;num))</span><br></pre></td></tr></table></figure>
<h1 id="Store-存储"><a href="#Store-存储" class="headerlink" title="Store 存储"></a>Store 存储</h1><p>原子的存储某个值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="keyword">int32</span>(<span class="number">20</span>)</span><br><span class="line">atomic.StoreInt32(&amp;num, <span class="number">30</span>)</span><br><span class="line">fmt.Println(num) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>
<h1 id="Swap-交换"><a href="#Swap-交换" class="headerlink" title="Swap 交换"></a>Swap 交换</h1><p>将新的值赋给被操作的旧值，并返回旧值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="keyword">int32</span>(<span class="number">20</span>)</span><br><span class="line">old := atomic.SwapInt32(&amp;num, <span class="number">60</span>)</span><br><span class="line">fmt.Println(num) <span class="comment">// 60</span></span><br><span class="line">fmt.Println(old) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<h1 id="CompareAndSwap-比较并交换"><a href="#CompareAndSwap-比较并交换" class="headerlink" title="CompareAndSwap 比较并交换"></a>CompareAndSwap 比较并交换</h1><p>比较并交换（Compare And Swap，CAS操作 ）和交换（Swap）不同，会先进行比较，满足条件后再进行交换操作，将新值赋给变量。返回值为true或者false，true表示执行了交换操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num:= <span class="keyword">int32</span>(<span class="number">18</span>)</span><br><span class="line">atomic.CompareAndSwapInt32(&amp;num, <span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;The number: %d\n&quot;</span>, num)</span><br><span class="line">atomic.CompareAndSwapInt32(&amp;num, <span class="number">18</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;The number: %d\n&quot;</span>, num)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">The number: <span class="number">18</span></span><br><span class="line">The number: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>CAS操作可以用来实现自旋锁（spinlock），下面先来介绍一下什么是自旋锁，自旋锁和互斥锁都可以用来保护共享资源，它们的区别在于，资源被互斥锁锁定时，其它要操作资源的线程会进入睡眠状态；如果是自旋锁，线程将循环等待，不会释放cpu，直到获取到锁才会退出循环。由于自旋锁的这种特性，一般会对等待时间或者尝试次数进行一定的限制。</p>
<p>由于自旋锁不需要进行上下文切换，它的效率比互斥锁高，适用于保持锁的时间比较短，并且不会频繁操作共享资源的场景。</p>
<p>下面的代码实现一个简单的自旋锁，存满10000后全部取出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    balance <span class="keyword">int32</span></span><br><span class="line">	wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deposit</span><span class="params">(value <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		</span><br><span class="line">		fmt.Printf(<span class="string">&quot;余额: %d\n&quot;</span>, balance)</span><br><span class="line">		atomic.AddInt32(&amp;balance, value)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;存 %d 后的余额: %d\n&quot;</span>, value, balance)</span><br><span class="line">		fmt.Println()</span><br><span class="line">		<span class="keyword">if</span> balance == <span class="number">10000</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">withdrawAll</span><span class="params">(value <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;balance, value, <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;余额: %d\n&quot;</span>, value)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;取 %d 后的余额: %d\n&quot;</span>, value, balance)</span><br><span class="line">    fmt.Println()    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg.Add(<span class="number">2</span>)	</span><br><span class="line">	<span class="keyword">go</span> deposit(<span class="number">1000</span>)  <span class="comment">// 每次存1000</span></span><br><span class="line">	<span class="keyword">go</span> withdrawAll(<span class="number">10000</span>)</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;当前余额: %d\n&quot;</span>, balance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    balance = <span class="number">1000</span> <span class="comment">// 初始账户余额为1000    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="atomic-Value"><a href="#atomic-Value" class="headerlink" title="atomic.Value"></a>atomic.Value</h1><p>Value类型可以被用来“原子地”存储（Store）和加载（Load）任意的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> valu atomic.Value</span><br><span class="line">valu := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">box.Store(valu)</span><br><span class="line">fmt.Println(valu.Load())</span><br></pre></td></tr></table></figure>
<p>使用Value类型时需要注意以下事项：</p>
<p>1、Value不能用来存储nil值。</p>
<p>2、一个Value变量不能存储不同类型的值，存储的类型只能是第一个存储值的类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box atomic.Value</span><br><span class="line">v1 := <span class="string">&quot;123&quot;</span></span><br><span class="line">box.Store(v1)</span><br><span class="line">v2 := <span class="number">123</span>	</span><br><span class="line">box.Store(v2)</span><br></pre></td></tr></table></figure>
<p>上面的写法会引发一个panic：<code>panic: sync/atomic: store of inconsistently typed value into Value</code></p>
<p>3、尽量不要使用Value存储引用类型的值。</p>
<p>先来看下面的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> valu atomic.Value</span><br><span class="line">    v1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    valu.Store(v1)</span><br><span class="line">    fmt.Println(valu.Load())</span><br><span class="line">    v1[<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line">    fmt.Println(valu.Load())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">6</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>修改引用类型的值相当于修改了valu中存储的值，可以使用深拷贝copy方法来解决这个漏洞：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> valu atomic.Value</span><br><span class="line">    v1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	store := <span class="function"><span class="keyword">func</span><span class="params">(v []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		replica := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(v))</span><br><span class="line">		<span class="built_in">copy</span>(replica, v)</span><br><span class="line">		valu.Store(replica)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Store %v to box6.\n&quot;</span>, v6)</span><br><span class="line">	store(v1)</span><br><span class="line">	fmt.Println(valu.Load())</span><br><span class="line">    v1[<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line">    fmt.Println(valu.Load())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原子操作函数支持的数据类型有限，互斥锁可能使用的场景更多一些，在可以使用原子操作的情况下还是建议使用它，因为相对来说原子操作函数的执行速度比互斥锁快，且使用简单。另外在使用 CAS 操作时，要防止进入死循环，导致“阻塞”流程。</p>
<p>在使用Value类型时要注意尽量不要存储引用类型的值，是非并发安全的。</p>
<center><b>--THE END--<b></center>





]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 | 赢家的诅咒</title>
    <url>/posts/reading-notes-for-the-winner-curse/</url>
    <content><![CDATA[<p>《赢家的诅咒》是诺贝尔经济学奖得主理查德·塞勒的经典著作，副标题是“经济生活中的悖论与反常现象”，主要探讨了我们现实生活中广泛存在的一些”反常“现象，所谓”反常“是指与标准经济学理论的分析和预测不一致的现象。</p>
<a id="more"></a>
<p>犹记得开始接触经济学的时候学习的就是经济学十大原理，其中一条就是”理性人考虑边际量“，他们根据机会成本，边际分析方法来做决策。最大的特点就是”自私“，“经济人”是非常理性的，他们尽量做出最优决策，实现利益最大化，但现实生活中这样的“经济人”是很少的，大多是社会人，影响我们决策的不仅有理性，还存在非理性的心理因素，这些非理性因素对社会产生了非常大的影响，下面就来介绍一下书中列出的部分反常现象。</p>
<h2 id="1-与囚徒博弈不一致的公共产品“搭便车”"><a href="#1-与囚徒博弈不一致的公共产品“搭便车”" class="headerlink" title="1. 与囚徒博弈不一致的公共产品“搭便车”"></a>1. 与囚徒博弈不一致的公共产品“搭便车”</h2><p>公共产品具有以下两项特质：</p>
<ol>
<li>一旦将这个产品提供给一个人，再将它提供给其他人就无须额外的成本；</li>
<li>很难防止不付费的人使用这个产品。</li>
</ol>
<p>比如广播电台，电视等，你不付费也可以收听或者收看它们。经济理论预测在面对公共产品的问题时，人们都会“搭便车”，但根据实验研究，人们有合作的倾向，不是每个人每次都会选择搭便车，对这些现象的解释包括：</p>
<ul>
<li><p>互惠式利他主义：人们有互惠的倾向，合作的利益会更高。</p>
</li>
<li><p>纯粹的利他主义：被他人的利益所驱使，以他人之乐为乐。</p>
</li>
<li>不纯粹的利他主义：认为合作行为本身是好的，常被描述为良心的满足，或满足非工具性的道德命令。</li>
</ul>
<h2 id="2-行业间工资差异与流动性"><a href="#2-行业间工资差异与流动性" class="headerlink" title="2. 行业间工资差异与流动性"></a>2. 行业间工资差异与流动性</h2><p>在劳动市场上存在严重违反一价定律的情形。</p>
<ul>
<li>有些工作的性质看起来很类似，但是工资的差异极大。</li>
<li>即使在（可衡量的）员工素质是一样的情况下，一些产业显然比其他产业的工资高。</li>
<li>如果一个产业中的某个职务的工资较高，则该产业的所有职务也倾向于工资较高</li>
</ul>
<blockquote>
<p><strong>一价定律</strong>（ law ofone price ）：如果市场运作良好，且没有很大的交易成本或运输成本，同样的物品无法以两种不同的价格出售，因为所有的买方都会到价格较低的市场去购买，而所有的卖方都会到较高价的市场出售。很快地，不同的价格必会趋向一致。</p>
</blockquote>
<p>对这个现象的一个解释是“效率工资模型”，即高于竞争性工资可能是有利润的。产出靠员工的努力，而努力与工资正相关。你付的工资越高，你得到的员工努力越多。</p>
<p>根据努力和工资的正相关关系，提出了不同的模型：</p>
<ul>
<li><strong>偷懒模型：</strong>根据偷懒模型，高工资产业应该是那些有高监督成本的产业，及（或）员工偷懒会导致相对高成本的产业。</li>
<li><strong>人员流动模型：</strong>公司可能也希望支付的工资高于市场结清工资， 以减少人员流动。人员流动模型预测，高薪产业是那些人员流动成本最高的产业。</li>
<li><strong>逆选择模型：</strong>假设应聘者的平均素质会随着工资提高而提升。这些模型显示，对于素质差异比较敏感的产业，或是在衡量质量上比较花成本的产业，会提供较高的工资。</li>
<li><strong>公平工资模型：</strong>前提是员工如果认为得到的是公平的工资，他们就会更努力。这个假设使得公司愿意支付高于竞争性水平的工资。公平工资模型预测，有高利润的公司就会是支付高工资的公司。模型同时也预测，高薪会出现在团队工作及员工合作特别重要的那些产业中。</li>
</ul>
<h2 id="3-赢家反而吃亏的“赢家的诅咒”"><a href="#3-赢家反而吃亏的“赢家的诅咒”" class="headerlink" title="3. 赢家反而吃亏的“赢家的诅咒”"></a>3. 赢家反而吃亏的“赢家的诅咒”</h2><p>“赢家的诅咒”这个概念是由大西洋富田公司的三位工程师，卡彭、克拉普和坎贝尔在1971年提出的，意思是赢得竞标的公司可能是输家，也就是说赢家受到了“诅咒”：</p>
<ul>
<li>中标价超过这块开发区的价值，该公司因而会蒙受损失；</li>
<li>开发区的价值低于专家的估价，中标的公司因而感到失望，即使中标公司盈利，其利润低于投标时的预期。</li>
</ul>
<p>竞标的一般形式是出价高的人获胜，并支付他所出的竞标价，此处有两项作用相反的因素要考虑。其他投标人的数量增加，意味着你要赢得竞标，你的出价必须要更积极，但是如果你中标了，其他投标人数量的增加也会增加你高估标的物价格的机会—这表示你的出价不应该太积极。</p>
<h2 id="4-禀赋效应、损失规避及现状偏见"><a href="#4-禀赋效应、损失规避及现状偏见" class="headerlink" title="4. 禀赋效应、损失规避及现状偏见"></a>4. 禀赋效应、损失规避及现状偏见</h2><p>现状偏见：对目前状态的偏好</p>
<p>损失规避：放弃一项物品的效用损失大于得到它所获得的效用，个人有强烈的维持现状的倾向，因为失去现状的弊大于利。</p>
<p>禀赋效应：人们在出售一样东西时的要价常常会要求远高于他们获得此物所支付的价格，人们看待机会成本不同于“从口袋中掏钱”的成本。比起感觉到的损失，你放弃掉的收益所造成的痛苦还比较少。</p>
<h2 id="5-偏好反转"><a href="#5-偏好反转" class="headerlink" title="5. 偏好反转"></a>5. 偏好反转</h2><p>程序不变性原则认为决策者有固定的偏好次序，任何可靠的诱导程序都可以精确地获得这个次序。如果选项A的定价高于选项B，我们在直接比较时就不能假设对选项A的偏好永远高于B。证据显示，不同的诱导方法会改变选项因素的权重，从而产生不同的排序。在不同的环境下，偏好可能会发生反转而不是固定不变的。</p>
<p>因此可以说价值或偏好是在诱导的过程中一并建立起来的，在决定之前，它们什么都不是。</p>
<h2 id="6-跨期选择"><a href="#6-跨期选择" class="headerlink" title="6. 跨期选择"></a>6. 跨期选择</h2><p>跨期选择是指<strong>成本和利益分散在各个时期里进行的决策</strong>，比如要读几年书、跟谁结婚、要不要生小孩、要为退休存多少钱、如何投资、要不要买房子，以及如果买房子要买哪一套——所有这些极为重要的决策，都有很强的跨期因素在里面。</p>
<p>理性消费者应该做跨期的取舍，以使他们的边际时间偏好率与利率相等，在跨期选择上应该要有一致性。此外在任何情况及全部的时间，所使用的贴现率应该是固定不变的。但研究显示个人贴现率存在动态的不一致性：</p>
<p>第一，贴现率随着等待时间的加长而明显下降，</p>
<p>第二，贴现率随着收益的的增加而下降。</p>
<ul>
<li>小额奖金（小于100美元）的贴现率非常高，而那些大金额的贴现率是比较合理的。</li>
<li>例如，现在的100美元和一年后的150美元，两者之间在认知上的差异，似乎比现在的10美元和一年后的15美元之间的差异还要大。因此在第一个情况中，许多人愿意为额外的50美元而等待，但是在第二个情况中，却不愿意为额外的5美元等待。</li>
</ul>
<p>第三，收益情况的贴现率比起损失情况的贴现率高出许多。</p>
<ul>
<li>受试者需要得到许多补偿金才愿意晚拿到收益，但是不愿意为了延迟缴纳罚金而支付太多。</li>
</ul>
<p>由此可以看出，个人很难做出理性、长期的选择。</p>
<h2 id="7-边际消费倾向"><a href="#7-边际消费倾向" class="headerlink" title="7. 边际消费倾向"></a>7. 边际消费倾向</h2><p>目前的消费水平取决于收入，心理账户对意外收益的边际消费倾向所做的预测取决于收益的大小。</p>
<ul>
<li>小的收益（相对于收入），会被标记为目前收入，然后被花费掉。</li>
<li>较大的收益会归入资产账户，而资产账户的边际消费倾向是较低的。</li>
</ul>
<p>财富变化的来源也很重要。有些意外之财，像是未实现的资本收益，会很自然地被视为是资产账户上的改变。其他像是卖股票的收益，可能被当作是收入。</p>
<blockquote>
<p>边际消费倾向（marginal propensity to consume，或简称MPC）为新增的1美元所得中用于消费而非储蓄的部分。如果一个人得到100美元的意外之财，花掉其中95美元，储蓄5美元，那么MPC就是0.95。</p>
</blockquote>
<h2 id="8-其它"><a href="#8-其它" class="headerlink" title="8. 其它"></a>8. 其它</h2><p>还介绍了其它反常现象，比如</p>
<ul>
<li>博彩市场中的热门─冷门偏差现象和前两名及前三名市场的无效率性</li>
<li>股票市场中的日历效应：一月效应、周末效应、月度转换效应</li>
<li>华尔街股市上的均值回归：虽然股市中存在噪声交易者，影响股票价格，但长期是均值回归，或多或少是可以预测的</li>
<li>封闭式共同基金的四种反常现象</li>
<li>外汇市场上的远期贴水溢价、风险预期失误等</li>
</ul>
<p>作者列出了大量的“反常”现象，不是为了颠覆经济理论，标准的经济学范式研究了各种客观因素对经济的影响，提出了各种理论，但现实生活中很少有人或者公司严格按照这些方案行动，存在各种其它心理因素影响金融市场。行为经济学对决策具有非常大的指导意义。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash编程：将整数分解为n个随机数</title>
    <url>/posts/linux-shell-bash-splitinteger/</url>
    <content><![CDATA[<p>本文介绍使用shell实现将一个整数m随机分解为n个数。</p>
<a id="more"></a>
<p>要求：</p>
<ol>
<li>将一个整数m分解为n个随机数，n个随机数之和要等于m</li>
<li>指定随机数的最小值</li>
</ol>
<p>分析：</p>
<p>这与leetcode上的两道题类似：</p>
<ol>
<li><p><a href="https://leetcode-cn.com/problems/integer-break/">343. 整数拆分</a></p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></p>
</li>
</ol>
<p>下面来介绍一种思路：</p>
<ol>
<li>随机抽取 <code>n-1</code> 个区间为<code>(0,  m)</code>的数，得到数组<code>a</code></li>
<li>将<code>0</code>和<code>m</code>加入数组<code>a</code>中</li>
<li>对数组<code>a</code>进行升序排序</li>
<li>按顺序计算数组<code>a</code>中相邻元素的差值：后一个元素减去前一个元素。差值组成的数组就是我们要的结果。</li>
</ol>
<p>shell脚本SplitInteger.sh：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SplitInteger()</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">let</span> SIZE_BYTES=<span class="variable">$SIZE_BYTES</span>-<span class="variable">$NUMBER</span>*<span class="variable">$minNum</span></span><br><span class="line">    <span class="built_in">declare</span> -a num_list</span><br><span class="line">    num_list[0]=0</span><br><span class="line">    num_list[1]=<span class="variable">$SIZE_BYTES</span></span><br><span class="line">    <span class="built_in">let</span> num=<span class="variable">$NUMBER</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(seq 2 <span class="variable">$num</span>); <span class="keyword">do</span></span><br><span class="line">        random_rate=`<span class="built_in">echo</span> <span class="string">&quot;scale=4 ; <span class="variable">$&#123;RANDOM&#125;</span>/32767&quot;</span> | bc -l` <span class="comment"># 生成0-1的随机数 </span></span><br><span class="line">        <span class="comment"># let random_bytes=$(( SIZE_BYTES*random_rate ))</span></span><br><span class="line">        random_bytes=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SIZE_BYTES</span>*<span class="variable">$random_rate</span>&quot;</span> | bc` <span class="comment"># 字符类型转换为数字类型进行运算</span></span><br><span class="line">        <span class="comment"># echo &quot;$random_bytes&quot;</span></span><br><span class="line">        num_list[<span class="variable">$i</span>]=`<span class="built_in">echo</span> <span class="variable">$random_bytes</span> | xargs <span class="built_in">printf</span> <span class="string">&quot;%.*f\n&quot;</span> 0` <span class="comment"># 对结果进行四舍五入计算</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># echo &quot;Array in unsorted order :&quot;</span></span><br><span class="line">    <span class="comment"># echo $&#123;num_list[*]&#125;</span></span><br><span class="line"></span><br><span class="line">    num_length=<span class="variable">$&#123;#num_list[*]&#125;</span></span><br><span class="line">    BubbleSort   <span class="comment"># 排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算差值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> rand_len=<span class="variable">$num_length</span>-2</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$rand_len</span>); <span class="keyword">do</span></span><br><span class="line">        new_list[<span class="variable">$i</span>]=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;num_list[$(( i+1 ))]&#125;</span>-<span class="variable">$&#123;num_list[$i]&#125;</span>+<span class="variable">$minNum</span>&quot;</span> | bc`</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># echo &quot;Diff Array:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;new_list[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    sum=0</span><br><span class="line">    <span class="keyword">for</span> (( i=0;i&lt;<span class="variable">$&#123;#new_list[*]&#125;</span>;i++ ))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">let</span> sum=sum+<span class="variable">$&#123;new_list[$i]&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> SIZE_BYTES=100</span><br><span class="line"><span class="built_in">let</span> NUMBER=10</span><br><span class="line"><span class="built_in">let</span> minNum=5</span><br><span class="line">SplitInteger</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><br>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh SplitInteger.sh </span><br><span class="line">8 12 6 16 9 12 11 9 5 12</span><br><span class="line">100</span><br></pre></td></tr></table></figure></p>
<p><code>BubbleSort</code>为冒泡排序方法，具体实现参考<a href="https://blog.csdn.net/u010698107/article/details/119855830">Linux Bash编程：字符串处理</a>。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS APP自动化：predicate定位</title>
    <url>/posts/app-testing-for-ios-location-with-predicate-locator/</url>
    <content><![CDATA[<p>在iOS APP自动化测试中，最基本的操作就是元素定位了。与Android APP自动化测试一样，iOS也支持 ( XCUITest 或 UIAutomation测试框架) 使用属性值定位，比如id、className等元素属性，然而，有时候属性值并不是唯一的，<a href="http://appium.io/">appium</a>、<a href="https://github.com/openatx/facebook-wda">facebook-wda</a>等框架也封装了XPath定位方法，使用XPath和属性值定位方法基本可以定位到99%的元素。但是在性能方面，XPath的定位速度相对较慢，我们可以选择iOS特有的定位策略： predicate 和 class chain定位方法。本文介绍predicate定位方法， class chain定位将在下一篇文章中介绍。</p>
<a id="more"></a>
<h1 id="Predicate语法"><a href="#Predicate语法" class="headerlink" title="Predicate语法"></a>Predicate语法</h1><p>Predicate定位是iOS原生支持的定位方式，定位速度比较快，它可以通过使用多个匹配条件来准确定位某一个或某一组元素。</p>
<h2 id="基本比较"><a href="#基本比较" class="headerlink" title="基本比较"></a>基本比较</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code>, <code>==</code></td>
<td>等于</td>
<td>name == “通知”</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
<td>name &gt; 10</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
<td>name &lt; 10</td>
</tr>
<tr>
<td><code>&gt;=</code>, <code>=&gt;</code></td>
<td>大于等于</td>
<td>name &gt;= 10</td>
</tr>
<tr>
<td><code>&lt;=</code>, <code>=&lt;</code></td>
<td>小于等于</td>
<td>name &lt;= 10</td>
</tr>
<tr>
<td><code>!=</code>, <code>&lt;&gt;</code></td>
<td>不等于</td>
<td>name != “通知”</td>
</tr>
</tbody>
</table>
</div>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ANY</code> , <code>SOME</code></td>
<td>满足表达式的任意元素</td>
<td>ANY children.age &lt; 18</td>
</tr>
<tr>
<td><code>ALL</code></td>
<td>满足表达式的所有元素</td>
<td>ALL children.age &lt; 18</td>
</tr>
<tr>
<td><code>NONE</code></td>
<td>不包含满足表达式的任意元素</td>
<td>NONE children.age &lt; 18</td>
</tr>
<tr>
<td><code>IN</code></td>
<td>元素在集合中</td>
<td>name IN { ‘Ben’, ‘Melissa’, ‘Nick’ }</td>
</tr>
<tr>
<td><code>BETWEEN</code></td>
<td>位于某个范围</td>
<td>1 BETWEEN { 0 , 33 }</td>
</tr>
<tr>
<td>array[index]</td>
<td>数组array中指定索引的元素</td>
<td></td>
</tr>
<tr>
<td><code>array[FIRST]</code></td>
<td>数组中的第一个元素</td>
<td></td>
</tr>
<tr>
<td><code>array[LAST]</code></td>
<td>数组中的最后一个元素</td>
<td></td>
</tr>
<tr>
<td><code>array[SIZE]</code></td>
<td>指定数组大小</td>
</tr>
</tbody>
</table>
</div>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TRUEPREDICATE</code></td>
<td>TRUE</td>
<td></td>
</tr>
<tr>
<td><code>FALSEPREDICATE</code></td>
<td>FALSE</td>
</tr>
</tbody>
</table>
</div>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AND</code>, <code>&amp;&amp;</code></td>
<td>逻辑与</td>
<td><code>name=&quot;通知&quot; AND label=&quot;通知&quot;</code></td>
</tr>
<tr>
<td><code>OR</code>,  `</td>
<td></td>
<td>`</td>
<td>逻辑或</td>
<td></td>
</tr>
<tr>
<td><code>NOT</code>, <code>!</code></td>
<td>逻辑非</td>
</tr>
</tbody>
</table>
</div>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><div class="table-container">
<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BEGINSWITH</code></td>
<td>以某个字符串开始</td>
<td><code>name BEGINSWITH &quot;屏幕&quot;</code></td>
</tr>
<tr>
<td><code>ENDSWITH</code></td>
<td>以某个字符串结束</td>
<td><code>name ENDSWITH &quot;时间&quot;</code></td>
</tr>
<tr>
<td><code>CONTAINS</code></td>
<td>包含</td>
<td><code>name CONTAINS &quot;使用时间&quot;</code></td>
</tr>
<tr>
<td><code>LIKE</code></td>
<td>通配符</td>
<td><code>name LIKE &#39;*Total: $*&#39;</code></td>
</tr>
<tr>
<td><code>MATCHES</code></td>
<td>正则匹配</td>
<td><code>value MATCHES &#39;.*of 7&#39;</code></td>
</tr>
</tbody>
</table>
</div>
<p>默认情况下，字符串比较是大小写和变音敏感的，可以在关键字后面加上<code>[cd]</code>，<code>[c]</code>不区分大小写，<code>[d]</code>表示不区分变音符号。</p>
<blockquote>
<p>变音符号是附加在字母上的符号，用于提示发音或区分相似的单词。很多语言使用变音符，比如法语、西班牙语等。比如法语单词：Pêche 桃子</p>
</blockquote>
<h1 id="Predicate定位示例"><a href="#Predicate定位示例" class="headerlink" title="Predicate定位示例"></a>Predicate定位示例</h1><p>使用<a href="https://github.com/openatx/facebook-wda">facebook-wda</a>进行元素操作示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = c.session(<span class="string">&#x27;com.apple.Preferences&#x27;</span>) <span class="comment"># 打开设置</span></span><br><span class="line"></span><br><span class="line">s(predicate=<span class="string">&#x27;name == &quot;通知&quot;&#x27;</span>).click()</span><br><span class="line">s(predicate=<span class="string">&#x27;name IN &#123;&quot;通知&quot;&#125;&#x27;</span>).click()</span><br><span class="line">s(predicate=<span class="string">&#x27;name=&quot;通知&quot; AND label=&quot;通知&quot;&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">s(predicate=<span class="string">&#x27;name BEGINSWITH &quot;屏幕&quot;&#x27;</span>).click() <span class="comment"># 点击屏幕使用时间</span></span><br><span class="line">s(predicate=<span class="string">&#x27;name ENDSWITH &quot;时间&quot;&#x27;</span>).click()</span><br><span class="line">s(predicate=<span class="string">&#x27;name CONTAINS &quot;使用时间&quot;&#x27;</span>).click()</span><br><span class="line">s(predicate=<span class="string">&#x27;name LIKE &quot;*使用*&quot;&#x27;</span>).click()</span><br><span class="line">s(predicate=<span class="string">&#x27;name MATCHES &quot;.*使用时间$&quot;&#x27;</span>).click()</span><br><span class="line">s(predicate=<span class="string">&#x27;name MATCHES &quot;^屏幕.*&quot;&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">s(predicate=<span class="string">&#x27;name CONTAINS[c] &quot;apple&quot;&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">s(predicate=<span class="string">&#x27;visible==true AND name ENDSWITH &quot;时间&quot;&#x27;</span>).click()</span><br></pre></td></tr></table></figure>
<p><strong>参考文档：</strong></p>
<ol>
<li><a href="http://appium.io/docs/cn/writing-running-appium/ios/ios-predicate/">http://appium.io/docs/cn/writing-running-appium/ios/ios-predicate/</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html">https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html</a></li>
</ol>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言中的通道</title>
    <url>/posts/golang-notes-for-channel-sync/</url>
    <content><![CDATA[<p>通道（channel）是Go 语言中一种特殊的数据类型，通道本身就是并发安全的，可以通过它在多个 goroutine 之间传递数据。通道是Go 语言编程理念：“<em>Do not communicate by sharing memory; instead, share memory by communicating</em>”（不要通过共享数据来通信，而应该通过通信来共享数据。）的完美实现，在并发编程中经常会遇到它。下面来介绍一下通道的使用方法。</p>
<a id="more"></a>
<h1 id="通道的发送和接收"><a href="#通道的发送和接收" class="headerlink" title="通道的发送和接收"></a>通道的发送和接收</h1><p>通道包括双向通道和单向通道，这里双向通道只的是支持发送和接收的通道，而单向通道是只能发送或者只能接收的通道。</p>
<h2 id="双向通道"><a href="#双向通道" class="headerlink" title="双向通道"></a>双向通道</h2><p>使用make函数声明并初始化一个通道：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>chan</code> 是表示通道类型的关键字</li>
<li><code>string</code> 表示该通道类型的元素类型</li>
<li><code>3</code> 表示该通道的容量为3，最多可以缓存3个元素值。</li>
</ul>
<p>一个通道相当于一个先进先出（FIFO）的队列，使用操作符 <code>&lt;-</code> 进行元素值的发送和接收：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch1 &lt;- <span class="string">&quot;1&quot;</span>  <span class="comment">//向通道ch1发送数据 &quot;1&quot;</span></span><br></pre></td></tr></table></figure>
<p>接收元素值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">elem1 := &lt;- ch1 <span class="comment">// 接收通道中的元素值</span></span><br></pre></td></tr></table></figure>
<p>首先接收到的元素为先存入通道中的元素值，也就是先进先出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str1 := []<span class="keyword">string</span>&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>&#125;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="built_in">len</span>(str1))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, str := <span class="keyword">range</span> str1 &#123;</span><br><span class="line">		ch1 &lt;- str</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str1); i++ &#123;</span><br><span class="line">		elem := &lt;- ch1</span><br><span class="line">		fmt.Println(elem)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
<h2 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h2><p>单向通道包括只能发送的通道和只能接收的通道：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> WriteChan = <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>) <span class="comment">// 只能发送不能接收的通道</span></span><br><span class="line"><span class="keyword">var</span> ReadChan = <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>) <span class="comment">// 只能接收不能发送的通道</span></span><br></pre></td></tr></table></figure>
<p>单向通道的这种特性可以用来约束函数的输入类型或者输出类型，比如下面的例子约束了只能从通道中接收元素值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OnlyReadChan</span><span class="params">(num <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch &lt;- num</span><br><span class="line">	<span class="built_in">close</span>(ch)</span><br><span class="line">	<span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	Chan1 := OnlyReadChan(<span class="number">6</span>)</span><br><span class="line">	num := &lt;- Chan1</span><br><span class="line">	fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<h1 id="通道阻塞"><a href="#通道阻塞" class="headerlink" title="通道阻塞"></a>通道阻塞</h1><p>通道操作是<strong>并发安全</strong>的，在同一时刻，只会执行对同一个通道的任意个发送操作中的某一个，直到这个元素值被完全复制进该通道之后，其他针对该通道的发送操作才可能被执行。接收操作也一样。另外，对于通道中的同一个元素值来说，发送操作和接收操作之间也是互斥的。</p>
<p>发送操作和接收操作是原子操作，也就是说，发送操作绝不会出现只复制了一部分的情况，要么还没有复制，要么已经复制完毕。接收操作在准备好元素值的副本之后，一定会删除掉通道中的原值，绝不会出现通道中仍有残留的情况。在进行发送操作和接收操作时，代码会一直阻塞在那里，完成操作后才会继续执行后面的代码。通道的发送操作和接收操作是很快的，那么什么情况下会出现长时间的阻塞呢？下面介绍几种情况。</p>
<h2 id="缓冲通道的阻塞"><a href="#缓冲通道的阻塞" class="headerlink" title="缓冲通道的阻塞"></a>缓冲通道的阻塞</h2><p>缓冲通道是容量大于0的通道，也就是可以缓存数据的通道。</p>
<p><strong>1、发送阻塞</strong></p>
<p>如果缓冲通道已经填满，如果有goroutine继续向该通道发送数据就会阻塞。请看下面的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch1 &lt;- <span class="number">1</span></span><br><span class="line">	ch1 &lt;- <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [<span class="keyword">chan</span> send]:</span><br><span class="line">...........</span><br></pre></td></tr></table></figure></p>
<p>如果通道可以接收数据（有元素被接收），通道会通知最先等待发送操作的 goroutine再次执行发送操作。</p>
<p><strong>2、接收阻塞</strong></p>
<p>类似的，如果通道已空，如果继续进行接收操作就会被阻塞。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	&lt;- ch1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [<span class="keyword">chan</span> receive]:</span><br><span class="line">...........</span><br></pre></td></tr></table></figure></p>
<h2 id="非缓冲通道"><a href="#非缓冲通道" class="headerlink" title="非缓冲通道"></a>非缓冲通道</h2><p>非缓冲通道是容量为0的通道，不能缓存数据。</p>
<p>非缓冲通道的数据传递是同步的，发送操作或者接收操作在执行后就会阻塞，需要对应的接收操作或者发送操作执行才会继续传递。由此可以看出缓冲通道使用的是异步方式进行数据传递。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := []<span class="keyword">string</span>&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>&#125;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, str := <span class="keyword">range</span> str1 &#123;</span><br><span class="line">            ch1 &lt;- str</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str1); i++ &#123;</span><br><span class="line">		elem := &lt;- ch1</span><br><span class="line">		fmt.Println(elem)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">!  </span><br></pre></td></tr></table></figure>
<p>上面的代码中3个goroutine向通道写了三次数据，必须有三次接收，不然会阻塞。</p>
<p>对值为nil的通道进行发送操作和接收操作也会发生阻塞：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">ch1 &lt;- <span class="number">1</span> <span class="comment">// 阻塞</span></span><br><span class="line">&lt;-ch1 <span class="comment">// 阻塞</span></span><br></pre></td></tr></table></figure>
<h1 id="通道关闭"><a href="#通道关闭" class="headerlink" title="通道关闭"></a>通道关闭</h1><p>可以使用close()方法来关闭通道，通道关闭后，不能再对通道进行发送操作，可以进行接收操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch1 &lt;- <span class="number">1</span></span><br><span class="line">	<span class="built_in">close</span>(ch1)</span><br><span class="line">    </span><br><span class="line">    ele := &lt;-ch1</span><br><span class="line">	fmt.Println(ele)  </span><br><span class="line">    </span><br><span class="line">	ch1 &lt;- <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="built_in">panic</span>: send on closed channel</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>如果通道关闭时，里面还有元素，进行接收操作时，返回的通道关闭标志仍然为true：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch1 &lt;- <span class="number">1</span></span><br><span class="line">	<span class="built_in">close</span>(ch1)</span><br><span class="line"></span><br><span class="line">	ele1, statu1 := &lt;-ch1</span><br><span class="line">	fmt.Println(ele1, statu1)</span><br><span class="line">	ele2, statu2 := &lt;-ch1</span><br><span class="line">	fmt.Println(ele2, statu2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="literal">true</span></span><br><span class="line"><span class="number">0</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>由于通道的这种特性，可以让发送方来关闭通道。前面的例子可以这样写：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := []<span class="keyword">string</span>&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>&#125;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, str := <span class="keyword">range</span> str1 &#123;</span><br><span class="line">            ch1 &lt;- str</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(ch1)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str1); i++ &#123;</span><br><span class="line">		elem := &lt;- ch1</span><br><span class="line">		fmt.Println(elem)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，不能对关闭的通道再次关闭：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch1 &lt;- <span class="number">1</span></span><br><span class="line">	<span class="built_in">close</span>(ch1)</span><br><span class="line">	<span class="built_in">close</span>(ch1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">panic</span>: <span class="built_in">close</span> of closed channel</span><br></pre></td></tr></table></figure>
<h1 id="select语句与通道"><a href="#select语句与通道" class="headerlink" title="select语句与通道"></a>select语句与通道</h1><p>select语句通常与通道联用，它是专为通道而设计的。select语句执行时，一般只有一个case表达式或者default语句会被运行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	num := <span class="number">2</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> data := &lt;-ch1:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Read data: &quot;</span>, data)</span><br><span class="line">		<span class="keyword">case</span> ch1 &lt;- num:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Write data: &quot;</span>, num)	</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;No candidate case is selected!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Write data:  <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果没有default默认分支，case表达式都没有满足条件，那么select语句就会被阻塞，直到至少有一个case表达式满足条件为止。</p>
<p>如果同时有多个分支满足条件，会随机选择一个分支执行</p>
<p>for语句与select语句联用时，分支中的break语句只能结束当前select语句的执行，而不会退出for循环。下面的代码永远不会退出循环：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> ch1 &lt;- <span class="number">6</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Write data: 6&quot;</span>)</span><br><span class="line">		<span class="keyword">case</span> data := &lt;-ch1:</span><br><span class="line">			fmt.Println(data)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决方案是使用goto语句和标签。</p>
<p>方法1：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	num := <span class="number">6</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> ch1 &lt;- num:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Write data: &quot;</span>, num)</span><br><span class="line">		<span class="keyword">case</span> data := &lt;-ch1:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Read data: &quot;</span>, data)</span><br><span class="line">			<span class="keyword">goto</span> loop</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">	loop:</span><br><span class="line">	fmt.Println(ch1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Write data:  <span class="number">6</span></span><br><span class="line">Read data:  <span class="number">6</span></span><br><span class="line"><span class="number">0xc00000e0e0</span></span><br></pre></td></tr></table></figure>
<p>方法2：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">	num := <span class="number">6</span></span><br><span class="line">	loop:</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> ch1 &lt;- num:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Write data: &quot;</span>, num)</span><br><span class="line">		<span class="keyword">case</span> data := &lt;-ch1:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Read data: &quot;</span>, data)</span><br><span class="line">			<span class="keyword">break</span> loop</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(ch1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Write data:  <span class="number">6</span></span><br><span class="line">Read data:  <span class="number">6</span></span><br><span class="line"><span class="number">0xc0000e4000</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了通道的基本操作：初始化、发送、接收和关闭，要注意在什么情况下会引起通道阻塞。select语句通常与通道联用，介绍了分支的选择规则以及for语句与select语句联用时如何退出循环。</p>
<p>通道是 Go 语言并发编程的重要实现基础，还是有必要掌握的。</p>
<center><b>--THE END--<b></center>



]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash编程：随机数生成、对浮点数进行四舍五入运算</title>
    <url>/posts/linux-shell-bash-generate-random-numbers/</url>
    <content><![CDATA[<p>本文介绍使用shell实现随机数生成以及对浮点数进行四舍五入运算</p>
<a id="more"></a>
<h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><h2 id="生成0-1之间的随机数"><a href="#生成0-1之间的随机数" class="headerlink" title="生成0-1之间的随机数"></a>生成0-1之间的随机数</h2><p>生成0-1的随机数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">random_number=`<span class="built_in">echo</span> <span class="string">&quot;scale=4 ; <span class="variable">$&#123;RANDOM&#125;</span>/32767&quot;</span> | bc -l` <span class="comment"># 生成0-1的随机数</span></span><br><span class="line"><span class="comment"># random_number=`bc -l &lt;&lt;&lt; &quot;scale=4 ; $&#123;RANDOM&#125;/32767&quot;`</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$random_number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><br>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh random.sh </span><br><span class="line">.8696</span><br><span class="line">$ sh random.sh </span><br><span class="line">.4517</span><br><span class="line">$ sh random.sh </span><br><span class="line">.5126</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>$&#123;RANDOM&#125;</code>函数产生0 - 32767之间的伪随机整数。其中32767（2^15 - 1）是有符号16位整数的上限。</li>
<li><code>scale=4</code>：保留4位小数</li>
</ul>
<h2 id="生成0-n之间的随机数"><a href="#生成0-n之间的随机数" class="headerlink" title="生成0-n之间的随机数"></a>生成0-n之间的随机数</h2><p>生成0-10之间的随机数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">size=10</span><br><span class="line">max=$(( <span class="number">32767</span> / size * size ))</span><br><span class="line"><span class="keyword">while</span> (( (rand=<span class="variable">$RANDOM</span>) &gt;= max )); <span class="keyword">do</span> :; <span class="keyword">done</span></span><br><span class="line">rand=$(( rand % (size+<span class="number">1</span>) )) </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$rand</span></span><br></pre></td></tr></table></figure><br>生成1-10之间的随机数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">size=10</span><br><span class="line">max=$(( <span class="number">32767</span> / size * size ))</span><br><span class="line"><span class="keyword">while</span> (( (rand=<span class="variable">$RANDOM</span>) &gt;= max )); <span class="keyword">do</span> :; <span class="keyword">done</span></span><br><span class="line">rand=$(( rand % (size) + <span class="number">1</span> )) </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$rand</span></span><br></pre></td></tr></table></figure></p>
<p><code>max=$(( 32767 / size * size ))</code>语句比较关键，这么处理的原因是${RANDOM}产生的最大数是32767，如果生成1-10之间的随机数，需要去掉32761-32767之间的数，否则会导致出现9和10的概率和其它数不一样。</p>
<h1 id="对浮点数进行四舍五入运算"><a href="#对浮点数进行四舍五入运算" class="headerlink" title="对浮点数进行四舍五入运算"></a>对浮点数进行四舍五入运算</h1><p>可以使用 <code>printf &quot;%.*f\n&quot; [精度] [浮点数]</code> 命令对浮点数进行四舍五入运算。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;%.*f\n&quot;</span> 0 6.666</span><br><span class="line">7</span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;%.*f\n&quot;</span> 1 6.666</span><br><span class="line">6.7</span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;%.*f\n&quot;</span> 2 6.666</span><br><span class="line">6.67</span><br></pre></td></tr></table></figure>
<p>bash脚本示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">random_number=`<span class="built_in">echo</span> <span class="string">&quot;scale=4 ; <span class="variable">$&#123;RANDOM&#125;</span>/32767&quot;</span> | bc -l` <span class="comment"># 生成0-1的随机数</span></span><br><span class="line">number=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$random_number</span>*100&quot;</span> | bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$number</span></span><br><span class="line">number_round1=`<span class="built_in">echo</span> <span class="variable">$number</span> | xargs <span class="built_in">printf</span> <span class="string">&quot;%.*f\n&quot;</span> 0`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$number_round1</span></span><br><span class="line"></span><br><span class="line">number_round2=`<span class="built_in">echo</span> <span class="variable">$number</span> | xargs <span class="built_in">printf</span> <span class="string">&quot;%.*f\n&quot;</span> 1`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$number_round2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">97.8900</span><br><span class="line">98</span><br><span class="line">97.9</span><br></pre></td></tr></table></figure>
<p><strong>参考：</strong></p>
<ol>
<li><a href="https://unix.stackexchange.com/questions/167058/how-to-round-floating-point-numbers-in-shell">https://unix.stackexchange.com/questions/167058/how-to-round-floating-point-numbers-in-shell</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言中的字符串拼接方法介绍</title>
    <url>/posts/golang-notes-for-string-concatenation/</url>
    <content><![CDATA[<p>本文介绍Go语言中的string类型、strings包和bytes.Buffer类型，介绍几种字符串拼接方法。</p>
<a id="more"></a>
<h1 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h1><p>string类型的值可以拆分为一个包含多个字符（rune类型）的序列，也可以被拆分为一个包含多个字节 (byte类型) 的序列。其中一个rune类型值代表一个Unicode 字符，一个rune类型值占用四个字节，底层就是一个 UTF-8 编码值，它其实是int32类型的一个别名类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;你好world&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;The string: %q\n&quot;</span>, str)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;runes(char): %q\n&quot;</span>, []<span class="keyword">rune</span>(str))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;runes(hex): %x\n&quot;</span>, []<span class="keyword">rune</span>(str))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;bytes(hex): [% x]\n&quot;</span>, []<span class="keyword">byte</span>(str))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">The <span class="keyword">string</span>: <span class="string">&quot;你好world&quot;</span></span><br><span class="line">runes(char): [<span class="string">&#x27;你&#x27;</span> <span class="string">&#x27;好&#x27;</span> <span class="string">&#x27;w&#x27;</span> <span class="string">&#x27;o&#x27;</span> <span class="string">&#x27;r&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">runes(hex): [<span class="number">4</span>f60 <span class="number">597</span>d <span class="number">77</span> <span class="number">6</span>f <span class="number">72</span> <span class="number">6</span>c <span class="number">64</span>]</span><br><span class="line">bytes(hex): e4 bd a0 e5 a5 bd <span class="number">77</span> <span class="number">6</span>f <span class="number">72</span> <span class="number">6</span>c <span class="number">64</span></span><br></pre></td></tr></table></figure>
<p>可以看到，英文字符使用一个字节，而中文字符需要三个字节。下面使用 <code>for range</code> 语句对上面的字符串进行遍历：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> str &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d: %q [% x]\n&quot;</span>, index, value, []<span class="keyword">byte</span>(<span class="keyword">string</span>(value)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: <span class="string">&#x27;你&#x27;</span> [e4 bd a0]</span><br><span class="line"><span class="number">3</span>: <span class="string">&#x27;好&#x27;</span> [e5 a5 bd]</span><br><span class="line"><span class="number">6</span>: <span class="string">&#x27;w&#x27;</span> [<span class="number">77</span>]</span><br><span class="line"><span class="number">7</span>: <span class="string">&#x27;o&#x27;</span> [<span class="number">6</span>f]</span><br><span class="line"><span class="number">8</span>: <span class="string">&#x27;r&#x27;</span> [<span class="number">72</span>]</span><br><span class="line"><span class="number">9</span>: <span class="string">&#x27;l&#x27;</span> [<span class="number">6</span>c]</span><br><span class="line"><span class="number">10</span>: <span class="string">&#x27;d&#x27;</span> [<span class="number">64</span>]</span><br></pre></td></tr></table></figure>
<p>index索引值不是0-6，相邻Unicode 字符的索引值不一定是连续的，因为中文字符占用了3个字节，宽度为3。</p>
<h1 id="strings包"><a href="#strings包" class="headerlink" title="strings包"></a>strings包</h1><h2 id="strings-Builder类型"><a href="#strings-Builder类型" class="headerlink" title="strings.Builder类型"></a>strings.Builder类型</h2><p>strings.Builder的优势主要体现在字符串拼接上，相比使用<code>+</code>拼接，效率更高。</p>
<ul>
<li>strings.Builder已存在的值不可改变，只能重置（Reset()方法）或者拼接更多的内容。</li>
<li>一旦调用了Builder值，就不能再以任何方式对其进行复制，比如函数间值传递、通道传递值、把值赋予变量等。</li>
<li>在进行拼接时，Builder值会自动地对自身的内容容器进行扩容，也可以使用Grow方法进行手动扩容。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> builder1 strings.Builder</span><br><span class="line">	builder1.WriteString(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	builder1.WriteByte(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	builder1.WriteString(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">	builder1.Write([]<span class="keyword">byte</span>&#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">	fmt.Println(builder1.String())	</span><br><span class="line"></span><br><span class="line">	f1 := <span class="function"><span class="keyword">func</span><span class="params">(b strings.Builder)</span></span> &#123;</span><br><span class="line">		<span class="comment">// b.WriteString(&quot;world !&quot;)  //会报错</span></span><br><span class="line">	&#125;</span><br><span class="line">	f1(builder1)</span><br><span class="line"></span><br><span class="line">	builder1.Reset()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;The length 0f builder1: %d\n&quot;</span>, builder1.Len())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello world !</span><br><span class="line">The length <span class="number">0</span>f builder1: <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<h2 id="strings-Reader类型"><a href="#strings-Reader类型" class="headerlink" title="strings.Reader类型"></a>strings.Reader类型</h2><p>strings.Reader类型可以用于高效地读取字符串，它通过使用<strong>已读计数</strong>机制来实现了高效读取，已读计数保存了已读取的字节数，也代表了下一次读取的起始索引位置。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;	</span><br><span class="line">	reader1 := strings.NewReader(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">	buf1 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">6</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;reading index: %d\n&quot;</span>, reader1.Size()-<span class="keyword">int64</span>(reader1.Len()))</span><br><span class="line">	</span><br><span class="line">    reader1.Read(buf1)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(buf1))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;reading index: %d\n&quot;</span>, reader1.Size()-<span class="keyword">int64</span>(reader1.Len()))</span><br><span class="line">    </span><br><span class="line">	reader1.Read(buf1)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(buf1))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;reading index: %d\n&quot;</span>, reader1.Size()-<span class="keyword">int64</span>(reader1.Len()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">reading index: <span class="number">0</span></span><br><span class="line">hello</span><br><span class="line">reading index: <span class="number">6</span></span><br><span class="line">world!</span><br><span class="line">reading index: <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>可以看到，每读取一次之后，已读计数就会增加。</p>
<p>strings包的<strong>ReadAt方法</strong>不会依据已读计数进行读取，也不会更新已读计数。它可以根据偏移量来自由地读取Reader值中的内容。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    reader1 := strings.NewReader(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">    buf1 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">6</span>)</span><br><span class="line">	offset1 := <span class="keyword">int64</span>(<span class="number">6</span>)</span><br><span class="line">	n, _ := reader1.ReadAt(buf1, offset1)	</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(buf2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">world!</span><br></pre></td></tr></table></figure>
<p>也可以使用<strong>Seek方法</strong>来指定下一次读取的起始索引位置。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    reader1 := strings.NewReader(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">    buf1 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">6</span>)</span><br><span class="line">	offset1 := <span class="keyword">int64</span>(<span class="number">6</span>)</span><br><span class="line">	readingIndex, _ := reader2.Seek(offset1, io.SeekCurrent)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;reading index: %d\n&quot;</span>, readingIndex)</span><br><span class="line"></span><br><span class="line">	reader1.Read(buf1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;reading index: %d\n&quot;</span>, reader1.Size()-<span class="keyword">int64</span>(reader1.Len()))</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(buf1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">reading index: <span class="number">6</span></span><br><span class="line">reading index: <span class="number">12</span></span><br><span class="line">world!</span><br></pre></td></tr></table></figure>
<h1 id="bytes-Buffer"><a href="#bytes-Buffer" class="headerlink" title="bytes.Buffer"></a>bytes.Buffer</h1><p>bytes包和strings包类似，strings包主要面向的是 Unicode 字符和经过 UTF-8 编码的字符串，而bytes包面对的则主要是字节和字节切片，主要作为字节序列的缓冲区。bytes.Buffer数据的读写都使用到了已读计数。</p>
<p>bytes.Buffer具有读和写功能，下面分别介绍他们的简单使用方法。</p>
<h2 id="bytes-Buffer：写数据"><a href="#bytes-Buffer：写数据" class="headerlink" title="bytes.Buffer：写数据"></a>bytes.Buffer：写数据</h2><p>和strings.Builder一样，bytes.Buffer可以用于拼接字符串，strings.Builder也会自动对内容容器进行扩容。请看下面的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoBytes</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;world !&quot;</span>)</span><br><span class="line">	fmt.Println(buffer.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello world !</span><br></pre></td></tr></table></figure>
<h2 id="bytes-Buffer：读数据"><a href="#bytes-Buffer：读数据" class="headerlink" title="bytes.Buffer：读数据"></a>bytes.Buffer：读数据</h2><p>bytes.Buffer读数据也使用了已读计数，需要注意的是，进行读取操作后，Len方法返回的是未读内容的长度。下面直接来看代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoBytes</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;world !&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    p1 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</span><br><span class="line">	n, _ := buffer.Read(p1)</span><br><span class="line">    </span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(p1))</span><br><span class="line">	fmt.Println(buffer.String())</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The length of buffer: %d\n&quot;</span>, buffer.Len())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line"> world !</span><br><span class="line">The length of buffer: <span class="number">8</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><p>简单了解了string类型、strings包和bytes.Buffer类型后，下面来介绍golang中的字符串拼接方法。</p>
<p><a href="https://zhuanlan.zhihu.com/p/349672248">https://zhuanlan.zhihu.com/p/349672248</a></p>
<p>go test -bench=. -run=^BenchmarkDemoBytes$</p>
<h2 id="直接相加"><a href="#直接相加" class="headerlink" title="直接相加"></a>直接相加</h2><p>最简单的方法是直接相加，由于string类型的值是不可变的，进行字符串拼接时会生成新的字符串，将拼接的字符串依次拷贝到一个新的连续内存空间中。如果存在大量字符串拼接操作，使用这种方法非常消耗内存。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">    str3 := str1 + str2</span><br><span class="line">    fmt.Println(str3)	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="strings-Builder"><a href="#strings-Builder" class="headerlink" title="strings.Builder"></a>strings.Builder</h2><p>前面介绍了strings.Builder可以用于拼接字符串：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder1 strings.Builder</span><br><span class="line">builder1.WriteString(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">builder1.WriteString(<span class="string">&quot;world !&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="strings-Join"><a href="#strings-Join" class="headerlink" title="strings.Join()"></a>strings.Join()</h2><p>也可以使用strings.Join方法，其实Join()调用了WriteString方法；</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">str3 := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">str3 = strings.Join([]<span class="keyword">string</span>&#123;str3,str1&#125;,<span class="string">&quot;&quot;</span>)</span><br><span class="line">str3 = strings.Join([]<span class="keyword">string</span>&#123;str3,str2&#125;,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="bytes-Buffer-1"><a href="#bytes-Buffer-1" class="headerlink" title="bytes.Buffer"></a>bytes.Buffer</h2><p>bytes.Buffer也可以用于拼接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var buffer bytes.Buffer</span><br><span class="line"></span><br><span class="line">buffer.WriteString(&quot;hello &quot;)</span><br><span class="line">buffer.WriteString(&quot;world !&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h2><p>也可以使用Go内置函数append方法，用于拼接切片：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoAppend</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">	<span class="keyword">var</span> str3 []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">    str3 = <span class="built_in">append</span>(str3, []<span class="keyword">byte</span>(str1)...)</span><br><span class="line">    str3 = <span class="built_in">append</span>(str3, []<span class="keyword">byte</span>(str2)...)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(str3))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hello world !</span><br></pre></td></tr></table></figure>
<h2 id="fmt-Sprintf"><a href="#fmt-Sprintf" class="headerlink" title="fmt.Sprintf"></a>fmt.Sprintf</h2><p>fmt包中的Sprintf方法也可以用来拼接字符串：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">str3 := fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, str1, str2)</span><br></pre></td></tr></table></figure>
<h1 id="字符串拼接性能测试"><a href="#字符串拼接性能测试" class="headerlink" title="字符串拼接性能测试"></a>字符串拼接性能测试</h1><p>下面来测试一下这6种方法的性能，编写测试源码文件strcat_test.go：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> benchmark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoBytesBuffer</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		buffer.WriteString(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">		buffer.WriteString(<span class="string">&quot;world !&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoWriteString</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> builder1 strings.Builder</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		builder1.WriteString(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">		builder1.WriteString(<span class="string">&quot;world !&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoStringsJoin</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">	str3 := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		str3 = strings.Join([]<span class="keyword">string</span>&#123;str3, str1&#125;, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		str3 = strings.Join([]<span class="keyword">string</span>&#123;str3, str2&#125;, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoPlus</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">	str3 := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		str3 += str1</span><br><span class="line">		str3 += str2</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoAppend</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">	<span class="keyword">var</span> str3 []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		str3 = <span class="built_in">append</span>(str3, []<span class="keyword">byte</span>(str1)...)</span><br><span class="line">		str3 = <span class="built_in">append</span>(str3, []<span class="keyword">byte</span>(str2)...)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DemoSprintf</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	str1 := <span class="string">&quot;hello &quot;</span></span><br><span class="line">	str2 := <span class="string">&quot;world !&quot;</span></span><br><span class="line">	str3 := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		str3 = fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, str3, str1)</span><br><span class="line">		str3 = fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, str3, str2)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBytesBuffer</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		DemoBytesBuffer(<span class="number">10000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkWriteString</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		DemoWriteString(<span class="number">10000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkStringsJoin</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		DemoStringsJoin(<span class="number">10000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAppend</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		DemoAppend(<span class="number">10000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkPlus</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		DemoPlus(<span class="number">10000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSprintf</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		DemoSprintf(<span class="number">10000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行性能测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -bench=. -run=^$</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: testGo/benchmark</span><br><span class="line">cpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz</span><br><span class="line">BenchmarkBytesBuffer-8              3436            326846 ns/op</span><br><span class="line">BenchmarkWriteString-8              4148            271453 ns/op</span><br><span class="line">BenchmarkStringsJoin-8                 3         402266267 ns/op</span><br><span class="line">BenchmarkAppend-8                   1923            618489 ns/op</span><br><span class="line">BenchmarkPlus-8                        3         345087467 ns/op</span><br><span class="line">BenchmarkSprintf-8                     2         628330850 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      testGo/benchmark        9.279s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过平均耗时可以看到WriteString方法执行效率最高。Sprintf方法效率最低。</p>
<ol>
<li><p>我们看到Strings.Join方法效率也比较低，在上面的场景下它的效率比较低，它在合并已有字符串数组的场合效率是很高的。</p>
</li>
<li><p>如果要连续拼接大量字符串推荐使用WriteString方法，如果是少量字符串拼接，也可以直接使用<code>+</code>。</p>
</li>
<li><p>append方法的效率也是很高的，它主要用于切片的拼接。</p>
</li>
<li><p>fmt.Sprintf方法虽然效率低，但在少量数据拼接中，如果你想拼接其它数据类型，使用它可以完美的解决：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">age := <span class="number">20</span></span><br><span class="line">str4 := fmt.Sprintf(<span class="string">&quot;%s is %d years old&quot;</span>, name, age)</span><br><span class="line">fmt.Println(str4)  <span class="comment">// zhangsan is 20 years old</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<center><b>--THE END--<b></center>



]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash编程二：shell语法及实用技巧</title>
    <url>/posts/linux-shell-bash-programing2/</url>
    <content><![CDATA[<p>在<a href="https://blog.csdn.net/u010698107/article/details/112254528">Linux Bash编程</a>中，介绍了Bash编程基本语法，本文记录一下Bash编程中使用到的相关shell 语法技巧。</p>
<a id="more"></a>
<h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><h2 id="在字符串中传递变量"><a href="#在字符串中传递变量" class="headerlink" title="在字符串中传递变量"></a>在字符串中传递变量</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ num=8</span><br><span class="line"><span class="comment"># 方法1：双引号</span></span><br><span class="line">$ text=<span class="string">&quot;There are <span class="variable">$num</span> ducks swimming in a pond&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text</span></span><br><span class="line">There are 8 ducks swimming <span class="keyword">in</span> a pond</span><br><span class="line">$ </span><br><span class="line">$ text=<span class="string">&quot;There are &quot;</span><span class="variable">$num</span><span class="string">&quot; ducks swimming in a pond&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text</span></span><br><span class="line">There are 8 ducks swimming <span class="keyword">in</span> a pond</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：单引号</span></span><br><span class="line">$ text=<span class="string">&#x27;There are $num ducks swimming in a pond&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text</span></span><br><span class="line">There are <span class="variable">$num</span> ducks swimming <span class="keyword">in</span> a pond</span><br><span class="line">$ </span><br><span class="line">$ text=<span class="string">&#x27;There are &#x27;</span><span class="variable">$num</span><span class="string">&#x27; ducks swimming in a pond&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text</span></span><br><span class="line">There are 8 ducks swimming <span class="keyword">in</span> a pond</span><br><span class="line">$ text=<span class="string">&quot;There are &#x27;<span class="variable">$num</span>&#x27; ducks swimming in a pond&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text</span></span><br><span class="line">There are <span class="string">&#x27;8&#x27;</span> ducks swimming <span class="keyword">in</span> a pond</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h2><p>tr (translate) 命令用于删除或者转换字符，比如大小写转换，删除字符等。命令格式如下：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tr [OPTION] SET1 [SET2]</span><br></pre></td></tr></table></figure><br>OPTION参数说明：</p>
<ul>
<li><code>-c | --complement</code>：删除或者替换SET1以外的字符</li>
<li><code>-d | --delete</code>：删除SET1以外的字符</li>
<li><code>-s, --squeeze-repeats</code>：压缩连续重复的字符为单个字符</li>
<li><code>-t, --truncate-set1</code>：截取 SET1 使之与 SET2 长度相等</li>
</ul>
<h3 id="1-大小写转换"><a href="#1-大小写转换" class="headerlink" title="1. 大小写转换"></a>1. 大小写转换</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> HELLO WORLD | tr <span class="string">&quot;A-Z&quot;</span> <span class="string">&quot;a-z&quot;</span></span><br><span class="line">hello world</span><br><span class="line">$ <span class="built_in">echo</span> HELLO WORLD | tr <span class="string">&quot;[:upper:]&quot;</span> <span class="string">&quot;[:lower:]&quot;</span></span><br><span class="line">hello world</span><br><span class="line">$ </span><br><span class="line">$ <span class="built_in">echo</span> hello world | tr <span class="string">&quot;a-z&quot;</span> <span class="string">&quot;A-Z&quot;</span></span><br><span class="line">HELLO WORLD</span><br><span class="line">$ <span class="built_in">echo</span> hello world | tr <span class="string">&quot;[:lower:]&quot;</span> <span class="string">&quot;[:upper:]&quot;</span></span><br><span class="line">HELLO WORLD</span><br></pre></td></tr></table></figure>
<h3 id="2-替换"><a href="#2-替换" class="headerlink" title="2. 替换"></a>2. 替换</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;(hello world)&quot;</span> | tr <span class="string">&quot;()&quot;</span> <span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">&#123;hello world&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-压缩重复字符串"><a href="#3-压缩重复字符串" class="headerlink" title="3. 压缩重复字符串"></a>3. 压缩重复字符串</h3><p>比如可以将多个连续空格压缩为一个空格<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello        world    !&quot;</span> | tr -s [:space:] <span class="string">&#x27; &#x27;</span></span><br><span class="line">hello world !</span><br></pre></td></tr></table></figure></p>
<h3 id="4-删除指定字符"><a href="#4-删除指定字符" class="headerlink" title="4. 删除指定字符"></a>4. 删除指定字符</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;10MB&quot;</span> | tr -d MB</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<p>提取数字还可以这样：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;10MB&quot;</span> | tr -<span class="built_in">cd</span> <span class="string">&quot;[0-9]&quot;</span></span><br><span class="line">10</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;10MB&quot;</span> | tr -<span class="built_in">cd</span> [:digit:]</span><br><span class="line">10</span><br></pre></td></tr></table></figure><br>删除数字：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;10MB&quot;</span> | tr -d <span class="string">&quot;[0-9]&quot;</span></span><br><span class="line">MB</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;10MB&quot;</span> | tr -d [:digit:]</span><br><span class="line">MB</span><br></pre></td></tr></table></figure><br>字母字符用<code>[:alpha:]</code>表示</p>
<h2 id="判断字符串是否包含某个子串"><a href="#判断字符串是否包含某个子串" class="headerlink" title="判断字符串是否包含某个子串"></a>判断字符串是否包含某个子串</h2><p>使用通配符*<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SIZE=10M</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$SIZE</span> == *M* ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SIZE</span> include M&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><br>或者使用操作符~<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="variable">$SIZE</span> =~ M ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SIZE</span> include M&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">BubbleSort()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 冒泡排序</span></span><br><span class="line">    <span class="comment"># Performing Bubble sort</span></span><br><span class="line">    num_length=<span class="variable">$&#123;#arry[*]&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (( i = 0; i&lt;<span class="variable">$num_length</span>; i++ ))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> (( j = 0; j&lt;<span class="variable">$num_length</span>-i-1; j++ ))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> [[ <span class="variable">$&#123;arry[j]&#125;</span> -gt <span class="variable">$&#123;arry[$(( j+1 ))]&#125;</span> ]]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                <span class="comment"># swap</span></span><br><span class="line">                temp=<span class="variable">$&#123;arry[j]&#125;</span></span><br><span class="line">                arry[<span class="variable">$j</span>]=<span class="variable">$&#123;arry[$((j+1))]&#125;</span></span><br><span class="line">                arry[$(( j+<span class="number">1</span> ))]=<span class="variable">$temp</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Array in sorted order :&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\E[1;31m<span class="variable">$&#123;arry[*]&#125;</span> \033[0m&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arry=(9 8 5 6 2 4 7 1)</span><br><span class="line">BubbleSort</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh BubbleSort.sh </span><br><span class="line">Array <span class="keyword">in</span> sorted order :</span><br><span class="line">1 2 4 5 6 7 8 9 </span><br></pre></td></tr></table></figure>
<h1 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h1><p>常用颜色格式：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">normal=&#x27;\033[0m&#x27; # 默认颜色</span><br><span class="line">style=&#x27;\033[1m&#x27; # 高亮</span><br><span class="line">style=&#x27;\033[4m&#x27; # 添加下划线</span><br><span class="line">style=&#x27;\033[7m&#x27; # 反显 </span><br><span class="line">color=&#x27;\033[32m&#x27; # 绿色字体</span><br><span class="line">color=&#x27;\033[30m&#x27; # 黑色</span><br><span class="line">color=&#x27;\033[31m&#x27; # 红色</span><br><span class="line">color=&#x27;\033[33m&#x27; # 黄色</span><br><span class="line">color=&#x27;\033[34m&#x27; # 蓝色</span><br><span class="line">color=&#x27;\033[35m&#x27; # 紫色</span><br><span class="line">color=&#x27;\033[36m&#x27; # 深绿</span><br><span class="line">color=&#x27;\033[37m&#x27; # 白色</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>使用方法：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;\033[1m&quot; &quot;There are 8 ducks swimming in a pond&quot;</span><br><span class="line">echo -e &quot;\033[0m&quot; &quot;There are 8 ducks swimming in a pond&quot;</span><br><span class="line">echo -e &quot;\033[4m&quot; &quot;There are 8 ducks swimming in a pond&quot;</span><br><span class="line">echo -e &quot;\033[7m&quot; &quot;There are 8 ducks swimming in a pond&quot;</span><br><span class="line">echo -e &quot;\033[32m&quot; &quot;There are 8 ducks swimming in a pond&quot;</span><br></pre></td></tr></table></figure></p>
<p><img src="echo-e.png" width="50%" height="50%" /></p>
<h1 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/^$/d&#x27; test.txt # 删除空行</span><br><span class="line">sed -i &#x27;s/ *//g&#x27; test.txt # 删除空格</span><br><span class="line">IFS=$&#x27;\n&#x27;  # linux分隔符，默认是空格</span><br><span class="line">for lines in `cat test.txt`; do # 循环读取每一行</span><br><span class="line">	pic=`echo $lines | grep &#x27;\!\[\](&#x27;` # 处理读取的内容：使用Linux三剑客进行文本处理</span><br><span class="line">	if [ &quot;$pic&quot; != &quot;&quot; ]</span><br><span class="line">	then</span><br><span class="line">    	echo $pic &gt;&gt; new_file.txt</span><br><span class="line">    fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> <span class="keyword">do</span> something</span></span><br><span class="line">done	</span><br></pre></td></tr></table></figure>
<h2 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h2><p>用于每次写文件时清空文件内容，下面介绍5种方法，前面4种方法中，如果文件不存在会创建文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /dev/null &gt; test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> : &gt; test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> &gt; test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="literal">true</span> &gt; test.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;1,$d&#x27;</span> test.txt <span class="comment"># 如果文件test.txt不存在会报错</span></span></span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础语法（二）：函数</title>
    <url>/posts/golang-notes-for-basic-syntax-function/</url>
    <content><![CDATA[<p>函数是一等（first-class）公民，可用来封装代码。在<a href="https://blog.csdn.net/u010698107/article/details/119741912">Go语言基础语法（一）</a>中介绍了函数也是一种数据类型，函数的值也可以在其他函数间传递、赋予变量、做类型判断和转换等。下面来介绍Go语言中的函数定义和使用方法。</p>
<a id="more"></a>
<h1 id="普通函数声明与使用"><a href="#普通函数声明与使用" class="headerlink" title="普通函数声明与使用"></a>普通函数声明与使用</h1><p>下面先来介绍函数的简单使用方法。</p>
<p>函数定义语法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( parameter-list )</span> <span class="params">( <span class="keyword">return</span>-types )</span></span> &#123;</span><br><span class="line">   <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go函数使用 <code>func</code> 关键字进行声明，输入参数和返回值都是可选的，可以没有参数，也可以没有返回值，函数体实现函数的功能逻辑。</p>
<p>除法运算例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;	</span><br><span class="line">	<span class="keyword">if</span> y == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;can&#x27;t divide by zero!!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	res := <span class="keyword">float64</span>(x) / <span class="keyword">float64</span>(y)	</span><br><span class="line">	<span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	value1 := <span class="number">3</span></span><br><span class="line">	value2 := <span class="number">2</span></span><br><span class="line">    value3 := <span class="number">0</span></span><br><span class="line">	res, err := add(value1, value2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d / %d = %f (error: %v)\n&quot;</span>, value1, value2, res, err)</span><br><span class="line">	res, err = add(value1, value3)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d / %d = %f (error: %v)\n&quot;</span>, value1, value3, res, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> / <span class="number">2</span> = <span class="number">1.500000</span> (error: &lt;<span class="literal">nil</span>&gt;)</span><br><span class="line"><span class="number">3</span> / <span class="number">0</span> = <span class="number">0.000000</span> (error: can<span class="string">&#x27;t divide by zero!!)</span></span><br></pre></td></tr></table></figure>
<h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><p>前面说了函数也是一种数据类型，函数类型的声明语法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> function_name <span class="function"><span class="keyword">func</span><span class="params">(parameter-list)</span> <span class="params">(<span class="keyword">return</span>-types)</span></span></span><br></pre></td></tr></table></figure>
<p>函数类型的函数签名（参数列表和结果列表）方法与函数声明一致，只要两个函数的函数签名一致（元素顺序和类型相同），它们就是相同的函数类型。</p>
<p>在前面除法运算例子中声明一个名为calculate的函数类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type calculate func(x int, y int) (float64, error)</span><br></pre></td></tr></table></figure>
<p>函数签名和add函数一样，所以add和calculate是相同的函数类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cal calculate</span><br><span class="line">cal = add</span><br><span class="line">res, err = cal(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;The result: %f (error: %v)\n&quot;</span>, res, err)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">The result: <span class="number">1.500000</span> (error: &lt;<span class="literal">nil</span>&gt;)</span><br></pre></td></tr></table></figure>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>高阶函数和普通函数的区别在于高阶函数的形参或者返回参数列表中存在函数类型，也就是接收函数作为参数输入或者返回一个函数。</p>
<p>下面使用高阶函数实现加减乘除运算。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> operate <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>, op operate)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> op == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;invalid operation&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> op(x, y), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x * y	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x / y	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x, y := <span class="number">36</span>, <span class="number">6</span></span><br><span class="line">    </span><br><span class="line">	result, _ := calculate(x, y, add)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The result: &quot;</span>,result)</span><br><span class="line"></span><br><span class="line">	result, _ = calculate(x, y, sub)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The result: &quot;</span>,result)</span><br><span class="line"></span><br><span class="line">	result, _ = calculate(x, y, multiply)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The result: &quot;</span>,result)</span><br><span class="line"></span><br><span class="line">	result, _ = calculate(x, y, divide)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The result: &quot;</span>,result)</span><br><span class="line">	</span><br><span class="line">	result, _ = calculate(x, y, <span class="literal">nil</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The result: &quot;</span>,result)	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">The result:  <span class="number">42</span></span><br><span class="line">The result:  <span class="number">30</span></span><br><span class="line">The result:  <span class="number">216</span></span><br><span class="line">The result:  <span class="number">6</span></span><br><span class="line">The result:  <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h1><p>闭包函数是引用了自由变量的代码块，闭包可以作为函数对象或者匿名函数。下面用闭包实现计算一个数的 n 次幂：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> exponent <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">uint64</span>)</span> <span class="title">uint64</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nth_power</span><span class="params">(exp <span class="keyword">uint64</span>)</span> <span class="title">exponent</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(base <span class="keyword">uint64</span>)</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">		result := <span class="keyword">uint64</span>(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span> i := exp ; i &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> i&amp;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">				result *= base</span><br><span class="line">			&#125;</span><br><span class="line">			base *= base</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	square := nth_power(<span class="number">2</span>) <span class="comment">// 平方</span></span><br><span class="line">	cube := nth_power(<span class="number">3</span>) <span class="comment">// 立方	</span></span><br><span class="line">	fmt.Println(square(<span class="number">5</span>))</span><br><span class="line">	fmt.Println(cube(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">125</span></span><br></pre></td></tr></table></figure>
<p>从代码中可以看出闭包返回的是一个函数，不是具体的值，使用闭包可以根据需要生成功能不同的函数。</p>
<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>我在<a href="https://blog.csdn.net/u010698107/article/details/118280135">Python函数的参数类型</a>中介绍过Python函数中的参数传递，Python中的参数传递属于对象的引用传递，而Go语言中均为<strong>值传递</strong>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyArray</span><span class="params">(a [3]<span class="keyword">int</span>)</span> [3]<span class="title">int</span></span> &#123;</span><br><span class="line">	a[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlice</span><span class="params">(a []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">	a[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l1 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of l1:  &quot;</span>,l1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;address of l1: %p\n&quot;</span>,&amp;l1)</span><br><span class="line"></span><br><span class="line">	l2 := modifyArray(l1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;address of l2: %p\n&quot;</span>,&amp;l2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of l1:  &quot;</span>,l1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of l2:  &quot;</span>,l2)</span><br><span class="line"></span><br><span class="line">	slice1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice1:  &quot;</span>,slice1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;address of slice1: %p\n&quot;</span>,&amp;slice1)</span><br><span class="line"></span><br><span class="line">	slice2 := modifySlice(slice1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;address of slice2: %p\n&quot;</span>,&amp;slice2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice1:  &quot;</span>,slice1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice2:  &quot;</span>,slice2)</span><br><span class="line"></span><br><span class="line">	slice2[<span class="number">2</span>] = <span class="number">6</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice1:  &quot;</span>,slice1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice2:  &quot;</span>,slice2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value of l1:   [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">address of l1: <span class="number">0xc000016198</span></span><br><span class="line">address of l2: <span class="number">0xc0000161c8</span></span><br><span class="line">value of l1:   [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">value of l2:   [<span class="number">1</span> <span class="number">0</span> <span class="number">3</span>]</span><br><span class="line">value of slice1:   [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">address of slice1: <span class="number">0xc000004078</span></span><br><span class="line">address of slice2: <span class="number">0xc0000040a8</span></span><br><span class="line">value of slice1:   [<span class="number">1</span> <span class="number">0</span> <span class="number">3</span>]</span><br><span class="line">value of slice2:   [<span class="number">1</span> <span class="number">0</span> <span class="number">3</span>]</span><br><span class="line">value of slice1:   [<span class="number">1</span> <span class="number">0</span> <span class="number">6</span>]</span><br><span class="line">value of slice2:   [<span class="number">1</span> <span class="number">0</span> <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>由于数组是值类型，传给函数的参数值都会被复制，所以使用modifyArray对原数组进行修改时原数组不会改变，只是修改了它的副本而已，这和Python中的list不一样。</p>
<p>而对于引用类型，比如：切片、字典、通道，使用上面代码中的方式修改时，不会拷贝它们引用的底层数据，只是进行了浅表复制。所以上面例子中的原切片slice1也会跟着改变。</p>
<p>对于引用类型可以使用copy函数进行拷贝：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	slice1 = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	slice3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(slice1))</span><br><span class="line">	<span class="built_in">copy</span>(slice3, slice1)</span><br><span class="line">	slice3[<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;address of slice1: %p\n&quot;</span>,&amp;slice1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;address of slice3: %p\n&quot;</span>,&amp;slice3)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice1:  &quot;</span>,slice1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;value of slice3:  &quot;</span>,slice3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">address of slice1: <span class="number">0xc000098060</span></span><br><span class="line">address of slice3: <span class="number">0xc000098108</span></span><br><span class="line">value of slice1:   [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">value of slice3:   [<span class="number">1</span> <span class="number">6</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>使用samba实现linux和windows文件共享</title>
    <url>/posts/linux-tools-for-samba/</url>
    <content><![CDATA[<p>Samba是用于Linux/Unix系统与Windows之间共享文件的软件，本文记录一下Samba的安装及使用方法。</p>
<a id="more"></a>
<h1 id="samba简介"><a href="#samba简介" class="headerlink" title="samba简介"></a>samba简介</h1><p>samba的功能都是通过一个CIFS（Common Internet File System）协议套件来管理的，这个名字是由微软引入的。</p>
<p>Samba是一个开源的CIFS实现，官网地址为 <a href="https://www.samba.org/samba/">https://www.samba.org/samba/</a>。</p>
<p>SMB (Server Message Block Protocol)协议是一种客户端/服务器通信协议，它主要包括smbd 和 nmbd，提供四种基本服务：</p>
<ol>
<li>文件、打印服务：由SMB守护进程smbd提供</li>
<li>验证和授权：“共享模式”和“用户模式”</li>
<li>域解析：模拟Windows NT域系统，主要包括广播和点对点两种形式，还有一种是使用NBNS (<strong>N</strong>et<strong>B</strong>IOS <strong>N</strong>ame <strong>S</strong>ervice)服务器，微软称为WINS服务(<strong>W</strong>indows <strong>I</strong>nternet <strong>N</strong>ame <strong>S</strong>ervice)</li>
<li>服务声明(浏览)：声明网络上计算机提供的可浏览服务(文件和打印共享)列表。</li>
</ol>
<p>前两个服务由smbd实现，后两个由nmbd来实现。</p>
<h1 id="samba安装"><a href="#samba安装" class="headerlink" title="samba安装"></a>samba安装</h1><p>centos7：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y samba</span><br><span class="line">sudo yum install -y samba-client</span><br></pre></td></tr></table></figure>
<p>ubuntu：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br><span class="line">sudo apt install samba-client</span><br></pre></td></tr></table></figure>
<p>smbclient是一个smb服务器的客户端管理程序。</p>
<p>查看安装状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whereis samba</span><br><span class="line">samba: /usr/lib64/samba /etc/samba /usr/libexec/samba /usr/share/man/man7/samba.7.gz</span><br><span class="line">$ rpm -qa | grep samba</span><br><span class="line">samba-common-4.10.16-15.el7_9.noarch</span><br><span class="line">samba-client-4.10.16-15.el7_9.x86_64</span><br><span class="line">samba-client-libs-4.10.16-15.el7_9.x86_64</span><br><span class="line">samba-common-libs-4.10.16-15.el7_9.x86_64</span><br><span class="line">samba-libs-4.10.16-15.el7_9.x86_64</span><br><span class="line">samba-common-tools-4.10.16-15.el7_9.x86_64</span><br><span class="line">samba-4.10.16-15.el7_9.x86_64</span><br><span class="line">$ smbd --version</span><br><span class="line">Version 4.10.16</span><br></pre></td></tr></table></figure></p>
<h1 id="samba配置"><a href="#samba配置" class="headerlink" title="samba配置"></a>samba配置</h1><h2 id="1-查看windows工作组"><a href="#1-查看windows工作组" class="headerlink" title="1. 查看windows工作组"></a>1. 查看windows工作组</h2><p>通过cmd命令 <code>net config workstation</code> 查看工作组：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;net config workstation</span><br><span class="line">计算机名                     \\DESKTOP-EHODIV3</span><br><span class="line">计算机全名                   DESKTOP-EHODIV3</span><br><span class="line">用户名                       Administrator</span><br><span class="line"></span><br><span class="line">工作站正运行于</span><br><span class="line">        NetBT_Tcpip_&#123;E484BACB-E20F-47EB-8727-EF799C2C041E&#125; (0A0027000016)</span><br><span class="line"></span><br><span class="line">软件版本                     Windows 10 Home China</span><br><span class="line"></span><br><span class="line">工作站域                     WORKGROUP</span><br><span class="line">登录域                       DESKTOP-EHODIV3</span><br><span class="line"></span><br><span class="line">COM 打开超时 (秒)            0</span><br><span class="line">COM 发送计数 (字节)          16</span><br><span class="line">COM 发送超时 (毫秒)          250</span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>或者查看系统属性：此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 计算机名 查看工作组<br><img src="windows-workgroup.jpg" width="80%" height="80%" /></p>
<h2 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="2. 关闭防火墙"></a>2. 关闭防火墙</h2><p>配置之前先关闭linux防火墙</p>
<p>查看防⽕火墙状态<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></p>
<p>停⽌止firewall<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></p>
<p>禁止firewall开机启动<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service </span><br></pre></td></tr></table></figure></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[root@Server apTest]# systemctl start smb.service</span><br><span class="line">[root@Server apTest]# </span><br><span class="line">[root@Server apTest]# </span><br><span class="line">[root@Server apTest]# netstat -antpu| grep smb</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">139</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">5164</span>/smbd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">445</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">5164</span>/smbd           </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">139</span>                  :::*                    LISTEN      <span class="number">5164</span>/smbd           </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">445</span>                  :::*                    LISTEN      <span class="number">5164</span>/smbd           </span><br><span class="line">[root@Server apTest]# </span><br></pre></td></tr></table></figure>
<p>关闭selinux</p>
<p>vi /etc/selinux/config</p>
<p>注释SELINUX=enforcing，添加SELINUX=disabled</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line"><span class="comment"># SELINUX=enforcing</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h2><p>先创建一个共享目录或者使用已有的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /var/samba/share</span><br><span class="line">$ touch /var/samba/share/test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置读写权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /var/samba</span><br></pre></td></tr></table></figure>
<p>配置smb.conf文件：<code>vi /etc/samba/smb.conf</code></p>
<p>添加的共享名为myshare，这个名称是windows访问时会显示的名称，可以随意设置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">        workgroup = WORKGROUP</span><br><span class="line">        security = user</span><br><span class="line"></span><br><span class="line">        passdb backend = tdbsam</span><br><span class="line"></span><br><span class="line">        printing = cups</span><br><span class="line">        printcap name = cups</span><br><span class="line">        load printers = yes</span><br><span class="line">        cups options = raw</span><br><span class="line"></span><br><span class="line">[homes]</span><br><span class="line">        comment = Home Directories</span><br><span class="line">        valid users = %S, %D%w%S</span><br><span class="line">        browseable = No</span><br><span class="line">        <span class="built_in">read</span> only = No</span><br><span class="line">        inherit acls = Yes</span><br><span class="line"></span><br><span class="line">[printers]</span><br><span class="line">        comment = All Printers</span><br><span class="line">        path = /var/tmp</span><br><span class="line">        printable = Yes</span><br><span class="line">        create mask = 0600</span><br><span class="line">        browseable = No</span><br><span class="line"></span><br><span class="line">[<span class="built_in">print</span>$]</span><br><span class="line">        comment = Printer Drivers</span><br><span class="line">        path = /var/lib/samba/drivers</span><br><span class="line">        write list = @printadmin root</span><br><span class="line">        force group = @printadmin</span><br><span class="line">        create mask = 0664</span><br><span class="line">        directory mask = 0775</span><br><span class="line"></span><br><span class="line">[myshare]</span><br><span class="line">		comment = my server share dir</span><br><span class="line">		path = /var/samba/share</span><br><span class="line">		public = yes</span><br><span class="line">		writable = yes</span><br><span class="line">		browseable = yes</span><br><span class="line">		guest ok = yes</span><br><span class="line">		guest only = yes</span><br><span class="line">		<span class="built_in">read</span> only = no</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<h2 id="4-配置samba登录用户密码"><a href="#4-配置samba登录用户密码" class="headerlink" title="4. 配置samba登录用户密码"></a>4. 配置samba登录用户密码</h2><p>可以使用<code>groupadd</code> 和 <code>useradd</code>命令添加用户组，下面我直接使用root用户：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbpasswd -a root</span><br><span class="line">New SMB password:</span><br><span class="line">Retype new SMB password:</span><br><span class="line">Added user root.</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>新输的密码就是远程登录密码。</p>
<h2 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h2><p>配置文件设置完成后启动samba服务，并设置开机启动</p>
<p>启动 <em>smb.service</em> 和 <em>nmb.service</em>两个服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start smb.service</span><br><span class="line">systemctl start nmb.service</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重启smb服务命令：<code>systemctl restart smb.service</code></p>
</blockquote>
<p>设置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> smb.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nmb.service</span><br></pre></td></tr></table></figure>
<h2 id="6-windows访问共享文件"><a href="#6-windows访问共享文件" class="headerlink" title="6. windows访问共享文件"></a>6. windows访问共享文件</h2><p>win + r 输入samba服务器地址，访问samba共享文件</p>
<p><img src="win-r-samba.jpg" width="80%" height="80%" /></p>
<p>也可以在文件浏览器中输入地址 <code>\\192.168.30.9</code> 访问共享文件。</p>
<p>输入用户名密码后就可以访问Linux共享文件了！</p>
<p><img src="windows-samba-file.jpg" width="80%" height="80%" /></p>
<p>可以对myshare中的文件进行读写操作以及文件创建。</p>
<h1 id="smbclient使用"><a href="#smbclient使用" class="headerlink" title="smbclient使用"></a>smbclient使用</h1><p>samba-client是linux中的客户端管理程序，如果要在linux/unix中访问samba文件可以使用smbclient工具。</p>
<h2 id="登录samba服务器"><a href="#登录samba服务器" class="headerlink" title="登录samba服务器"></a>登录samba服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbclient //192.168.30.9/myshare</span><br><span class="line">Enter SAMBA\root<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Try &quot;help&quot; to get a list of possible commands.</span></span><br><span class="line"><span class="string">smb: \&gt; </span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbclient //192.168.30.9/myshare/ -U root%12345678</span><br><span class="line">Try <span class="string">&quot;help&quot;</span> to get a list of possible commands.</span><br><span class="line">smb: \&gt; </span><br></pre></td></tr></table></figure>
<p>登录成功后就可以对共享文件进行访问了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smb: \&gt; ls</span><br><span class="line">  .                                   D        0  Sun Aug 22 10:17:09 2021</span><br><span class="line">  ..                                  D        0  Sun Aug 22 09:03:44 2021</span><br><span class="line">  test.txt                            N        0  Sun Aug 22 09:30:59 2021</span><br><span class="line"></span><br><span class="line">                60273916 blocks of size 1024. 52785976 blocks available</span><br><span class="line">smb: \&gt; </span><br></pre></td></tr></table></figure>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smb: \&gt; get test.txt /root/samba/test.txt</span><br><span class="line">getting file \test.txt of size 0 as /root/samba/test.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec)</span><br><span class="line">smb: \&gt; </span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ll /root/samba/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--. 1 root root 0 Aug 22 10:39 test.txt</span><br></pre></td></tr></table></figure>
<p>指定日志存放目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get test.txt /root/samba/test.txt -l /tmp/smb/smbalog</span><br></pre></td></tr></table></figure>
<p>下载目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbclient //192.168.30.9/myshare/ -U root%12345678 -c <span class="string">&#x27;prompt OFF; recurse ON; cd /sambafolder/; lcd /tmp/smb/localfolder/; mget *&#x27;</span> -l /tmp/smb/smbalog</span><br></pre></td></tr></table></figure>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>上传文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smb: \&gt; put /root/samba/test.txt test.txt</span><br></pre></td></tr></table></figure>
<p>上传目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbclient //192.168.30.9/myshare/ -U root%12345678 -c <span class="string">&#x27;prompt OFF; recurse ON; cd /sambafolder/; lcd /tmp/smb/localfolder/; mput *&#x27;</span> -l /tmp/smb/smbalog</span><br></pre></td></tr></table></figure>
<p>更多smbclient使用方法参考：<a href="https://www.samba.org/samba/docs/current/man-html/smbclient.1.html">https://www.samba.org/samba/docs/current/man-html/smbclient.1.html</a></p>
<p><strong>参考文档：</strong></p>
<ol>
<li><a href="https://www.liquidweb.com/kb/how-to-install-samba-on-linux-windows/">https://www.liquidweb.com/kb/how-to-install-samba-on-linux-windows/</a></li>
<li><a href="https://www.samba.org/samba/docs/SambaIntro.html">https://www.samba.org/samba/docs/SambaIntro.html</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 | 神们自己</title>
    <url>/posts/reading-notes-for-the-gods-themselves/</url>
    <content><![CDATA[<p>《神们自己》是艾萨克·阿西莫夫（Isaac Asimov）于1972年创作的科幻小说，获得了1972年星云奖最佳小说奖和1973年雨果奖最佳小说奖。<br><a id="more"></a></p>
<p>本书主要包括三个部分：面对愚昧，神们自己，也缄口不言。（“面对愚昧，神们自己也缄口不言”出自德国剧作家席勒的《圣女贞德》）。地球可以与平行宇宙进行物质交换，由于两个宇宙的自然规律不一样，双方都能够通过 “跨宇宙电子通道” 获取能源。但是，双方都有人知道这是存在很大风险的。在平行宇宙中，微观层面强作用力的强度是地球的百倍，也就是说原子核裂变在地球更容易发生，而核聚变在平行宇宙中更容易。由于原子核内强作用力增加，太阳内氢原子核的聚变速度就会加快，在改变以后的自然规律下，太阳可能会变成超新星，可能导致太阳爆炸，没有能量后，平行宇宙中会变得很冷。所以双方都有人要求停止电子通道。</p>
<p>平行宇宙中分为长老和凡人，凡人家庭由理者、情者和抚育者组成。这是一个非常巧妙的三位一体设定，其实也可以看成是人类的特性：理性的，情绪化的，保守的……“神们自己”其实也是我们人类自身。</p>
<p>第三部分来到了月球，解决方案不是停止电子通道，而是可以通过宇宙蛋解决电子通道的副作用，把宇宙的力场拉回正常水平。这也表明了作者对人类的乐观态度，正如开头的题词：</p>
<blockquote>
<p>献给人类——<br>愿与愚昧的战争终有胜利的一天</p>
</blockquote>
<p>虽然科技的发展会带来各种问题，比如社会问题、生态问题，但我们没有必要抛弃它，可以进一步发展科技来解决这些问题。</p>
<p>下面来摘抄一些书中的精彩句子：</p>
<ul>
<li><p>历史往往就是由这些讨厌而且毫无目的的冲突推动的。</p>
</li>
<li><p>有人认为，公众希望环境得以保护，人类的存续得以实现，还认为那些为了这类崇高目标而奋斗的理想主义者会得到公众的爱戴，这种想法都是错的。实际上，公众所期望的只有一件事：他们自己过上安逸舒适的生活。</p>
</li>
<li>当人们知道吸烟会导致患癌症几率上升而最有效的解决办法就是禁烟时，他们却希望能够发明一种不致癌的香烟。当人们知道内燃机会对大气造成污染而最好的办法就是不再使用这类引擎时，他们却希望能够发明不污染空气的引擎。</li>
<li>他们只要拒绝相信就行。面对难题，最容易的对策就是拒绝相信它的存在</li>
<li>凡是对自己有一点利益就会选择相信。有时候即使毫无可能，人们也会顽冥不化。</li>
<li>人类历史上已经有过太多悲剧，每次都是冲突接着冲突，危机之后还是危机。我想，这次危机我们已经安然度过，可是前面的路还长，崎岖还很多，一想到这个，心里难免有点沉重。等到星际飞船造好以后，冲突应该会减少很多吧。</li>
</ul>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础语法（一）</title>
    <url>/posts/golang-notes-basic-syntax/</url>
    <content><![CDATA[<p>本文介绍一些Go语言的基础语法。<br><a id="more"></a></p>
<h1 id="go简单小例子"><a href="#go简单小例子" class="headerlink" title="go简单小例子"></a>go简单小例子</h1><p>先来看一个简单的go语言代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;	</span><br><span class="line">	fmt.Println(<span class="string">&quot;main  init....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> value1 <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line">	<span class="keyword">var</span> value2 = <span class="number">3</span></span><br><span class="line">	sum := add(value1,value2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d + %d = %d&quot;</span>,value1,value2,sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>package main</code>：定义package 包名称为main，表示当前文件所属的包</li>
<li><code>import &quot;fmt&quot;</code>：导入Go标准库中的 fmt 模块，主要用于打印输出。go提供了很多标准库，具体可参考<a href="https://studygolang.com/pkgdoc">Golang标准库文档</a>。</li>
<li><code>init()</code>：init()函数在main()函数之前执行。</li>
<li><code>main()</code>：main函数，是当前程序的入口，init()以及main()函数都无法被显式的调用。</li>
</ul>
<p>go语言的注释方法：</p>
<ul>
<li>单行注释：<code>//</code></li>
<li>多行注释：<code>/*    */</code></li>
</ul>
<p>代码执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run demo.go</span><br><span class="line">main  init....</span><br><span class="line">2 + 3 = 5</span><br></pre></td></tr></table></figure>
<p>下面来进一步介绍go的基础语法。</p>
<h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><p>go语言中格式化输出可以使用 fmt 和 log 这两个标准库，</p>
<h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>常用方法：</p>
<ul>
<li><code>fmt.Printf</code>：格式化输出</li>
<li><code>fmt.Println</code>：仅打印，不能转义，会在输出结束后添加换行符。</li>
<li><code>fmt.Print</code>：和Println类似，但不添加换行符。</li>
<li><code>fmt.Sprintf</code>：格式化字符串并赋值给新的字符串</li>
</ul>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">22</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;I&#x27;m %d years old\n&quot;</span>, age)</span><br><span class="line"></span><br><span class="line">	str1 := <span class="string">&quot;Hello world !&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, str1)</span><br><span class="line">	fmt.Printf(str1)</span><br><span class="line">	fmt.Print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	str_hex := fmt.Sprintf(<span class="string">&quot;% 02x&quot;</span>, str1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;type of str_hex: %T\n&quot;</span>, str_hex)</span><br><span class="line">	fmt.Println(str_hex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">I<span class="string">&#x27;m 22 years old</span></span><br><span class="line"><span class="string">Hello world !</span></span><br><span class="line"><span class="string">Hello world !</span></span><br><span class="line"><span class="string">type of str_hex: string</span></span><br><span class="line"><span class="string">48 65 6c 6c 6f 20 77 6f 72 6c 64 20 21</span></span><br></pre></td></tr></table></figure>
<p>更多格式化方法可以访问<a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a>中的fmt包。</p>
<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>log包实现了简单的日志服务，也提供了一些格式化输出的方法。</p>
<ul>
<li><code>log.Printf</code>：格式化输出，和fmt.Printf类似</li>
<li><code>log.Println</code>：和fmt.Println类似</li>
<li><code>log.Print</code>：和fmt.Print类似</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">22</span></span><br><span class="line">	log.Printf(<span class="string">&quot;I&#x27;m %d years old&quot;</span>, age)</span><br><span class="line"></span><br><span class="line">	str1 := <span class="string">&quot;Hello world !&quot;</span></span><br><span class="line">	log.Println(str1)</span><br><span class="line">	log.Print(str1)</span><br><span class="line">	log.Printf(<span class="string">&quot;%s&quot;</span>, str1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">12</span> <span class="number">16</span>:<span class="number">52</span>:<span class="number">12</span> I<span class="string">&#x27;m 22 years old</span></span><br><span class="line"><span class="string">2021/08/12 16:52:12 Hello world !</span></span><br><span class="line"><span class="string">2021/08/12 16:52:12 Hello world !</span></span><br><span class="line"><span class="string">2021/08/12 16:52:12 Hello world !</span></span><br></pre></td></tr></table></figure></p>
<p>下面来介绍一下go的数据类型</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>下表列出了go语言的数据类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">布尔类型 bool</td>
<td style="text-align:left">可以是常量 true 或者 false</td>
<td style="text-align:left"><code>var flag bool = true</code></td>
</tr>
<tr>
<td style="text-align:left">数字类型</td>
<td style="text-align:left">有符号整型：int8、int16、int32、int64<br />无符号整型：uint8、uint16、uint32、uint64<br />int和uint的具体长度取决于CPU位数<br />浮点型：float32、float64<br /></td>
<td style="text-align:left"><code>var num int = 2</code></td>
</tr>
<tr>
<td style="text-align:left">字符串类型 string</td>
<td style="text-align:left">是UTF-8 编码的字符序列，只能使用双引号（””）或反引号（``）定义</td>
<td style="text-align:left"><code>var a = “test”</code></td>
</tr>
<tr>
<td style="text-align:left">数组 array</td>
<td style="text-align:left">数组类型是由<strong>固定长度</strong>的特定类型元素组成的序列，长度和容量相同</td>
<td style="text-align:left"><code>var myarr [5] int&#123;1,2,3&#125;</code></td>
</tr>
<tr>
<td style="text-align:left">切片 slice</td>
<td style="text-align:left">切片类型是一种动态数组，是可变长的，长度和容量可相同也可以不相同</td>
<td style="text-align:left"><code>var myslice = []int&#123;1, 2, 3&#125;</code></td>
</tr>
<tr>
<td style="text-align:left">结构体 struct</td>
<td style="text-align:left">结构体是多个任意类型的变量组合</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">字典 map</td>
<td style="text-align:left">存储键值对的集合</td>
<td style="text-align:left"><code>var mymap map[int]string</code></td>
</tr>
<tr>
<td style="text-align:left">通道 channel</td>
<td style="text-align:left">相当于一个先进先出（FIFO）的队列，可以利用通道在多个 goroutine 之间传递数据</td>
<td style="text-align:left"><code>ch := make(chan int, 3)</code></td>
</tr>
<tr>
<td style="text-align:left">接口 interface</td>
<td style="text-align:left">接口类型定义方法的集合，它无法实例化</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">函数 func</td>
<td style="text-align:left">函数类型是一种对一组输入、输出进行模板化的重要工具</td>
<td style="text-align:left"><code>type add func(a int, b int) (n int)</code></td>
</tr>
<tr>
<td style="text-align:left">指针 pointer</td>
<td style="text-align:left">go语言的指针类型和C/C++中的指针类型类似，是指向某个确切的内存地址的值</td>
</tr>
</tbody>
</table>
</div>
<p>int、float、bool、string、数组和struct属于值类型，这些类型的变量直接指向存在内存中的值；slice、map、chan、pointer等是引用类型，存储的是一个地址，这个地址存储最终的值。</p>
<h1 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h1><p>常量是在程序编译时就确定下来的值，程序运行时无法改变。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">	fmt.Println(name)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> course1, course2 = <span class="string">&quot;math&quot;</span>, <span class="string">&quot;english&quot;</span></span><br><span class="line">	fmt.Println(course1, course2)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line">	age = age + <span class="number">1</span> <span class="comment">// 不能改变age</span></span><br><span class="line">	fmt.Println(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># command-line-arguments</span><br><span class="line">.\test_const.<span class="keyword">go</span>:<span class="number">15</span>:<span class="number">6</span>: cannot assign to age (declared <span class="keyword">const</span>)</span><br></pre></td></tr></table></figure>
<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><p>go的变量声明主要包括三种方法：</p>
<ul>
<li><p>变量声明可指定变量类型，如果没有初始化，则变量默认为零值。</p>
</li>
<li><p>也可以不指定数据类型，由go自己判断。</p>
</li>
<li>var可以省略，使用<code>:=</code>进行声明。注意：<code>:=</code> 左边的变量必须是没有声明新的变量，否则会编译错误。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">	fmt.Println(name)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> hight <span class="keyword">float32</span></span><br><span class="line">	fmt.Println(hight)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> course1, course2 = <span class="string">&quot;math&quot;</span>, <span class="string">&quot;english&quot;</span></span><br><span class="line">	fmt.Println(course1, course2)</span><br><span class="line"></span><br><span class="line">	age := <span class="number">20</span></span><br><span class="line">	age = age + <span class="number">1</span></span><br><span class="line">	fmt.Println(age)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		name1 <span class="keyword">string</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">		name2 <span class="keyword">string</span> = <span class="string">&quot;lishi&quot;</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(name1, name2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">zhangsan</span><br><span class="line"><span class="number">0</span></span><br><span class="line">math english</span><br><span class="line"><span class="number">21</span></span><br><span class="line">zhangsan lishi</span><br></pre></td></tr></table></figure>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Go 语言的运算符主要包括算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符以及指针相关运算符。</p>
<p>算术运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">加</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">减</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">乘</td>
</tr>
<tr>
<td style="text-align:left">/</td>
<td style="text-align:left">除</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">求余</td>
</tr>
<tr>
<td style="text-align:left">++</td>
<td style="text-align:left">自增</td>
</tr>
<tr>
<td style="text-align:left">—</td>
<td style="text-align:left">自减</td>
</tr>
</tbody>
</table>
</div>
<p>关系运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">是否相等</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">是否不相等</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">大于</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">小于</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">大于等于</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">小于等于</td>
</tr>
</tbody>
</table>
</div>
<p>逻辑运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;&amp;</td>
<td style="text-align:left">逻辑 AND</td>
</tr>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left">\</td>
<td></td>
<td>逻辑 OR</td>
</tr>
<tr>
<td style="text-align:left">!</td>
<td style="text-align:left">逻辑 NOT</td>
</tr>
</tbody>
</table>
</div>
<p>位运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">按位与，两个数对应的二进位相与</td>
</tr>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left"></td>
<td>按位或</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">按位异或</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
<td style="text-align:left">左移，左移n位表示乘以2的n次方</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;</td>
<td style="text-align:left">右移，右移n位表示除以2的n次方</td>
</tr>
</tbody>
</table>
</div>
<p>赋值运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">简单赋值运算符</td>
</tr>
<tr>
<td style="text-align:left">+=</td>
<td style="text-align:left">相加后再赋值</td>
</tr>
<tr>
<td style="text-align:left">-=</td>
<td style="text-align:left">相减后再赋值</td>
</tr>
<tr>
<td style="text-align:left">*=</td>
<td style="text-align:left">相乘后再赋值</td>
</tr>
<tr>
<td style="text-align:left">/=</td>
<td style="text-align:left">相除后再赋值</td>
</tr>
<tr>
<td style="text-align:left">%=</td>
<td style="text-align:left">求余后再赋值</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;=</td>
<td style="text-align:left">左移后赋值</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;=</td>
<td style="text-align:left">右移后赋值</td>
</tr>
<tr>
<td style="text-align:left">&amp;=</td>
<td style="text-align:left">按位与后赋值</td>
</tr>
<tr>
<td style="text-align:left">^=</td>
<td style="text-align:left">按位异或后赋值</td>
</tr>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left">=</td>
<td>按位或后赋值</td>
</tr>
</tbody>
</table>
</div>
<p>指针相关运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">返回变量在内存中的地址</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">如果<code>*</code>后面是指针，表示取指针指向的值；如果<code>*</code>后面是类型，则表示一个指向该类型的指针。</td>
</tr>
</tbody>
</table>
</div>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>下面介绍一下go语言中的if语句和switch语句。另外还有一种控制语句叫select语句，通常与通道联用，这里不做介绍。</p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [布尔表达式] &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if … else ：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [布尔表达式] &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>else if：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [布尔表达式] &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> [布尔表达式] &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;	</span><br><span class="line">	<span class="keyword">var</span> grade = <span class="number">70</span></span><br><span class="line">	<span class="keyword">if</span> grade &gt;= <span class="number">90</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;A&quot;</span> )</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> grade &lt; <span class="number">90</span> &amp;&amp; grade &gt;= <span class="number">80</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;B&quot;</span> )</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> grade &lt; <span class="number">80</span> &amp;&amp; grade &gt; <span class="number">60</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;C&quot;</span> )</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;D&quot;</span> )</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><p>语法格式：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> cond1:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">case</span> cond2:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do something：条件都不满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外，添加 fallthrough 会强制执行后面的 case 语句，不管下一条case语句是否为true。</p>
<p>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">	<span class="keyword">switch</span> grade &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">良好</span><br><span class="line">中等</span><br></pre></td></tr></table></figure></p>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>下面介绍几种循环语句：</p>
<h2 id="for循环：使用分号"><a href="#for循环：使用分号" class="headerlink" title="for循环：使用分号"></a>for循环：使用分号</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		sum += i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum) <span class="comment">// 10 (1+2+3+4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现while效果"><a href="#实现while效果" class="headerlink" title="实现while效果"></a>实现while效果</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	n := <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> n &lt; <span class="number">5</span> &#123;</span><br><span class="line">		sum += n</span><br><span class="line">		n += <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum) <span class="comment">// 10 (1+2+3+4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		sum++		</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="for-range-遍历"><a href="#for-range-遍历" class="headerlink" title="for range 遍历"></a>for range 遍历</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;	</span><br><span class="line">	strings := []<span class="keyword">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> index, str := <span class="keyword">range</span> strings &#123;</span><br><span class="line">		fmt.Println(index, str)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> hello</span><br><span class="line"><span class="number">1</span> world</span><br></pre></td></tr></table></figure>
<h2 id="退出循环"><a href="#退出循环" class="headerlink" title="退出循环"></a>退出循环</h2><ul>
<li><p>continue：结束当前迭代，进入下一次迭代</p>
</li>
<li><p>break：结束当前for循环</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		sum++		</span><br><span class="line">		<span class="keyword">if</span> sum%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(sum)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> sum &gt;= <span class="number">10</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>也可以通过标记退出循环：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	n := <span class="number">0</span></span><br><span class="line">	LOOP: <span class="keyword">for</span> n &lt;= <span class="number">10</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> n == <span class="number">8</span> &#123;</span><br><span class="line">			<span class="keyword">break</span> LOOP</span><br><span class="line">		&#125;</span><br><span class="line">		sum += n</span><br><span class="line">		n++</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum) <span class="comment">// 28 (0+1+2+3+4+5+6+7)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	sum2 := <span class="number">0</span></span><br><span class="line">	n := <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">	LOOP: <span class="keyword">for</span> n &lt;= <span class="number">10</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">			sum += n</span><br><span class="line">			n++</span><br><span class="line">			<span class="keyword">goto</span> LOOP</span><br><span class="line">		&#125;</span><br><span class="line">		sum2 += n</span><br><span class="line">		n++</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum) <span class="comment">// 30 (0+2+4+6+8+10)</span></span><br><span class="line">	fmt.Println(sum2) <span class="comment">// 25 (1+3+5+7+9)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言开发环境安装</title>
    <url>/posts/golang-notes-for-install-guide/</url>
    <content><![CDATA[<p>Go语言（Golang） 由Google 的 Robert Griesemer，Rob Pike 和 Ken Thompson 推出，Go语言具有并发性，可以快速编译机器码，自动垃圾回收，是一种静态强类型、编译型语言。由于Go语言的并发特性，非常适用于Web 服务器、分布式集群计算、云计算、游戏服务端等的开发。在区块链（如以太坊，Ethereum）、容器（如Kubernetes）领域都有广泛的应用。本文介绍Go语言开发环境安装方法。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Go支持支持windows、linux、mac操作系统，下面介绍Windows系统安装方法：<br>下载地址：<a href="https://golang.google.cn/doc/install">https://golang.google.cn/doc/install</a></p>
<p>go国内镜像下载地址：<a href="https://gomirrors.org/">https://gomirrors.org/</a></p>
<p>双击msi文件安装，安装成功后会自动加入环境变量，测试是否安装成功：<code>go version</code><br>windows打开cmd<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;go version</span><br><span class="line">go version go1.15.6 windows/amd64</span><br></pre></td></tr></table></figure><br>帮助命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<p>Linux系统安装：</p>
<p>下载安装包，使用root用户执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rm -rf /usr/<span class="built_in">local</span>/go &amp;&amp; tar -C /usr/<span class="built_in">local</span> -xzf go1.16.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>将<code>/usr/local/go/bin</code>添加到环境变量：<code>vim /etc/profile</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br><span class="line">GOPATH=/var/GoProjects</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure>
<h1 id="Go代码编写运行"><a href="#Go代码编写运行" class="headerlink" title="Go代码编写运行"></a>Go代码编写运行</h1><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><p>配置一个变量名为<code>GOPATH</code>的系统变量 ，值为Go 项目的工作目录，可以是多个路径。<br><img src="gopath.png" width="80%" height="80%" /></p>
<p>在工作目录<code>D:\GoProjects</code>下创建 bin、pkg、src三个目录</p>
<ul>
<li>bin：存放编译后可执行的文件。</li>
<li>pkg：存放编译后的应用包。</li>
<li>src：存放应用源代码。</li>
</ul>
<p>还有一个环境变量叫GOROOT，是Go的安装路径，这个可以不用配置，默认添加到了环境变量</p>
<p>在src目录下新建一个HelloWorld的项目，新建hello.go，项目目录树如下：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D:\GOPROJECTS</span><br><span class="line">│</span><br><span class="line">├─bin</span><br><span class="line">├─pkg</span><br><span class="line">└─src</span><br><span class="line">    └─HelloWorld</span><br><span class="line">            hello.go</span><br></pre></td></tr></table></figure></p>
<p>编写代码如下：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>HelloWorld目录下运行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure></p>
<h2 id="go-modules依赖管理"><a href="#go-modules依赖管理" class="headerlink" title="go modules依赖管理"></a>go modules依赖管理</h2><p>Go mod是Go语言依赖库管理器，官方推荐使用这种方法来管理依赖，相比GOPATH方法更加灵活，记录和解析对其他模块的依赖性。</p>
<p>Go mod是go1.11之后新增的功能，版本至少需要1.11。</p>
<p>打开Go mod，在windows cmd窗口输入如下命令设置环境变量：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ setx GO111MODULE on </span><br></pre></td></tr></table></figure><br>GO111MODULE=on 表示开启模块支持，忽略 GOPATH  文件夹，根据 go.mod 下载依赖。由于国内网络问题可能无法下载go依赖包，需配置一下国内代理（七牛云提供）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ setx GOPROXY https://goproxy.cn,direct </span><br></pre></td></tr></table></figure><br>或者直接手动添加环境变量<br><img src="go-proxy-path.png" width="80%" height="80%" /></p>
<p>下面使用go mod来管理一个项目：</p>
<p><strong>初始化项目</strong></p>
<p>项目src目录下创建的项目目录，执行如下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go mod init</span><br></pre></td></tr></table></figure>
<p>目录下会生成一个go.mod文件：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">module HelloWorld</span><br><span class="line"></span><br><span class="line">go 1.16</span><br></pre></td></tr></table></figure><br>还有一个比较常用的命令是<code>go mod tidy</code>，用于安装需要的依赖包，删除多余的包。</p>
<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><p>Go是一种编译型语言，代码编写完成后，需要先进行编译后再执行。</p>
<p><strong>1、go run</strong></p>
<p>编译+执行，不生成其它任何文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>
<p><strong>2、go build</strong></p>
<p>先编译，再手动执行</p>
<ul>
<li><code>-a</code>：强制编译，目标代码包和依赖的代码包（包括标准库中的代码包）都会被编译</li>
<li><code>-x</code>：会打印执行日志</li>
<li><code>-n</code>：只查看具体操作而不执行它们</li>
<li><code>-v</code>：可以看到go build命令编译的代码包的名称</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go build hello.go</span><br><span class="line">$ hello.exe</span><br></pre></td></tr></table></figure>
<p>执行<code>go build hello.go</code>后，在windows系统上会自动生成一个后缀为exe的可执行文件，可使用<code>-o</code>参数指定编译文件名：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go build -o hello hello.go</span><br><span class="line">$ hello</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><br><strong>3、go install</strong></p>
<p>先编译，将编译好的可执行文件移动到 $GOPATH/bin目录下，将包文件放到pkg目录下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go install hello.go</span><br></pre></td></tr></table></figure>
<p><strong>4、go clean</strong></p>
<p>清除执行 go 命令而遗留下来的临时目录和文件</p>
<ul>
<li><code>-i</code>参数：清除通过go install命令生成的文件，也就是会把bin和pkg目录下的相关文件清除</li>
<li><code>-cache</code>参数：清除go build命令生成的文件</li>
<li><code>-n</code>参数：打印要执行的清除命令，不执行清除</li>
<li><code>-x</code>参数：打印要执行的清除命令，执行清除</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go clean -i hello.go</span><br><span class="line">$ go clean -n hello.go</span><br><span class="line"><span class="built_in">cd</span> D:\GoProjects\src\HelloWorld</span><br><span class="line">rm -f HelloWorld HelloWorld.exe hello hello.exe HelloWorld.test HelloWorld.test.exe hello.test hello.test.exe hello hello.exe</span><br></pre></td></tr></table></figure>
<h2 id="Go-源码安装：go-get"><a href="#Go-源码安装：go-get" class="headerlink" title="Go 源码安装：go get"></a>Go 源码安装：go get</h2><p>go get会自动从代码仓库（比如 GitHub.com、golang.org等）下载目标代码包，安装的路径为设置的环境变量GOPATH中。下面介绍几个常用参数：</p>
<ul>
<li><code>-u</code>：下载并安装代码包，不论工作区中是否已存在它们。</li>
<li><code>-d</code>：只下载代码包，不安装代码包。</li>
<li><code>-fix</code>：在下载代码包后先运行一个用于根据当前 Go 语言版本修正代码的工具，然后再安装代码包。</li>
<li><code>-t</code>：同时下载测试所需的代码包。</li>
<li><code>-insecure</code>：允许通过非安全的网络协议下载和安装代码包。比如HTTP。</li>
</ul>
<p>更多go get命令使用方法可参考：<a href="https://github.com/hyper0x/go_command_tutorial/blob/master/0.3.md">https://github.com/hyper0x/go_command_tutorial/blob/master/0.3.md</a></p>
<p>其它go命令详细文档可参考Go 语言官方文档：<a href="https://golang.google.cn/cmd/go/">https://golang.google.cn/cmd/go/</a></p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>VSCode比较轻量级，是我比较常用的代码开发工具。</p>
<p><strong>1、配置代理</strong></p>
<p>按照前面的方法配置</p>
<p><strong>2、安装go插件</strong></p>
<p>以管理员身份启动VSCode，然后安装go插件<br><img src="go-vscode-plugin.png" width="80%" height="80%" /></p>
<p><strong>3、安装环境依赖</strong></p>
<p>VSCode打开前面创建的HelloWorld项目，打开hello.go，右下角会提示安装环境依赖，点击安装就行<br><img src="go-vscode-environment.png" width="80%" height="80%" /></p>
<p><strong>4、配置调试功能</strong></p>
<p>配置launch.json文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch file&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;go&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mode&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;GOPATH&quot;</span>: <span class="string">&quot;D:\\GoProjects&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;GOROOT&quot;</span>: <span class="string">&quot;D:\\software\\go&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="go-vscode-debug.png" width="80%" height="80%" /><br>配置完成后在go代码文件内，按F5即可进入调试状态。</p>
<h2 id="GoLand"><a href="#GoLand" class="headerlink" title="GoLand"></a>GoLand</h2><p>也可以使用 JetBrains 公司推出的GoLand开发，功能更全面，下载地址：<a href="https://www.jetbrains.com/go/">https://www.jetbrains.com/go/</a></p>
<h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><p>golang国内站点：<a href="https://golang.google.cn/">https://golang.google.cn/</a><br>文档：<a href="https://golang.google.cn/doc/">https://golang.google.cn/doc/</a><br>Go语言规范文档：<a href="https://golang.google.cn/ref/spec">https://golang.google.cn/ref/spec</a><br>go语言中文网：<a href="https://studygolang.com/">https://studygolang.com/</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows上实现iOS APP自动化测试：tidevice + WDA +  facebook-wda / appium</title>
    <url>/posts/app-testing-for-ios-app-on-windows/</url>
    <content><![CDATA[<p>本文介绍如何在Windows下构建iOS APP自动化测试环境，采用的主要工具为tidevice，WebDriverAgent，facebook-wda或者appium。</p>
<a id="more"></a>
<h1 id="测试架构介绍"><a href="#测试架构介绍" class="headerlink" title="测试架构介绍"></a>测试架构介绍</h1><p>下面是本文搭建的iOS自动化测试架构原理图：</p>
<p><img src="tidevice-wda-architecture.png" width="100%" height="100%" /></p>
<ol>
<li>手机端的WDA Runner（WebDriverAgent）类似于appium测试框架中的 UIAutomator Server，将从客户端接收到的控制命令转换为XCUITest 相关API操作，实现对应用界面的控制。WebDriverAgent应用需要通过xcode编译安装。</li>
<li>usbmuxd是苹果提供的一个服务，用于USB和TCP协议之间的转换，实现在没有网络的情况下也可以连接设备，iTunes和Xcode就使用到了这个服务，所以在环境安装中需要在windows上安装一个iTunes。</li>
<li>WDA的启动使用阿里开源的tidevice工具。</li>
<li>Language Bindings为不同语言的测试脚本，比如基于python语言的facebook-wda，基于go语言的gwda等。</li>
</ol>
<h2 id="WebDriverAgent原理分析"><a href="#WebDriverAgent原理分析" class="headerlink" title="WebDriverAgent原理分析"></a>WebDriverAgent原理分析</h2><p>WebDriverAgent是Facebook 在2015年的 SeleniumConf 大会上推出了一款iOS移动测试框架。它在 iOS 端实现了一个 WebDriver server ，通过这个 server 来实现远程控制 iOS 设备。它主要通过连接XCTest.framework来调用Apple的API实现对设备的操作。</p>
<p>WebDriverAgent采用C/S架构，集成appium使用的WebDriver协议规范，通信协议使用Mobile JSON Wire Protocol。</p>
<ol>
<li>WDAClient：WDA的客户端，测试库facebook-wda 就是 WDA 的 Python 客户端库，通过HTTP协议（Mobile JSON Wire Protocol）与WebDriverAgent进行通信。</li>
<li>WebDriverAgentRunner：运行在手机上的WDA server，默认监听端口为8100，主要功能包括①接收WDAClient的请求并将操作命令发送给XCTest.framework。②将响应发送给WDA Client</li>
</ol>
<h2 id="tidevice原理分析"><a href="#tidevice原理分析" class="headerlink" title="tidevice原理分析"></a>tidevice原理分析</h2><p>前面介绍了iOS的自动化需要通过WebDriverAgent来实现，一种常见的解决方案是使用xcodebuild来启动WebDriverAgent，而xcode需要Mac系统，也就是必须在MAC上进行iOS自动化测试。</p>
<p>tidevice 是阿里开源的一个基于Python的iOS自动化工具，通过逆向iOS通信协议，模拟xcodebuild与手机进行通信，向手机发送特定的指令，来启动WDA，从而可以脱离Mac电脑，能够在Linux、Windows上运行iOS自动化。tidevice基于python实现了libimobiledevice中的功能。</p>
<p>tidevice通过usbmuxd与手机通信来启动WDA，通过建立一个TCP连接到usbmuxd的/var/run/usbmuxd TCP端口，然后usbmuxd将请求发送到USB连接的iPhone上。上面提到的libimobiledevice就是一个跨平台的用于与iOS设备进行通信的库。</p>
<h1 id="iOS-设备安装-wda"><a href="#iOS-设备安装-wda" class="headerlink" title="iOS 设备安装 wda"></a>iOS 设备安装 wda</h1><p>本文所用的环境：</p>
<ul>
<li><p>macOS版本：macOS Big Sur 11.4</p>
</li>
<li><p>Xcode版本：Version 12.5.1 (12E507)</p>
</li>
<li><p>iOS 设备： iPhone12 mini（14.6）</p>
</li>
<li><p>Windows系统版本：Windows 10 家庭中文版</p>
</li>
</ul>
<h2 id="1、安装Xcode"><a href="#1、安装Xcode" class="headerlink" title="1、安装Xcode"></a>1、安装Xcode</h2><p>app store 下载安装iOS开发环境Xcode。</p>
<h2 id="2、下载WebDriverAgent"><a href="#2、下载WebDriverAgent" class="headerlink" title="2、下载WebDriverAgent"></a>2、下载WebDriverAgent</h2><p>使用appium维护的WebDriverAgent，项目地址：<a href="https://github.com/appium/WebDriverAgent。">https://github.com/appium/WebDriverAgent。</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/appium/WebDriverAgent.git</span><br></pre></td></tr></table></figure><br>现在不需要执行下面的脚本了，作者已经删除：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./Scripts/bootstrap.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="3、Xcode打开WebDriverAgent"><a href="#3、Xcode打开WebDriverAgent" class="headerlink" title="3、Xcode打开WebDriverAgent"></a>3、Xcode打开WebDriverAgent</h2><p>双击WebDriverAgent中的WebDriverAgent.xcodeproj文件，这是一个xcode项目文件。</p>
<h2 id="4、Xcode添加开发者帐户"><a href="#4、Xcode添加开发者帐户" class="headerlink" title="4、Xcode添加开发者帐户"></a>4、Xcode添加开发者帐户</h2><p>Xcode -&gt; Preference</p>
<p><img src="Xcode-accounts.png" width="70%" height="70%" /></p>
<h2 id="5、项目配置"><a href="#5、项目配置" class="headerlink" title="5、项目配置"></a>5、项目配置</h2><p>设置Team为你添加的帐户，修改Bundle Identifier为唯一名称</p>
<p><img src="wda-Bundle-Identifier.png" width="70%" height="70%" /></p>
<p>设置完成后，选择Scheme为WebDriverAgentRunner</p>
<p><img src="wda-xcode-scheme.png" width="70%" height="70%" /></p>
<p>选择Destination为你连接的iPhone。</p>
<h2 id="6、项目构建及测试"><a href="#6、项目构建及测试" class="headerlink" title="6、项目构建及测试"></a>6、项目构建及测试</h2><p>然后点击左上角的三角符号进行build，或者点击Product -&gt; Build；</p>
<p>Build成功之后，点击Product -&gt; Test；</p>
<p>可以看到WebDriverAgent安装到了你的iPhone上</p>
<p><img src="screen-wda.png" width="50%" height="50%" /></p>
<p>点击iPhone上的设置-&gt; 通用 -&gt; 设备管理 信任开发者APP</p>
<p><img src="screen-apple-development.png" width="60%" height="60%" /></p>
<p>以上是我的WDA安装配置过程，如果有问题可以参考文档：<a href="https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md">https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md</a></p>
<h1 id="安装iTunes"><a href="#安装iTunes" class="headerlink" title="安装iTunes"></a>安装iTunes</h1><p>因为iTunes里面有usbmux驱动，需要安装一下它。</p>
<p>下载安装Windows 版 iTunes方法：<a href="https://support.apple.com/zh-cn/HT210384">https://support.apple.com/zh-cn/HT210384</a></p>
<p>iTunes安装成功后，连接上你的iPhone：</p>
<p><img src="iTunes-iphone.png" width="60%" height="60%" /></p>
<h1 id="安装tidevice"><a href="#安装tidevice" class="headerlink" title="安装tidevice"></a>安装tidevice</h1><p>tidevice用于启动WDA，它可以运行在Windows上，也支持Mac和Linux。项目地址：<a href="https://github.com/alibaba/taobao-iphone-device">https://github.com/alibaba/taobao-iphone-device</a>。 要求Python版本3.6+。</p>
<p>pip安装tidevice：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip3 install -U <span class="string">&quot;tidevice[openssl]&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看是否安装成功：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice version</span><br><span class="line">tidevice version 0.4.14</span><br></pre></td></tr></table></figure>
<p>列出连接设备<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice list</span><br><span class="line">List of apple devices attached</span><br><span class="line">00008101-000255021E08001E iPhone11</span><br><span class="line">$ tidevice list --json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;udid&quot;</span>: <span class="string">&quot;00008101-000255021E08001E&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;iPhone11&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>查看设备信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice info</span><br></pre></td></tr></table></figure>
<p>tidevice的更多使用方法可参考<a href="https://github.com/alibaba/taobao-iphone-device#readme">https://github.com/alibaba/taobao-iphone-device#readme</a> 。</p>
<h1 id="启动WDA"><a href="#启动WDA" class="headerlink" title="启动WDA"></a>启动WDA</h1><p>查看安装的WDA应用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice applist</span><br><span class="line">com.apple.store.Jolly Apple Store 509000</span><br><span class="line">com.apple.Keynote Keynote 讲演 10.1</span><br><span class="line">com.facebook.WebDriverAgent.XXXXXtest.xctrunner WebDriverAgentRunner-Runner 1.0</span><br><span class="line">com.apple.Numbers Numbers 表格 10.1</span><br><span class="line">com.apple.iMovie iMovie 剪辑 229</span><br><span class="line">com.apple.mobilegarageband 库乐队 2.3.8</span><br><span class="line">com.apple.clips 可立拍 2.1.1</span><br><span class="line">com.apple.Pages Pages 文稿 10.1</span><br></pre></td></tr></table></figure>
<p>使用tidevice启动WDA</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice -u [设备 udid] wdaproxy -B [wda 的 bundle Id] --port 8100 <span class="comment"># 运行 XCTest 并在PC上监听8100端口</span></span><br></pre></td></tr></table></figure>
<ul>
<li>UDID（ Unique Device Identifier）是iOS设备的唯一识别码，可以通过xcode中查看，也可以使用上面介绍的<code>tidevice list</code>命令。</li>
<li>Bundle ID（Bundle identifier）为应用 ID，是iOS应用的唯一标识。是你编译WDA应用设置的名称，可通过<code>tidevice applist</code>命令查看。</li>
<li>手机设备中 wda 的默认监听端口为8100，此命令将手机的8100端口映射到了PC上的8100端口。</li>
<li><code>tidevice xctest --debug</code>：可用于查看详细日志</li>
</ul>
<p><img src="tidevice-wda-running.png" width="100%" height="100%" /></p>
<p>浏览器访问<a href="http://127.0.0.1:8100/status">http://127.0.0.1:8100/status</a> 可以看到手机的状态信息。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;value&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;message&quot;</span> : <span class="string">&quot;WebDriverAgent is ready to accept commands&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;state&quot;</span> : <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;os&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;testmanagerdVersion&quot;</span> : <span class="number">28</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;iOS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;sdkVersion&quot;</span> : <span class="string">&quot;14.5&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span> : <span class="string">&quot;14.6&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;ios&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;ip&quot;</span> : <span class="string">&quot;192.168.102.47&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;ready&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span> : <span class="string">&quot;Jul 17 2021 18:57:32&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;productBundleIdentifier&quot;</span> : <span class="string">&quot;com.facebook.WebDriverAgentRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sessionId&quot;</span> : <span class="string">&quot;EAB73269-5D5B-45EB-913B-2BAA21FE2830&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试一下用tidevice打开iPhone的【设置】：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice launch com.apple.Preferences</span><br></pre></td></tr></table></figure><br>其中【设置】的Bundle ID可通过如下命令查看：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tidevice ps</span><br><span class="line">$ tidevice ps --json</span><br></pre></td></tr></table></figure></p>
<h1 id="appium自动化（未成功）"><a href="#appium自动化（未成功）" class="headerlink" title="appium自动化（未成功）"></a>appium自动化（未成功）</h1><p>参考：<a href="https://testerhome.com/topics/29230">https://testerhome.com/topics/29230</a></p>
<p>安装appium：<a href="https://github.com/appium/appium-desktop/releases">https://github.com/appium/appium-desktop/releases</a>。 我安装的版本是1.21.0</p>
<p>安装完成后启动Appium</p>
<p>配置信息：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;platformName&quot;</span>: <span class="string">&quot;ios&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platformVersion&quot;</span>: <span class="string">&quot;14.6&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deviceName&quot;</span>: <span class="string">&quot;iPhone11&quot;</span>,</span><br><span class="line">  <span class="string">&quot;udid&quot;</span>: <span class="string">&quot;00008101-000255021E08001E&quot;</span>,</span><br><span class="line">  <span class="string">&quot;bundleId&quot;</span>: <span class="string">&quot;com.facebook.WebDriverAgent.XXXXXtest.xctrunner&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webDriverAgentUrl&quot;</span>: <span class="string">&quot;http://127.0.0.1:8100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;noReset&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;usePrebuiltWDA&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;useXctestrunFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;skipLogCapture&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;automationName&quot;</span>: <span class="string">&quot;XCUITest&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配置完成后点击【Start Session】，发现连不上，查看日志报如下错误信息：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WDA is not response <span class="keyword">in</span> 30 second, check again after 1s</span><br></pre></td></tr></table></figure><br>在issue里面也有人遇到这个报错，他们是概率性的，我失败的概率是100%，完全连不上，折腾一会，还是没解决，果断放弃（后面解决了再更新上来），怀疑是我的WDA安装有问题，但尝试使用<a href="https://github.com/openatx/facebook-wda">facebook-wda</a>进行自动化测试，发现是OK的，遂再次放弃appium。</p>
<h1 id="facebook-wda自动化"><a href="#facebook-wda自动化" class="headerlink" title="facebook-wda自动化"></a>facebook-wda自动化</h1><p>facebook-wda基于python语言，没有像appium那样启动一个中间服务appium server，这也是appium支持多语言的原因。facebook-wda相比appium更加简洁，功能也比较多，appium有的功能基本都提供了。</p>
<p>facebook-wda项目地址：<a href="https://github.com/openatx/facebook-wda">https://github.com/openatx/facebook-wda</a></p>
<p>安装：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install -U facebook-wda</span><br></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wda</span><br><span class="line"></span><br><span class="line">c = wda.Client(<span class="string">&#x27;http://localhost:8100&#x27;</span>) <span class="comment"># 8100为启动WDA设置的端口号</span></span><br><span class="line"><span class="comment"># c.app_current() # 显示当前应用信息，主要用于获取bundleId，也可以使用tidevice ps 命令</span></span><br><span class="line">c.session().app_activate(<span class="string">&quot;com.apple.Preferences&quot;</span>)  <span class="comment"># 打开设置</span></span><br><span class="line"><span class="comment"># c.session().app_terminate(&quot;com.apple.Preferences&quot;) # 退出设置</span></span><br><span class="line">c(name=<span class="string">&quot;搜索&quot;</span>).set_text(<span class="string">&quot;NFC&quot;</span>)  <span class="comment"># 搜索 NFC</span></span><br><span class="line">c(name=<span class="string">&quot;NFC&quot;</span>).click() <span class="comment"># 点击NFC</span></span><br><span class="line">c(xpath=<span class="string">&#x27;//Switch&#x27;</span>).exists <span class="comment"># 判断NFC开关是否存在</span></span><br><span class="line">c(xpath=<span class="string">&#x27;//Switch&#x27;</span>).get().value <span class="comment"># 获取NFC开关状态</span></span><br></pre></td></tr></table></figure></p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>1、解决iPhone连上MAC之后会不断重连的问题：<br>杀掉usbd：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo killall -STOP -c usbd</span><br></pre></td></tr></table></figure>
<p>2、xcode编译WDA时可能遇到没有指定iOS版本文件，可以尝试下载对应版本的支持文件。（我使用的Xcode 12.5.1 有iOS 14.6）</p>
<p>相应iOS版本支持文件项目地址：<a href="https://github.com/iGhibli/iOS-DeviceSupport/tree/master/DeviceSupport">https://github.com/iGhibli/iOS-DeviceSupport/tree/master/DeviceSupport</a></p>
<p>将下载的文件放到下面的目录中：Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</p>
<p>3、wda Build成功，出现Unable to copy symbols from this device错误</p>
<p><img src="xcode-build-error.png" width="60%" height="60%" /></p>
<p>大概率是xcode版本低了，需要升级一下code。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 | 影响力</title>
    <url>/posts/reading-notes-for-the-influence-the-psychology-of-persuasion/</url>
    <content><![CDATA[<p>《影响力》是心理学家罗伯特·西奥迪尼的经典著作，列举了6个影响力武器，在我们周围经常能感受到它所发挥的威力。特别是在销售上，现在生活资料如此丰富，还有各种网络服务，商家为了提升利润，他们采用了各种营销手段，目的就是希望我们选择他们的产品，某些手段正是利用人类心理上的特点。</p>
<a id="more"></a>
<p>下面来介绍一下《影响力》提出的6大影响力武器，它们是如何影响我们的决策的。</p>
<h1 id="①-互惠"><a href="#①-互惠" class="headerlink" title="① 互惠"></a>① 互惠</h1><p>互惠原理：要是人家给了我们什么好处，我们应当尽量回报。</p>
<p>互惠及其伴随而来的亏欠还债感，在人类文化中十分普遍。里查德·李基认为“正是因为有了互惠体系，人类才成为人类”</p>
<p>互惠原理适用于强加的恩惠，一个人靠着硬塞给我们一些好处，就能触发我们的亏欠感。尽管偿还义务构成了互惠原理的实质，可使原理那么容易遭到利用的，则在于接受的义务。</p>
<p>互惠原理可触发<strong>不对等交换</strong>：别人最初给的小小恩惠，能够让当事人产生亏欠，最终回报以大得多的恩惠</p>
<p>互惠式<strong>让步</strong>：若有人对我们让了步，我们便觉得有义务也退让一步。</p>
<p><strong>拒绝-后撤术</strong>就是一种“互惠式让步”，通常是先提大要求，后提小要求。比如先说一个比较高的价格，如果顾客不同意，则降低价格，顾客其实也会退一步，最终交易的价格其实在最低价格之上，顾客也会认为自己没有吃亏，也就是“获得效用”和“交易效用”都是正的（这两种效用由行为经济学家理查德·泰勒提出）。</p>
<p>拒绝后撤手法不光刺激人们答应请求，还鼓励他们切身实践承诺，甚至叫他们自愿履行进一步的请求。</p>
<p>&lt;如何拒绝&gt;</p>
<p>作者认为“善意自然应以善意回报，可对销售策略却没这个必要。公正的意思，就是盘剥的行为，要还以盘剥。”</p>
<h1 id="②-承诺和一致"><a href="#②-承诺和一致" class="headerlink" title="② 承诺和一致"></a>② 承诺和一致</h1><blockquote>
<p>“一开始就拒绝，比最后反悔要容易”——达·芬奇</p>
</blockquote>
<p>人人都有一种言行一致（同时也显得言行一致）的愿望。事实上，我们所有人都会一次次地欺骗自己，以便在做出选择后，坚信自己做得不错。个人承诺能建立起一套自圆其说的系统，能为最初的承诺找到新的理由。(找出理由支撑自己)。</p>
<p>保持一致有什么好处呢？首先，为穿越复杂的现代生活提供了一条捷径。其次，更容易令人避免误入歧途。</p>
<p><strong>承诺是关键</strong>，在接受琐碎请求时务必小心谨慎，因为一旦同意了，它就有可能影响我们的自我认知。它不光能提高我们对分量更大的类似请求的顺从度，还能使我们更乐意去做一些跟先前答应的小要求毫不相关的事情。比如，一个小要求都满足了，一个大一点的要求也可能不会拒绝。</p>
<p>很多公司签PBC其实就是利用了“承诺和一致”，你将绩效承诺写到了纸上，并且领导和同事都知道，你一定会努力完成自己承诺的工作。</p>
<p>承诺影响自我形象，因为它是当事人积极地，公开地，经过一番努力后自由选择的。如果不按承诺的做，会影响自我形象，影响别人对我的印象。周围的人认为我们什么样，对我们的自我认知起着十分重要的决定作用。</p>
<p>一方面，是人们内心里有压力要把自我形象调整得与行为一致；另一面，外部还存在一种更为鬼祟的压力，人们会按照他人对自己的感知来调整形象。</p>
<p><strong>公开承诺</strong>往往具有持久的效力，为一个承诺付出的努力越多，对承诺者的影响越大。比如入会仪式，宣誓等。</p>
<p>常见的一种套路是“抛低球”：先给人一个甜头，诱使人作出有利的购买决定。而后等决定作好了，交易却还没有最终拍板，卖方巧妙的取消了最初的甜头。</p>
<p>&lt;如何拒绝&gt;</p>
<ul>
<li>尽管保持一致（不可能彻底摆脱）一般而言是好的，甚至十分关键，我们也须避免愚蠢的死脑筋。</li>
<li>做承诺之前留时间思考一下，心理学证据表明，面对一样东西，我们总是先体验到感觉，过上短暂的一瞬间之后，才能将之理性化。</li>
</ul>
<h1 id="③-社会认同"><a href="#③-社会认同" class="headerlink" title="③ 社会认同"></a>③ 社会认同</h1><p>“我们就是真理”，在人人想法都差不多的时候，没人会想太多。罐头笑声、捧场就是典型的例子，搞笑节目中，在某些地方一般会配一些笑声，这样效果会更好。节目现场一般会有带头鼓掌的人，也就是捧场。</p>
<p><strong>社会认同原理</strong>：在判断何为正确时，我们会根据别人的意见行事。（认为一种想法正确的人越多，持有这种想法的人就越会觉得它正确)  。一般来说，在我们自己不确定，情况不明或含糊不清、意外性太大的时候，我们最有可能觉得别人的行为是正确的，也就是存在多元无知效应，会根据他人的行为判断自己怎么做才合适，尤其是在我们觉得这些人跟自己相似的时候。</p>
<p>我们对社会认同的反应很多是无意识的，条件反射式的，这样一来，偏颇甚至伪造的证据也能愚弄我们。利用社会证据的人总能成功地操纵观众，哪怕这些证据是赤赤裸裸地伪造出来的。</p>
<p>病态例证：根据其它陷入困境的人如何行动，决定自已该怎么做。比如模仿自杀</p>
<p>影响力最强的领导者是那些知道怎样安排内部条件，让社会认同原理朝对自己有利方向发挥作用的人。</p>
<p>①很多人做相同的事情，他们必然知道一些我们不知道的事情，尤其在我们不确定的时候。②人群很多时候都是错的，他们只是基于社会认同原理在做反应</p>
<p>&lt;如何拒绝&gt;</p>
<p>应该保持一点警惕感，因为人群很多时候都是错的，他们只是基于社会认同原理在做反应。人类绝不应该完全信任社会认同这种自动导航装置，哪怕没有坏分子故意往里面添加错误信息，它自己有时候也会发生故障。</p>
<h1 id="④-喜好"><a href="#④-喜好" class="headerlink" title="④ 喜好"></a>④ 喜好</h1><p>大多数人更容易答应自己认识和喜欢的人提出的要求。</p>
<p>喜欢你的理由</p>
<p><strong>1、外表魅力</strong></p>
<ul>
<li>光环效应：一个人的一个正面特征就能主导其他人看待此人的眼光</li>
<li>会自动给长得好看的人添加一些正面特点</li>
</ul>
<p><strong>2、相似性</strong></p>
<ul>
<li>我们喜欢与自己相似的人。不管相似之处是在观点、个性、背景还是生活方式上，我们总有这样的倾向。</li>
<li>我们会下意识地向跟自己相似的人作出正面反应。</li>
</ul>
<p><strong>3、恭维</strong><br>我们特别喜欢听人恭维奉承</p>
<p><strong>4、接触与合作</strong><br>熟悉会影响人的喜好，因此它对我们的各类决定都发挥了一定的作用。合作时会有共同的目标和利益。</p>
<p><strong>5、条件反射和关联</strong></p>
<ul>
<li>糟糕的信息会让报告的人染上不祥，人总是自然而然地讨厌带来坏消息的人，哪怕报信的人跟坏消息一点关系也没有。</li>
<li>联系原理：物以类聚，人以群分；近朱者赤，近墨者黑</li>
<li>制造商们总是急着把自己的产品跟当前的文化热潮联系起来，比如苹果、小米以环保的名义不提供充电器。</li>
<li>产品跟名人联系在一起，比如商家一般会找明星代言</li>
</ul>
<p>人们深明光联原理的奥妙，并努力把自己跟积极的事情联系起来，跟消极的事情保持距离，哪怕他们并非事情的起因。</p>
<p>在我们以个人成绩为傲的时候，我们不会沾别人的光，只有我们在公在私的威望都很低的时候，我们才会借助他人成功来恢复自我形象</p>
<p>&lt;如何拒绝&gt;</p>
<ul>
<li>不去压抑好感因素产生的影响力，听凭这些因素发挥力量，然后用这股力量反过来对付那些想从中获利的人。</li>
<li>把交易和交易者分开，只根据生意本身的好坏作决定。</li>
</ul>
<h1 id="⑤-权威，教化下的敬重"><a href="#⑤-权威，教化下的敬重" class="headerlink" title="⑤ 权威，教化下的敬重"></a>⑤ 权威，教化下的敬重</h1><p>权威的压力能够全然控制我们的行为。服从权威人物的命令，总是能给我们带来一些实际好处。部分因为他们更有智慧，部分因为他们手里攥着对我们的奖惩。</p>
<p>很多情况下，只要正统权威说了话，其他本应该考虑的事情就变得不相关了。此外，顺从专家靠着暴露自己的一些小缺点来建立基本的诚实感。</p>
<p>常见的有三种：</p>
<p><strong>1、头衔</strong></p>
<ul>
<li>头衔是最难也是容易得到的权威象征，头衔比当事人的本质更能影响他人的行为。</li>
<li>头衔除了能让陌生人表现更恭顺，还能让有头衔的那个人在旁人眼里显得更高大。</li>
</ul>
<p>我们觉得一样东面看起来大些，不一定是因为它能带给我们愉悦，而是因为它很重要。<br>① 体格和地位之间存在联系<br>② 权力和权威的象征，说不定是靠假冒伪劣的材料编造出来的。</p>
<p><strong>2、衣着</strong><br>制服让人感觉更加专业</p>
<p><strong>3、身份标志</strong><br>比如名车，精致、昂贵的服装等</p>
<p>&lt;如何拒绝&gt;</p>
<ul>
<li>提前做好心理准备，提高对权威力量的警惕性。</li>
<li>权威的资格，以及这些资格是否跟眼前的主题有关。</li>
</ul>
<h1 id="⑥-稀缺，数量少的说了算"><a href="#⑥-稀缺，数量少的说了算" class="headerlink" title="⑥ 稀缺，数量少的说了算"></a>⑥ 稀缺，数量少的说了算</h1><blockquote>
<p>不管是什么东西，只要你晓得会失去它，自然就会爱上它了。一G·K·切斯特顿</p>
</blockquote>
<p>物以稀为贵，机会越少见，价值似乎就越高。对失去某种西惧，似乎要比对获得同一物品的渴望，更能激发人们的行动力。这和行为经济学家理查德·泰勒提出的“禀赋效应”类似。</p>
<ul>
<li>瑕疵可能会把一样东西变得稀缺，也就是所谓”珍贵的错误”；</li>
<li>数量有限，比小米的饥饿营销</li>
<li>最后期限</li>
</ul>
<p>心理学上称为心理逆反理论，我们基本可以根据获得一样东西的难易程度，迅速准确地判断质量和价值。机会越来越少的话，我们的自由也会随之丧失。而我们又痛恨失去本来拥有的自由，保住既得利益的愿望，是心理逆反理论的核心。</p>
<p>一旦短缺或其它因素妨碍我们获取某物，我们就会比从前更想得到它，更努力地想要占有它，跟这种防碍对着干。每当有东西获取起来比从前难，我们拥有它的自由受了限制，我们就越发地想要得到它。新出现的稀缺更使人觉得迫切。</p>
<p>人们对得不到的消息更接受，更包容了，会认为受禁的信息更有价值。自由这种东西，给一点又拿走，比完全不给更危险。</p>
<p>我们不光在物品稀缺时更想要它，而且碰上有人竞争还最想要，比较典型的就是拍卖。参与竞争稀缺资源的感觉，有着强大的刺激性。渴望拥有一件众人争抢的东西，几乎是出于本能的身体反应。</p>
<p>&lt;如何拒绝&gt;</p>
<ul>
<li>对形势加以深入分析</li>
<li>一旦在顺从环境下体验到高涨的情绪，提醒自己：说不定有人玩稀缺手法，必须谨慎行事。</li>
</ul>
<p>稀缺的东西并不因为难以弄到手，就变得更好吃，更好听，更好看，更好用了。产生情绪波动时，当成暂停的信号。问问自己，为什么想要那件东西。</p>
<h1 id="捷径应受尊重"><a href="#捷径应受尊重" class="headerlink" title="捷径应受尊重"></a>捷径应受尊重</h1><p>很多时候，我们对某人某事做判断的时候，并没有用上所有可用的相关信息。相反，我们只用到了所有信息里最具代表性的一条。</p>
<p>尽常只靠孤立的数据容易作出愚蠢的决定，可现代生活的节奏又要求我们使用这一捷径。<br>靠着成熟而精密的大脑，我们建立了一个信息繁多的快节奏复杂世界，使得我们不得不越发依赖类似动物（我们早就超越了动物）的原始反应方式来应对它。外界环境的错综复杂超出了我们心智器官的心理性能，当别人利用影响力武器“对付”我们时，我们也可以采取合理手段抵制他们，特别是刺激我们捷径反应的虚假信号。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Linux主机名</title>
    <url>/posts/linux-vm-name-and-hostname/</url>
    <content><![CDATA[<p>为了方便区分局域网中的多个Linux主机，可以为每台机器设置主机名，本文介绍hostname配置方法。</p>
<a id="more"></a>
<h2 id="1-配置Linux-hostname"><a href="#1-配置Linux-hostname" class="headerlink" title="1. 配置Linux hostname"></a>1. 配置Linux hostname</h2><p>下面配置两台centos7 虚拟机，主机名分别配置为client和server，它们主机IP 地址分别为192.168.30.8和192.168.30.9。</p>
<h3 id="配置client主机"><a href="#配置client主机" class="headerlink" title="配置client主机"></a>配置client主机</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># vi /etc/sysconfig/network</span></span><br></pre></td></tr></table></figure>
<p>添加如下内容，保存：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Created by anaconda</span><br><span class="line">NETWORKING=yes</span><br><span class="line">hostname=client</span><br></pre></td></tr></table></figure><br>重启网络：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># systemctl restart network</span></span><br><span class="line">[root@client ~]<span class="comment"># hostname</span></span><br><span class="line">client</span><br><span class="line">[root@client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><br>如果不生效可以使用如下命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># hostnamectl set-hostname client</span></span><br></pre></td></tr></table></figure></p>
<h3 id="配置server主机"><a href="#配置server主机" class="headerlink" title="配置server主机"></a>配置server主机</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># hostnamectl set-hostname server</span></span><br></pre></td></tr></table></figure>
<p>重启网络：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># systemctl restart network</span></span><br><span class="line">[root@server ~]<span class="comment"># hostname</span></span><br><span class="line">server</span><br><span class="line">[root@server ~]<span class="comment"># uname -n</span></span><br><span class="line">server</span><br></pre></td></tr></table></figure></p>
<h2 id="2-配置hostname与IP映射"><a href="#2-配置hostname与IP映射" class="headerlink" title="2. 配置hostname与IP映射"></a>2. 配置hostname与IP映射</h2><p>配置client和server的hosts文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><br>添加如下内容：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">192.168.30.8 client</span><br><span class="line">192.168.30.9 server</span><br></pre></td></tr></table></figure></p>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>通过ping hostname来测试是否配置成功：</p>
<p>client ping server：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># ping server -c 3</span></span><br><span class="line">PING server (192.168.30.9) 56(84) bytes of data.</span><br><span class="line">64 bytes from server (192.168.30.9): icmp_seq=1 ttl=64 time=0.616 ms</span><br><span class="line">64 bytes from server (192.168.30.9): icmp_seq=2 ttl=64 time=0.384 ms</span><br><span class="line">64 bytes from server (192.168.30.9): icmp_seq=3 ttl=64 time=0.566 ms</span><br><span class="line"></span><br><span class="line">--- server ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.384/0.522/0.616/0.099 ms</span><br><span class="line">[root@client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>server ping client：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># ping client -c 3</span></span><br><span class="line">PING client (192.168.30.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from client (192.168.30.8): icmp_seq=1 ttl=64 time=0.502 ms</span><br><span class="line">64 bytes from client (192.168.30.8): icmp_seq=2 ttl=64 time=0.678 ms</span><br><span class="line">64 bytes from client (192.168.30.8): icmp_seq=3 ttl=64 time=0.323 ms</span><br><span class="line"></span><br><span class="line">--- client ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2003ms</span><br><span class="line">rtt min/avg/max/mdev = 0.323/0.501/0.678/0.144 ms</span><br><span class="line">[root@Server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>配置hostname与IP映射后，可以直接ping主机名而不用ping IP地址了。</p>
<h2 id="4-配置windows-hosts"><a href="#4-配置windows-hosts" class="headerlink" title="4. 配置windows hosts"></a>4. 配置windows hosts</h2><p>配置windows hosts，以便在windows下面能通过主机名进行访问。</p>
<p>编辑 C:\Windows\System32\drivers\etc\hosts文件，添加如下内容：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">192.168.30.8 client</span><br><span class="line">192.168.30.9 server</span><br></pre></td></tr></table></figure><br>保存</p>
<h2 id="5-windows测试"><a href="#5-windows测试" class="headerlink" title="5. windows测试"></a>5. windows测试</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;ping client -n 3</span><br><span class="line"></span><br><span class="line">正在 Ping client [192.168.30.8] 具有 32 字节的数据:</span><br><span class="line">来自 192.168.30.8 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.30.8 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.30.8 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">192.168.30.8 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 3，已接收 = 3，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Android手机管理平台搭建：STF和atxserver2</title>
    <url>/posts/app-testing-for-stf-platform/</url>
    <content><![CDATA[<p>STF（Smartphone Test Farm）是一个Android手机设备管理平台，通过在浏览器上远程调试智能手机、手表和其它设备，一般用于远程管理、调试、监控多个设备。atxserver2移动设备管理平台支持支持Android和iOS，它也使用到了STF。本文介绍如何使用两个工具来搭建Android手机管理平台。<br>目录<br>[toc]</p>
<a id="more"></a>
<p>很多APP测试项目的实时屏幕投屏都使用到了stf项目，比如<a href="https://github.com/AirtestProject/Airtest">airtest</a>，<a href="https://github.com/openatx/uiautomator2">uiautomator2</a>等。STF使用<a href="https://github.com/openstf/minicap">openstf/minicap</a>来捕获屏幕实现实时投屏，至于对设备的各种操作使用<a href="https://github.com/openstf/minitouch">openstf/minitouch</a>来实现。</p>
<h1 id="STF安装配置流程"><a href="#STF安装配置流程" class="headerlink" title="STF安装配置流程"></a>STF安装配置流程</h1><p>STF官网地址：<a href="https://openstf.io/">https://openstf.io/</a></p>
<p>STF github项目地址：<a href="https://github.com/openstf/stf">https://github.com/openstf/stf</a></p>
<p>下面介绍使用docker搭建STF手机管理平台方法。</p>
<p>本文搭建环境：</p>
<p>1、Win10+虚拟机Centos7.8</p>
<ul>
<li>windows环境安装Android sdk</li>
<li>虚拟机IP地址：192.168.30.8；windows IP：192.168.30.100</li>
<li>Centos关闭防火墙，命令：<code>systemctl stop firewalld</code></li>
<li>虚拟机安装docker</li>
<li>虚拟机和物理机可以相互ping通</li>
</ul>
<p>2、手机设备：真机（Android 10）2台</p>
<h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h2><p>如果没有安装docker，CentOS下的docker安装方法可参考：<a href="https://blog.csdn.net/u010698107/article/details/113820115">容器技术介绍：Docker简介及安装</a>。</p>
<p>docker安装完成后，拉取stf相关docker镜像：<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker pull openstf/stf:latest</span><br><span class="line">docker pull sorccu/adb:latest</span><br><span class="line">docker pull rethinkdb:latest</span><br><span class="line">docker pull openstf/ambassador:latest</span><br><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><br>查看镜像：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker images | grep -E &quot;stf|adb|rethinkdb&quot;</span></span><br><span class="line">rethinkdb            latest    3f37e5daf5bd   2 months ago    131MB</span><br><span class="line">openstf/ambassador   latest    938a816f078a   11 months ago   8.63MB</span><br><span class="line">openstf/stf          latest    91d0ab894aff   11 months ago   958MB</span><br><span class="line">sorccu/adb           latest    7123ee61b746   3 years ago     30.5MB</span><br></pre></td></tr></table></figure></p>
<h2 id="2-连接设备"><a href="#2-连接设备" class="headerlink" title="2. 连接设备"></a>2. 连接设备</h2><p>PC使用USB方式连接真机：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">CUYDU19626004019        device</span><br><span class="line">SNHVB20C18002195        device</span><br></pre></td></tr></table></figure><br>开启adb远程端口：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ adb nodaemon server -a -P 5037</span><br></pre></td></tr></table></figure></p>
<h2 id="3-启动stf相关容器服务"><a href="#3-启动stf相关容器服务" class="headerlink" title="3. 启动stf相关容器服务"></a>3. 启动stf相关容器服务</h2><p>启动rethinkdb数据库，主要用于存储连接设备信息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --restart=always -d --name rethinkdb --net host -v /srv/rethinkdb:/data rethinkdb rethinkdb --<span class="built_in">bind</span> all --cache-size 8192 --http-port 8090</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>--net</code>：网络模式选择主机模式</li>
<li><code>-v</code>：把容器中的目录挂载到宿主机的目录上</li>
</ul>
<p>启动adb service<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --restart=always -d --name=adbd --privileged --net=host -v /dev/bus/usb:/dev/bus/usb sorccu/adb:latest</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>--privileged</code>：使容器获取宿主机的root权限</li>
</ul>
<p>启动stf<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --privileged -d --name=stf --net=host openstf/stf:latest stf <span class="built_in">local</span> --public-ip 192.168.30.8 --adb-host 192.168.30.100 --adb-port 5037 --allow-remote</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>--allow-remote</code>：允许远程调试</li>
<li><code>--public-ip</code>：搭建STF服务的主机IP，用于远程访问，如果是本地访问可以不加。</li>
<li><code>--adb-host</code>：windows的IP地址</li>
<li><code>--adb-port</code>：adb暴露的端口号</li>
</ul>
<p>查看三个镜像启动情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS         PORTS      NAMES</span><br><span class="line">96cece4b9772   openstf/stf:latest   <span class="string">&quot;stf local --public-…&quot;</span>   6 minutes ago   Up 6 minutes              stf</span><br><span class="line">b8121a631095   sorccu/adb:latest    <span class="string">&quot;/sbin/tini -- adb -…&quot;</span>   7 hours ago     Up 7 hours                adbd</span><br><span class="line">48f6b9d15282   rethinkdb            <span class="string">&quot;rethinkdb --bind al…&quot;</span>   7 hours ago     Up 7 hours                rethinkdb</span><br></pre></td></tr></table></figure>
<h2 id="4-STF手机管理"><a href="#4-STF手机管理" class="headerlink" title="4. STF手机管理"></a>4. STF手机管理</h2><p>浏览器访问：<a href="http://192.168.190.128:7100/auth/mock/">http://192.168.20.9:7100/auth/mock/</a></p>
<p>填写账号和邮箱，可以填写任意用户名和邮箱，登录后就可以看到设备了，可以对设备进行各种操作。</p>
<p><img src="stf-android.png" width="60%" height="60%" /></p>
<p><img src="stf-device-control.jpg" width="60%" height="60%" /></p>
<h1 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h1><p>本文的搭建环境为物理机+虚拟机，STF一般用于管理多台设备，这种情况下需要使用master+slave模式，将多个slave的设备连接到master上，只需要在master安装STF环境，slave连接手机就可以了。</p>
<h1 id="STF常见问题"><a href="#STF常见问题" class="headerlink" title="STF常见问题"></a>STF常见问题</h1><h2 id="1-连接网易mumu模拟器"><a href="#1-连接网易mumu模拟器" class="headerlink" title="1. 连接网易mumu模拟器"></a>1. 连接网易mumu模拟器</h2><p>网易mumu模拟器可能连接不成功，安装一下STFService.apk，然后开启模拟器STFService的activity，并启动服务。</p>
<p>STF连接时会在android设备上自动安装STFService.apk，如果没有，可以手动安装。STFService.apk项目地址：<a href="https://github.com/openstf/STFService.apk">https://github.com/openstf/STFService.apk</a></p>
<p>apk下载：<a href="https://github.com/openstf/STFService.apk/releases/tag/v2.4.3">https://github.com/openstf/STFService.apk/releases/tag/v2.4.3</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adb -s 127.0.0.1:7555 uninstall jp.co.cyberagent.stf </span><br><span class="line">adb -s 127.0.0.1:7555 install STFService.apk</span><br><span class="line">adb -s 127.0.0.1:7555 shell am start -n jp.co.cyberagent.stf/.IdentityActivity</span><br><span class="line">adb -s 127.0.0.1:7555 shell am startservice -n jp.co.cyberagent.stf/.Service</span><br></pre></td></tr></table></figure>
<h2 id="2-开启adb远程端口失败"><a href="#2-开启adb远程端口失败" class="headerlink" title="2. 开启adb远程端口失败"></a>2. 开启adb远程端口失败</h2><p>开启adb远程端口时出现如下报错：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ adb nodaemon server -a -P 5037</span><br><span class="line">error: could not install *smartsocket* listener: cannot <span class="built_in">bind</span> to 0.0.0.0:5037: 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。 (10048)</span><br></pre></td></tr></table></figure>
<p>解决方法：杀掉占用端口的进程后重新开启</p>
<p>一般是adb进程占用，可先把adb杀掉，开启adb远程端口后重新开启adb。</p>
<p>查询5037端口占用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netstat -ano | findstr 5037 </span><br><span class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       34212</span><br></pre></td></tr></table></figure>
<p>找到对应进程（也可以在任务管理器中查看）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tasklist | findstr 34212</span><br><span class="line">adb.exe                      34212 Console                    1     10,692 K</span><br></pre></td></tr></table></figure><br>通过PID或者进程名杀死进程：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ taskkill -pid 34212 -f -t <span class="comment"># taskkill /pid 34212 /f /t</span></span><br><span class="line">$ taskkill -f -im adb.exe <span class="comment"># taskkill /f /im adb.exe</span></span><br></pre></td></tr></table></figure></p>
<h1 id="atxserver2配置"><a href="#atxserver2配置" class="headerlink" title="atxserver2配置"></a>atxserver2配置</h1><p>atxserver2移动设备管理平台支持Android和iOS</p>
<ul>
<li>项目地址：<a href="https://github.com/openatx/atxserver2">https://github.com/openatx/atxserver2</a></li>
</ul>
<p>下面介绍Android设备上线方法。</p>
<h2 id="1-docker部署"><a href="#1-docker部署" class="headerlink" title="1. docker部署"></a>1. docker部署</h2><p>Clone代码到本地（虚拟机上）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/openatx/atxserver2.git</span><br></pre></td></tr></table></figure>
<p>docker-compose部署：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> atxserver2</span><br><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure><br>如果报如下错误：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server atxserver2]<span class="comment"># docker-compose up</span></span><br><span class="line">Creating network <span class="string">&quot;atxserver2_default&quot;</span> with the default driver</span><br><span class="line">ERROR: Failed to Setup IP tables: Unable to <span class="built_in">enable</span> SKIP DNAT rule:  (iptables failed: iptables --<span class="built_in">wait</span> -t nat -I DOCKER -i br-9e93ad4ad714 -j RETURN: iptables: No chain/target/match by that name.</span><br><span class="line"> (<span class="built_in">exit</span> status 1))</span><br></pre></td></tr></table></figure><br>跟关闭防火墙有关，重启docker即可：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ service docker restart</span><br></pre></td></tr></table></figure></p>
<p>执行<code>docker-compose up</code>命令后会下载需要的镜像并启动服务<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Creating atxserver2_rethinkdb_1 ... <span class="keyword">done</span></span><br><span class="line">Creating atxserver2_web_1       ... <span class="keyword">done</span></span><br><span class="line">Attaching to atxserver2_rethinkdb_1, atxserver2_web_1</span><br><span class="line">rethinkdb_1  | Recursively removing directory /data/rethinkdb_data/tmp</span><br><span class="line">rethinkdb_1  | Initializing directory /data/rethinkdb_data</span><br><span class="line">rethinkdb_1  | Running rethinkdb 2.3.6~0jessie (GCC 4.9.2)...</span><br><span class="line">rethinkdb_1  | Running on Linux 3.10.0-1062.el7.x86_64 x86_64</span><br><span class="line">rethinkdb_1  | Loading data from directory /data/rethinkdb_data</span><br><span class="line">rethinkdb_1  | warn: Cache size does not leave much memory <span class="keyword">for</span> server and query overhead (available memory: 846 MB).</span><br><span class="line">rethinkdb_1  | warn: Cache size is very low and may impact performance.</span><br><span class="line">rethinkdb_1  | Listening <span class="keyword">for</span> intracluster connections on port 29015</span><br><span class="line">rethinkdb_1  | Listening <span class="keyword">for</span> client driver connections on port 28015</span><br><span class="line">rethinkdb_1  | Listening <span class="keyword">for</span> administrative HTTP connections on port 8080</span><br><span class="line">rethinkdb_1  | Listening on cluster addresses: 127.0.0.1, 172.20.0.2</span><br><span class="line">rethinkdb_1  | Listening on driver addresses: 127.0.0.1, 172.20.0.2</span><br><span class="line">rethinkdb_1  | Listening on http addresses: 127.0.0.1, 172.20.0.2</span><br><span class="line">rethinkdb_1  | Server ready, <span class="string">&quot;8969b4cc0c37_cpy&quot;</span> 2994c73a-01ff-41fb-bba2-6211e3915c04</span><br><span class="line">web_1        | RethinkDB is running</span><br><span class="line">rethinkdb_1  | A newer version of the RethinkDB server is available: 2.4.0. You can <span class="built_in">read</span> the changelog at &lt;https://github.com/rethinkdb/rethinkdb/releases&gt;.</span><br><span class="line">web_1        | Namespace(auth=<span class="string">&#x27;simple&#x27;</span>, auth_conf_file=None, debug=False, no_xheaders=False, port=4000)</span><br><span class="line">web_1        | [I 210724 11:45:58 main:70] listen on port http://172.20.0.3:4000</span><br></pre></td></tr></table></figure></p>
<p>也可以后台启动atxserver2：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p>
<p>浏览器访问：<a href="http://192.168.30.8:4000/">http://192.168.30.8:4000/</a> , 随便输入一个用户名，点击【Sign in】</p>
<p><img src="atxserver.jpg" width="60%" height="60%" /></p>
<h2 id="2-安装atxserver2-android-provider"><a href="#2-安装atxserver2-android-provider" class="headerlink" title="2. 安装atxserver2-android-provider"></a>2. 安装atxserver2-android-provider</h2><p>需要使用到项目 <a href="https://github.com/openatx/atxserver2-android-provider">atxserver2-android-provider</a></p>
<p>在windows上安装：</p>
<p>安装NodeJS 8，Python3.6+</p>
<p>将代码clone到本地：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/openatx/atxserver2-android-provider</span><br></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> atxserver2-android-provider</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>创建一个Python虚拟环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3 -m venv venv</span><br><span class="line">$ cd .&#x2F;venv&#x2F;Scripts&#x2F;</span><br><span class="line">$ activate</span><br></pre></td></tr></table></figure><br>回到atxserver2-android-provider目录下，安装相关Python库：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p>
<h2 id="3-启动atxserver2-android-provider"><a href="#3-启动atxserver2-android-provider" class="headerlink" title="3. 启动atxserver2-android-provider"></a>3. 启动atxserver2-android-provider</h2><p>指定atxserver2的地址为 <a href="http://192.168.30.8:4000">http://192.168.30.8:4000</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 main.py --server http://192.168.30.8:4000 --allow-remote</span><br><span class="line">[I 210724 21:52:18 main:299] Owner: None</span><br><span class="line">[I 210724 21:52:18 main:315] ProviderURL: http://192.168.30.100:3500</span><br><span class="line">&gt;&gt;&gt; app-uiautomator.apk verison: 2.3.3</span><br><span class="line">&gt;&gt;&gt; app-uiautomator-test.apk verison: 2.3.3</span><br><span class="line">[D 210724 21:52:20 fetching:121] download from mirror error, use origin <span class="built_in">source</span></span><br><span class="line">Downloading stf-binaries-0.3.0.zip 5070820 / -1 [Done]</span><br><span class="line">[I 210724 21:52:27 heartbeat:139] WS receive: &#123;<span class="string">&quot;success&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;6194480c-ec86-11eb-ba84-0242ac140003&quot;</span>&#125;</span><br><span class="line">[I 210724 21:52:29 asyncadb:121] adb connection is down, retry after 1.0s</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">[I 210724 21:52:35 asyncadb:125] adb-server started, version: 40</span><br><span class="line">[D 210724 21:52:35 main:234] DeviceEvent(present=True, serial=<span class="string">&#x27;CUYDU19626004019&#x27;</span>, status=<span class="string">&#x27;device&#x27;</span>)</span><br><span class="line">[I 210724 21:52:35 device:57] Init device: CUYDU19626004019</span><br><span class="line">[D 210724 21:52:35 device:85] [CUYDU19626004019] sdk: 29, abi: arm64-v8a, abis: [<span class="string">&#x27;arm64-v8a&#x27;</span>, <span class="string">&#x27;armeabi-v7a&#x27;</span>, <span class="string">&#x27;armeabi&#x27;</span>]</span><br><span class="line">[D 210724 21:52:35 device:132] [CUYDU19626004019] already pushed stf-binaries-0.3.0/node_modules/@devicefarmer/minicap-prebuilt/prebuilt/arm64-v8a/lib/android-29/minicap.so</span><br><span class="line">[D 210724 21:52:35 device:132] [CUYDU19626004019] already pushed stf-binaries-0.3.0/node_modules/@devicefarmer/minicap-prebuilt/prebuilt/arm64-v8a/bin/minicap</span><br><span class="line">[D 210724 21:52:35 device:113] [CUYDU19626004019] use atx-agent: atx-agent-armv7</span><br><span class="line">[D 210724 21:52:35 device:132] [CUYDU19626004019] already pushed atx-agent-armv7</span><br><span class="line">None : 4 1.0</span><br><span class="line">[D 210724 21:52:35 device:154] [CUYDU19626004019] install vendor/WhatsInput-1.0.apk</span><br></pre></td></tr></table></figure></p>
<p>启动时会自动给手机安装<code>minicap</code>, <code>minitouch</code>, <code>atx-agent</code>, <code>app-uiautomator-test.apk</code>, <code>whatsinput-apk</code></p>
<p><img src="atxserver2-android.jpg" width="60%" height="60%" /></p>
<p><img src="atxserver2-android-control.jpg" width="60%" height="60%" /></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>stf</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 | 你是你自己注意力的主人吗？</title>
    <url>/posts/reading-notes-for-the-attention-merchants/</url>
    <content><![CDATA[<p>《注意力经济：如何把大众的注意力变成生意》看了有一段时间了，这本书大致梳理了美国的商业广告发展轨迹，注意力商人是如何收割大众的注意力、利用注意力以及转售注意力的。</p>
<p>如果我们将注意力当作一种资源，或者一种货币，我们不可避免地要去“消费”它，总会在某些事物上集中注意力。与实体的资源不同的是，这种资源是无法存下来以备未来之需，它随时产生，随时消耗。那么问题就在于，我应该将注意力集中到什么上？</p>
<a id="more"></a>
<p>只要我们处于清醒状态下，都会产生以及花费注意力，比如工作，娱乐，社交，思考等。此时此刻，你可以思考一下，除了工作，你的注意力都花在什么地方呢，可能最先想到的就是手机了，现在手机都已经成为我们身体的一部分了，估计大部分人很难一天不使用手机或者其它电子产品。那么你用手机主要做什么呢？聊天，购物，网上冲浪还是学习呢？你是否会刷朋友圈上瘾？一连几个小时刷着短视频？这些都在消耗我们的注意力。</p>
<p>除了手机以外，你可能也注意到了，我们生活的周围广告无处不在，占领了我们越来越多的清醒时刻。它们对我们的生活方式产生了深远的影响，下面来看一下书中介绍的注意力行业的发展历程，它是怎样一步一步发展到现在的样子的。</p>
<h1 id="开创现代注意力行业"><a href="#开创现代注意力行业" class="headerlink" title="开创现代注意力行业"></a>开创现代注意力行业</h1><h2 id="报纸"><a href="#报纸" class="headerlink" title="报纸"></a>报纸</h2><p>1833 年 9 月 3 日《纽约太阳报》发行，售价只有 1 美分，相比其他报纸6美分的价格，这是大多民众都负担得起的价格，为了吸引注意力，报纸充满大量吸引民众注意力的内容。1834年年底，《纽约太阳报》的每日读者人数据说达到了5000人，使它成为纽约市首屈一指的报纸。如此低的价格是怎么赢利的呢？就是出售广告，也就是转售注意力的方式。竞争对手发现了他成功的秘密后，开始模仿，出现了大量类似报纸，它们使出浑身解数，不断突破底线，越是夸大其词、耸人听闻、肆无忌惮的另类内容，越能吸引注意力。（1871年，《纽约时报》将1652年为英雄诗篇“Irenodia Gratulatoria”发布的出版公告定为最初的广告）</p>
<h2 id="海报"><a href="#海报" class="headerlink" title="海报"></a>海报</h2><p>海报早在1796 年就已经出现，在19 世纪60 年代末，巴黎出现了一种全新的海报，由朱尔斯· 谢雷发明，这些海报有些高达7 英尺，以鲜艳色块为背景，画着嬉戏奔跑的半裸女郎。他的海报被视为工业化<strong>获取注意力的历程中第二座里程碑</strong>。当然，海报的泛滥引起了民众的抗议，也就是出现了“<strong>祛魅效应</strong>”，指曾经一度令人着迷的注意力获取方法开始失去魅力。受众感觉自己受到了不公待遇：承受信息过多，认为自己受到了愚弄、欺骗，或者感觉自己被人有意操控。反海报运动导致政府立法限制张贴广告的地方。在这种群情激愤的强烈抵制背后，往往是人们意识到对人类注意力的剥削从某种更深层次上来说是对个人的剥削。</p>
<h2 id="专利药物广告"><a href="#专利药物广告" class="headerlink" title="专利药物广告"></a>专利药物广告</h2><p>在19世纪90年代，美国出现了大量专利药物广告，他们运用令人惊讶的图画和唤起共鸣的广告词来吸引注意力，声称某种药物可治愈所有疼痛与残疾，具有神奇的疗效。比如克拉克·斯坦利介绍自己的蛇油对于“风湿、神经痛、坐骨神经痛、背部僵疼、腰疼、肌肉收缩、牙疼、扭伤、肿胀等”都具有良好的疗效。詹姆斯·W.基德医生在印第安纳州韦恩堡销售的“永生之药”（The Elixir of Life），居然承诺长生不老，可以将人从人生最大的恐惧中拯救出来。</p>
<p>这些医药广告的成功有赖于几种标志性的技巧，其中一个就是“秘方”。每种专利药物需要某种特质来让自己有别于其他所有声称具有类似疗效的药物，它拥有某种具有神秘色彩的元素，秘不可宣，并且无法完全解释原理。它能充分激发想象力，在人们的理性判断缺乏说服力时依然给予他们希望。</p>
<p>毫无例外的是，也引起了民众的抗议，最终美国食品药品监督管理局在1905年发布了《纯净食品和药品法》，规定“标签所载信息必须真实”，将“标签错误”认定为违法行为，同时要求标签列出任何“危险”成分。</p>
<h2 id="政治宣传"><a href="#政治宣传" class="headerlink" title="政治宣传"></a>政治宣传</h2><p>广告也应用于政治宣传中，1914 年8 月，英国常规军加上预备军仅有几万人，而当时德意志帝国军队拥有将近450 万人。英国的征兵宣传是<strong>第一次由国家主持的注意力获取活动，后世的史学家称之为“面向平民百姓进行的第一次系统性政治宣传运动”</strong>。英国专门成立了一个议会征兵委员会来进行“长期性‘信息推广’项目”。主要通过以下方式进行宣传：</p>
<ul>
<li><strong>报纸</strong>上刊登呼吁人民参军的消息</li>
<li>写着各种宣传标语的大量<strong>海报</strong>—巨大无比的图文广告，比如“你的国家需要你”。到1916 年，征兵机构估算已经印制了1250 万份海报。到“一战”结束时，海报印刷总量达到了5400 万份。</li>
<li>通过大规模<strong>游行和聚会</strong>的形式来开展所谓的“积极露天宣传活动”，乐队演奏的军乐让人们群情高涨。</li>
<li>放映征兵<strong>电影</strong>，政府组建了专业的“放映机动车队”，去往全国各地放映征兵电影，也就是汽车电影。</li>
<li>广播</li>
</ul>
<p>英国政府的全面宣传，招募了大量自愿参军的人，虽然也通过兵役法来满足对兵力的需求，但到1915年9月底，英国550万达到兵役年龄的人中大约一半已经自愿参军。</p>
<p>美国政府在 1917 年准备抛弃中立加入“一战”借鉴了英国的政治宣传技巧，当时美国大多数民众认为那是欧洲各国为了争夺欧洲领土而发起的战争，尤其是德裔或爱尔兰裔，认为自己的国家没有什么特别的原因要站在英国一边，也就是说民众没有战争意愿。</p>
<p>宣传机构“公共信息委员会”成立后的一年之中，建立了20 个国内分会，拥有15 万名职员。和英国类似，他们发布海报、演讲、宣传册和新闻稿。另外乡村集市、电影、课堂、邮局墙面、教堂、联合大厅等，几乎每个能面对公众的场所，都成了公共信息委员会传播消息的场地。此外，政府发起的“<strong>4分钟演讲</strong>”活动由普通公民在电影院中趁更换电影胶卷的空档发表为时4分钟的演讲来支持战争。另外，美国政府与电影业联手拍摄了美国第一批政治宣传片。支持战争的观点“通过巨大的数量、无数次的重复以及无所不在的普及性变得无比强大。”</p>
<p><strong>在生活的大部分领域，我们必须依靠他人才能表达事实，然后在制造出的种种替代“事实”中做出选择，无论它是对某种产品的评价，还是某种政治主张。如果这是事实，在我们争夺注意力的战争中，最为重要的是谁能夺得先机或者总是可以抢先一步</strong>。唯一真正不受影响的是那些学会了忽视或根本不去听替代“事实”的人。这也是为什么雅克· 埃吕尔主张，只有与世隔绝的人——乡村居民或都市穷人——才能真正对政治宣传免疫，<strong>而博览群书、坚持己见、认为自己不受政治宣传影响的知识分子实际上容易受到操纵。</strong></p>
<p>英国和美国政府能以如此惊人的速度创造出“参战意愿”，说明广告行业可以成为一种重要的战争手段。同样，苏联政府在十月革命后不久接管了俄国的广播电台，使莫斯科电台成为20 世纪30 年代世界最强大的电台。</p>
<p>说到国家的政治宣传，不得不提一下纳粹德国的极端宣传手段，希特勒其实涉猎过广告业，在维也纳打零工期间，为护发素、肥皂和“泰迪止汗药脚粉”等产品绘制广告海报。在《我的奋斗》一书中，希特勒问道：“政治宣传必须要吸引哪些人？科学知识分子还是受教育程度较低的大众？答案是：永远面向大众！”。希特勒凭直觉认识到了其他一些我们如何处理信息的基本事实：<strong>因为一切都可能被忽略，因此加深记忆需要不断重复灌输简单的想法</strong>，教授或说服远比煽动情感更难以实现。</p>
<p>1933年，在希特勒被任命为德国总理后不久，他就开始通过新成立的公众启蒙与宣传部，为征服德国民众的思想策划和建立各种机构，由他的忠实助手、当时年仅36 岁的保罗· 约瑟夫· 戈培尔博士实施。戈培尔在吸引到注意力这方面可以说超越了希特勒。</p>
<ul>
<li>开发国民收音机，普通工人也能轻松负担得起，到1942年德国的广播听众已经从450万人增加到超过了1600万户家庭。</li>
<li>通过无线电巡逻队确保人们在收听他们的广播节目，而不是其他电台。</li>
<li><p>像宗教仪式一样，无线电警卫把所有人赶进收听室收听广播。</p>
</li>
<li><p>德意志政治宣传部接管了节目编排的每一个细节，全权决定广播内容。比如插播希特勒或戈培尔的讲话</p>
</li>
</ul>
<h2 id="科学广告"><a href="#科学广告" class="headerlink" title="科学广告"></a>科学广告</h2><p>在20 世纪20 年代，出现了大批广告公司，当时的流行词“科学广告”表明了几种基本的广告方法：</p>
<ul>
<li><strong>需求策划</strong>：创造一种原本不存在的对产品的需求。</li>
<li><strong>品牌推广</strong>：给大众创造一种印象，让某些产品在类似产品中真正地脱颖而出，无论事实是否如此，从而为凯迪拉克、可口可乐等制造商创造客户忠诚度。</li>
<li><strong>运用“目标”广告</strong>：最常见的目标广告就是针对女性消费者。</li>
</ul>
<p>需求策划也被称为“理性广告”，将产品展示为针对某些现有问题的神奇解决方法。商家销售产品去解决那些人们几乎没有认识到的问题，也就是创造需求。策划需求的方式在于并不是去说明产品可以解决某个问题，而是说明问题的确存在。<strong>把潜意识里的焦虑感变成最为显著的问题，精准的抓住了人类潜意识中的恐惧</strong>。对于广告商来说，广告最有价值的作用就是塑造或创造原本并不存在的需求，没有人生来就想要 4K高清电视、想要爱马仕。</p>
<p>创造对新产品的需求是早期广告业的首要目标，第二个伟大目标就是<strong>商誉策划</strong>，也被称为<strong>品牌推广</strong>。之前人们信赖的是个别商人的声誉，在20世纪早期，一些公司开始为品牌打造关联概念，比如“凯迪拉克”，“可口可乐”等，他们创造客户对产品持久的忠诚，将产品与某种特质联系起来，<strong>不是强行植入想法，而是逐步渗透</strong>。</p>
<p>大多数生活用品是由家中的女主人来完成的，很多公司将破解女性消费者密码作为通往商业成功的通途。广告业的第三次大发展就是大力吸引女性消费者—通过后期所谓的<strong>“目标”广告</strong>。特别是对美容产品的广告，它推销的是观者本人全新的自我，比以前更好的自我。这是一种创新的间接产品推广手法，将产品与消费者心中对美丽容颜和诱人魅力最深层次的渴求关联起来。比如伍德伯里香皂广告以及无数其他广告似乎暗示着，只要用对了香皂、护理或乳液，一个人就能参加华丽的晚宴，身边围绕着倾慕者，甚至成为现实或比喻中的舞会之花。这些广告为这种微不足道的物品添加了色彩，增加了香味。它还会激发女性重拾对秀丽外表的渴求，唤起她们深植于心的希望。</p>
<h1 id="征服时空"><a href="#征服时空" class="headerlink" title="征服时空"></a>征服时空</h1><p>1930年以前的广告局限在报纸、杂志、广告牌等古老的媒体形式之中。还处于时间与空间的局限之下。借助新兴技术，广告业进入了家庭中。</p>
<h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>开始的电台广播是乌托邦的，其使命为了是提高人们的生活品质，而不是推销产品。</p>
<p>1929年，即将倒闭的白速得牙膏公司赞助全国广播公司播放一档系列节目，连续13周、每天晚上7点播放《阿莫斯与安迪》，每次节目结束时，播放一条广告：每天只用两次白速得，每年少见两次牙医。</p>
<p>虽然开始效果不是很好，但到1929年年底，《阿莫斯与安迪》已经风靡一时，成为广播历史上第一档真正的热门系列节目。影响了方方面面的时间表，酒店、饭店和电影院会为自己的客人播放这档节目。由于担心被取代，电影院在播放新闻短片和正片之前会宣传自己拥有可以在晚上 7 点钟播放《阿莫斯与安迪》的收音装置。赞助商不得不苦苦恳求才能买到（黄金时段的）播放时间，也就是说，广播公司可以将吸引到的注意力转卖，注意力已经成为一种产品，由广播公司开发并销售给出价最高的买家。</p>
<p>除了晚上 7 点的黄金时段，广播公司针对操持家务、有时无可事事的妇女成功地推出了日间肥皂剧。</p>
<h2 id="电视"><a href="#电视" class="headerlink" title="电视"></a>电视</h2><p>开始的电视可选择的频道很少，大部分人实际上大多数时候看的依然是相同的节目和广告，所以黄金时段的电视广告就非常抢手。全国广播公司总裁西尔维斯特 · 韦弗选择在清晨和深夜播出电视节目，占领了越来越多的公众清醒时刻。此外，韦弗提出了反复插播商业广告的想法，让观众在整整一分钟的时间里观看广告，这样可以向多个广告赞助商出售同一档节目的广告时间。</p>
<p>哥伦比亚广播公司总裁威廉 ·S. 佩利推出“64000美元大挑战”的智力问答节目，这种节目推崇的是一种令人兴奋而且类似于人人平等的理念：普普通通的人居然能深藏不露。利用悬念、失败的痛苦，贪婪吸引了大量观众。</p>
<h1 id="第三屏幕"><a href="#第三屏幕" class="headerlink" title="第三屏幕"></a>第三屏幕</h1><p>20 世纪 70 年代，广告也开始攻占第三屏幕—电脑。</p>
<h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p>第一封电子邮件由汤姆林森在1971年发出，在不到一年的时间里，电子邮件迅速蹿红，它给互联网赋予了社会及人类的目标，赋予了互联网灵魂。到了1973年，网络使用调研显示，75%的网络使用不是在重要的研究文件的传输上，而是在电子邮件上。加里·图尔克是历史上第一个垃圾邮件散播者，同样也被称为“网络暴民”的鼻祖。</p>
<h2 id="视频游戏"><a href="#视频游戏" class="headerlink" title="视频游戏"></a>视频游戏</h2><p>和其它产品的商业模式不同，游戏是让玩家去花钱赚取经验，而不是观看短剧或阅读一本书。另外，玩《太空侵略者》这样的游戏极具挑战性—几乎令人彻底失望。早期的《太空侵略者》吸引游戏玩家的不仅仅是叙事体游戏中那令人眼花的图像以及音效，还有人类试图与机器匹敌的渴望，希望在一时之间能在个人能力与追捕自己的幽灵和太空怪物之间实现完美的平衡。最好的游戏能保持刺激感，甚或引起“<strong>心流感应”</strong>，使人们感到“强大、警觉、轻松控制、忘我并且达到能力的巅峰”。</p>
<p>截至 1980 年，仅美国市场，电子游戏的年度支出就达到了 112 亿美元，产生了 28 亿美元的收入；到了 20 世纪 80 年代，收入约 50 亿美元，一度超过电影行业的总收入。</p>
<h1 id="成名的重要性"><a href="#成名的重要性" class="headerlink" title="成名的重要性"></a>成名的重要性</h1><h2 id="名人产业链"><a href="#名人产业链" class="headerlink" title="名人产业链"></a>名人产业链</h2><p>”人们对大众并不感兴趣，倒是很关注那些活跃着的个人“，我们很关注一些公众人物，比如政治家，商业领袖，将军以及艺术、娱乐、体育领域的显赫人物。《时代周刊》通过讲名人故事的形式吸引观众的注意力，据统计，蒋介石在《时代周刊》封面上出现了10 次，毛主席先后12次登上《时代周刊》封面。</p>
<p>到 21 世纪前 10 年，《人物》的满页广告费已经高达 35 万美元。《人物》杂志的封面制作是否吸引大家眼球的关键，也是报摊销售额的决定性因素，主要有以下规则：</p>
<ul>
<li>封面上出现的人物“要有 80% 的美国民众认识”</li>
<li>一定要有读者想了解的人物信息</li>
<li>通过社会层级来决定，几乎充满达尔文进化论式的残忍：<ul>
<li>年轻人好过老年人。</li>
<li>美貌的要好过丑陋的。</li>
<li>富有的要好过贫穷的。</li>
<li>电视要好过音乐。</li>
<li>音乐要好过电影。</li>
<li>电影要好过体育。</li>
<li>任何其他领域都要好过政治。</li>
</ul>
</li>
</ul>
<p>名人的影响力是很大的，你可能认为自己对名人并感兴趣，也很可能通过一些潜移默化的新闻形式而认识了几百个陌生人，他们就是名人，甚至你可能还会详述他们的基本情况。同样地，你也会知道一个根本没游览过的城市的名字。我们通过名字和长相认识了数以千计的陌生人，并在记忆宫殿中描述个人信息和关系史。</p>
<p>和名人见面也会产生“追星族”才有的身体冲动，商人一直在想办法利用名人的影响力，（表面上）愿意把他们当偶像崇拜—这就是一种产业，进而把他们的能力当作赚钱手段来引起我们全部的注意。明星通过提高影响力来吸引观众接受代言的平庸“产品”，他们就是民众与产品之间的中介。</p>
<p>此外，你可能已经注意到了，名人通常会谈很多私人问题—他们的生活、家庭。他们还会去谈一些甚至几年前没有提过的事情。营造了一种“亲近的假象”，让观众产生一种“圈内朋友”的感觉。</p>
<p>在这种<strong>“名人化”</strong>的环境下，很多人无故渴望成名。如果从前名人被定义为英雄、半神人、国王、圣人，那么之后就是荧幕上的人和运动员，而到在20世纪90年代，任何一个人都可能成为名人。因此，出名成为一个值得大众追求的合理的目标。MTV推出了真人秀，带着“名人”光环的普通人开始大量涌现。真人秀与我们的生活更加接近，它颠覆了名人成名的过程，开辟了通过展示平凡来获得注意力的道路，这完全改变了注意力商人的商业模式。</p>
<p>“真人秀节目对于黄金时段观众的吸引力与一部好的戏剧或喜剧产生的吸引力同样有效。但是有时候成本能减少一半。”美国的卡戴姗家族就是通过真人秀获取了大量关注，这一家人在2010年总计收入6500万美元，而卡戴珊一个人的收入在2014年就达到2800万美元，2015年达到5250百万美元。</p>
<p>实际上，引起我们大量关注的真人秀节目，既是真实的又是不真实的。制作方为了场景而歪曲事实，计划着用最少的投入获取最多的关注。</p>
<p>随着直播技术的发展，催生了大量网红，某些网红迅速成名，通过名气来推销商品，可以说有流量的地方就有广告。</p>
<h1 id="内容王国"><a href="#内容王国" class="headerlink" title="内容王国"></a>内容王国</h1><p>1996年1月3日，比尔·盖茨在微软官网上发表了一篇文章，标题为“内容为王”，他认为（互联网中）只有内容能真正地带来真金白银，就像电视广播的内容一样。半个世纪前开始的电视革命催生出了一大批行业……但是笑到最后的赢家往往是那些能利用媒体传播信息和娱乐的人，并且网络内容必须够好才能成功。</p>
<p>虽然微软为了抢占由“内容聚合”创造的新兴市场的绝大部分尝试最初都以失败收场，唯一成功的投资是 Slate 杂志，证明了比尔·盖茨提出的这一概念的可行性。微软将融合电视和互联网想得过于简单，仅把互联网看作一个可以播放内容的新渠道。</p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>在 20 世纪 90 年代末，专注搜索业务的新公司Google出现了，仅在白色的页面上简简单单地放了一个搜索框，相比于竞争对手满屏的广告，它不仅设计优雅而且搜索效率高。</p>
<p>那么Google是如何盈利的呢？它们在 2000 年推出了Google广告系统的雏形，也就是<strong>关键词竞价广告</strong>技术，这个广告系统彻底推翻了人们头脑中对于注意力转售的认识。当输入关键词就会根据搜索结果出现特定的广告文本，使广告更具有针对性。百度的竞价广告就是这种理念。绝妙之处在于，用户总是在最需要购买某件物品的时刻获悉广告。Google 的这些创新想法带来了丰厚的收入，很快成为世界历史上最赚钱的注意力商人。</p>
<h2 id="博客：普通人的狂欢"><a href="#博客：普通人的狂欢" class="headerlink" title="博客：普通人的狂欢"></a>博客：普通人的狂欢</h2><p>由于搜索的流行，人们更容易了解新的内容，开始出现了博客这种形式，出现的新博主是现任或前任记者，他们非常擅长写作，技术人员也开通了博客，哲学家、经济学家、科学家和其他专家也走出象牙塔。</p>
<p>更吸引人的是任何人都可以开博客，并且宣传了“<strong>共享</strong>”的理念，比如维基百科、YouTube都是基于这样的理念发展起来的，内容通过用户自己来生成，消除了言论市场的障碍，虽然言论的质量可能是良莠不齐的。</p>
<h2 id="传染性媒体"><a href="#传染性媒体" class="headerlink" title="传染性媒体"></a>传染性媒体</h2><p>”传染性媒体是一种你立刻就想和你所有朋友分享的媒介。这不仅需要你享受使用媒介的过程，而且也能享受传递它的社会过程。”</p>
<p>一个传染性媒体项目应该代表着一个创意最简单的形式。花哨的设计或多余的内容都会使媒体的传染力减弱。任何无关紧要的东西会构成一个‘有效载荷’，在其传播的过程中，有效载荷越大，整个项目的传播就越慢。</p>
<p>传染性媒体具有三个基本元素：低的成本、最大的流量和不可抗拒的内容。对于不可抗拒的内容，《赫芬顿邮报》开创了点击诱饵：<strong>为文章定一个哗众取宠的标题，再配上煽动性强的图片</strong>。这些内容似乎控制了大众的头脑，让他们的手几乎不由自主地点击鼠标，打开网站上的任何内容。这种手段现在也很常见，自媒体为了吸人眼球，取各种离谱的标题，也就是标题党。</p>
<p>标题对内容的传播非常重要，“好”的标题可以激发点击和分享的欲望，比如“据报道，罕见疗法治愈艾滋病人”，“中国最厉害的20个最美景点，知道一个算你牛!”“万万没想到，………….”“震惊!  ……….”，这种标题能触发某一种情感，在更好的情况下，能同时激发多种情感。</p>
<p>除了标题和内容，某些网站、应用监听用户的个人数据，也就是精准定位与跟踪。社交媒体过度分享已经直接降低了个人隐私的标准。有些商业组织已经开始为每个人（无论男女老幼）编辑一份无比详细的个人档案。</p>
<p>这就是如今的生活：<strong>随着手指飞快地触屏，持续不断地无前提推理和自我参照的垃圾在我们的眼前掠过，充斥我们的大脑。</strong>当然也有例外，比如维基百科，仍然秉承传统互联网精神的Reddit等。</p>
<p>还有一种吸引注意力的形式是“软文”或“原生广告”，软文看起来不像广告，可能突破更多用户的防线。2015 年左右，软文已经随处可见。</p>
<h2 id="脸谱网"><a href="#脸谱网" class="headerlink" title="脸谱网"></a>脸谱网</h2><p>扎克伯格有一种细致入微的社交判断力，能极为敏锐地判断其他人的弱点与需求。他持有心理学与计算机科学双学位。后来，他曾说：“我一直对如何把这两个领域整合起来感到好奇。”</p>
<p>21 世纪初，出现了很多社交网站，脸谱网属于后起之秀，但2004 年脸谱网成立时在哈佛大学引起了轰动，它跟其它社交网站技术上没什么不同，区别在于对自身的定位上：</p>
<ul>
<li>它出身在校园，脸谱网重新创造了校园中以及各个学校之间现有的以及感情维系相对较强的校园社交现实，这是已经实际存在的人际关系。</li>
<li>脸谱网不仅实际上提供了新的服务，同时加强了现有社会现实的展现。所谓的社交网络已经存在，脸谱网只是让这种社交网络可见，分地域加以显示，并且更容易记录。</li>
</ul>
<p>我们使用的微信、QQ与脸谱网类似。<strong>自我品牌</strong>的概念在使用脸谱网的一代中流行开来，使用脸谱网来宣布个人生活中的重要发展，宣布一个人生命中的重要事件，比如说新恋情、生子，甚至某人去世。它被广泛用于最为基本的社交展示，无论是展示子女还是物品。它发挥了一种“八卦、发泄好奇心以及闲聊”的替代品。</p>
<p>同时，越来越多的人开始抱怨使用脸谱网让自己感到不开心。某些研究将抑郁症状与使用脸谱网联系了起来，其中一项研究发现，“与浏览互联网相比，<strong>人们认为脸谱网无论从意义上还是实用性上都较差，更多是浪费时间，这会导致情绪低迷</strong>”。另一项研究令人想起马尔库塞的评论，在工业化的西方世界中，人们“让残缺感进入了自己的自由与满足之中”。在脸谱网上，所有幸福的家庭都一样；其他家庭虽然各有各的不幸，但是从来不会在脸谱网上出现。</p>
<h2 id="推特"><a href="#推特" class="headerlink" title="推特"></a>推特</h2><p>推特到来的时候正值人们对全功能博客的激情开始减退之时，发推文进化成为简化版博客（微博），推特更加简洁，每天发一句话就足以保持对关注者的吸引，名人还可以靠自己的雇员来编写这句话。推特激发了小众名人的发展，使衡量其名望成为可能，然后推波助澜。比如关注粉丝数、点赞转发数等。这给大众抛出了一种幻想：<strong>人人都能成名</strong>。</p>
<p>名望或者对名望的追求，就好像传染病一样，吞噬着越来越多的人，在他们的心中留下慢性注意力痴迷崇拜的伤疤。具有讽刺意味的是，尽管名望带来的传统回报少之又少，但是付出的代价更多。</p>
<h2 id="网剧"><a href="#网剧" class="headerlink" title="网剧"></a>网剧</h2><p>《纸牌屋》可以说是第一部在网络上播放的专题正剧，奈飞公司采取了大胆又看似鲁莽的决定：放弃了所有的广告。他们重新发现了人类注意力所丢失的宝物，不是被网络和有线电视所掠夺走的碎片化的、转瞬即逝的那种注意力，而是<strong>更深层的、持续性的注意力</strong>。</p>
<p>2013 年，《纸牌屋》首次开播，奈飞公司将该剧 13 集全部发行，人们可以一口气连续好几个小时地观看，奈飞公司报道称在该剧发行的那个周末，有成千上万的观众将它一口气看完。沉浸在多部或多季连续剧当中，是时下一种新的、非常受欢迎的逃避方式。</p>
<h1 id="谁是未来的注意力掌控者？"><a href="#谁是未来的注意力掌控者？" class="headerlink" title="谁是未来的注意力掌控者？"></a>谁是未来的注意力掌控者？</h1><p>2015 年 6 月 1 日苹果公司首席执行官蒂姆 · 库克在电子隐私信息中心的年会晚宴上发表了一篇演讲。库克说，一些最著名、最为成功的公司通过欺骗为透露自己的个人信息而沾沾自喜的顾客而成就自己的一番事业，他们正贪婪地利用从你身上了解到的一切并设法用它赚钱。他们将你透露的电子邮箱和搜索历史，甚至家庭成员的照片都被廉价转卖，最终用于谁都不知道的广告目的。</p>
<p>苹果公司已经注意到，由于广告的失控，移动网络正在消耗流量套餐和电池寿命，更不用说所有本该属于其用户的注意力，另外他们的隐私也遭到侵犯。随着人们对隐私越来越重视，出现了广告屏蔽软件，阻止广告加载，阻止应用跟踪你的浏览信息。苹果公司通过保护隐私获得了用户的青睐，由此可见人们对个人隐私的重视。</p>
<p>为了用户的利益占据道德制高点。去年苹果以环保为由，不提供充电配件，大家仔细思考一下，这真的环保吗？小米也效仿，不提供充电器，其实他们都是打着环保的旗号宣传公司或者产品罢了。</p>
<p>在注意力的收割上，中国的一个创新应用走在了美国前面，那就是<strong>短视频</strong>，就我的观察来说，各个年龄段都玩短视频，很多人上瘾，几个小时出不来，刷短视频已经成为习惯了。</p>
<p>另外，电子产品已经成为我们身体的一部分，人们越来越关注自己的健康，可穿戴性设备被越来越多的人所接受。未来的广告必须做到可以悄然接近人身那般自然，为每个人量身订做广告服务。</p>
<h1 id="广告与欺诈的界限"><a href="#广告与欺诈的界限" class="headerlink" title="广告与欺诈的界限"></a>广告与欺诈的界限</h1><p><strong>随大流有时是正确的，但往往是错误的。而且我们仍然需要通过科学来了解如何在两者之间获得平衡。</strong>某些对广告业的批评者认为，广告凭借误导性和欺骗性的说法，为相对来说无用的产品制造需求，这种做法扭曲了经济并最终削弱国家的力量。</p>
<p>广告在经济中到底发挥了什么作用呢？消费者在实际生活中首先如何找到产品？也就是“发现”有什么产品可选，在如今信息发达的社会中，我们也不可能了解所有事情，你不知道这个商品，就谈不上去购买了，因此<strong>获取注意力与信息对于市场经济的正常运行或者实际上对于任何竞争过程来说都至关重要</strong>，广告就像一种能够进入人类大脑的技术，可以发挥极为重要的作用，在理想情况下它以客观的形式告知我们需要了解自己的抉择，让市场以及任何一切依赖于知情选择的事物能更好地运行。</p>
<p>问题在于，大多数公司关心的是如何最大化利润，而不是市场效率。广告业最为恶劣的是<strong>隐瞒某些重要事实</strong>（例如吸烟可以导致癌症），<strong>展现完全虚假或具有欺骗性质的信息</strong>，借此来攻击并扭曲倡导自由选择的市场机制。当广告迷惑、误导或愚弄客户时，它并没有促进市场过程或者说任何以知情选择为前提的过程，反而损害了市场进程。</p>
<p>就商业公司而言，最有效的广告不是让你做出选择，而是让你无可选择——比如可口可乐就是可乐，哈雷 · 戴维森是你会考虑的唯一的摩托车。因此，<strong>真正的品牌广告并不是去说服，而是去转化。在广告最为成功的时代，它能将产品塑造成为一种信仰，忠诚者不会仅仅受到信息的影响</strong>；苹果、爱马仕或保时捷等等这些公司成功地获得了这种对竞争的免疫力，至少在他们忠实的信仰者之间的确如此。这些公司为自己的拥护者所提供的不仅仅是一种好产品（尽管往往的确如此），而是一些更深层次、更给人带来满足感的东西——随着放弃选择权而来的一种意义感。</p>
<p>如果广告不带有欺骗性，就可以给用户带来有用的信息，可以有效地让特定的买家和卖家建立联系。要解决广告的欺诈性，需要政府制定相关法律，比如中国在2019颁布的新广告法，禁止使用极限用语，禁止欺诈、虚假广告等。国家立法禁止是一方面，作为个人更应该保持清醒的头脑。</p>
<h1 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h1><p>我们生活在信息时代，每天都产生大量的信息，它们当中很多噪音。广告无处不在，几乎占领了我们的每个清醒时刻。商人为了盈利，为了让别人知道他的产品，必定会进行宣传，由于它们的宣传，我们才能知道它们提供的服务，才有选择的自由。并且很多网络服务是免费的，但请你不要认为自己是顾客，是上帝，其实你是他们的产品，比如免费提供视频作品，但有广告，你只能买视频会员来跳过这些广告，他们通过免费的内容吸引你的注意力，然后转卖你的注意力。其实这也是我们的选择，获得便利的同时，必然会失去某些东西。我们大多数人被动地让自己暴露在随地、随时的注意力商业的炒作之下。</p>
<p>仔细想一下，你是否养成了下面这些习惯：</p>
<ul>
<li>刷朋友圈，刷微博，刷短视频</li>
<li>逛购物网站</li>
<li>看新闻，点击一些吸引人的标题</li>
<li>刷电视剧</li>
</ul>
<p>我们醒着的时间很多都浪费在碎片式的认知上，总是向不断被打扰妥协。花费注意力并不是不好的事情，比如专注你喜欢的事情，或者看一场电影或者电视剧，虽然对有些人来说也是浪费时间，但至少收获了娱乐，得到了一些情感体验。但是某些欺骗性的广告、无意义的分享无法带来幸福感，就我个人而言，刷朋友圈，刷短视频，是感觉不到快乐的，可能当时很上瘾，但之后会感觉到时间的浪费和随之产生的失落感。</p>
<p>在纷杂的信息包围之下，我们该怎么办呢？不可能摆脱的，我们已经离不开它了。最重要的是要保持清醒，具有独立思考的能力，怎么才能具备这个能力呢？个人经验是多阅读，多思考，至少清楚自己在做什么，是被动选择，还是自由的选择。“<strong>如果我们渴望未来的生活摆脱宣传的奴役，不再被消费者和名人文化麻痹，我们首先必须要认识到我们自身注意力的宝贵，并且下定决心，不再像我们之前那样，经常廉价又轻率地分散注意力。接下来我们必须行动，无论是个人还是集体，让我们做注意力的主人，重获生活中每一次体验的所有权。</strong>”</p>
<p>如果你看到了这里，那么恭喜你，我也消耗了你的注意力，如果你感到愉悦，再次恭喜你，没有浪费这几分钟。如果对内容失望，只能表示抱歉，可以取消关注，这样我就很难出现在你的视野之内了。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SCP或Rsync实现Linux主机之间文件、目录的复制</title>
    <url>/posts/linux-copying-files-using-scp-or-rsync/</url>
    <content><![CDATA[<p>我们知道Linux本机的文件拷贝可以使用<code>cp</code>命令，它不能在Linux主机之间拷贝数据。本文介绍SCP和Rsync这两种实现Linux主机间的数据拷贝工具。</p>
<a id="more"></a>
<h1 id="SCP-和-Rsync区别"><a href="#SCP-和-Rsync区别" class="headerlink" title="SCP 和 Rsync区别"></a>SCP 和 Rsync区别</h1><p>SCP(secure copy) 是基于ssh协议的安全拷贝，用于将文件/目录安全地从本地主机传输到远程主机。</p>
<p>Rsync (remote synchronize)也可以实现同步本地主机和远程主机的文件/目录，和SCP不同之处在于，首次复制时，Rsync会复制整个目录，在后面的复制中，不会复制相同的内容，只对差异文件做更新，scp是把所有文件都复制过去。Rsync广泛用于备份和镜像。</p>
<p>下面介绍它们的简单使用方法。</p>
<h1 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h1><p>一般情况下Linux服务器都有scp命令，如果没有，可通过如下方式安装：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install openssh-clients <span class="comment"># centos</span></span><br><span class="line">apt-get install openssh-client <span class="comment"># Ubuntu</span></span><br></pre></td></tr></table></figure></p>
<h2 id="复制文件-目录到远程主机"><a href="#复制文件-目录到远程主机" class="headerlink" title="复制文件/目录到远程主机"></a>复制文件/目录到远程主机</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp source_file_name user@destination_host:destination_folder <span class="comment"># 复制文件</span></span><br><span class="line">scp -r source_directory user@destination_host:destination_folder <span class="comment"># 复制目录</span></span><br></pre></td></tr></table></figure>
<p>案例1：复制文件到远程主机<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># scp text.txt root@192.168.20.40:/root</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.20.40 (192.168.20.40)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:tS6tueeKp9vBLDvxgsxIgCCaGMQWs9+5E167qz2ZB9c.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:82:04:10:14:57:52:0a:05:d9:9b:ae:6e:3f:3f:68:98.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.20.40<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.20.40&#x27;</span>s password: </span><br><span class="line">test.txt                                                                                                                     100%   12     6.0KB/s   00:00    </span><br><span class="line">[root@Client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h2 id="从远程主机复制文件-目录"><a href="#从远程主机复制文件-目录" class="headerlink" title="从远程主机复制文件/目录"></a>从远程主机复制文件/目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp user@source_host:source_file_name local_destination_folder <span class="comment"># 复制文件</span></span><br><span class="line">scp -r user@source_host:source_file_name local_destination_folder <span class="comment"># 复制目录</span></span><br></pre></td></tr></table></figure>
<p>案例2：从远程主机复制文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># scp root@192.168.20.40:/root/test40.txt /root</span></span><br><span class="line">root@192.168.20.40<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">test40.txt                                                                                                                   100%   12     4.2KB/s   00:00    </span></span><br><span class="line"><span class="string">[root@Client ~]# ll | grep test40.txt</span></span><br><span class="line"><span class="string">-rw-r--r--   1 root    root          12 7月   6 09:41 test40.txt</span></span><br><span class="line"><span class="string">[root@Client ~]# </span></span><br></pre></td></tr></table></figure></p>
<p><code>-r</code>参数用于递归的复制整个目录，SCP更多的参数使用方法可参考：<a href="https://manned.org/scp.1">https://manned.org/scp.1</a></p>
<h2 id="本地文件-目录复制"><a href="#本地文件-目录复制" class="headerlink" title="本地文件/目录复制"></a>本地文件/目录复制</h2><p>如果不指定远程主机地址，可以实现和<code>cp</code>目录一样的功能：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp source_file destination_folder <span class="comment"># 复制文件</span></span><br><span class="line">scp -r source_directory destination_folder <span class="comment"># 复制目录</span></span><br></pre></td></tr></table></figure><br>案例3：本地文件复制<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># mkdir test</span></span><br><span class="line">[root@Client ~]<span class="comment"># scp test40.txt /root/test</span></span><br><span class="line">[root@Client ~]<span class="comment"># ll /root/test/</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 root root 12 7月   6 09:49 test40.txt</span><br><span class="line">[root@Client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h1 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h1><p>安装方法：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install rsync      <span class="comment"># centos</span></span><br><span class="line">apt-get install rsync  <span class="comment"># Ubuntu</span></span><br></pre></td></tr></table></figure></p>
<h2 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h2><p>Rsync可用的选项参数很多，下面介绍几个常用参数，更多参数使用方法可参考<a href="https://manned.org/rsync.1">https://manned.org/rsync.1</a> ，或者使用<code>rsync -h</code>、<code>man rsync</code>命令查看文档说明。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>-t</td>
<td>将源文件的修改时间(modify time)同步到目标机器</td>
</tr>
<tr>
<td>-I</td>
<td>—ignore-times，不跳过时间和大小都匹配的文件，也就是不检查是否有改动，直接复制</td>
</tr>
<tr>
<td>-r</td>
<td>递归，用于目录复制</td>
</tr>
<tr>
<td>-a</td>
<td>递归同步，还可以同步元信息（比如修改时间、权限等）</td>
</tr>
<tr>
<td>-v</td>
<td>打印复制过程</td>
</tr>
<tr>
<td>-l</td>
<td>拷贝符号连接</td>
</tr>
<tr>
<td>—delete</td>
<td>删除目标目录中多余的文件，也就是保持两个目录相同，使得目标目录成为源目录的镜像副本</td>
</tr>
</tbody>
</table>
</div>
<h2 id="复制文件-目录到远程主机-1"><a href="#复制文件-目录到远程主机-1" class="headerlink" title="复制文件/目录到远程主机"></a>复制文件/目录到远程主机</h2><p>如果复制的目标目录不存在，会自动创建，语法格式和SCP一样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync source_file_name&#x2F; user@destination_host:destination_folder # 复制文件</span><br><span class="line">rsync -r source_file_name&#x2F; user@destination_host:destination_folder # 复制目录</span><br></pre></td></tr></table></figure></p>
<p>案例1：复制文件、目录到远程主机<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># rsync test.txt root@192.168.20.40:/root</span></span><br><span class="line">root@192.168.20.40<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">[root@Client ~]# </span></span><br><span class="line"><span class="string">[root@Client ~]# rsync -rvl test/ root@192.168.20.40:/root/test222</span></span><br><span class="line"><span class="string">root@192.168.20.40&#x27;</span>s password: </span><br><span class="line">sending incremental file list</span><br><span class="line">created directory /root/test222</span><br><span class="line">./</span><br><span class="line">test2.txt</span><br><span class="line">test40.txt</span><br><span class="line"></span><br><span class="line">sent 187 bytes  received 93 bytes  62.22 bytes/sec</span><br><span class="line">total size is 12  speedup is 0.04</span><br></pre></td></tr></table></figure></p>
<h2 id="从远程主机复制文件-目录-1"><a href="#从远程主机复制文件-目录-1" class="headerlink" title="从远程主机复制文件/目录"></a>从远程主机复制文件/目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rsync user@source_host:source_file_name local_destination_folder <span class="comment"># 复制文件</span></span><br><span class="line">rsync -r user@source_host:source_file_name local_destination_folder <span class="comment"># 复制目录</span></span><br></pre></td></tr></table></figure>
<p>案例1：复制远程主机文件到本机<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># rsync root@192.168.20.40:/root/test40.txt /root</span></span><br><span class="line">root@192.168.20.30<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">[root@Client ~]# ll test40.txt</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root root 12 7月   8 11:11 test40.txt</span></span><br><span class="line"><span class="string">[root@Client ~]# </span></span><br></pre></td></tr></table></figure></p>
<h2 id="其它用法"><a href="#其它用法" class="headerlink" title="其它用法"></a>其它用法</h2><h3 id="复制指定类型的文件"><a href="#复制指定类型的文件" class="headerlink" title="复制指定类型的文件"></a>复制指定类型的文件</h3><p>仅复制py文件：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rsync *.py user@destination_host:destination_folder</span><br></pre></td></tr></table></figure></p>
<h3 id="复制多个文件"><a href="#复制多个文件" class="headerlink" title="复制多个文件"></a>复制多个文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># rsync test1.txt test2.txt test&#123;5,6,7&#125;.txt root@192.168.20.40:/root</span></span><br><span class="line">root@192.168.20.40<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">[root@Client ~]# </span></span><br></pre></td></tr></table></figure>
<p>远程主机上查看是否复制成功<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># ls | grep -E &quot;test[0-9]&#123;1&#125;.txt&quot;</span></span><br><span class="line">test1.txt</span><br><span class="line">test2.txt</span><br><span class="line">test5.txt</span><br><span class="line">test6.txt</span><br><span class="line">test7.txt</span><br><span class="line">[root@Server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>从远程主机复制多个文件（先删除本地文件）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># rsync root@192.168.20.40:/root/test1.txt :test2.txt root@192.168.20.40:test&#123;5,6,7&#125;.txt /root</span></span><br><span class="line">root@192.168.20.40<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">[root@Client ~]# ls | grep -E &quot;test[0-9]&#123;1&#125;.txt&quot;</span></span><br><span class="line"><span class="string">test1.txt</span></span><br><span class="line"><span class="string">test2.txt</span></span><br><span class="line"><span class="string">test5.txt</span></span><br><span class="line"><span class="string">test6.txt</span></span><br><span class="line"><span class="string">test7.txt</span></span><br></pre></td></tr></table></figure></p>
<h2 id="本地文件-目录复制-1"><a href="#本地文件-目录复制-1" class="headerlink" title="本地文件/目录复制"></a>本地文件/目录复制</h2><p>和scp命令一样，rsync也可以用于在本机进行文件复制。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rsync source_file destination_folder <span class="comment"># 复制文件</span></span><br><span class="line">rsync -r source_directory destination_folder <span class="comment"># 复制目录</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>rsync工具只对差异文件做更新的特性，在多个服务器之间同步文件非常有用，通常跳过写一个自动化脚本来实现批量同步，但是，你也许已经发现了，在执行同步命令时，需要输入目标主机的密码，在主机很多的情况下就不方便了。</p>
<p>一种解决方案是可以使用expect实现自动化交互，另一种方法是配置服务器之间ssh免密登录，因为scp和rsync默认使用ssh协议。ssh免密登录配置方法可参考<a href="https://blog.csdn.net/u010698107/article/details/119079821">配置多台服务器之间ssh免密登录</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>配置多台服务器之间ssh免密登录</title>
    <url>/posts/linux-password-less-ssh-login-for-multiple-remote-servers/</url>
    <content><![CDATA[<p>使用scp 或者 rsync命令在多台Linux服务器之间同步文件时需要输入密码，除了使用expect实现自动化交互以外，还有一种方法就是配置服务器之间ssh免密登录，本文记录一下具体配置过程。</p>
<a id="more"></a>
<h2 id="1-创建-ssh目录"><a href="#1-创建-ssh目录" class="headerlink" title="1. 创建.ssh目录"></a>1. 创建.ssh目录</h2><p>假定有3台Linux主机，分别为A，B，C</p>
<p>在所有主机上创建ssh目录并赋予权限<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /root/.ssh </span><br><span class="line">chmod 700 /root/.ssh</span><br></pre></td></tr></table></figure></p>
<h2 id="2-生成公钥与私钥"><a href="#2-生成公钥与私钥" class="headerlink" title="2. 生成公钥与私钥"></a>2. 生成公钥与私钥</h2><p>所有主机生成公钥与私钥，执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~  <span class="comment"># 进⼊入用户目录</span></span><br><span class="line">$ ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span>  <span class="comment"># 生成ssh密码，-t 参数表示生成算法，可以选择rsa和dsa；-P表示使用的密码，&quot;&quot;表示无密码。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-将公钥追加authorized-keys文件中"><a href="#3-将公钥追加authorized-keys文件中" class="headerlink" title="3. 将公钥追加authorized_keys文件中"></a>3. 将公钥追加authorized_keys文件中</h2><p>将第一台主机A上生成公钥追加到authorized_keys文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh  <span class="comment"># 进入.ssh目录</span></span><br><span class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys   <span class="comment"># 将id_rsa.pub的内容追加到authorized_keys文件中</span></span><br></pre></td></tr></table></figure>
<p>然后可以删除A上的id_rsa.pub文件，因为已经写进了authorized_keys文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rm -rf id_rsa.pub </span><br><span class="line">或者</span><br><span class="line">$ mv id_rsa.pub id_rsa.pub.copy</span><br></pre></td></tr></table></figure>
<p>接下来将B和C的id_rsa.pub写入到A的authorized_keys文件中，使用scp 或者 rsync命令分别将B和C两台机器的id_rsa.pub复制到主机A 。（scp 或者 rsync命令的使用方法可参考文章<a href="">使用SCP或Rsync实现Linux主机之间文件、目录的复制</a>）</p>
<p>在主机B上操作 ：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp id_rsa.pub hostA:~/.ssh/ <span class="comment"># hostA为A的主机名或者A的IP地址</span></span><br></pre></td></tr></table></figure>
<p>也可以直接在主机A上操作，执行如下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp hostB:~/.ssh/id_rsa.pub ~/.ssh/</span><br></pre></td></tr></table></figure>
<p>在主机A上执行如下命令，将主机B的id_rsa.pub文件内容添加到authorized_keys文件中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">$ mv id_rsa.pub id_rsa.pub.copy2</span><br></pre></td></tr></table></figure>
<p>主机C类似，将C的id_rsa.pub文件内容添加到authorized_keys文件中。</p>
<p>这样authorized_keys文件里面保存了主机A，B，C的公钥，然后将authorized_keys文件拷贝到其它两台主机上就可以了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp authorized_keys hostB:/root/.ssh/</span><br><span class="line">$ scp authorized_keys hostC:/root/.ssh/</span><br></pre></td></tr></table></figure>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh root@要进行链接的机器ip地址</span><br></pre></td></tr></table></figure>
<p>主机A -&gt; B：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@hostA ~]<span class="comment"># ssh root@192.168.20.20</span></span><br><span class="line">Last login: Sat Jul 10 10:17:34 2021 from hostA</span><br><span class="line">[root@hostB ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><br>主机B -&gt; A：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@hostB ~]<span class="comment"># ssh root@192.168.20.10</span></span><br><span class="line">Last login: Sun Jul 11 19:54:08 2021 from hostB</span><br><span class="line">[root@hostA ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Python内存驻留机制</title>
    <url>/posts/python-notes-for-string-interning/</url>
    <content><![CDATA[<p>字符串驻留机制在许多面向对象编程语言中都支持，比如Java、python、Ruby、PHP等，它是一种数据缓存机制，对不可变数据类型使用同一个内存地址，有效的节省了空间，本文主要介绍Python的内存驻留机制。</p>
<a id="more"></a>
<h1 id="驻留"><a href="#驻留" class="headerlink" title="驻留"></a>驻留</h1><p>字符串驻留就是每个字符串只有一个副本，多个对象共享该副本，驻留只针对不可变数据类型，比如字符串，布尔值，数字等。在这些固定数据类型处理中，使用驻留可以有效节省时间和空间，当然在驻留池中创建或者插入新的内容会消耗一定的时间。</p>
<p>下面举例介绍python中的驻留机制。</p>
<h1 id="python内存驻留"><a href="#python内存驻留" class="headerlink" title="python内存驻留"></a>python内存驻留</h1><p>在<a href="https://blog.csdn.net/u010698107/article/details/117406942">Python对象及内存管理机制</a>一文中介绍了python的参数传递以及以及内存管理机制，来看下面一段代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">l2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">l3 = l2</span><br><span class="line">print(l1 == l2)</span><br><span class="line">print(l1 <span class="keyword">is</span> l2)</span><br><span class="line">print(l2 == l3)</span><br><span class="line">print(l2 <span class="keyword">is</span> l3)</span><br></pre></td></tr></table></figure>
<p>知道结果是什么吗？下面是执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>l1和l2内容相同，却指向了不同的内存地址，l2和l3之间使用等号赋值，所以指向了同一个对象。因为列表是可变对象，每创建一个列表，都会重新分配内存，列表对象是没有“内存驻留”机制的。下面来看不可变数据类型的驻留机制。</p>
<h2 id="整型驻留"><a href="#整型驻留" class="headerlink" title="整型驻留"></a>整型驻留</h2><p>在<strong>Jupyter或者控制台交互环境</strong>中执行下面代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="number">300</span></span><br><span class="line">b1 = <span class="number">300</span></span><br><span class="line">c1 = b1</span><br><span class="line">print(a1 <span class="keyword">is</span> b1)</span><br><span class="line">print(c1 <span class="keyword">is</span> b1)</span><br><span class="line"></span><br><span class="line">a2 = <span class="number">200</span></span><br><span class="line">b2 = <span class="number">200</span></span><br><span class="line">c2 = b2</span><br><span class="line">print(a2 <span class="keyword">is</span> b2)</span><br><span class="line">print(c2 <span class="keyword">is</span> b2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>可以发现a1和b1指向了不同的地址，a2和b2指向了相同的地址，这是为什么呢？</p>
<p>因为启动时，Python 将一个 <strong>-5~256</strong> 之间整数列表预加载（缓存）到内存中，我们在这个范围内创建一个整数对象时，python会自动引用缓存的对象，不会创建新的整数对象。</p>
<p>浮点型不支持：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.0</span></span><br><span class="line">b = <span class="number">1.0</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line">print(a == b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p>如果上面的代码在非交互环境，也就是将代码作为python脚本运行的结果是什么呢？（运行环境为python3.7）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>全为True，没有明确的限定临界值，都进行了驻留操作。这是因为使用不同的环境时，代码的优化方式不同。</p>
<h2 id="字符串驻留"><a href="#字符串驻留" class="headerlink" title="字符串驻留"></a>字符串驻留</h2><p>在<strong>Jupyter或者控制台交互环境</strong>中：</p>
<ul>
<li>满足<strong>标识符命名规范</strong>的字符串都会被驻留，长度不限。</li>
<li>空字符串会驻留</li>
<li>使用乘法得到的字符串且满足标识符命名规范的字符串：长度小于等于20会驻留（<strong>peephole</strong>优化），Python 3.7改为4096（<strong>AST</strong>优化器）。</li>
<li>长度为1的特殊字符（ASCII 字符中的）会驻留</li>
<li>空元组或者只有一个元素且元素范围为-5~256的元组会驻留</li>
</ul>
<p>满足标识符命名规范的字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;Hello_World&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;Hello_World&#x27;</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>乘法获取字符串（运行环境为python3.7）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;aa&#x27;</span>*<span class="number">50</span></span><br><span class="line">b = <span class="string">&#x27;aa&#x27;</span>*<span class="number">50</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;aa&#x27;</span>*<span class="number">5000</span></span><br><span class="line">b = <span class="string">&#x27;aa&#x27;</span>*<span class="number">5000</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><strong>在非交互环境中：</strong></p>
<ul>
<li>默认字符串都会驻留</li>
<li>使用乘法运算得到的字符串与在控制台相同</li>
<li>元组类型（元组内数据为不可变数据类型）会驻留</li>
<li>函数、类、变量、参数等的名称以及关键字都会驻留</li>
</ul>
<p>注意：<strong>字符串是在编译时进行驻留</strong>，也就是说，如果字符串的值不能在编译时进行计算，将不会驻留。比如下面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letter = <span class="string">&#x27;d&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;Hello Worl&#x27;</span> + <span class="string">&#x27;d&#x27;</span></span><br><span class="line">d = <span class="string">&#x27;Hello Worl&#x27;</span> + letter</span><br><span class="line">e = <span class="string">&quot; &quot;</span>.join([<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;World&#x27;</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">print(<span class="built_in">id</span>(c))</span><br><span class="line">print(<span class="built_in">id</span>(d))</span><br><span class="line">print(<span class="built_in">id</span>(e))</span><br></pre></td></tr></table></figure>
<p>在交互环境执行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1696903309168</span></span><br><span class="line"><span class="number">1696903310128</span></span><br><span class="line"><span class="number">1696903269296</span></span><br><span class="line"><span class="number">1696902074160</span></span><br><span class="line"><span class="number">1696903282800</span></span><br></pre></td></tr></table></figure>
<p>都指向不同的内存。</p>
<p>python 3.7 非交互环境执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1426394439728</span></span><br><span class="line"><span class="number">1426394439728</span></span><br><span class="line"><span class="number">1426394439728</span></span><br><span class="line"><span class="number">1426394571504</span></span><br><span class="line"><span class="number">1426394571440</span></span><br></pre></td></tr></table></figure>
<p>发现d和e指向不同的内存，因为d和e不是在编译时计算的，而是在运行时计算的。前面的<code>a = &#39;aa&#39;*50</code>是在编译时计算的。</p>
<h2 id="强行驻留"><a href="#强行驻留" class="headerlink" title="强行驻留"></a>强行驻留</h2><p>除了上面介绍的python默认的驻留外，可以使用sys模块中的intern()函数来指定驻留内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">letter_d = <span class="string">&#x27;d&#x27;</span></span><br><span class="line">a = sys.intern(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">b = sys.intern(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">c = sys.intern(<span class="string">&#x27;Hello Worl&#x27;</span> + <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">d = sys.intern(<span class="string">&#x27;Hello Worl&#x27;</span> + letter)</span><br><span class="line">e = sys.intern(<span class="string">&quot; &quot;</span>.join([<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;World&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">print(<span class="built_in">id</span>(c))</span><br><span class="line">print(<span class="built_in">id</span>(d))</span><br><span class="line">print(<span class="built_in">id</span>(e))</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1940593568304</span></span><br><span class="line"><span class="number">1940593568304</span></span><br><span class="line"><span class="number">1940593568304</span></span><br><span class="line"><span class="number">1940593568304</span></span><br><span class="line"><span class="number">1940593568304</span></span><br></pre></td></tr></table></figure>
<p>使用intern()后，都指向了相同的地址。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了python的内存驻留，内存驻留是python优化的一种策略，注意不同运行环境下优化策略不一样，不同的python版本也不相同。注意字符串是在编译时进行驻留。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>内存驻留</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux和Windows创建指定大小文件方法</title>
    <url>/posts/linux-and-windows-create-files-certain-size/</url>
    <content><![CDATA[<p>在测试中有时需要创建不同大小的测试文件，用于测试上传下载性能以及以及其它文件传输功能，本文介绍几种Liunx和Windows系统下创建指定大小文件的方法。</p>
<a id="more"></a>
<h1 id="Linux系统创建指定大小文件"><a href="#Linux系统创建指定大小文件" class="headerlink" title="Linux系统创建指定大小文件"></a>Linux系统创建指定大小文件</h1><p>下面介绍的dd 、fallocate和truncate命令包含于GNU coreutils软件包中，不需要单独安装。</p>
<h2 id="dd命令"><a href="#dd命令" class="headerlink" title="dd命令"></a>dd命令</h2><p>dd (device driver) 命令常用来复制备份文件，与cp命令具有以下区别：</p>
<ul>
<li>dd是对块进行操作，操作磁盘的扇区字节，</li>
<li>cp操作文件或目录，对于不能以文件或目录格式呈现的数据cp无法复制。</li>
<li>dd是对磁盘连续的读取，也就是完全的数据搬移，cp复制的数据排列不是按顺序的。</li>
</ul>
<p>也可以使用这个命令来创建特定大小的文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@Server ~]<span class="comment"># dd if=/dev/urandom of=testfile10MB_dd bs=10MB count=1</span></span><br><span class="line">记录了1+0 的读入</span><br><span class="line">记录了1+0 的写出</span><br><span class="line">10000000字节(10 MB)已复制，0.124436 秒，80.4 MB/秒</span><br><span class="line">root@Server ~]<span class="comment"># ll testfile10MB_dd</span></span><br><span class="line">-rw-r--r--   1 root    root    10000000 7月   7 11:56 testfile10MB_dd</span><br><span class="line">[root@Server ~]<span class="comment"># du testfile10MB_dd</span></span><br><span class="line">9768    testfile10MB_dd</span><br></pre></td></tr></table></figure><br><code>/dev/urandom</code>用于生成随机数据，也可以使用<code>/dev/zero</code>来生成全0的文件：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># dd if=/dev/zero of=testfile10MB_dd0 bs=10MB count=1</span></span><br><span class="line">记录了1+0 的读入</span><br><span class="line">记录了1+0 的写出</span><br><span class="line">10000000字节(10 MB)已复制，0.00799675 秒，1.3 GB/秒</span><br><span class="line">[root@Server ~]<span class="comment"># ll testfile10MB_dd0</span></span><br><span class="line">-rw-r--r--   1 root    root    10000000 7月   7 13:57 testfile10MB_dd0</span><br><span class="line">[root@Server ~]<span class="comment"># od -c testfile10MB_dd0</span></span><br><span class="line">0000000  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">*</span><br><span class="line">46113200</span><br><span class="line">[root@Server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>/dev/urandom、/dev/random以及/dev/zero、/dev/null介绍</strong>：</p>
<ul>
<li>/dev/urandom和/dev/random都可以产生随机的ASCII码字符流，其中/dev/random依赖系统中断，当系统中断不足时，/dev/random设备会“挂起”。/dev/urandom不依赖系统中断，所以在生成特定大小文件时一般使用/dev/urandom，不使用/dev/urandom。 </li>
<li>/dev/zero “零”设备可以无限的提供空字符，产生二进制的零流</li>
<li>/dev/null “空”设备，像”黑洞“一样，所有写入它的内容都会永远丢失，也不会读取到任何内容。常用于禁止标准输出和标准错误的输出，比如抓包命令：<code>tcpdump -i eth1 -w /tmp/packet.pcap  &gt;/dev/null &amp;</code></li>
</ul>
</blockquote>
<p>根据/dev/urandom的特性，也可以结合head命令来创建指定大小的文件：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">head -c 10MB /dev/urandom &gt; testfile10MB</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">head -c 10MB /dev/zero &gt; testfile10MB</span><br></pre></td></tr></table></figure></p>
<p><code>bs</code>参数和truncate命令的size参数类似，默认单位为bytes，也支持以下单位：</p>
<ul>
<li>c =1 bytes, w =2 bytes, b =512 bytes</li>
<li>K, M, G, T, P, E, Z, Y（幂底数为1024 bytes，如5M=5×1024×1024）</li>
<li>KB, MB, GB …（幂底数为1000 bytes，如5MB=5×1000×1000）</li>
</ul>
<h2 id="fallocate命令"><a href="#fallocate命令" class="headerlink" title="fallocate命令"></a>fallocate命令</h2><p>fallocate用于创建大文件（大于2G）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># fallocate -l 2G testfile2G_fal</span></span><br><span class="line">[root@Server ~]<span class="comment"># ll testfile2G_fal</span></span><br><span class="line">-rw-r--r--   1 root    root    2147483648 7月   7 14:01 testfile2G_fal</span><br></pre></td></tr></table></figure><br><code>-l</code>参数指定文件大小，默认单位为bytes，也可以指定单位：K, M, G, T, P, E, Z, Y以及KB, MB, GB等</p>
<h2 id="truncate命令"><a href="#truncate命令" class="headerlink" title="truncate命令"></a>truncate命令</h2><p>truncate命令也可以用来创建指定大小的文件，下面创建一个10 MB大小的文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># truncate -s 10M testfile10M</span></span><br><span class="line">[root@Server ~]<span class="comment"># ll testfile10M</span></span><br><span class="line">-rw-r--r--   1 root    root    10485760 7月   7 10:45 testfile10M</span><br><span class="line">[root@Server ~]<span class="comment"># </span></span><br><span class="line">[root@Server ~]<span class="comment"># truncate -s 10MB testfile10Mb</span></span><br><span class="line">[root@Server ~]<span class="comment"># ll testfile10Mb</span></span><br><span class="line">-rw-r--r--   1 root    root    10000000 7月   7 10:49 testfile10Mb</span><br></pre></td></tr></table></figure></p>
<p><code>-s | --size</code>参数 用于指定要生成的文件大小，单位可以是：</p>
<ul>
<li>K, M, G, T, P, E, Z, Y（幂底数为1024 bytes，如5M=5×1024×1024）</li>
<li>KB, MB, GB …（幂底数为1000 bytes，如5MB=5×1000×1000）</li>
</ul>
<h2 id="dd-、fallocate和truncate的区别"><a href="#dd-、fallocate和truncate的区别" class="headerlink" title="dd 、fallocate和truncate的区别"></a>dd 、fallocate和truncate的区别</h2><p>truncate命令生成的是空洞文件，并不占用实际的磁盘空间，文件中间是用“\0”填充的，实际占用的空间为0。使用du命令查看truncate生成文件占用的磁盘空间：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># ll testfile10Mb</span></span><br><span class="line">-rw-r--r-- 1 root root 10000000 7月   7 14:30 testfile10Mb</span><br><span class="line">[root@Server ~]<span class="comment"># du -sh testfile10Mb</span></span><br><span class="line">0       testfile10Mb</span><br><span class="line">[root@Server ~]<span class="comment"># od -c testfile10Mb</span></span><br><span class="line">0000000  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">*</span><br><span class="line">46113200</span><br><span class="line">[root@Server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><br>fallocate命令为文件预分配物理空间，分配的空间在磁盘的扇区上是连续的，生成的不是空洞文件，不是空洞文件那样“假装”占有那么多空间：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># ll testfile2G_fal</span></span><br><span class="line">-rw-r--r-- 1 root root 2147483648 7月   7 14:01 testfile2G_fal</span><br><span class="line">[root@Server ~]<span class="comment"># du -sh testfile2G_fal</span></span><br><span class="line">2.0G    testfile2G_fal</span><br></pre></td></tr></table></figure><br>可以看到，和truncate不一样，用fallocate生成的文件在磁盘上确实占用了2.0G的空间。</p>
<p>dd命令生成的文件也不是空洞文件，使用它来生成大文件时速度较慢，而且使用dd以及提到的head命令生成文件时会进行大量IO操作，所以在Linux中生成文件时，建议使用fallocate命令。</p>
<h1 id="Windows系统创建指定大小文件"><a href="#Windows系统创建指定大小文件" class="headerlink" title="Windows系统创建指定大小文件"></a>Windows系统创建指定大小文件</h1><h2 id="fsutil工具"><a href="#fsutil工具" class="headerlink" title="fsutil工具"></a>fsutil工具</h2><p>Windows中可以使用fsutil工具生成文件，命令语法格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fsutil file createNew test.txt 1024 <span class="comment"># 文件大小单位为bytes</span></span><br></pre></td></tr></table></figure></p>
<p>以管理员身份打开cmd，创建一个5M bytes的文件：5×1024×1024=5242880 bytes<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt; fsutil file createNew test.txt 5242880</span><br><span class="line">File C:\Users\DELL\test.txt is created</span><br><span class="line">C:\Users\DELL&gt; dir test.txt | findstr test.txt</span><br><span class="line">2021/07/07  15:26         5,242,880 test.txt</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果安装笔记</title>
    <url>/posts/macos-bigsur-hackintosh-installation-tutorial/</url>
    <content><![CDATA[<p>本文记录黑苹果安装过程</p>
<a id="more"></a>
<h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p>1、md5检查器WinMD5：<a href="https://www.winmd5.com/">https://www.winmd5.com/</a></p>
<p>2、磁盘分区工具Disk Genuis：<a href="https://www.diskgenius.cn/">https://www.diskgenius.cn/</a></p>
<p>3、U盘制作工具(选一个就行，我使用的是TransMac，balenaEtcher没有制作成功)：</p>
<ul>
<li>TransMac：<a href="https://www.acutesystems.com/scrtm.htm">https://www.acutesystems.com/scrtm.htm</a></li>
<li>balenaEtcher：<a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></li>
</ul>
<p>4、下载安装镜像</p>
<ul>
<li>镜像下载地址：使用【黑果小兵】提供的镜像<a href="https://blog.daliansky.net/categories/%E4%B8%8B%E8%BD%BD/%E9%95%9C%E5%83%8F/">https://blog.daliansky.net/categories/%E4%B8%8B%E8%BD%BD/%E9%95%9C%E5%83%8F/</a> ，我下载的是<a href="https://blog.daliansky.net/macOS-BigSur-11.2.3-20D91-Release-version-with-OC-0.6.7-and-Clover-5131-and-PE-original-image.html">acOS Big Sur 11.2.3 20D91</a>。</li>
<li>下载完成后使用WinMD5校验md5值是否一致，如果不一致需要重新下载。</li>
</ul>
<p>5、下载EFI</p>
<ul>
<li>很多大佬分享了自己的EFI配置文件，可以参考<a href="https://blog.daliansky.net/Hackintosh-long-term-maintenance-model-checklist.html">Hackintosh黑苹果长期维护机型整理清单</a>，选择适合自己的EFI。</li>
<li>我的机型选择：<a href="https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh">https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh</a></li>
</ul>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>我的笔记本型号为ASUS-FL8000UQ</p>
<p>处理器：Intel i7-8550U</p>
<p>操作系统为Win10</p>
<p>其它配置可以参考：<a href="https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh">https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh</a>，差异不大。</p>
<h2 id="分配磁盘空间"><a href="#分配磁盘空间" class="headerlink" title="分配磁盘空间"></a>分配磁盘空间</h2><p>分配磁盘空间用于安装macOS系统。</p>
<p>打开window自带的磁盘管理，如果没有空闲的磁盘分区，可以选择一个剩余空间大的磁盘，右键选择的磁盘选择【压缩卷】，单独分配部分空间出来，我分配了120G。</p>
<p>获取了单独的分区后，右键选择【删除卷】，得到120G的【空闲】分区</p>
<p>打开磁盘分区工具Disk Genuis，找到刚才删除的卷，右键单击选择【建立新分区】，文件系统类型选择【EFI system partition】主要用于分配EFI空间。EFI系统分区(ESP)用于存放可供引导启动系统的文件，将EFI文件存放在EFI系统分区中，这样黑苹果不用使用U盘来引导了。</p>
<p>分区大小必须大于300Mb，我设置的大小为500Mb。</p>
<p>EFI分区设置完成后回到磁盘管理，选择剩下的未分配空间，右键选择【新建简单卷】，分配驱动器号，注意<strong>不要格式化</strong>。</p>
<h2 id="U盘制作安装镜像"><a href="#U盘制作安装镜像" class="headerlink" title="U盘制作安装镜像"></a>U盘制作安装镜像</h2><p>将macOS系统镜像写到U盘上</p>
<p>以管理员身份运行  TransMac，选择你的U盘：</p>
<ol>
<li>格式化：择【Format Disk for Mac】进行格式化操作</li>
<li>输入系统镜像：选择【Restore with Disk Image】，选择下载的系统镜像，等待刷入完成。</li>
</ol>
<p>打开DiskGenius，替换U盘中的EFI</p>
<ol>
<li>将U盘中的EFI删除</li>
<li>将刚才下载的EFI复制到U盘</li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="设置BIOS"><a href="#设置BIOS" class="headerlink" title="设置BIOS"></a>设置BIOS</h2><p>win10系统接入BIOS界面方法：<br>点击开始菜单，选择【设置】-&gt; 【恢复】-&gt;【立即重新启动】-&gt; 【疑难解答】-&gt; 【高级选项】-&gt;【UEFI固件设置】</p>
<p>BIOS设置：<a href="https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh">https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh</a></p>
<ul>
<li><p>关闭<code>SecureBoot</code></p>
</li>
<li><p>关闭<code>FastBoot</code></p>
</li>
<li><p>解锁<code>CFG Lock</code></p>
<ol>
<li>将U盘格式化为FAT32格式；</li>
<li>打开CFG文件夹，将里面的EFI文件复制到U盘中，重启按ESC键选择U盘启动；</li>
<li>输入命令<code>setup_var_3 0x527 0x00</code>即可解锁CFG Lock。</li>
</ol>
</li>
<li>可以设置第一启动方式为U盘启动</li>
</ul>
<h2 id="安装macOS-Big-Sur"><a href="#安装macOS-Big-Sur" class="headerlink" title="安装macOS Big Sur"></a>安装<code>macOS Big Sur</code></h2><p>重启，按【ESC】（注意不同笔记本可能按键不一样）选择U盘引导，然后就是选择安装macOS Big Sur了。</p>
<p>耐心等待…</p>
<p>出现安装界面，选择<code>磁盘工具</code>，点击<code>继续</code></p>
<p>进入<code>磁盘工具</code>，选择准备的磁盘：这里要注意，千万不要选择有数据的盘，否则数据会全部删除。</p>
<p>点击<code>抹掉</code>，在弹出的窗口中输入名称，格式选择<code>APFS</code></p>
<p>点击<code>抹除</code>，然后等待操作结束，点击<code>完成</code>，退出磁盘工具，选择<code>安装macOS</code>，点击<code>继续</code>，遇到同意就点击同意，选择要安装的磁盘卷标，点击继续。</p>
<p>耐心等待…</p>
<p>然后是系统初始化设置…</p>
<h1 id="安装后的系统设置"><a href="#安装后的系统设置" class="headerlink" title="安装后的系统设置"></a>安装后的系统设置</h1><p>先打开终端，输入几行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable		<span class="comment"># 启用macOS安装应用允许任何来源</span></span><br><span class="line">sudo kextcache -i /						<span class="comment"># 重建缓存</span></span><br></pre></td></tr></table></figure>
<p>重建缓存：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo chown -R root:wheel /System/Library/Extensions/</span><br><span class="line">sudo chmod -R 755 /System/Library/Extensions/</span><br><span class="line">sudo kmutil install --update-all</span><br><span class="line">sudo kcditto</span><br></pre></td></tr></table></figure>
<p>安装homebrew<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure></p>
<h1 id="将U盘中的EFI复制进硬盘"><a href="#将U盘中的EFI复制进硬盘" class="headerlink" title="将U盘中的EFI复制进硬盘"></a>将U盘中的EFI复制进硬盘</h1><p>目的是脱离U盘启动。</p>
<p>macos下载Hackintool工具：<a href="https://github.com/headkaze/Hackintool">https://github.com/headkaze/Hackintool</a></p>
<p>具体配置方法参考：<a href="https://blog.daliansky.net/Lenovo-Tianyi-510s-Mini-and-macOS-BigSur-Installation-Tutorial.html">https://blog.daliansky.net/Lenovo-Tianyi-510s-Mini-and-macOS-BigSur-Installation-Tutorial.html</a></p>
<p>好了，到此macOS就安装完成了！</p>
<p>参考：</p>
<p><a href="https://blog.daliansky.net/Lenovo-Tianyi-510s-Mini-and-macOS-BigSur-Installation-Tutorial.html">https://blog.daliansky.net/Lenovo-Tianyi-510s-Mini-and-macOS-BigSur-Installation-Tutorial.html</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试工具Uiautomator2</title>
    <url>/posts/app-testing-tools-for-uiautomator2/</url>
    <content><![CDATA[<p><a href="https://developer.android.com/training/testing/ui-automator.html">UI Automator</a>是 google 在 Android4.1 版本发布时推出的一款用Java编写的Android UI 自动化测试工具，基于Android Accessibility 服务，Accessibility 服务用于帮助残疾用户使用Android设备和应用。在后台运行，并在accesbilityevents触发时接收系统回调。</p>
<a id="more"></a>
<p>UI Automator可以跨进程操作（被测应用和UiAutomator是两个独立的进程），可以对第三方App进行测试，获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作。</p>
<ol>
<li>测试脚本只能使用Java语言</li>
<li>执行时需要将脚本打包成jar或者apk包上传到设备上才能运行</li>
</ol>
<p>python UIAutomator2是一个可以使用Python对Android设备进行UI自动化操作的库，底层基于Google Ui Automator。其原理是在手机上使用http rpc服务将UiAutomator中的功能开放出来，然后再将这些http接口封装成Python库。本文档介绍UIAutomator2的使用方法。</p>
<h1 id="uiautomator2安装"><a href="#uiautomator2安装" class="headerlink" title="uiautomator2安装"></a>uiautomator2安装</h1><p>uiautomator2的GitHub仓库地址为：<a href="https://github.com/openatx/uiautomator2">https://github.com/openatx/uiautomator2</a></p>
<p>python安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install -U uiautomator2</span><br></pre></td></tr></table></figure>
<p>查看是否安装成功<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uiautomator2 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><br>对于UI元素的查看，可以使用uiautomatorviewer或者Appium inspector，uiautomatorviewer经常用不了，Appium inspector又比较麻烦，推荐一个交weditor的工具，安装简单，使用也方便，直接在浏览器上查看。这三个工具的安装和使用方法可参考这一篇文章：<a href="https://blog.csdn.net/u010698107/article/details/111431111">App控件定位</a>。</p>
<h1 id="App初始化"><a href="#App初始化" class="headerlink" title="App初始化"></a>App初始化</h1><h2 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = u2.connect_usb(serial) <span class="comment"># serial：android设备序列号，通过adb devices命令获取</span></span><br><span class="line">d = u2.connect(serial) </span><br><span class="line">d = u2.connect(<span class="string">&quot;10.0.0.1&quot;</span>) <span class="comment"># 通过无线连接设备，10.0.0.1为手机IP地址，需要保证手机和电脑可以相互ping通（连接到同一个局域网）。</span></span><br><span class="line">d = u2.connect(<span class="string">&quot;10.0.0.1:7912&quot;</span>) <span class="comment"># adb connect 10.0.0.1:5555</span></span><br></pre></td></tr></table></figure>
<p>设置newCommandTimeout和隐式等待<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.set_new_command_timeout(<span class="number">300</span>)  <span class="comment"># accessibility服务的最大空闲时间，超时将自动释放</span></span><br><span class="line">d.implicitly_wait(<span class="number">5</span>)  <span class="comment"># 隐式等待，元素查找等待时间（默认20s）</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装卸载apk"><a href="#安装卸载apk" class="headerlink" title="安装卸载apk"></a>安装卸载apk</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_install(<span class="string">&#x27;http://some-domain.com/some.apk&#x27;</span>)</span><br><span class="line">d.app_uninstall(<span class="string">&quot;package_name&quot;</span>) <span class="comment"># 卸载APK</span></span><br></pre></td></tr></table></figure>
<h2 id="打开、停止App"><a href="#打开、停止App" class="headerlink" title="打开、停止App"></a>打开、停止App</h2><p>打开APP<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_start(appPackage) <span class="comment"># appPackage：包名，先通过atx-agent解析apk包的mainActivity，然后调用am start -n $package/$activity启动</span></span><br><span class="line">d.app_start(appPackage, appActivity) <span class="comment"># 指定appPackage和appActivity，其实就是执行adb shell am start -n appPackage/.appActivity</span></span><br><span class="line">d.app_start(appPackage, appActivity, wait = <span class="literal">False</span>, stop = <span class="literal">False</span>, use_monkey = <span class="literal">False</span>) <span class="comment"># wait: 等待app启动 stop：启动app之前先停止（需要appPackage和 appActivity） use_monkey：使用monkey命令启动app（未指定appActivity时可使用此参数）</span></span><br></pre></td></tr></table></figure></p>
<p>停止APP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_stop(appPackage) <span class="comment"># 强制停止应用，相当于adb shell am force-stop &lt;appPackage&gt;</span></span><br><span class="line">d.app_clear(appPackage) <span class="comment"># 停止并清除应用数据与缓存，相当于adb shell pm clear &lt;appPackage&gt;</span></span><br><span class="line">d.app_stop_all() <span class="comment"># 强制停止所有第三方应用（除了&#x27;com.github.uiautomator&#x27; 和 &#x27;com.github.uiautomator.test&#x27;）</span></span><br><span class="line">d.app_stop_all(excludes=[<span class="string">&#x27;com.examples.demo&#x27;</span>]) <span class="comment"># 停止除了com.github.uiautomator 和 com.github.uiautomator.test和com.examples.demo以外的应用</span></span><br></pre></td></tr></table></figure>
<h1 id="获取设备应用信息"><a href="#获取设备应用信息" class="headerlink" title="获取设备应用信息"></a>获取设备应用信息</h1><h2 id="获取应用信息"><a href="#获取应用信息" class="headerlink" title="获取应用信息"></a>获取应用信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.app_info(<span class="string">&quot;com.android.settings&quot;</span>)</span><br><span class="line">&#123;u<span class="string">&#x27;packageName&#x27;</span>: u<span class="string">&#x27;com.android.settings&#x27;</span>, u<span class="string">&#x27;label&#x27;</span>: u<span class="string">&#x27;Param\xe8tres&#x27;</span>, u<span class="string">&#x27;mainActivity&#x27;</span>: u<span class="string">&#x27;com.android.settings.HWSettings&#x27;</span>, u<span class="string">&#x27;versionName&#x27;</span>: u<span class="string">&#x27;10.1.0.300&#x27;</span>, u<span class="string">&#x27;versionCode&#x27;</span>: 10010300, u<span class="string">&#x27;size&#x27;</span>: 132202855&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前应用信息</span></span><br><span class="line">&gt;&gt;&gt; d.app_current()</span><br></pre></td></tr></table></figure>
<h2 id="获取设备信息"><a href="#获取设备信息" class="headerlink" title="获取设备信息"></a>获取设备信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.info</span><br><span class="line">&#123;<span class="string">u&#x27;displayRotation&#x27;</span>: <span class="number">0</span>, <span class="string">u&#x27;displaySizeDpY&#x27;</span>: <span class="number">780</span>, <span class="string">u&#x27;displaySizeDpX&#x27;</span>: <span class="number">360</span>, <span class="string">u&#x27;screenOn&#x27;</span>: <span class="literal">True</span>, <span class="string">u&#x27;currentPackageName&#x27;</span>: <span class="string">u&#x27;com.android.systemui&#x27;</span>, <span class="string">u&#x27;productName&#x27;</span>: <span class="string">u&#x27;HLK-AL10&#x27;</span>, <span class="string">u&#x27;displayWidth&#x27;</span>: <span class="number">1080</span>, <span class="string">u&#x27;sdkInt&#x27;</span>: <span class="number">29</span>, <span class="string">u&#x27;displayHeight&#x27;</span>: <span class="number">2224</span>, <span class="string">u&#x27;naturalOrientation&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>获取详细设备信息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.device_info</span><br><span class="line">&#123;u<span class="string">&#x27;product&#x27;</span>: None, u<span class="string">&#x27;udid&#x27;</span>: u<span class="string">&#x27;SNHVB20C18002195-d8:a4:91:4f:5c:1e-HLK-AL10&#x27;</span>, u<span class="string">&#x27;brand&#x27;</span>: u<span class="string">&#x27;HONOR&#x27;</span>, u<span class="string">&#x27;cpu&#x27;</span>: &#123;u<span class="string">&#x27;hardware&#x27;</span>: u<span class="string">&#x27;Hisilicon Kirin810&#x27;</span>, u<span class="string">&#x27;cores&#x27;</span>: 8&#125;, u<span class="string">&#x27;usingBeganAt&#x27;</span>: u<span class="string">&#x27;0001-01-01T00:00:00Z&#x27;</span>, u<span class="string">&#x27;provider&#x27;</span>: None, u<span class="string">&#x27;owner&#x27;</span>: None, u<span class="string">&#x27;display&#x27;</span>: &#123;u<span class="string">&#x27;width&#x27;</span>: 1080, u<span class="string">&#x27;height&#x27;</span>: 2340&#125;, u<span class="string">&#x27;battery&#x27;</span>: &#123;u<span class="string">&#x27;status&#x27;</span>: 5, u<span class="string">&#x27;scale&#x27;</span>: 100, u<span class="string">&#x27;temperature&#x27;</span>: 340, u<span class="string">&#x27;level&#x27;</span>: 100, u<span class="string">&#x27;acPowered&#x27;</span>: False, u<span class="string">&#x27;usbPowered&#x27;</span>: True, u<span class="string">&#x27;health&#x27;</span>: 2, u<span class="string">&#x27;voltage&#x27;</span>: 4355, u<span class="string">&#x27;wirelessPowered&#x27;</span>: False, u<span class="string">&#x27;technology&#x27;</span>: u<span class="string">&#x27;Li-poly&#x27;</span>, u<span class="string">&#x27;present&#x27;</span>: True&#125;, u<span class="string">&#x27;version&#x27;</span>: u<span class="string">&#x27;10&#x27;</span>, u<span class="string">&#x27;presenceChangedAt&#x27;</span>: u<span class="string">&#x27;0001-01-01T00:00:00Z&#x27;</span>, u<span class="string">&#x27;agentVersion&#x27;</span>: u<span class="string">&#x27;0.10.0&#x27;</span>, u<span class="string">&#x27;memory&#x27;</span>: &#123;u<span class="string">&#x27;total&#x27;</span>: 5810780, u<span class="string">&#x27;around&#x27;</span>: u<span class="string">&#x27;6 GB&#x27;</span>&#125;, u<span class="string">&#x27;hwaddr&#x27;</span>: u<span class="string">&#x27;d8:a4:91:4f:5c:1e&#x27;</span>, u<span class="string">&#x27;model&#x27;</span>: u<span class="string">&#x27;HLK-AL10&#x27;</span>, u<span class="string">&#x27;arch&#x27;</span>: u<span class="string">&#x27;&#x27;</span>, u<span class="string">&#x27;serial&#x27;</span>: u<span class="string">&#x27;SNHVB20C18002195&#x27;</span>, u<span class="string">&#x27;sdk&#x27;</span>: 29&#125;</span><br></pre></td></tr></table></figure></p>
<p>获取分辨率：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.window_size()</span><br><span class="line">(1080, 2340)</span><br></pre></td></tr></table></figure><br>获取设备序列号<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.serial</span><br><span class="line">u<span class="string">&#x27;SNHVB20C18002195&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>获取手机IP地址<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.wlan_ip</span><br><span class="line">u<span class="string">&#x27;192.168.0.191&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>列出所有运行中的APP：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.app_list_running() <span class="comment"># adb shell pm list packages</span></span><br></pre></td></tr></table></figure></p>
<p>打开网页<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.open_url(<span class="string">&quot;https://www.baidu.com&quot;</span>) <span class="comment"># adb shell am start -a android.intent.action.VIEW -d https://www.baidu.com </span></span><br></pre></td></tr></table></figure></p>
<h1 id="UI元素定位"><a href="#UI元素定位" class="headerlink" title="UI元素定位"></a>UI元素定位</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><p>通过属性值定位，支持下面的参数：</p>
<ul>
<li><code>text</code>, <code>textContains</code>, <code>textMatches</code>, <code>textStartsWith</code></li>
<li><code>className</code>, <code>classNameMatches</code></li>
<li><code>description</code>, <code>descriptionContains</code>, <code>descriptionMatches</code>, <code>descriptionStartsWith</code></li>
<li><code>checkable</code>, <code>checked</code>, <code>clickable</code>, <code>longClickable</code></li>
<li><code>scrollable</code>, <code>enabled</code>,<code>focusable</code>, <code>focused</code>, <code>selected</code></li>
<li><code>packageName</code>, <code>packageNameMatches</code></li>
<li><code>resourceId</code>, <code>resourceIdMatches</code></li>
<li><code>index</code>, <code>instance</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(className=<span class="string">&quot;android.widget.TextView&quot;</span>, text=<span class="string">&quot;行情&quot;</span>)</span><br><span class="line">d(className=<span class="string">&quot;android.widget.TextView&quot;</span>, textMatches=<span class="string">&quot;^行.*&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="相对选择器"><a href="#相对选择器" class="headerlink" title="相对选择器"></a>相对选择器</h2><p>子孙节点定位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(resourceId=<span class="string">&quot;android:id/tabs&quot;</span>).child(text=<span class="string">&quot;行情&quot;</span>)</span><br><span class="line">d(resourceId=<span class="string">&quot;android:id/tabs&quot;</span>).child_by_text(<span class="string">&quot;行情&quot;</span>)</span><br><span class="line">d(resourceId=<span class="string">&quot;android:id/tabs&quot;</span>).child_by_description(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">d(resourceId=<span class="string">&quot;android:id/tabs&quot;</span>).child_by_instance(<span class="string">&quot;instance&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>兄弟节点定位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(className=<span class="string">&quot;android.widget.ImageView&quot;</span>).sibling(text=<span class="string">&quot;行情&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>相对定位</p>
<ul>
<li><code>d(A).left(B)</code>： A的左边元素B</li>
<li><code>d(A).right(B)</code>：A的右边元素B</li>
<li><code>d(A).up(B)</code>：A的上边元素B</li>
<li><code>d(A).down(B)</code>：A的下边元素B</li>
</ul>
<p><img src="uiautomator2-xueqiu.png" width="80%" height="80%" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;雪球&quot;</span>).right(text=<span class="string">&quot;行情&quot;</span>)</span><br><span class="line">d(text=<span class="string">&quot;交易&quot;</span>).left(text=<span class="string">&quot;行情&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="多个实例"><a href="#多个实例" class="headerlink" title="多个实例"></a>多个实例</h2><p>查看和选择实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(d(className=<span class="string">&quot;android.widget.RadioButton&quot;</span>).count)</span><br><span class="line">print(<span class="built_in">len</span>(d(className=<span class="string">&quot;android.widget.RadioButton&quot;</span>)))</span><br><span class="line">d(className=<span class="string">&quot;android.widget.RadioButton&quot;</span>)[<span class="number">0</span>].click() <span class="comment"># 点击匹配到的第二个元素</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>也可以使用instance参数选择：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(className=<span class="string">&quot;android.widget.RadioButton&quot;</span>, instance=<span class="number">1</span>).click() <span class="comment"># 使用匹配到的第2个元素</span></span><br></pre></td></tr></table></figure>
<h2 id="XPath定位"><a href="#XPath定位" class="headerlink" title="XPath定位"></a>XPath定位</h2><p>Java uiautoamtor默认不支持xpath，xpath定位是UIAutomator2扩展的一个功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.xpath(<span class="string">&#x27;//*[@text=&quot;行情&quot;]&#x27;</span>).wait(<span class="number">10.0</span>).click()</span><br><span class="line">d.xpath(<span class="string">&#x27;//*[@text=&quot;行情&quot;]&#x27;</span>).click()</span><br><span class="line">d.xpath(<span class="string">&#x27;//*[@text=&quot;行情&quot;]&#x27;</span>).exists</span><br><span class="line">d.xpath(<span class="string">&#x27;//*[@text=&quot;行情&quot;]&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>xpath语法可参考<a href="https://blog.csdn.net/u010698107/article/details/111415888">Web自动化测试：xpath &amp; CSS Selector定位</a></p>
<h1 id="元素操作方法"><a href="#元素操作方法" class="headerlink" title="元素操作方法"></a>元素操作方法</h1><h2 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h2><p>点击UI元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ele = d(text=<span class="string">&quot;微信&quot;</span>)</span><br><span class="line">ele.click(timeout=<span class="literal">None</span>, offset=<span class="literal">None</span>) <span class="comment"># timeout：单位秒，等待元素出现；offset：默认为中心 (0.5, 0.5)</span></span><br><span class="line">ele.long_click(duration = <span class="number">0.5</span>, timeout=<span class="literal">None</span>) <span class="comment"># duration：点击时间；timeout：等待元素出现</span></span><br><span class="line"></span><br><span class="line">ele.click_exists(timeout=<span class="number">10.0</span>)</span><br><span class="line">ele.click_gone(timeout=<span class="number">10.0</span>, interval=<span class="number">1.0</span>) <span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>点击像素坐标<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.click(x,y) <span class="comment"># 点击像素坐标</span></span><br><span class="line">d.double_click(x, y, duration=<span class="number">0.1</span>) <span class="comment"># 双击像素坐标</span></span><br><span class="line">d.long_click(x, y, duration=<span class="number">0.5</span>) <span class="comment"># 长按</span></span><br></pre></td></tr></table></figure></p>
<h2 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h2><p>文本值获取、输入与清除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;行情&quot;</span>).get_text() <span class="comment"># 获取元素文本</span></span><br><span class="line"></span><br><span class="line">d(resourceId=<span class="string">&quot;com.xueqiu.android:id/action_search&quot;</span>).click() <span class="comment"># 点击搜索</span></span><br><span class="line">d(resourceId=<span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).set_text(<span class="string">&quot;招商银行&quot;</span>)  <span class="comment"># 输入文本</span></span><br><span class="line">d(resourceId=<span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).clear_text()  <span class="comment"># 清除文本输入框文本</span></span><br></pre></td></tr></table></figure>
<h2 id="等待wait"><a href="#等待wait" class="headerlink" title="等待wait"></a>等待wait</h2><p>等待appActivity出现<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.wait_activity(<span class="string">&quot;.HWSettings&quot;</span>, timeout=10)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></p>
<p>等待元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).wait(timeout=<span class="number">3.0</span>) <span class="comment"># 等待元素出现</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).wait_gone(timeout=<span class="number">1.0</span>) <span class="comment"># 等待元素消失</span></span><br></pre></td></tr></table></figure>
<h2 id="WatchContext"><a href="#WatchContext" class="headerlink" title="WatchContext"></a>WatchContext</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> d.watch_context() <span class="keyword">as</span> ctx:</span><br><span class="line">    ctx.when(<span class="string">&quot;^立即(下载|更新)&quot;</span>).when(<span class="string">&quot;取消&quot;</span>).click() <span class="comment"># 当同时出现 （立即安装 或 立即取消）和 取消 按钮的时候，点击取消</span></span><br><span class="line">    ctx.when(<span class="string">&quot;同意&quot;</span>).click()</span><br><span class="line">    ctx.when(<span class="string">&quot;确定&quot;</span>).click()</span><br><span class="line">    <span class="comment"># 上面三行代码是立即执行完的，不会有什么等待</span></span><br><span class="line">    </span><br><span class="line">    ctx.wait_stable() <span class="comment"># 开启弹窗监控，并等待界面稳定（两个弹窗检查周期内没有弹窗代表稳定）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用call函数来触发函数回调</span></span><br><span class="line">    <span class="comment"># call 支持两个参数，d和el，不区分参数位置，可以不传参，如果传参变量名不能写错</span></span><br><span class="line">    <span class="comment"># eg: 当有元素匹配仲夏之夜，点击返回按钮</span></span><br><span class="line">    ctx.when(<span class="string">&quot;仲夏之夜&quot;</span>).call(<span class="keyword">lambda</span> d: d.press(<span class="string">&quot;back&quot;</span>))</span><br><span class="line">    ctx.when(<span class="string">&quot;确定&quot;</span>).call(<span class="keyword">lambda</span> el: el.click())</span><br></pre></td></tr></table></figure>
<h2 id="Toast操作"><a href="#Toast操作" class="headerlink" title="Toast操作"></a>Toast操作</h2><p>手机页面显示toast</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.toast.show(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">d.toast.show(<span class="string">&quot;Hello world&quot;</span>, <span class="number">1.0</span>) <span class="comment"># 显示1s</span></span><br></pre></td></tr></table></figure>
<p>获取toast</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.toast.get_message(wait_timeout=<span class="number">5.0</span>, cache_timeout=<span class="number">10.0</span>, <span class="string">&quot;default message&quot;</span>) </span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;Hello world&quot;</span> <span class="keyword">in</span> d.toast.get_message(<span class="number">5.0</span>, default=<span class="string">&quot;&quot;</span>) <span class="comment"># 断言toast信息</span></span><br><span class="line">d.toast.reset() <span class="comment"># 清除toast缓存</span></span><br></pre></td></tr></table></figure>
<h2 id="滑动swipe"><a href="#滑动swipe" class="headerlink" title="滑动swipe"></a>滑动swipe</h2><p>根据像素坐标滑动<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.swipe(fx, fy, tx, ty, duration = <span class="literal">None</span>, steps = <span class="literal">None</span>) <span class="comment"># 从(fx, fy)滑到(tx, ty)，1 steps大概5ms，如果设置了steps，会忽略duration参数</span></span><br></pre></td></tr></table></figure><br>基于UI对象的滑动<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ele = d(text=<span class="string">&quot;微信&quot;</span>)</span><br><span class="line">ele.swipe(direction, steps=<span class="number">10</span>) <span class="comment"># 从UI元素中心开始滑动，direction包括&quot;left&quot;, &quot;right&quot;, &quot;up&quot;, &quot;down&quot; 4个方向。</span></span><br></pre></td></tr></table></figure></p>
<h2 id="拖动drag-to"><a href="#拖动drag-to" class="headerlink" title="拖动drag_to"></a>拖动drag_to</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).drag_to(x, y, duration=<span class="number">0.5</span>) <span class="comment"># 从Settings UI对象拖动到(x,y)位置</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).drag_to(text=<span class="string">&quot;Clock UI&quot;</span>, duration=<span class="number">0.2</span>) <span class="comment"># 拖动Settings UI对象到Clock UI对象，时间为200ms</span></span><br></pre></td></tr></table></figure>
<h2 id="手势操作"><a href="#手势操作" class="headerlink" title="手势操作"></a>手势操作</h2><p>手势放大缩小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).pinch_in(percent=<span class="number">100</span>, steps=<span class="number">10</span>) <span class="comment"># 缩小</span></span><br><span class="line">d(text=<span class="string">&quot;Settings&quot;</span>).pinch_out() <span class="comment"># 放大</span></span><br></pre></td></tr></table></figure>
<h2 id="UI元素状态和信息"><a href="#UI元素状态和信息" class="headerlink" title="UI元素状态和信息"></a>UI元素状态和信息</h2><p>判断UI元素是否存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d(text=<span class="string">&quot;行情&quot;</span>).exists</span><br><span class="line">d.exists(text=<span class="string">&quot;行情&quot;</span>)</span><br><span class="line">d(text=<span class="string">&quot;行情&quot;</span>).exists(timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>获取元素信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ d(text=<span class="string">&quot;行情&quot;</span>).info</span><br><span class="line">&#123;<span class="string">&#x27;bounds&#x27;</span>: &#123;<span class="string">&#x27;bottom&#x27;</span>: <span class="number">1274</span>, <span class="string">&#x27;left&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;right&#x27;</span>: <span class="number">285</span>, <span class="string">&#x27;top&#x27;</span>: <span class="number">1253</span>&#125;, <span class="string">&#x27;childCount&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;className&#x27;</span>: <span class="string">&#x27;android.widget.TextView&#x27;</span>, <span class="string">&#x27;contentDescription&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;packageName&#x27;</span>: <span class="string">&#x27;com.xueqiu.android&#x27;</span>, <span class="string">&#x27;resourceName&#x27;</span>: <span class="string">&#x27;com.xueqiu.android:id/tab_name&#x27;</span>, <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;行情&#x27;</span>, <span class="string">&#x27;visibleBounds&#x27;</span>: &#123;<span class="string">&#x27;bottom&#x27;</span>: <span class="number">1274</span>, <span class="string">&#x27;left&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;right&#x27;</span>: <span class="number">285</span>, <span class="string">&#x27;top&#x27;</span>: <span class="number">1253</span>&#125;, <span class="string">&#x27;checkable&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;checked&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;clickable&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;enabled&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;focusable&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;focused&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;longClickable&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;scrollable&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;selected&#x27;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure>
<p>获取元素坐标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = self.d(text=<span class="string">&quot;行情&quot;</span>).center() <span class="comment"># 元素中心点</span></span><br><span class="line">x, y = self.d(text=<span class="string">&quot;行情&quot;</span>).center(offset=(<span class="number">0</span>, <span class="number">0</span>)) <span class="comment"># 元素左上点坐标</span></span><br></pre></td></tr></table></figure>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>截取UI对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = d(text=<span class="string">&quot;行情&quot;</span>).screenshot()</span><br><span class="line">im.save(<span class="string">&quot;行情.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>设备截图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.screenshot(<span class="string">&quot;saved.jpg&quot;</span>)</span><br><span class="line">d.screenshot().save(<span class="string">&quot;saved.png&quot;</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;saved.jpg&#x27;</span>, d.screenshot(<span class="built_in">format</span>=<span class="string">&#x27;opencv&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h1 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h1><p>获取指定设备的当前包名和activity</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m uiautomator2 --serial SNHVB20C18002195 current</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;package&quot;</span>: <span class="string">&quot;com.android.settings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;activity&quot;</span>: <span class="string">&quot;.HWSettings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: 11040</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 -m uiautomator2 可以简写为uiautomator2</span></span><br><span class="line"></span><br><span class="line">$ uiautomator2 --serial SNHVB20C18002195 current</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;package&quot;</span>: <span class="string">&quot;com.android.settings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;activity&quot;</span>: <span class="string">&quot;.HWSettings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: 11040</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>screenshot: 截图<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ uiautomator2 screenshot screenshot.jpg</span><br></pre></td></tr></table></figure></p>
<p>uninstall： 卸载<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ uiautomator2 uninstall &lt;package-name&gt; <span class="comment"># 卸载一个包</span></span><br><span class="line">$ uiautomator2 uninstall &lt;package-name-1&gt; &lt;package-name-2&gt; <span class="comment"># 卸载多个包</span></span><br><span class="line">$ uiautomator2 uninstall --all <span class="comment"># 全部卸载</span></span><br></pre></td></tr></table></figure></p>
<p>stop: 停止应用<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ uiautomator2 stop com.example.app <span class="comment"># 停止一个app</span></span><br><span class="line">$ uiautomator2 stop --all <span class="comment"># 停止所有的app</span></span><br></pre></td></tr></table></figure></p>
<h1 id="pytest-Uiautomator2实例"><a href="#pytest-Uiautomator2实例" class="headerlink" title="pytest + Uiautomator2实例"></a>pytest + Uiautomator2实例</h1><p>测试步骤：</p>
<ol>
<li>打开雪球app</li>
<li>进入行情页面</li>
<li>点击搜索</li>
<li>输入“招商银行”</li>
<li>点击股票代码03968</li>
<li>断言股票价格</li>
</ol>
<p>Python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestU2</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._device = <span class="string">&#x27;127.0.0.1:7555&#x27;</span></span><br><span class="line">        self._appPackage = <span class="string">&#x27;com.xueqiu.android&#x27;</span></span><br><span class="line">        self._appActivity = <span class="string">&#x27;.common.MainActivity&#x27;</span></span><br><span class="line"></span><br><span class="line">        self.d = u2.connect_usb(self._device)</span><br><span class="line">        self.d.set_new_command_timeout(<span class="number">300</span>)</span><br><span class="line">        self.d.app_start(self._appPackage, self._appActivity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># self.d.app_stop(self._appPackage)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_uiautomator2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 点击 行情</span></span><br><span class="line">        self.d(className=<span class="string">&quot;android.widget.TextView&quot;</span>, text=<span class="string">&quot;行情&quot;</span>).click()</span><br><span class="line">        search_ele = self.d(resourceId=<span class="string">&quot;com.xueqiu.android:id/action_search&quot;</span>).wait(timeout=<span class="number">3.0</span>)</span><br><span class="line">        <span class="keyword">assert</span> search_ele == <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 点击 搜索</span></span><br><span class="line">        self.d(resourceId=<span class="string">&quot;com.xueqiu.android:id/action_search&quot;</span>).click()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输入</span></span><br><span class="line">         self.d(resourceId=<span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).set_text(<span class="string">&quot;招商银行&quot;</span>)  <span class="comment"># set the text</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 点击 搜索结果</span></span><br><span class="line">        self.d.xpath(<span class="string">&#x27;//*[@text=&quot;03968&quot;]&#x27;</span>).wait(<span class="number">3</span>).click()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 读取股价</span></span><br><span class="line">        wait_price = self.d(resourceId=<span class="string">&quot;com.xueqiu.android:id/current_price&quot;</span>)[<span class="number">0</span>].wait(timeout=<span class="number">3.0</span>)</span><br><span class="line">        <span class="keyword">if</span> wait_price:</span><br><span class="line">            current_price = self.d(resourceId=<span class="string">&quot;com.xueqiu.android:id/current_price&quot;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">float</span>(current_price) &lt; <span class="number">60</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>Uiautomator2</tag>
      </tags>
  </entry>
  <entry>
    <title>Python yaml文件读写</title>
    <url>/posts/python-library-for-pyyaml/</url>
    <content><![CDATA[<p>yaml相比json来说数据表示更加简洁，特别适合用来读取/更新配置文件，和json一样，也是一种数据串行化格式。本文介绍在Python中PyYAML库解析、保存yaml文件的方法。</p>
<a id="more"></a>
<h1 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h1><p>YAML是YAML Ain’t a Markup Language（YAML不是一种标记语言）的缩写，它其实也是一种标记语言（Yet Another Markup Language），但为了强调这种语言以数据作为中心，而不是以标记语言为重点，而用反向缩略语重命名。(维基百科：<a href="https://zh.wikipedia.org/wiki/YAML">https://zh.wikipedia.org/wiki/YAML</a>)</p>
<p>在<a href="https://blog.csdn.net/u010698107/article/details/117629711"><strong>Python中的<code>__new__</code>、<code>__init__</code>以及metaclass</strong></a>中介绍了序列化和反序列化概念，PyYAML使用了metaclass 的超越变形特性实现序列化和反序列化。</p>
<h2 id="YAML和JSON差异"><a href="#YAML和JSON差异" class="headerlink" title="YAML和JSON差异"></a>YAML和JSON差异</h2><ol>
<li>YAML使用缩进表示层级关系，使用空格进行缩进，JSON使用大括号和方括号  </li>
<li>YAML允许使用<code>#</code>注释，JSON不能  </li>
<li>YAML的字符串可以使用单引号或者双引号，JSON必须使用双引号</li>
</ol>
<p>YAML文档：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Arrays:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3</span></span><br><span class="line"><span class="attr">Dicts:</span></span><br><span class="line">  <span class="attr">&#x27;1&#x27;:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">&#x27;2&#x27;:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">Numbers:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Strings:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure></p>
<p>JSON文档：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Arrays&quot;</span>: [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;Numbers&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;Strings&quot;</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="yaml序列化"><a href="#yaml序列化" class="headerlink" title="yaml序列化"></a>yaml序列化</h1><p>Python 安装 PyYAML库<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure></p>
<h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>dump函数将Python对象序列化为一个YAML文档或者字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">data1 = &#123;<span class="string">&#x27;Numbers&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>:<span class="string">&quot;value&quot;</span>, <span class="string">&#x27;Arrays&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;Dicts&#x27;</span>:&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">data = yaml.dump(data1, explicit_start=<span class="literal">True</span>)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Arrays:</span><br><span class="line">- <span class="number">1</span></span><br><span class="line">- <span class="number">2</span></span><br><span class="line">- <span class="number">3</span></span><br><span class="line">Dicts:</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span></span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span></span><br><span class="line">Numbers: <span class="number">1</span></span><br><span class="line">Strings: value</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="dump-all"><a href="#dump-all" class="headerlink" title="dump_all"></a>dump_all</h2><p>序列化多组对象，yaml文件中的多组数据用<code>---</code>分隔。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(yaml.dump_all([data1,data2], explicit_start=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Arrays:</span><br><span class="line">- <span class="number">1</span></span><br><span class="line">- <span class="number">2</span></span><br><span class="line">- <span class="number">3</span></span><br><span class="line">Dicts:</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span></span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span></span><br><span class="line">Numbers: <span class="number">1</span></span><br><span class="line">Strings: value</span><br><span class="line">---</span><br><span class="line">- <span class="number">1</span></span><br><span class="line">- <span class="number">2</span></span><br><span class="line">- <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h2 id="保存到文件中"><a href="#保存到文件中" class="headerlink" title="保存到文件中"></a>保存到文件中</h2><p>可以将序列化数据保存到文件中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data1.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(data1,f,allow_unicode=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="序列化类实例"><a href="#序列化类实例" class="headerlink" title="序列化类实例"></a>序列化类实例</h2><p>和json一样，也可以序列化类实例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">yaml.YAMLObject</span>):</span></span><br><span class="line">  yaml_tag = <span class="string">u&#x27;!Person&#x27;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, height</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.height = height</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>‘s height is <span class="subst">&#123;self.height&#125;</span>cm&quot;</span></span><br><span class="line"></span><br><span class="line">p = Person(name=<span class="string">&#x27;zhangsan&#x27;</span>, height=<span class="number">175</span>)</span><br><span class="line">print(p)</span><br><span class="line">print(yaml.dump(p))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data2.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(p,f,allow_unicode=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zhangsan‘s height <span class="keyword">is</span> 175cm</span><br><span class="line">!Person</span><br><span class="line">height: <span class="number">175</span></span><br><span class="line">name: zhangsan</span><br></pre></td></tr></table></figure>
<p><img src="yaml_dump_class.png" width="60%" height="60%" /></p>
<h1 id="yaml反序列化"><a href="#yaml反序列化" class="headerlink" title="yaml反序列化"></a>yaml反序列化</h1><p>主要有load、safe_load、load_all和safe_load_all4种方法，<code>safe_load()</code>方法只识别标准的YAML标签，防止不信任的对象输入。</p>
<h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p>支持任意类型的python对象，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datas = <span class="string">&#x27;&#123;&quot;Numbers&quot;:1, &quot;Strings&quot;:&quot;value&quot;, &quot;Arrays&quot;:[1,2,3]&#125;&#x27;</span></span><br><span class="line"><span class="comment"># data = yaml.safe_load(datas)</span></span><br><span class="line">data = yaml.load(datas)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Numbers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;Arrays&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="load-all"><a href="#load-all" class="headerlink" title="load_all"></a>load_all</h2><p>加载多组序列化yaml数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data1.yaml&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    datas = yaml.load_all(f)</span><br><span class="line">    print(datas)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        print(data)</span><br><span class="line">        print(<span class="built_in">type</span>(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;generator <span class="built_in">object</span> load_all at <span class="number">0x000001D8AE697CC8</span>&gt;</span><br><span class="line">&#123;<span class="string">&#x27;Arrays&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;Dicts&#x27;</span>: &#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;, <span class="string">&#x27;Numbers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="修改字段内容"><a href="#修改字段内容" class="headerlink" title="修改字段内容"></a>修改字段内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data1.yaml&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># data = yaml.safe_load(f)</span></span><br><span class="line">    data = yaml.load(f)</span><br><span class="line">    data[<span class="string">&#x27;Arrays&#x27;</span>].append(<span class="number">4</span>)</span><br><span class="line">    data[<span class="string">&#x27;Strings&#x27;</span>] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="comment"># data.update(&#123;data[&#x27;Strings&#x27;]:hello&#125;)</span></span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data1.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(data,f,allow_unicode=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Arrays&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">&#x27;Dicts&#x27;</span>: &#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;, <span class="string">&#x27;Numbers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>: <span class="string">&#x27;hello&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="加载Python类实例"><a href="#加载Python类实例" class="headerlink" title="加载Python类实例"></a>加载Python类实例</h2><p>和json一样，也支持加载Python类的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">yaml.YAMLObject</span>):</span></span><br><span class="line">  yaml_tag = <span class="string">u&#x27;!Person&#x27;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, height</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.height = height</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>‘s height is <span class="subst">&#123;self.height&#125;</span>cm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data2.yaml&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    p = yaml.load(f)</span><br><span class="line">    print(p.name)</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zhangsan</span><br></pre></td></tr></table></figure></p>
<p><strong>参考文档：</strong><br>pyyaml官方文档：<a href="https://pyyaml.org/wiki/PyYAMLDocumentation">https://pyyaml.org/wiki/PyYAMLDocumentation</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>Python json文件读写</title>
    <url>/posts/python-library-for-json/</url>
    <content><![CDATA[<p>JSON (JavaScript Object Notation)是一个受 JavaScript 的对象字面量语法启发的轻量级数据交换格式，本文介绍Python json库的使用，也就是json的序列化和反序列化方法。</p>
<a id="more"></a>
<h1 id="json序列化"><a href="#json序列化" class="headerlink" title="json序列化"></a>json序列化</h1><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>写入到文件，将对象转换为json字符串格式，这样更容易存储。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">&#x27;Numbers&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>:<span class="string">&quot;value&quot;</span>, <span class="string">&#x27;Arrays&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;Dicts&#x27;</span>:&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data1.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p><img src="json_dump.png" width="60%" height="60%" /></p>
<h2 id="dumps"><a href="#dumps" class="headerlink" title="dumps"></a>dumps</h2><p>将对象转换为string，这样更容易传输</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = &#123;<span class="string">&#x27;Numbers&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>:<span class="string">&quot;value&quot;</span>, <span class="string">&#x27;Arrays&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">data = json.dumps(data2, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Arrays&quot;</span>: [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;Numbers&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;Strings&quot;</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="将类实例转化成json字符串"><a href="#将类实例转化成json字符串" class="headerlink" title="将类实例转化成json字符串"></a>将类实例转化成json字符串</h2><p>也可以将类实例转化成json字符串，需要先将实例转化为可序列化操作的对象。下面介绍3种方案：  </p>
<ol>
<li>获取实例的<code>__dict__</code>成员变量  </li>
<li>使用Python内置函数<code>vars()</code>获取<code>__dict__</code>  </li>
<li>类继承JSONEncoder，自定义JSONEncoder.default()函数  </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonClassSerializable</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;JSON serializer for objects&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, Person):</span><br><span class="line">            <span class="keyword">return</span> obj.__dict__</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json.JSONEncoder.default(self, obj)    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, height</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.height = height</span><br><span class="line">    </span><br><span class="line">p = Person(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">175</span>)</span><br><span class="line">print(p.__dict__)</span><br><span class="line">data1 = json.dumps(p.__dict__, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line">print(data1)</span><br><span class="line">data2 = json.dumps(<span class="built_in">vars</span>(p), sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line">print(data2)</span><br><span class="line">data3 = json.dumps(p, default=<span class="keyword">lambda</span> x: x.__dict__, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line">print(data3)</span><br><span class="line">data4 = json.dumps(p, cls=JsonClassSerializable, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line">print(data4)</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">175</span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">175</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">175</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">175</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">175</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="json反序列化"><a href="#json反序列化" class="headerlink" title="json反序列化"></a>json反序列化</h1><p>json反序列化是将json数据或者字符串转化为Python对象，对应load和loads两个方法：</p>
<ul>
<li>load：针对文件句柄，用于读取文件  </li>
<li>loads：针对内存对象，将string转换为对象</li>
</ul>
<h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data1.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    print(data)</span><br><span class="line">    print(<span class="built_in">type</span>(data))</span><br><span class="line">    print(<span class="built_in">type</span>(data[<span class="string">&#x27;Arrays&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Arrays&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;Numbers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Objects&#x27;</span>: &#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;, <span class="string">&#x27;Strings&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="loads"><a href="#loads" class="headerlink" title="loads"></a>loads</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datas = <span class="string">&#x27;&#123;&quot;Numbers&quot;:1, &quot;Strings&quot;:&quot;value&quot;, &quot;Arrays&quot;:[1,2,3]&#125;&#x27;</span></span><br><span class="line">data = json.loads(datas)</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="built_in">type</span>(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Numbers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Strings&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;Arrays&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="JSON反序列化类对象"><a href="#JSON反序列化类对象" class="headerlink" title="JSON反序列化类对象"></a>JSON反序列化类对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d</span>):</span></span><br><span class="line">        self.__dict__ = d</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;My name is <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;height&quot;: 175&#125;&#x27;</span> </span><br><span class="line">p = json.loads(data, object_hook=Person)</span><br><span class="line">print(p)</span><br><span class="line">print(p.name)</span><br><span class="line">print(p.height)</span><br><span class="line">p.introduce()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x000001FA98439748</span>&gt;</span><br><span class="line">zhangsan</span><br><span class="line"><span class="number">175</span></span><br><span class="line">My name <span class="keyword">is</span> zhangsan</span><br></pre></td></tr></table></figure></p>
<p><strong>文档</strong></p>
<ol>
<li><a href="https://docs.python.org/zh-cn/3.9/library/json.html">https://docs.python.org/zh-cn/3.9/library/json.html</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试工具Airtest</title>
    <url>/posts/app-testing-tools-for-airtestproject/</url>
    <content><![CDATA[<p>AirtestProject是由网易游戏推出的一款跨平台的UI自动化测试框架，主要是面向游戏的UI自动化测试，比如Unity3D、cocos2dx-*游戏框架，也支持Android原生app、iOS app、微信小程序的UI测试。本文主要介绍如何使用AirtestProject进行Android APP自动化测试。</p>
<a id="more"></a>
<h1 id="AirtestProject组件"><a href="#AirtestProject组件" class="headerlink" title="AirtestProject组件"></a>AirtestProject组件</h1><p>AirtestProject包括一下组件：</p>
<ul>
<li>Airtest：基于图像识别的自动化测试框架，适用于游戏和App，图像识别主要使用opencv库。项目地址：<a href="https://github.com/AirtestProject/Airtest">https://github.com/AirtestProject/Airtest</a></li>
<li>Poco：基于UI元素识别的测试框架，支持Unity3D/cocos2dx-*/Android原生app/iOS原生app/微信小程序。项目github地址：<a href="https://github.com/AirtestProject/Poco">https://github.com/AirtestProject/Poco</a></li>
<li>AirtestIDE：图形界面，内置了Airtest和Poco的相关插件。官网地址：<a href="http://airtest.netease.com/">http://airtest.netease.com/</a></li>
<li>AirLab：真机自动化云测试平台。</li>
</ul>
<p>下面介绍如何使用Airtest和Poco进行自动化测试。</p>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>先安装一下AirtestIDE，主要用于截图、UI 元素查看以及脚本调试，下载地址：<a href="http://airtest.netease.com/">http://airtest.netease.com/</a></p>
<p><img src="airtest-ide-download-address.png" width="80%" height="80%" /></p>
<p>下载完成后解压，打开AirtestIDE.exe文件，连接一个模拟器，模拟器页面会实时显示在右边：</p>
<p><img src="airtest-connect-mumu.png" width="80%" height="80%" /></p>
<p>Python安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install -U airtest <span class="comment"># airtest测试框架</span></span><br><span class="line">pip install pocoui <span class="comment"># poco测试框架</span></span><br></pre></td></tr></table></figure>
<h1 id="Airtest使用"><a href="#Airtest使用" class="headerlink" title="Airtest使用"></a>Airtest使用</h1><h2 id="安装卸载apk"><a href="#安装卸载apk" class="headerlink" title="安装卸载apk"></a>安装卸载apk</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">install(<span class="string">&quot;path/to/your/apk&quot;</span>) <span class="comment"># 安装APK</span></span><br><span class="line">uninstall(<span class="string">&quot;package_name_of_your_apk&quot;</span>) <span class="comment"># 卸载APK</span></span><br></pre></td></tr></table></figure>
<h2 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init_device(platform=<span class="string">&quot;Android&quot;</span>,uuid=<span class="string">&quot;SNHVB20C18002195&quot;</span>) <span class="comment"># 连接android设备SNHVB20C18002195</span></span><br><span class="line">init_device(platform=<span class="string">&quot;Windows&quot;</span>,uuid=<span class="string">&quot;29563034&quot;</span>)  <span class="comment"># uuid表示Android设备的序列号，Windows的句柄，iOS的uuid</span></span><br><span class="line">connect_device(<span class="string">&#x27;Android:///&#x27;</span>) <span class="comment"># 本地android设备</span></span><br><span class="line">connect_device(<span class="string">&#x27;Android:///SNHVB20C18002195&#x27;</span>) <span class="comment"># SNHVB20C18002195为手机序列号，可通过adb devices命令查看</span></span><br><span class="line">connect_device(<span class="string">&quot;Android://127.0.0.1:7555&quot;</span>)</span><br><span class="line">connect_device(<span class="string">&quot;Windows:///&quot;</span>)  <span class="comment"># 连接到windows桌面</span></span><br><span class="line">connect_device(<span class="string">&quot;Windows:///29563034&quot;</span>)  <span class="comment"># 连接到句柄29563034的windows应用</span></span><br><span class="line">connect_device(<span class="string">&quot;iOS:///127.0.0.1:8100&quot;</span>)  <span class="comment"># 连接iOS 设备</span></span><br></pre></td></tr></table></figure>
<h2 id="打开、停止APP"><a href="#打开、停止APP" class="headerlink" title="打开、停止APP"></a>打开、停止APP</h2><p>打开APP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_app(package, activity=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>停止APP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stop_app(package)</span><br></pre></td></tr></table></figure>
<h2 id="元素操作方法"><a href="#元素操作方法" class="headerlink" title="元素操作方法"></a>元素操作方法</h2><p>常用的元素操作方法主要包括下面5种：</p>
<p><img src="airtest-operation.png" width="80%" height="80%" /></p>
<h3 id="touch点击操作"><a href="#touch点击操作" class="headerlink" title="touch点击操作"></a>touch点击操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">touch((<span class="number">100</span>, <span class="number">100</span>), times=<span class="number">1</span>) <span class="comment"># 点击绝对坐标，times为点击次数，默认为1次</span></span><br><span class="line">touch((<span class="number">100</span>, <span class="number">100</span>), duration=<span class="number">2</span>) <span class="comment"># Android 和 Windows 平台应用可设置点击时间duration</span></span><br><span class="line">touch((<span class="number">100</span>, <span class="number">100</span>), right_click=<span class="literal">True</span>) <span class="comment"># Windows右键点击</span></span><br><span class="line">touch(Template(<span class="string">r&quot;tpl1624889731448.png&quot;</span>, record_pos=(-<span class="number">0.129</span>, <span class="number">0.832</span>), resolution=(<span class="number">720</span>, <span class="number">1280</span>))) <span class="comment"># 点击图片中心，Template类包括了图片位置，手机分辨率，图片保存位置属性以及模板匹配，查找图片在手机的位置等方法</span></span><br></pre></td></tr></table></figure>
<p>图片可以通过AirtestIDE来获取，点击Airtest辅助窗的touch方法，然后在设备窗中选择要操作的位置区域：</p>
<p><img src="airtest-template-picture.png" width="80%" height="80%" /></p>
<h3 id="swipe滑动操作"><a href="#swipe滑动操作" class="headerlink" title="swipe滑动操作"></a>swipe滑动操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">swipe(v1, v2, vector=<span class="literal">None</span>) <span class="comment"># 从v1滑动到v2，v1为起点，可以是Template类或者像素坐标</span></span><br><span class="line">swipe((<span class="number">341</span>,<span class="number">297</span>), vector=[<span class="number">0.0131</span>, <span class="number">0.2495</span>])</span><br><span class="line">swipe(Template(<span class="string">r&quot;tpl1624977188003.png&quot;</span>, record_pos=(-<span class="number">0.015</span>, -<span class="number">0.204</span>), resolution=(<span class="number">720</span>, <span class="number">1280</span>)), vector=[<span class="number">0.0011</span>, <span class="number">0.2826</span>])</span><br></pre></td></tr></table></figure>
<h3 id="text文本输入"><a href="#text文本输入" class="headerlink" title="text文本输入"></a>text文本输入</h3><p>使用此方法时要确保输入框为活动状态，可以先点击一下输入框，然后再输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text(<span class="string">&quot;test&quot;</span>, enter=<span class="literal">True</span>) <span class="comment"># 输入完成后，输入Enter键</span></span><br></pre></td></tr></table></figure>
<h3 id="keyevent键盘输入"><a href="#keyevent键盘输入" class="headerlink" title="keyevent键盘输入"></a>keyevent键盘输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keyevent(keyname) <span class="comment"># 在Android中类似于执行 adb shell input keyevent KEYNAME</span></span><br><span class="line">keyevent(<span class="string">&quot;HOME&quot;</span>) <span class="comment"># 或者 keyevent(&quot;3&quot;) HOME键</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Android的按键可参考：<a href="https://developer.android.com/reference/android/view/KeyEvent">https://developer.android.com/reference/android/view/KeyEvent</a></p>
<h3 id="snapshot截图"><a href="#snapshot截图" class="headerlink" title="snapshot截图"></a>snapshot截图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">snapshot(filename=<span class="literal">None</span>, msg=<span class="string">&quot;&quot;</span>, quality=<span class="literal">None</span>, max_size=<span class="literal">None</span>) <span class="comment"># 保存屏幕截图，filename：图像名，quality：图像质量（1-99），max_size：大小</span></span><br></pre></td></tr></table></figure>
<h3 id="wait等待出现"><a href="#wait等待出现" class="headerlink" title="wait等待出现"></a>wait等待出现</h3><p>等待目标图片出现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait(Template(<span class="string">r&quot;tpl1624977188003.png&quot;</span>), timeout=<span class="literal">None</span>, interval=<span class="number">0.5</span>, intervalfunc=<span class="literal">None</span>) <span class="comment"># timeout：最大等待时间，interval：检查间隔时间</span></span><br></pre></td></tr></table></figure>
<h3 id="exists检查目标是否出现"><a href="#exists检查目标是否出现" class="headerlink" title="exists检查目标是否出现"></a>exists检查目标是否出现</h3><p>检查当前界面是否出现指定目标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pos = exists(Template(<span class="string">r&quot;tpl1624977188003.png&quot;</span>)) <span class="comment"># 如果找到目标，可以返回目标位置坐标</span></span><br><span class="line"><span class="keyword">if</span> pos:</span><br><span class="line">	touch(pos)</span><br></pre></td></tr></table></figure>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="断言目标是否存在"><a href="#断言目标是否存在" class="headerlink" title="断言目标是否存在"></a>断言目标是否存在</h3><p>断言目标存在：assert_exists</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">assert_exists(Template(<span class="string">r&quot;tpl1624977188003.png&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>断言目标不存在：assert_not_exists<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">assert_not_exists(Template(<span class="string">r&quot;tpl1624977188003.png&quot;</span>))</span><br></pre></td></tr></table></figure></p>
<h3 id="值是否相等"><a href="#值是否相等" class="headerlink" title="值是否相等"></a>值是否相等</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">assert_equal(first, second) <span class="comment"># 断言两个值相等</span></span><br><span class="line">assert_not_equal(first, second) <span class="comment"># 断言两个值不相等 </span></span><br></pre></td></tr></table></figure>
<h1 id="Poco使用"><a href="#Poco使用" class="headerlink" title="Poco使用"></a>Poco使用</h1><p>UI 元素可通过在AirtestIDE的Poco 辅助窗查看：</p>
<p><img src="airtest-poco-inspector.png" width="80%" height="80%" /></p>
<h2 id="poco初始化"><a href="#poco初始化" class="headerlink" title="poco初始化"></a>poco初始化</h2><p>Android手机开启开发者模式，连接电脑，通过<code>adb devices</code>查看手机是否连接成功。</p>
<p>初始化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> poco.drivers.android.uiautomation <span class="keyword">import</span> AndroidUiautomationPoco</span><br><span class="line"></span><br><span class="line">poco = AndroidUiautomationPoco(force_restart=<span class="literal">False</span>,use_airtest_input=<span class="literal">True</span>, screenshot_each_action=<span class="literal">False</span>)</span><br><span class="line">poco.device.wake() <span class="comment"># 执行唤醒：进入主页，启动Yosemite</span></span><br></pre></td></tr></table></figure>
<h2 id="UI元素定位"><a href="#UI元素定位" class="headerlink" title="UI元素定位"></a>UI元素定位</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco(<span class="string">&#x27;node_name&#x27;</span>) <span class="comment"># 默认第一个参数为节点名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过name 或者其它属性定位</span></span><br><span class="line">poco(text=<span class="string">&#x27;行情&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;android.widget.TextView&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="相对选择器"><a href="#相对选择器" class="headerlink" title="相对选择器"></a>相对选择器</h3><p>和XPath的相对定位一样，poco可以根据父子关系、兄弟关系、祖孙关系来定位。</p>
<p><img src="airtest-poco-locator.png" width="80%" height="80%" /></p>
<p>子节点和子孙节点定位：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># select by direct child/offspring</span></span><br><span class="line">poco(<span class="string">&quot;android:id/tabs&quot;</span>).child(<span class="string">&quot;android.widget.RelativeLayout&quot;</span>)[<span class="number">1</span>].offspring(text=<span class="string">&quot;行情&quot;</span>).click() <span class="comment"># 具有多个元素的情况下，可以使用索引，索引从0开始。</span></span><br></pre></td></tr></table></figure>
<p>兄弟节点定位：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco(<span class="string">&quot;name&quot;</span>).sibling(<span class="string">&quot;sibling_name&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>父节点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco(<span class="string">&quot;name&quot;</span>).parent(<span class="string">&quot;parent_name&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h3><p>获取UI对象属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ele = poco(text=<span class="string">&#x27;行情&#x27;</span>)</span><br><span class="line">print(ele.attr(<span class="string">&#x27;type&#x27;</span>))  <span class="comment"># 属性</span></span><br><span class="line">print(ele.attr(<span class="string">&#x27;text&#x27;</span>)) <span class="comment"># text属性</span></span><br><span class="line">print(ele.get_bounds())  <span class="comment"># 边界框</span></span><br><span class="line">print(ele.get_position()) <span class="comment"># 坐标</span></span><br><span class="line">print(ele.get_size()) <span class="comment"># UI 元素大小</span></span><br><span class="line">print(ele.get_name())  <span class="comment"># 元素名称</span></span><br><span class="line">print(ele.get_text())  <span class="comment"># 元素文本值，和ele.attr(&#x27;text&#x27;)一样</span></span><br><span class="line">print(ele.exists())  <span class="comment"># 元素是否存在</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">android.widget.TextView</span><br><span class="line">行情</span><br><span class="line">[<span class="number">0.978515625</span>, <span class="number">0.39583333333333337</span>, <span class="number">0.994921875</span>, <span class="number">0.3541666666666667</span>]</span><br><span class="line">[<span class="number">0.375</span>, <span class="number">0.98671875</span>]</span><br><span class="line">[<span class="number">0.041666666666666664</span>, <span class="number">0.01640625</span>]</span><br><span class="line">com.xueqiu.android:<span class="built_in">id</span>/tab_name</span><br><span class="line">行情</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>poco中的坐标采用百分比坐标，将x和y方向都缩放为0-1。</p>
<h2 id="UI-元素操作"><a href="#UI-元素操作" class="headerlink" title="UI 元素操作"></a>UI 元素操作</h2><p>下面介绍几种常见poco元素操作方法</p>
<h3 id="click点击"><a href="#click点击" class="headerlink" title="click点击"></a>click点击</h3><p>点击UI元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).click() <span class="comment"># 默认点击UI元素锚点（左上角）</span></span><br><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).click(<span class="string">&#x27;center&#x27;</span>) <span class="comment"># 点击中心点</span></span><br><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).click([<span class="number">0.5</span>, <span class="number">0.5</span>])    <span class="comment"># 点击中心点</span></span><br><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).focus([<span class="number">0.5</span>, <span class="number">0.5</span>]).click()  <span class="comment"># 点击中心点</span></span><br></pre></td></tr></table></figure>
<p>点击坐标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco.click([<span class="number">0.5</span>, <span class="number">0.5</span>])  <span class="comment"># 点击屏幕中心点</span></span><br><span class="line">poco.long_click([<span class="number">0.5</span>, <span class="number">0.5</span>], duration=<span class="number">3</span>) <span class="comment"># 长按</span></span><br></pre></td></tr></table></figure>
<h3 id="set-text文本输入"><a href="#set-text文本输入" class="headerlink" title="set_text文本输入"></a>set_text文本输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).set_text(text) <span class="comment"># 相文本框name输入文本</span></span><br></pre></td></tr></table></figure>
<h3 id="swipe滑动"><a href="#swipe滑动" class="headerlink" title="swipe滑动"></a>swipe滑动</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">swipe(direction, focus=<span class="literal">None</span>, duration=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>direction ： 滑动方向，可选up，down，left，right，也可传入向量坐标。</p>
</li>
<li><p>duration：滑动持续时间，时间越短，滑动速度就越快，滑动的距离就越长</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ele = poco(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">ele.swipe(<span class="string">&#x27;up&#x27;</span>) <span class="comment"># 向上滑动</span></span><br><span class="line">ele.swipe([<span class="number">0</span>,-<span class="number">0.1</span>]) <span class="comment"># 向上滑动</span></span><br><span class="line">ele.swipe(<span class="string">&#x27;down&#x27;</span>) <span class="comment"># [0,0.1] 下滑</span></span><br><span class="line">ele.swipe(<span class="string">&#x27;left&#x27;</span>) <span class="comment"># [-0.1,0] 左滑</span></span><br><span class="line">ele.swipe(<span class="string">&#x27;right&#x27;</span>)<span class="comment"># [0.1,0] 右滑</span></span><br><span class="line">ele.swipe([<span class="number">0.2</span>, -<span class="number">0.2</span>])  <span class="comment"># 右上45度角滑动swipe sqrt(0.08) 单元距离</span></span><br><span class="line">ele.swipe([<span class="number">0.2</span>, -<span class="number">0.2</span>], duration=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<p>根据坐标滑动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco.swipe(p1, p2=<span class="literal">None</span>, direction=<span class="literal">None</span>, duration=<span class="number">2.0</span>)</span><br></pre></td></tr></table></figure>
<p>从坐标 (100, 100) 滑动到 (100, 200) ，手机屏幕分辨率为1920×1080<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco.swipe([<span class="number">100</span>/<span class="number">1920</span>, <span class="number">100</span>/<span class="number">1080</span>], [<span class="number">100</span>/<span class="number">1920</span>, <span class="number">200</span>/<span class="number">1080</span>], duration=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">poco.swipe([<span class="number">100</span>/<span class="number">1920</span>, <span class="number">100</span>/<span class="number">1080</span>], direction=[<span class="number">0</span>, <span class="number">100</span>/<span class="number">1080</span>], duration=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="drag-to拖到"><a href="#drag-to拖到" class="headerlink" title="drag_to拖到"></a>drag_to拖到</h3><p>从一个UI元素拖到另一个UI元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ele1 = poco(<span class="string">&#x27;name1&#x27;</span>).focus([<span class="number">0.5</span>,<span class="number">0.5</span>])</span><br><span class="line">ele2 = poco(<span class="string">&#x27;name2&#x27;</span>).focus([<span class="number">0.5</span>,<span class="number">0.5</span>])</span><br><span class="line">ele.drag_to(ele2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="wait等待"><a href="#wait等待" class="headerlink" title="wait等待"></a>wait等待</h3><p>等待目标对象出现，返回目标对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).wait(<span class="number">5</span>).click()  <span class="comment"># 最多等待5秒，元素出现后点击</span></span><br><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).wait(<span class="number">5</span>).exists()  <span class="comment"># 最多等待5秒，返回元素是否出现</span></span><br><span class="line"></span><br><span class="line">poco(<span class="string">&#x27;name&#x27;</span>).wait_for_appearance(timeout=<span class="number">10</span>) <span class="comment"># 等待元素出现</span></span><br><span class="line">poco(<span class="string">&quot;name&quot;</span>).wait_for_disappearance(timeout=<span class="number">10</span>) <span class="comment"># 等待元素消失</span></span><br><span class="line"></span><br><span class="line">ele1 = poco(<span class="string">&#x27;name1&#x27;</span>)</span><br><span class="line">ele2 = poco(<span class="string">&#x27;name2&#x27;</span>)</span><br><span class="line">poco.wait_for_all([ele1,ele2], timeout=<span class="number">10</span>) <span class="comment"># 等待2个UI元素标签全部出现</span></span><br><span class="line">poco.wait_for_any([ele1,ele2], timeout=<span class="number">10</span>) <span class="comment"># 等待任意一个UI元素出现</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">b64img, fmt = poco.snapshot(width=<span class="number">720</span>)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;screen.&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(fmt), <span class="string">&#x27;wb&#x27;</span>).write(b64decode(b64img))</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了Airtest和poco的使用方法，Airtest的图片识别功能很好用，poco用于UI元素操作。可以将这它们结合起来使用，特别是在游戏的测试中，需要通过图标来定位。Airtest+poco还有一个优点就是app初始化启动速度要快于appium。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>Airtest</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数的参数类型</title>
    <url>/posts/python-notes-for-passing-arguments-in-function/</url>
    <content><![CDATA[<p>python函数的参数类型主要包括必选参数、可选参数、可变参数、位置参数和关键字参数，本文介绍一下他们的定义以及可变数据类型参数传递需要注意的地方。<br><a id="more"></a></p>
<h1 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h1><p>必选参数（Required arguments）是必须输入的参数，比如下面的代码，必须输入2个参数，否则就会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_divide</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">  <span class="keyword">return</span> num1/num2</span><br><span class="line"></span><br><span class="line">print(test_divide(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>其实上面例子中的参数 num1和num2也属于关键字参数，比如可以通过如下方式调用：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(test_divide(num1=<span class="number">1</span>,num2=<span class="number">2</span>))</span><br><span class="line">print(test_divide(num2=<span class="number">2</span>,num1=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure></p>
<h1 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h1><p>可选参数（Optional arguments）可以不用传入函数，有一个默认值，如果没有传入会使用默认值，不会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_add</span>(<span class="params">num=<span class="number">1</span></span>):</span></span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>位置参数（positional arguments）根据其在函数定义中的位置调用，下面是pow()函数的帮助信息:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">help</span>(pow)</span><br><span class="line">Help on built-in <span class="keyword">function</span> pow <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">pow(x, y, z=None, /)</span><br><span class="line">    Equivalent to x**y (with two arguments) or x**y % z (with three arguments)</span><br><span class="line"></span><br><span class="line">    Some types, such as ints, are able to use a more efficient algorithm when</span><br><span class="line">    invoked using the three argument form.</span><br></pre></td></tr></table></figure><br>x，y，z三个参数的的顺序是固定的，并且不能使用关键字：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line">print(<span class="built_in">pow</span>(<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line">print(<span class="built_in">pow</span>(x=<span class="number">5</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br></pre></td></tr></table></figure></p>
<p>在上面的pow()函数帮助信息中可以看到位置参数后面加了一个反斜杠<code>/</code>，这是python内置函数的语法定义，Python开发人员不能在python3.8版本之前的代码中使用此语法。但python3.0到3.7版本可以使用如下方式定义位置参数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span>(<span class="params">positional_or_keyword_parameters, *, keyword_only_parameters</span>):</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br>星号前面的参数为位置参数或者关键字参数，星号后面是强制关键字参数，具体介绍见<a href="#强制关键字参数">强制关键字参数</a>。</p>
<p>python3.8版本引入了强制位置参数（Positional-Only Parameters），也就是我们可以使用反斜杠<code>/</code>语法来定义位置参数了，可以写成如下形式：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span>(<span class="params">positional_only_parameters, /, positional_or_keyword_parameters, *, keyword_only_parameters</span>):</span></span><br></pre></td></tr></table></figure><br>来看下面的例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_divide</span>(<span class="params">num1, num2, /</span>):</span></span><br><span class="line">  <span class="keyword">return</span> num1/num2</span><br><span class="line"></span><br><span class="line">print(test_divide(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">print(test_divide(num1=<span class="number">1</span>,num2=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><br>python3.8运行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.5</span></span><br><span class="line">TypeError: test_divide() got some positional-only arguments passed <span class="keyword">as</span> keyword arguments: <span class="string">&#x27;num1, num2&#x27;</span></span><br></pre></td></tr></table></figure><br>不能使用关键字参数形式赋值了。</p>
<h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>可变参数 (varargs argument) 就是传入的参数个数是可变的，可以是0-n个，使用星号（<code>*</code>）将输入参数自动组装为一个元组（tuple）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    print(numbers)</span><br><span class="line">    print(<span class="built_in">type</span>(numbers))</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + num</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">print(test_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">10</span></span><br></pre></td></tr></table></figure>
<h1 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h1><p>关键字参数（keyword argument）允许将任意个含参数名的参数导入到python函数中，使用双星号（<code>**</code>），在函数内部自动组装为一个字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">**message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line">    print(<span class="built_in">type</span>(message))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> message:</span><br><span class="line">        print(<span class="string">f&quot;my name is <span class="subst">&#123;message[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">person(name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">my</span> <span class="title">name</span> <span class="title">is</span> <span class="title">zhangsan</span></span></span><br></pre></td></tr></table></figure>
<p>上面介绍的参数可以混合使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name,age=<span class="number">20</span>,*hobby, **message</span>):</span>    </span><br><span class="line">    print(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>, age <span class="subst">&#123;age&#125;</span>, hobbies <span class="subst">&#123;hobby&#125;</span>, others <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">person(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;running&#x27;</span>,<span class="string">&#x27;swimming&#x27;</span>, height=<span class="number">175</span>, weight=<span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">my name <span class="keyword">is</span> zhangsan, age <span class="number">18</span>, hobbies (<span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;swimming&#x27;</span>), others &#123;<span class="string">&#x27;height&#x27;</span>: <span class="number">175</span>, <span class="string">&#x27;weight&#x27;</span>: <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure>
<p>注意：由于传入的参数个数不定，所以当与普通参数一同使用时，必须把带星号的参数放在最后。</p>
<h1 id="强制关键字参数"><a href="#强制关键字参数" class="headerlink" title="强制关键字参数"></a>强制关键字参数</h1><p>强制关键字参数（Keyword-Only Arguments）是python3引入的特性，可参考：<a href="https://www.python.org/dev/peps/pep-3102/">https://www.python.org/dev/peps/pep-3102/</a>。 使用一个星号隔开：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name,age=<span class="number">20</span>,*, height, weight</span>):</span>    </span><br><span class="line">    print(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>, age <span class="subst">&#123;age&#125;</span>, height <span class="subst">&#123;height&#125;</span>, weight <span class="subst">&#123;weight&#125;</span>&quot;</span>)    </span><br><span class="line"></span><br><span class="line">person(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>, height=<span class="number">175</span>, weight=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><br>在<a href="#位置参数">位置参数</a>一节介绍过星号前面的参数可以是位置参数和关键字参数。星号后面的参数都是强制关键字参数，必须以指定参数名的方式传参，如果强制关键字参数没有设置默认参数，调用函数时必须传参。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name,age=<span class="number">20</span>,*, height=<span class="number">175</span>, weight</span>):</span>    </span><br><span class="line">    print(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>, age <span class="subst">&#123;age&#125;</span>, height <span class="subst">&#123;height&#125;</span>, weight <span class="subst">&#123;weight&#125;</span>&quot;</span>)    </span><br><span class="line"></span><br><span class="line">person(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError: person() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;weight&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>也可以在可变参数后面命名关键字参数，这样就不需要星号分隔符了：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name,age=<span class="number">20</span>,*hobby, height=<span class="number">175</span>, weight</span>):</span>    </span><br><span class="line">    print(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>, age <span class="subst">&#123;age&#125;</span>, hobbies <span class="subst">&#123;hobby&#125;</span>, height <span class="subst">&#123;height&#125;</span>, weight <span class="subst">&#123;weight&#125;</span>&quot;</span>)    </span><br><span class="line"></span><br><span class="line">person(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;running&#x27;</span>,<span class="string">&#x27;swimming&#x27;</span>, weight=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my name <span class="keyword">is</span> zhangsan, age <span class="number">18</span>, hobbies (<span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;swimming&#x27;</span>), height <span class="number">175</span>, weight <span class="number">60</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Python函数的参数传递"><a href="#Python函数的参数传递" class="headerlink" title="Python函数的参数传递"></a>Python函数的参数传递</h1><p>在<a href="https://blog.csdn.net/u010698107/article/details/117406942">Python对象及内存管理机制</a>中介绍了python中的参数传递属于对象的<strong>引用传递</strong>（pass by object reference），在编写函数的时候需要特别注意。</p>
<p>先来看个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func1</span>(<span class="params">l</span>):</span></span><br><span class="line">  l.append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l2 = l1</span><br><span class="line">test_func1(l1)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p> l1 和 l2指向相同的地址，由于列表可变，l1改变时，l2也跟着变了。</p>
<p>接着看下面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func2</span>(<span class="params">l</span>):</span></span><br><span class="line">  l = l + [<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">test_func2(l1)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>l1没有变化！为什么不是[1, 2, 3, 4]呢？</p>
<p>l = l + [4]表示创建一个“末尾加入元素 4“的新列表，并让 l 指向这个新的对象，l1没有进行任何操作，因此 l1 的值不变。如果要改变l1的值，需要加一个返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func3</span>(<span class="params">l</span>):</span></span><br><span class="line">  l = l + [<span class="number">4</span>]</span><br><span class="line">  <span class="keyword">return</span> l</span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l1 = test_func3(l1)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>下面的代码执行结果又是什么呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func4</span>(<span class="params">l</span>):</span></span><br><span class="line">  l.append(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l2 = l1</span><br><span class="line">l1 = test_func4(l1)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br><span class="line">print(l1 <span class="keyword">is</span> l2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>和第一个例子一样，l1 和 l2指向相同的地址，所以会一起改变。这个问题怎么解决呢？</p>
<p>可以使用下面的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func5</span>(<span class="params">l</span>):</span></span><br><span class="line">  l = l + [<span class="number">4</span>]</span><br><span class="line">  <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l2 = l1</span><br><span class="line">l1 = test_func5(l1)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br><span class="line">print(l1 <span class="keyword">is</span> l2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<p>也可以使用浅拷贝或者深度拷贝，具体使用方法可参考<a href="https://blog.csdn.net/u010698107/article/details/117406942">Python对象及内存管理机制</a>。这个问题在Python编程时需要特别注意。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了python函数的几种参数类型：必选参数、可选参数、可变参数、位置参数、强制位置参数、关键字参数、强制关键字参数，注意他们不是完全独立的，比如必选参数、可选参数也可以是关键字参数，位置参数可以是必选参数或者可选参数。</p>
<p>另外，python中的参数传递属于对象的<strong>引用传递</strong>，在对可变数据类型进行参数传递时需要特别注意，如有必要，使用python的拷贝方法。</p>
<p><strong>参考文档：</strong></p>
<ol>
<li>Positional-Only Parameters：<a href="https://www.python.org/dev/peps/pep-0570/">https://www.python.org/dev/peps/pep-0570/</a></li>
<li>Keyword-Only Arguments：<a href="https://www.python.org/dev/peps/pep-3102/">https://www.python.org/dev/peps/pep-3102/</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>参数类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 命令行参数解析之 Click</title>
    <url>/posts/python-library-for-click/</url>
    <content><![CDATA[<p>在<a href="https://blog.csdn.net/u010698107/article/details/116346563">Python笔记：命令行参数解析</a>中介绍了sys.argv、getopt 和 argparse三种命令行参数解析方法，今天来分享另外一个python命令行工具click，它是用来支持 Web开发框架 Flask的，都由<a href="https://palletsprojects.com/">Pallets 项目</a>组织开发。</p>
<a id="more"></a>
<h1 id="click简介"><a href="#click简介" class="headerlink" title="click简介"></a>click简介</h1><p>click相比于其他命令行工具的一个优势就是支持多个命令的嵌套和组合，主要包含以下特性：（摘自：<a href="https://click-docs-zh-cn.readthedocs.io/zh/latest/why.html">为什么用 Click?</a>）</p>
<ul>
<li>没有限制可以简单组合</li>
<li>完全遵循 Unix 命令行约定</li>
<li>支持从环境变量中加载值</li>
<li>支持特定值的提示</li>
<li>充分地可嵌套可组合</li>
<li>兼容python 2 和 3</li>
<li>支持外部文件处理</li>
<li>与一些常用的工具帮手结合 (获得 terminal 大小, ANSI 字符颜色, 直接输入按键, 屏幕清理, 获取 config 路径, 启动 apps 和 editors, 等。)</li>
</ul>
<h1 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h1><p>下面使用click来实现文章<a href="https://blog.csdn.net/u010698107/article/details/116346563">Python笔记：命令行参数解析</a>中的命令行，可以对比一下它们的差异。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--field&#x27;</span>, <span class="string">&#x27;-f&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;字段&#x27;</span>, multiple=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="comment"># @click.option(&#x27;--display-filter&#x27;, &#x27;-Y&#x27;, prompt=&#x27;display-filter&#x27;, nargs=2, help=&#x27;条件&#x27;)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--display-filter&#x27;</span>, <span class="string">&#x27;-Y&#x27;</span>, prompt=<span class="string">&#x27;display-filter&#x27;</span>, <span class="built_in">type</span>=(<span class="params"><span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>, <span class="built_in">bool</span></span>), <span class="built_in">help</span>=<span class="string">&#x27;条件&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--count&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, default=<span class="number">2</span>, prompt=<span class="string">&#x27;count&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;条件&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span>(<span class="params">field, display_filter,count</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    click.echo(<span class="string">f&#x27;<span class="subst">&#123;field&#125;</span> <span class="subst">&#123;display_filter&#125;</span> <span class="subst">&#123;count&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure>
<p>可以看到，click使用装饰器@click.command()将cli()方法包装成 click 对象，然后使用@click.option来添加选项参数，下面来介绍这些参数的含义。</p>
<h2 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h2><p>默认第一个参数为长选项，<code>help</code>参数用于设置选项的描述信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 test_click.py --<span class="built_in">help</span></span><br><span class="line">Usage: test_click.py [OPTIONS]</span><br><span class="line"></span><br><span class="line">  Simple program that greets NAME <span class="keyword">for</span> a total of COUNT <span class="built_in">times</span>.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --field TEXT                字段</span><br><span class="line">  -Y, --display-filter &lt;TEXT INTEGER FLOAT BOOLEAN&gt;...</span><br><span class="line">                                  条件</span><br><span class="line">  -c, --count                     计数</span><br><span class="line">  --<span class="built_in">help</span>                          Show this message and <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure>
<p>也可以使用help_option方法修改help选项显示信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@click.help_option(<span class="params"><span class="string">&#x27;--help&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;帮助信息&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>default</code>参数：设置选项默认值</li>
<li><p><code>type</code>：设置参数类型</p>
</li>
<li><p><code>prompt</code>：设置提示信息，设置<code>prompt=true</code>或者<code>prompt=提示信息</code>后，如果没有设置参数，会出现提示，默认关闭。</p>
</li>
</ul>
<h2 id="多个选项和选项多个值"><a href="#多个选项和选项多个值" class="headerlink" title="多个选项和选项多个值"></a>多个选项和选项多个值</h2><p>1、选项可以设置多个值，可以通过两种方式：</p>
<ul>
<li><p>通过 <code>nargs</code> 参数来配置。多个值将被放入一个元组（tuple）中，只支持固定数量的参数。</p>
</li>
<li><p>使用<code>type</code>参数设置不同类型的值：<code>type=(str, int, float, bool)</code></p>
</li>
</ul>
<p>2、<code>multiple=True</code>允许多个选项赋值：</p>
<p>一个参数传递多次，并且记录每次的值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 test_click.py -f tcp -f udp -Y ip.version==4 -c 1 </span><br><span class="line">(<span class="string">&#x27;tcp&#x27;</span>, <span class="string">&#x27;udp&#x27;</span>) ip.version==4 1</span><br></pre></td></tr></table></figure>
<h2 id="密码提示"><a href="#密码提示" class="headerlink" title="密码提示"></a>密码提示</h2><p>Click 支持隐藏输入信息和确认，比如输入密码时隐藏内容，也可以直接用 <code>password_option()</code>装饰器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--password&#x27;</span>, <span class="string">&#x27;-p&#x27;</span>, prompt=<span class="literal">True</span>, hide_input=<span class="literal">True</span>, confirmation_prompt=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="comment"># @click.password_option(&#x27;--password&#x27;, &#x27;-p&#x27;, prompt=True, hide_input=True, confirmation_prompt=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span>(<span class="params">password</span>):</span></span><br><span class="line">    click.echo(<span class="string">f&#x27;the password is <span class="subst">&#123;password&#125;</span>&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure>
<p>执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python test_click.py</span><br><span class="line">Password:</span><br><span class="line">Repeat <span class="keyword">for</span> confirmation:</span><br><span class="line">the password is 123456</span><br><span class="line"></span><br><span class="line">$ python test_click.py -p 123456</span><br><span class="line">the password is 123456</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Click相比argparse使用起来更加简洁，可以实现快速构建命令行程序，当然在扩展性上就没有argparse库好。本文只介绍了click的部分功能，更详细的用法可参考：</p>
<ol>
<li>click库官方文档：<a href="https://click.palletsprojects.com/en/8.0.x/">https://click.palletsprojects.com/en/8.0.x/</a></li>
<li>click库中文文档：<a href="https://click-docs-zh-cn.readthedocs.io/zh/latest/">https://click-docs-zh-cn.readthedocs.io/zh/latest/</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>click</tag>
        <tag>命令行参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：lambda匿名函数</title>
    <url>/posts/python-notes-for-anonymous-function/</url>
    <content><![CDATA[<p>在Python中，一般使用def关键字来定义普通函数。顾名思义，匿名函数意味着函数没有名称，Python使用lambda关键字定义匿名函数。在某些情况下，使用匿名函数可以简化代码，提高代码的可读性。本文介绍python匿名函数的使用方法。<br><a id="more"></a></p>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>Python匿名函数的语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> argument1, argument2,... argumentN: expression</span><br></pre></td></tr></table></figure>
<p>匿名函数可以有多个参数，只有一个表达式。下面来看一下普通def函数和lambda函数的区别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> y*y*y</span><br><span class="line"></span><br><span class="line">lambda_cube = <span class="keyword">lambda</span> y: y*y*y</span><br><span class="line"></span><br><span class="line">print(cube(<span class="number">3</span>))</span><br><span class="line">print(lambda_cube(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure>
<p>可以看到，lambda函数更加简洁，不包含“return”语句，返回的是一个函数对象。与常规函数还有以下区别：</p>
<p><strong>1、lambda 是一个表达式，不是一个语句</strong></p>
<ul>
<li><p>表达式（expression）是用“公式”去表达一个东西，比如<code>y*y*y</code>就是一个表达式</p>
</li>
<li><p>语句（statement）是完成了某些功能，比如赋值语句，条件语句等</p>
</li>
<li><p>由于lambda 是表达式，它可以用在一些常规函数 def 不能用的地方，比如，可以用在列表内部，可以作为某些函数的参数。</p>
</li>
</ul>
<p>lambda 函数在列表推导式中使用：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">list_square = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> list_num <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">list_square2 = [(<span class="keyword">lambda</span> x: x** <span class="number">2</span>)(x) <span class="keyword">for</span> x <span class="keyword">in</span> list_num <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(list_square)</span><br><span class="line">print(list_square2)</span><br></pre></td></tr></table></figure><br>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">16</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">64</span>]</span><br><span class="line">[<span class="number">16</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">64</span>]</span><br></pre></td></tr></table></figure>
<p>作为函数的参数：根据字典值降序排序<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">3</span>:<span class="string">&quot;banana&quot;</span>,<span class="number">2</span>:<span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line">mydict = <span class="built_in">sorted</span>(mydict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">print(mydict)</span><br></pre></td></tr></table></figure><br>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">3</span>, <span class="string">&#x27;banana&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;orange&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;apple&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<p><strong>2、lambda表达式只有一行，不能写成多行的代码块。</strong></p>
<p>lambda 用于快速编写简单函数，对于更复杂的多行逻辑使用常规函数来实现。关于这点，Python 之父 Guido van Rossum 曾发了一篇文章解释：<a href="https://www.artima.com/weblogs/viewpost.jsp?thread=147358">Language Design Is Not Just Solving Puzzles</a></p>
<p>Lambda函数具有函数式编程的特性，关于函数式编程这里不做介绍，后面有时间单独写一篇文章。Lambda函数可以与filter()、map()和reduce()等内置函数一起使用，下面介绍使用方法。</p>
<h1 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h1><p>Python中的filter()函数接受一个函数对象和一个可迭代对象作为参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">filter</span>(function <span class="keyword">or</span> <span class="literal">None</span>, iterable)</span><br></pre></td></tr></table></figure>
<p>filter()函数对iterable中的每个元素都进行 function 判断，并返回 True 或者 False，最后将返回 True 的元素组成一个新的可遍历的集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">list_even = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, list_num))</span><br><span class="line">print(list_even)</span><br><span class="line"></span><br><span class="line">list_even2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_num <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(list_even2)</span><br><span class="line"></span><br><span class="line">list_even3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_num:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        list_even3.append(i)</span><br><span class="line">print(list_even3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>如果是None，可用于过滤空格，返回为true的可遍历集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;&#x27;</span>, <span class="literal">None</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="literal">False</span>, <span class="number">8</span>, <span class="literal">True</span>]</span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, list1))</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>
<h1 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h1><p>和filter()类似，<code>map(function, iterable)</code> 函数表示对 iterable 中的每个元素，都运用 function 这个函数，最后返回一个新的可遍历的集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">list_square = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, list_num))</span><br><span class="line">print(list_square)</span><br><span class="line"></span><br><span class="line">list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">list_square2 = [(<span class="keyword">lambda</span> x: x** <span class="number">2</span>)(x) <span class="keyword">for</span> x <span class="keyword">in</span> list_num]</span><br><span class="line">print(list_square2)</span><br><span class="line"></span><br><span class="line">list_square3 = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> list_num]</span><br><span class="line">print(list_square3)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">64</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">64</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">64</span>]</span><br></pre></td></tr></table></figure>
<h1 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce() 函数"></a>reduce() 函数</h1><p>reduce(function, iterable)函数同样接收一个函数和一个列表作为参数，reduce()函数属于functools模块，通常用来对一个集合做一些累积操作。function 对象有两个参数，表示对 iterable 中的每个元素以及上一次调用后的结果，运用 function 进行计算，也就是执行重复操作，最终返回一个数值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">sum</span> = reduce(<span class="keyword">lambda</span> x, y: x + y, list_num)</span><br><span class="line">print(<span class="built_in">sum</span>) <span class="comment"># 输出：28 = 3 + 4 + 6 + 2 + 5 + 8</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了lambda函数和常见的 map()，fiilter() 和 reduce() 三个函数，匿名函数通常用于实现一个简单功能，并且该函数只调用一次。</p>
<p>map()，fiilter() 和 reduce() 三个函数通常与lambda函数结合使用，它们的功能也可以使用列表推导式 (List Comprehension)来实现。它们的性能差异不大，可以根据自己习惯使用。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>匿名函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的__new__、__init__以及metaclass</title>
    <url>/posts/python-notes-for-new-and-init/</url>
    <content><![CDATA[<p>在Python的面向对象编程中，首先得创建实例对象，然后初始化实例对象，Python中<code>__new__</code>负责创建实例对象，<code>__init__</code> 负责初始化对象，本文介绍<code>__new__</code>和<code>__init__</code> 的区别以及Python中的元类。</p>
<a id="more"></a>
<h1 id="new-和-init"><a href="#new-和-init" class="headerlink" title="__new__ 和 __init__"></a><code>__new__</code> 和 <code>__init__</code></h1><p><code>__new__</code> 和 <code>__init__</code> 主要具有如下区别：</p>
<ul>
<li><code>__new__</code>是在实例创建<strong>之前</strong>被调用的，用于<strong>创建实例然后返回该实例对象</strong>，是个静态方法。<code>__new__</code>必须要有返回值，也就是返回实例化出来的实例。</li>
<li><code>__new__</code>的返回值（实例）将传递给<code>__init__</code>方法的第一个参数，然后<code>__init__</code>给这个实例设置一些参数。</li>
<li><code>__new__</code>至少要有一个参数cls，代表当前类</li>
<li><code>__init__</code>是实例对象<strong>创建完成后被调用</strong>，然后设置对象属性的一些初始值，通常用在初始化一个类实例的时候，是一个实例方法。</li>
<li><code>__init__</code>的参数self就是<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的动作，<code>__init__</code>不需要返回值（<code>__init__()</code> should return None）。</li>
</ul>
<p>下面创建一个类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__new__ is called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__init__ is called&quot;</span>)</span><br><span class="line">        self.name = x</span><br><span class="line">        self.height = y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = Person(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">180</span>)        </span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__new__ <span class="keyword">is</span> called</span><br><span class="line">__init__ <span class="keyword">is</span> called</span><br></pre></td></tr></table></figure>
<h1 id="python实现单例模式"><a href="#python实现单例模式" class="headerlink" title="python实现单例模式"></a>python实现单例模式</h1><p>单例(Singleton)模式就是一个类只能实例化一个对象，这个类必须自己创建自己的唯一实例。</p>
<p>一般情况下，一个类可以实例化多个对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p1 &#x3D; Person(&quot;zhangsan&quot;,180)</span><br><span class="line">print(p1)</span><br><span class="line">print(p1.name)</span><br><span class="line">p2 &#x3D; Person(&quot;lishi&quot;,175)</span><br><span class="line">print(p2)</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__new__ <span class="keyword">is</span> called</span><br><span class="line">__init__ <span class="keyword">is</span> called</span><br><span class="line">&lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x000001939679BC88</span>&gt;</span><br><span class="line">zhangsan</span><br><span class="line">__new__ <span class="keyword">is</span> called</span><br><span class="line">__init__ <span class="keyword">is</span> called</span><br><span class="line">&lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x000001939679BC48</span>&gt;</span><br><span class="line">lishi</span><br></pre></td></tr></table></figure>
<p>发现两个实例化对象的内存地址不一样，单例模式写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 单例模式</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__new__ is called&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x, y</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__init__ is called&quot;</span>)</span><br><span class="line">        self.name = x</span><br><span class="line">        self.height = y</span><br></pre></td></tr></table></figure>
<p>单例模式重写了<code>__ new__</code> 方法，保证只存在一个实例化对象。</p>
<p>执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = Singleton(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">180</span>)</span><br><span class="line">print(p1)</span><br><span class="line">print(p1.name)</span><br><span class="line">p2 = Singleton(<span class="string">&quot;lishi&quot;</span>, <span class="number">175</span>)</span><br><span class="line">print(p2)</span><br><span class="line">print(p2.name)</span><br><span class="line">print(p1.name)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__new__ <span class="keyword">is</span> called</span><br><span class="line">__init__ <span class="keyword">is</span> called</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x00000243DD386E48</span>&gt;</span><br><span class="line">zhangsan</span><br><span class="line">__new__ <span class="keyword">is</span> called</span><br><span class="line">__init__ <span class="keyword">is</span> called</span><br><span class="line">&lt;__main__.Singleton <span class="built_in">object</span> at <span class="number">0x00000243DD386E48</span>&gt;</span><br><span class="line">lishi</span><br><span class="line">lishi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>两个实例化对象指向了相同的内存地址，单例模式可以保证系统中一个类只有一个实例，如果希望某个类的对象只能存在一个，使用单例模式可以节省内存。</p>
<h1 id="python元类MetaClass"><a href="#python元类MetaClass" class="headerlink" title="python元类MetaClass"></a>python元类MetaClass</h1><p><code>__new__</code> 方法也用于自定义元类(MetaClass)，下面先来介绍MetaClass的概念。</p>
<h2 id="什么是MetaClass"><a href="#什么是MetaClass" class="headerlink" title="什么是MetaClass"></a>什么是MetaClass</h2><p>metaclass定义为类中的类（the class of a class），Meta 起源于希腊词汇 meta，有“超越”和“改变”的意思，所以metaclass包含了“超越类”和“变形类”的含义。</p>
<p>先来看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">object</span></span>):</span> data = <span class="number">6</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myobject = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(myobject.__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">MyClass</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">MyClass.__class__</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的例子中，myobject对象的类为MyClass，MyClass的类是type，也就是说myobject是一个MyClass对象，而MyClass又是一个type对象。</p>
<p>type就是一个元类，它是最常用的元类，是Python中所有类的默认元类，所有的 Python 的用户定义类，都是 type 这个类的实例。</p>
<p>元类被用来构造类(就像类用来构造对象一样)。Python类的创建过程如下：</p>
<ol>
<li>进行类定义时，Python收集属性到一个字典中</li>
<li>类定义完成后，确定类的元类Meta，执行Meta(name, bases, dct)进行实例化。<ul>
<li>Meta是元类</li>
<li>name：类的名称，<code>__name__</code>属性</li>
<li>bases：类的基类元组，<code>__bases__</code>属性</li>
<li>dct：将属性名映射到对象中，列出类的所有属性，<code>__dict__</code>属性</li>
</ul>
</li>
</ol>
<p>可以使用type直接创建类：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myobject = <span class="built_in">type</span>(<span class="string">&#x27;MyClass&#x27;</span>, (), &#123;<span class="string">&#x27;data&#x27;</span>: <span class="number">6</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(myobject.__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">myobject.__name__</span>)</span></span><br><span class="line"><span class="class"><span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">myobject.__bases__</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">myobject.data</span>)</span></span><br><span class="line"><span class="class">6</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">myobject.__dict__</span>)</span></span><br><span class="line">&#123;&#x27;data&#x27;: 6, &#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;MyClass&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;MyClass&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说当定义MyClass类时，真正执行的是：<code>class = type(name, bases, dct)</code> 语句，</p>
<p>如果一个类或它的一个基类有<code>__metaclass__</code>属性，它就被当作元类。否则，type就是元类。对元类的自定义要用到<code>__new__</code> 和 <code>__init__</code>方法，接下来介绍元类的定义。</p>
<h2 id="定义元类"><a href="#定义元类" class="headerlink" title="定义元类"></a>定义元类</h2><p>元类可以实现在创建类时，动态修改类中定义的属性或者方法，一般使用<code>__new__</code>方法来修改类属性。</p>
<p>下面的例子使用元类来添加属性方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMetaClass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">meta, name, bases, attrs</span>):</span></span><br><span class="line">        print(meta, <span class="string">&quot;__new__ is called&quot;</span>)</span><br><span class="line">        <span class="comment"># 动态添加属性</span></span><br><span class="line">        attrs[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        attrs[<span class="string">&#x27;talk&#x27;</span>] = <span class="keyword">lambda</span> self: print(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(MyMetaClass, meta).__new__(meta, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__prepare__</span>(<span class="params">metacls, name, bases, **kwargs</span>):</span></span><br><span class="line">        print(metacls, <span class="string">&quot;__prepare__ is called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__prepare__(name, bases, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">cls, name, bases, attrs, **kwargs</span>):</span></span><br><span class="line">        print(cls, <span class="string">&quot;__init__ is called&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, bases, attrs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(cls, <span class="string">&quot;__call__ is called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>(<span class="params">metaclass=MyMetaClass</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cla = Myclass()</span><br><span class="line">    print(cla.name)</span><br><span class="line">    cla.talk()</span><br><span class="line">    print(cla.__dir__())</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">MyMetaClass</span>&#x27;&gt; <span class="title">__prepare__</span> <span class="title">is</span> <span class="title">called</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">MyMetaClass</span>&#x27;&gt; <span class="title">__new__</span> <span class="title">is</span> <span class="title">called</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Myclass</span>&#x27;&gt; <span class="title">__init__</span> <span class="title">is</span> <span class="title">called</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Myclass</span>&#x27;&gt; <span class="title">__call__</span> <span class="title">is</span> <span class="title">called</span></span></span><br><span class="line"><span class="class"><span class="title">zhangsan</span></span></span><br><span class="line"><span class="class"><span class="title">hello</span></span></span><br><span class="line">[&#x27;__module__&#x27;, &#x27;name&#x27;, &#x27;talk&#x27;, &#x27;__dict__&#x27;, &#x27;__weakref__&#x27;, &#x27;__doc__&#x27;, &#x27;__repr__&#x27;, &#x27;__hash__&#x27;, &#x27;__str__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__setattr__&#x27;, &#x27;__delattr__&#x27;, &#x27;__lt__&#x27;, &#x27;__le__&#x27;, &#x27;__eq__&#x27;, &#x27;__ne__&#x27;, &#x27;__gt__&#x27;, &#x27;__ge__&#x27;, &#x27;__init__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__reduce__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__format__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__dir__&#x27;, &#x27;__class__&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到元类MyMetaClass的 <code>__new__()</code>方法动态地为 Myclass 类添加了 name 属性和 talk() 方法。</p>
<p>在元类的创建中，可以对name, bases, attrs进行修改，实现我们想要的功能，可以使用getattr()、setattr()等Python反射函数，Python反射机制介绍可参考<a href="">Python反射介绍</a>。</p>
<h1 id="PyYAML的序列化和反序列化"><a href="#PyYAML的序列化和反序列化" class="headerlink" title="PyYAML的序列化和反序列化"></a>PyYAML的序列化和反序列化</h1><p>在实际应用中，Python 的YAML使用metaclass 的超越变形特性实现了序列化和反序列化（serialization &amp; deserialization）。</p>
<h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><ul>
<li><p>序列化：将结构化数据转换为可存储或可传输格式的过程，就是把对象转换成字节序列的过程。</p>
</li>
<li><p>反序列化：把字节序列恢复成对象的过程。</p>
</li>
</ul>
<p>序列化的好处是实现了数据的持久化，可以把数据永久地保存到硬盘上；另外，利用序列化实现远程数据传输，在网络上传输对象的字节序列。</p>
<h2 id="PyYAML使用"><a href="#PyYAML使用" class="headerlink" title="PyYAML使用"></a>PyYAML使用</h2><p>下面的例子中，使用yaml.load()反序列化文本中的Person对象，使用yaml.dump()来序列化创建的Person类。</p>
<p>data.yaml文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="type">!Person</span></span><br><span class="line"><span class="attr">height:</span> <span class="number">180</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">yaml.YAMLObject</span>):</span></span><br><span class="line">  yaml_tag = <span class="string">u&#x27;!Person&#x27;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, height</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.height = height</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>‘s height is <span class="subst">&#123;self.height&#125;</span>cm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.yaml&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    p1 = yaml.load(f)</span><br><span class="line">    print(p1)</span><br><span class="line"></span><br><span class="line">p2 = Person(name=<span class="string">&#x27;lishi&#x27;</span>, height=<span class="number">175</span>)</span><br><span class="line">print(p2)</span><br><span class="line">print(yaml.dump(p2))</span><br><span class="line"><span class="comment"># with open(&quot;data.yaml&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span></span><br><span class="line"><span class="comment">#     yaml.dump(p2,f)</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zhangsan‘s height <span class="keyword">is</span> 180cm</span><br><span class="line">lishi‘s height <span class="keyword">is</span> 175cm</span><br><span class="line">!Person</span><br><span class="line">height: <span class="number">175</span></span><br><span class="line">name: lishi</span><br></pre></td></tr></table></figure>
<p>yaml.load()把 yaml 序列加载成一个 Python Object；yaml.dump()把YAMLObject 子类序列化。我们不需要提前知道任何类型信息，这实现了超动态配置编程。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简要介绍了Python的<code>__new__</code> 和 <code>__init__</code>方法，<code>__new__</code>在实例创建之前调用并返回实例对象， <code>__init__</code>是在实例对象创建完成后被调用，用于初始化一个类实例，是一个实例方法。</p>
<p>python的元类比较复杂，不好理解，一般在Python框架开发中使用，使用时要谨慎。除了YAML的序列化和反序列化外，<strong>对象关系映射</strong>(ORM)框架也使用了元类，比如Django的models。</p>
<p>元类可以实现类似装饰器的功能，如果不想在方法前面加@decorator_func，可以使用元类来实现。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>单例模式</tag>
        <tag>metaclass</tag>
      </tags>
  </entry>
  <entry>
    <title>Python反射介绍</title>
    <url>/posts/python-notes-for-reflection/</url>
    <content><![CDATA[<p>反射机制是面向对象编程语言中比较重要的功能，可以动态获取对象信息以及动态调用对象，Python作为一门动态编程语言，当然也有反射机制，本文介绍Python反射函数使用方法。</p>
<a id="more"></a>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote>
<p>反射的概念是由Smith在1982年首次提出的，主要是指<strong>程序可以访问、检测和修改它本身状态或行为</strong>的一种能力。</p>
</blockquote>
<p>在程序运行时可以获取对象类型定义信息，例如，Python中的type(obj)将返回obj对象的类型，这种获取对象的type、attribute或者method的能力称为反射。通过反射机制，可以用来检查对象里的某个方法，或某个变量是否存在。也就是可以<strong>通过字符串映射对象的方法或者属性</strong>。</p>
<h1 id="Python反射函数"><a href="#Python反射函数" class="headerlink" title="Python反射函数"></a>Python反射函数</h1><p>Python反射常用的内置函数</p>
<ul>
<li><strong>type</strong>(obj)：返回对象类型</li>
<li><strong>isinstance</strong>(object, classinfo)：判断一个对象是否是一个已知的类型，类似 type()</li>
<li><strong>callable</strong>(obj)：对象是否可以被调用</li>
<li><strong>dir</strong>([obj])：返回obj属性列表</li>
<li><strong>getattr</strong>(obj, attr)：返回对象属性值</li>
<li><strong>hasattr</strong>(obj, attr)：判断某个函数或者变量是否存在</li>
<li><strong>setattr</strong>(obj, attr, val)：给模块添加属性（函数或者变量）</li>
<li><strong>delattr</strong>(obj, attr)：删除模块中某个变量或者函数</li>
</ul>
<h1 id="反射函数使用方法"><a href="#反射函数使用方法" class="headerlink" title="反射函数使用方法"></a>反射函数使用方法</h1><p>先创建一个类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.age = x</span><br><span class="line">        self.height = y</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;begin!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;hello!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;My age is <span class="subst">&#123;self.age&#125;</span> and height is <span class="subst">&#123;self.height&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h2><p>利用反射的能力，我们可以通过属性字典<code>__dict__</code>来访问对象的属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(<span class="number">20</span>, <span class="number">180</span>)</span><br><span class="line">print(p)</span><br><span class="line">p()</span><br><span class="line">print(p.__dict__)</span><br><span class="line">p.__dict__[<span class="string">&#x27;age&#x27;</span>]=<span class="number">22</span></span><br><span class="line">print(p.__dict__)</span><br><span class="line">p.weight = <span class="number">60</span></span><br><span class="line">print(p.__dict__)</span><br><span class="line">print(<span class="built_in">dir</span>(p))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">begin!!!</span><br><span class="line">&lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x000002484557BCC8</span>&gt;</span><br><span class="line">hello!!!</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">180</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">180</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">180</span>, <span class="string">&#x27;weight&#x27;</span>: <span class="number">60</span>&#125;</span><br><span class="line">[<span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;height&#x27;</span>, <span class="string">&#x27;talk&#x27;</span>, <span class="string">&#x27;weight&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在实例创建之前调用<code>__new__</code>方法，返回值（实例）将传递给<code>__init__</code>方法的第一个参数。<code>__new__</code>方法的详细介绍可参考：<a href="">Python中的<code>__new__</code>和<code>__init__</code></a></li>
<li>实例化对象时会自动执行 <code>__init__</code> 方法</li>
<li>打印一个对象时，会自动执行<code>__str__</code> 方法</li>
<li>调用实例化对象时，会自动触发<code>__call__</code> 方法</li>
<li>通过<code>dir()</code>方法可以打印出了对象p的属性。</li>
</ul>
<p>接下来测试一下其他反射函数：</p>
<h2 id="callable"><a href="#callable" class="headerlink" title="callable()"></a>callable()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">callable</span>(p)):</span><br><span class="line">    print(<span class="string">&quot;p is callable&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;p is not callable&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p <span class="keyword">is</span> <span class="built_in">callable</span></span><br></pre></td></tr></table></figure>
<h2 id="isinstance-和type"><a href="#isinstance-和type" class="headerlink" title="isinstance()和type()"></a>isinstance()和type()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">isinstance</span>(p, Person))</span><br><span class="line">print(<span class="built_in">type</span>(p) == Person)</span><br><span class="line">print(<span class="built_in">isinstance</span>(p.age, <span class="built_in">int</span>))</span><br><span class="line">print(<span class="built_in">type</span>(p.age) == <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr()"></a>hasattr()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">hasattr</span>(p,<span class="string">&quot;talk&quot;</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">hasattr</span>(p.talk,<span class="string">&quot;__call__&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">getattr</span>(p,<span class="string">&quot;talk&quot;</span>))</span><br><span class="line">print(<span class="built_in">getattr</span>(p.talk, <span class="string">&quot;__call__&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(p,<span class="string">&#x27;walk&#x27;</span>):</span><br><span class="line">    print(<span class="built_in">getattr</span>(p,<span class="string">&#x27;walk&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;I can&#x27;t walk&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">getattr</span>(p, <span class="string">&quot;walk&quot;</span>, <span class="literal">None</span>)) <span class="comment"># 如果没有walk属性就返回None</span></span><br></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;bound method Person.talk of &lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x000001FF52868288</span>&gt;&gt;</span><br><span class="line">&lt;method-wrapper <span class="string">&#x27;__call__&#x27;</span> of method <span class="built_in">object</span> at <span class="number">0x000001FF52155048</span>&gt;</span><br><span class="line">I can<span class="string">&#x27;t walk</span></span><br><span class="line"><span class="string">None</span></span><br></pre></td></tr></table></figure>
<h2 id="setattr"><a href="#setattr" class="headerlink" title="setattr()"></a>setattr()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setattr</span>(p,<span class="string">&#x27;walk&#x27;</span>,<span class="string">&#x27;ON&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(p,<span class="string">&#x27;walk&#x27;</span>):</span><br><span class="line">    print(<span class="built_in">getattr</span>(p,<span class="string">&#x27;walk&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;I can&#x27;t walk&quot;</span>)</span><br><span class="line">print(p.__dict__)</span><br></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ON</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">180</span>, <span class="string">&#x27;weight&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;walk&#x27;</span>: <span class="string">&#x27;ON&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="delattr"><a href="#delattr" class="headerlink" title="delattr()"></a>delattr()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delattr</span>(p,<span class="string">&#x27;walk&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(p,<span class="string">&#x27;walk&#x27;</span>):</span><br><span class="line">    print(<span class="built_in">getattr</span>(p,<span class="string">&#x27;walk&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;I can&#x27;t walk&quot;</span>)</span><br><span class="line">print(p.__dict__)</span><br></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">I can<span class="string">&#x27;t walk</span></span><br><span class="line"><span class="string">&#123;&#x27;</span>age<span class="string">&#x27;: 22, &#x27;</span>height<span class="string">&#x27;: 180, &#x27;</span>weight<span class="string">&#x27;: 60&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>下面介绍两种Python反射的应用场景。</p>
<h2 id="动态调用"><a href="#动态调用" class="headerlink" title="动态调用"></a>动态调用</h2><p>从前面举的例子中，我们了解到可以通过<strong>字符串</strong>来获取对象的属性（<code>getattr()</code>），这是非常有用的一个功能。比如，一个类中有很多方法，它们提供不同的服务，通过输入的参数来判断执行某个方法，一般的使用如下写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyService</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">service1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;service1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">service2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;service2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">service3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;service3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Ser = MyService()</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入您想要的服务: &quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;service1&quot;</span>:</span><br><span class="line">        Ser.service1()</span><br><span class="line">    <span class="keyword">elif</span> s == <span class="string">&quot;service2&quot;</span>:</span><br><span class="line">        Ser.service2()</span><br><span class="line">    <span class="keyword">elif</span> s == <span class="string">&quot;service3&quot;</span>:</span><br><span class="line">        Ser.service3()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;error!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>如果函数比较少这样写没有太大问题，如果有很多，这样写就比较复杂了，需要写大量else语句，可以使用反射机制来写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Ser = MyService()</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;请输入您想要的服务: &quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(Ser, s):</span><br><span class="line">        func = <span class="built_in">getattr</span>(Ser, s)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;error!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这样是不是简洁了很多，上面的例子中，通过反射，将字符串变成了函数，实现了对对象方法的动态调用。</p>
<h2 id="动态属性设置"><a href="#动态属性设置" class="headerlink" title="动态属性设置"></a>动态属性设置</h2><p>可以通过setattr()方法进行动态属性设置，在使用scapy库构造报文时，我们需要设置某些报文字段，然而网络协议的报文字段很多，在需要设置大量字段时，一个一个的赋值就很麻烦：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls(IP)</span><br><span class="line">version    : BitField  (<span class="number">4</span> bits)                  = (<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">ihl        : BitField  (<span class="number">4</span> bits)                  = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">tos        : XByteField                          = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">len</span>        : ShortField                          = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"><span class="built_in">id</span>         : ShortField                          = (<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">flags      : FlagsField                          = (<span class="string">&#x27;&lt;Flag 0 ()&gt;&#x27;</span>)</span><br><span class="line">frag       : BitField  (<span class="number">13</span> bits)                 = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">ttl        : ByteField                           = (<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line">proto      : ByteEnumField                       = (<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">chksum     : XShortField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">src        : SourceIPField                       = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">dst        : DestIPField                         = (<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">options    : PacketListField                     = (<span class="string">&#x27;[]&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>可以使用setattr()方法来赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">fields = &#123;<span class="string">&quot;version&quot;</span>:<span class="number">4</span>, <span class="string">&quot;src&quot;</span>:<span class="string">&quot;192.168.0.1&quot;</span>,<span class="string">&quot;dst&quot;</span>:<span class="string">&quot;192.168.10.1&quot;</span>&#125;</span><br><span class="line">ip = IP()</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> fields.items():</span><br><span class="line">    <span class="built_in">setattr</span>(ip, key, val)</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>反射机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Python协程</title>
    <url>/posts/python-notes-for-coroutines/</url>
    <content><![CDATA[<p>文章<a href="https://blog.csdn.net/u010698107/article/details/117265796">Python多线程与多进程</a>中介绍了并行，并发，多线程和多进程的概念。多线程 / 多进程是解决并发问题的模型之一，本文要介绍的协程也是实现并发编程的一种方式。协程使用的异步IO (asynchronous IO)不是多线程或者多进程的，它是一种单线程、单进程的设计。也就是说，协程可以实现并发调度，但它本身并不是并发的（单线程下的”并发“）。相比多线程和多进程，协程没有进程上下文切换导致的资源占用，运行效率更高。</p>
<a id="more"></a>
<p>最开始服务器并发使用的是多线程 / 多进程的方式，随着互联网的快速发展，网络用户数大量增长，遇到了C10K 瓶颈，也就是同时连接到服务器的客户端数量超过 10000 个，导致服务器无法提供正常服务，解决这个问题的其中一个方案就是异步编程。NGINX 提出了<strong>事件循环</strong>，通过启动一个统一的调度器，让调度器来决定一个时刻去运行哪个任务，于是省去了多线程中启动线程、管理线程、同步锁等各种开销。Node.js中使用 async / await  解决<strong>回调地狱（callback hell）</strong>问题。</p>
<p>Python 2 使用生成器实现协程，Python2.5 中，使用yield 关键字使生成器有了记忆功能，Python 3.7 提供了新的基于 asyncio 和 async / await 的方法。除了Python，协程也在其它语言中得到实现，比如 golang 的 goroutine，luajit 的 coroutine，scala 的 actor 等，本文主要介绍Python中协程的使用方法。</p>
<p>协程(Coroutine)允许执行被挂起与被恢复，在执行任务（task）A时可以随时中断去执行任务B，通过调度器来进行任务自由切换，这一整个过程中只有一个线程在执行。协程是协作式多任务的的轻量级线程，协程之间的切换不需要涉及任何系统调用或任何阻塞调用。</p>
<p>在IO密集型的多线程实现中，如果I/O 操作非常频繁，多线程会进行频繁的线程切换，并且线程数不能无限增加，所以使用协程非常好的方法。python 协程可以使用asyncio 模块实现，下面先来介绍asyncio。</p>
<h1 id="Asyncio"><a href="#Asyncio" class="headerlink" title="Asyncio"></a>Asyncio</h1><p>先来区分一下 Sync（同步）和 Async（异步）的概念。</p>
<ul>
<li>同步指操作一个接一个地执行，下一个操作必须等上一个操作完成后才能执行。</li>
<li>异步指不同操作间可以相互交替执行，如果其中的某个操作被 block 了，程序并不会等待，而是会找出可执行的操作继续执行。</li>
</ul>
<p>Asyncio 是单线程的，它只有一个主线程，但是可以进行多个不同的任务（task），这里的任务，就是特殊的 future 对象。这些任务被一个叫做 event loop 的对象所控制，event loop 对象控制任务的交替执行，直到所有任务完成，可以把这里的任务类比成多线程里的多个线程。</p>
<p>在Python 3.7 以上版本中，可以使用asyncio库来实现协程，可参考官方文档：<a href="https://docs.python.org/3/library/asyncio-eventloop.html">https://docs.python.org/3/library/asyncio-eventloop.html</a>，下面看一个协程例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">worker_1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;worker_1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;worker_1 done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">worker_2</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;worker_2 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;worker_2 done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    task1 = asyncio.create_task(worker_1())</span><br><span class="line">    task2 = asyncio.create_task(worker_2())</span><br><span class="line">    tasks = [task1,task2]</span><br><span class="line">    print(<span class="string">&#x27;before await&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    <span class="comment"># for task in tasks:</span></span><br><span class="line">    <span class="comment">#     await task</span></span><br><span class="line">    <span class="comment">#     print(task._state)</span></span><br><span class="line">    </span><br><span class="line">start = time.time()</span><br><span class="line">asyncio.run(main())</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&#x27;Running time: %s Seconds&#x27;</span>%(end-start))</span><br></pre></td></tr></table></figure>
<p>先来介绍一下代码中使用到的魔法工具：</p>
<ul>
<li><p>async 修饰词将main，worker_1，worker_2方法声明为异步函数，当调用异步函数时，会返回一个协程对象（coroutine object）：  </p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;coroutine <span class="built_in">object</span> worker_1 at <span class="number">0x000002A65D14EC48</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>await：同步调用，阻塞程序，执行对应的协程函数。await asyncio.sleep(5)表示程序暂停等待5s，await worker_1() 则会执行 worker_1() 函数，当前的调用执行结束后才触发下一次调用。</p>
</li>
<li><p>async 和 await 关键字一般组合使用，如果任务执行的过程需要等待，则将其放入等待状态的列表中，然后继续执行预备状态列表里的任务。</p>
</li>
<li><p>asyncio.create_task()：创建任务，任务创建后就会被调度执行，进入事件循环等待运行。使用这种方式创建任务后，就不会出现阻塞。</p>
</li>
<li><p>await asyncio.gather(<em>tasks, return_exception=False)：运行tasks序列的所有任务，等待所有任务都结束才结束主程序，单星号`</em>`解包任务列表，也可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">   <span class="keyword">await</span> task</span><br></pre></td></tr></table></figure>
</li>
<li><p>asyncio.run：运行，运行时拿到 event loop对象，运行完成后关闭，这是Python3.7+引入的方法。以前的版本可以使用如下方式：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>运行一下代码，执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before <span class="keyword">await</span></span><br><span class="line">worker_1 start</span><br><span class="line">worker_2 start</span><br><span class="line">worker_2 done</span><br><span class="line">worker_1 done</span><br><span class="line">Running time: <span class="number">2.0120482444763184</span> Seconds</span><br></pre></td></tr></table></figure>
<p>执行流程如下：</p>
<ol>
<li>asyncio.run(main())，事件循环开启</li>
<li>asyncio.create_task()创建任务task1 和 task2 ，进入事件循环等待运行，打印“before await”。</li>
<li>await task1 执行，事件调度器开始调度 worker_1。</li>
<li>worker_1 开始运行，运行到 await asyncio.sleep(2)， 从当前任务切出，事件调度器开始调度 worker_2。</li>
<li>worker_2 开始运行，运行到 await asyncio.sleep(1) ，从当前任务切出。</li>
<li>1s后，worker_2 的 sleep 完成，事件调度器将控制权重新传给 task_2，输出 ‘worker_2 done’，task_2 完成任务，从事件循环中退出。</li>
<li>事件调度器在 await task1 处继续等待</li>
<li>2s后，worker_1 的 sleep 完成，事件调度器将控制权重新传给 task_1，task_1 完成任务，从事件循环中退出；</li>
<li>协程所有任务结束，事件循环结束。</li>
</ol>
<p>到这里，想必你已经知道协程的概念和asyncio的使用方法了，下面来实现一个使用协程爬虫的程序。</p>
<h1 id="协程爬虫"><a href="#协程爬虫" class="headerlink" title="协程爬虫"></a>协程爬虫</h1><p>爬虫是一个比较典型的I/O密集型任务，除了使用多线程实现外，也可以用协程来实现。实际上线程能实现的，协程也都能做到。</p>
<p>下面使用协程来实现抓取博客<a href="https://hiyongz.github.io/">https://hiyongz.github.io/</a>上的所有文章，获取博客名称、发布时间和字数。</p>
<p>单线程版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://hiyongz.github.io&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># init_page = requests.get(url).content</span></span><br><span class="line">    init_page = requests.get(url=baseurl, headers=header).content</span><br><span class="line">    init_soup = BeautifulSoup(init_page, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文章页数</span></span><br><span class="line">    nav_tag = init_soup.find(<span class="string">&#x27;nav&#x27;</span>, class_=<span class="string">&quot;pagination&quot;</span>)</span><br><span class="line">    page_number_tag = nav_tag.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&quot;page-number&quot;</span>)</span><br><span class="line">    page_number = <span class="built_in">int</span>(page_number_tag[<span class="number">1</span>].text)</span><br><span class="line">    article_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(page_number):</span><br><span class="line">        <span class="keyword">if</span> num &gt;=<span class="number">1</span>:</span><br><span class="line">            url = baseurl + <span class="string">f&#x27;/page/<span class="subst">&#123;num+<span class="number">1</span>&#125;</span>/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url = baseurl</span><br><span class="line"></span><br><span class="line">        init_page = requests.get(url=url, headers=header).content</span><br><span class="line">        init_soup = BeautifulSoup(init_page, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        all_articles = init_soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;content index posts-expand&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> each_article <span class="keyword">in</span> all_articles.find_all(<span class="string">&#x27;header&#x27;</span>, class_=<span class="string">&quot;post-header&quot;</span>):</span><br><span class="line">            all_a_tag = each_article.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            article_name = all_a_tag[<span class="number">0</span>].text</span><br><span class="line">            article_url = all_a_tag[<span class="number">0</span>].attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            response_item = requests.get(url=baseurl+article_url, headers=header).content</span><br><span class="line">            soup_item = BeautifulSoup(response_item, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">            time_tag = soup_item.find(<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line">            publish_time = time_tag.text</span><br><span class="line">            word_tag = each_article.find_all(title=<span class="string">&quot;本文字数&quot;</span>)</span><br><span class="line">            word_count = word_tag[<span class="number">0</span>].text</span><br><span class="line">            word_count = word_count.strip().split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            article_num = article_num + <span class="number">1</span></span><br><span class="line">            print(<span class="string">f&#x27;<span class="subst">&#123;article_name&#125;</span> <span class="subst">&#123;baseurl+article_url&#125;</span> <span class="subst">&#123;publish_time&#125;</span> <span class="subst">&#123;word_count&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f&#x27;一共有<span class="subst">&#123;article_num&#125;</span>篇博客文章&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">main()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&#x27;Running time: %s Seconds&#x27;</span>%(end-start))</span><br></pre></td></tr></table></figure>
<p>执行结果（部分）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">markdown基本语法介绍 https://hiyongz.github.io/posts/markdown-basic-syntax/ <span class="number">2021</span>-06-<span class="number">12</span> <span class="number">6.8</span>k</span><br><span class="line">Python中的闭包 https://hiyongz.github.io/posts/python-notes-<span class="keyword">for</span>-function-closures/ <span class="number">2021</span>-06-<span class="number">10</span> <span class="number">2.4</span>k</span><br><span class="line">算法笔记：位运算 https://hiyongz.github.io/posts/algorithm-notes-<span class="keyword">for</span>-bitwise-operation/ <span class="number">2021</span>-06-08 <span class="number">2.8</span>k</span><br><span class="line">常见搜索算法（二）：二分查找 https://hiyongz.github.io/posts/algorithm-notes-<span class="keyword">for</span>-binary-search/ <span class="number">2021</span>-06-03 <span class="number">1.1</span>k</span><br><span class="line">.............</span><br><span class="line">一共有<span class="number">124</span>篇博客文章</span><br><span class="line">Running time: <span class="number">107.27503871917725</span> Seconds</span><br></pre></td></tr></table></figure>
<p>使用协程（由于requests 库不兼容 asyncio， 下面使用aiohttp 库进行接口请求）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch_content</span>(<span class="params">url, header</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(</span><br><span class="line">            headers=header, connector=aiohttp.TCPConnector(ssl=<span class="literal">False</span>)</span><br><span class="line">    ) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://hiyongz.github.io&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    article_names, article_urls,publishs_time,words_count = [], [], [], []</span><br><span class="line">    init_page = requests.get(url=baseurl, headers=header).content</span><br><span class="line">    init_soup = BeautifulSoup(init_page, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取文章页数</span></span><br><span class="line">    nav_tag = init_soup.find(<span class="string">&#x27;nav&#x27;</span>, class_=<span class="string">&quot;pagination&quot;</span>)</span><br><span class="line">    page_number_tag = nav_tag.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&quot;page-number&quot;</span>)</span><br><span class="line">    page_number = <span class="built_in">int</span>(page_number_tag[<span class="number">1</span>].text)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(page_number):</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">            url = baseurl + <span class="string">f&#x27;/page/<span class="subst">&#123;num+<span class="number">1</span>&#125;</span>/&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url = baseurl</span><br><span class="line">        <span class="comment"># article_names, article_urls, publishs_time, words_count = [], [], [], []</span></span><br><span class="line">        init_page = requests.get(url=url, headers=header).content</span><br><span class="line">        init_soup = BeautifulSoup(init_page, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        all_articles = init_soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;content index posts-expand&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> each_article <span class="keyword">in</span> all_articles.find_all(<span class="string">&#x27;header&#x27;</span>, class_=<span class="string">&quot;post-header&quot;</span>):</span><br><span class="line">            all_a_tag = each_article.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            article_name = all_a_tag[<span class="number">0</span>].text</span><br><span class="line">            article_url = all_a_tag[<span class="number">0</span>].attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            article_names.append(article_name)</span><br><span class="line">            article_urls.append(baseurl+article_url)</span><br><span class="line"></span><br><span class="line">    tasks = [fetch_content(url, header) <span class="keyword">for</span> url <span class="keyword">in</span> article_urls]</span><br><span class="line">    article_num = <span class="built_in">len</span>(article_urls)</span><br><span class="line">    pages = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> article_name, article_url, page <span class="keyword">in</span> <span class="built_in">zip</span>(article_names, article_urls, pages):</span><br><span class="line">        soup_item = BeautifulSoup(page, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        time_tag = soup_item.find(<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line">        publish_time = time_tag.text</span><br><span class="line">        word_tag = soup_item.find_all(title=<span class="string">&quot;本文字数&quot;</span>)</span><br><span class="line">        word_count = word_tag[<span class="number">0</span>].text</span><br><span class="line">        word_count = word_count.strip().split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        print(<span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(article_name, article_url,publish_time,word_count))</span><br><span class="line">    print(<span class="string">f&#x27;一共有<span class="subst">&#123;article_num&#125;</span>篇博客文章&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">asyncio.run(main())</span><br><span class="line">end=time.time()</span><br><span class="line">print(<span class="string">&#x27;Running time: %s Seconds&#x27;</span>%(end-start))</span><br></pre></td></tr></table></figure>
<p>执行结果（部分）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一共有<span class="number">124</span>篇博客文章</span><br><span class="line">Running time: <span class="number">14.071799755096436</span> Seconds</span><br></pre></td></tr></table></figure>
<p>可以看到速度提升了很多。</p>
<h1 id="多线程、多进程和协程如何选择"><a href="#多线程、多进程和协程如何选择" class="headerlink" title="多线程、多进程和协程如何选择"></a>多线程、多进程和协程如何选择</h1><p>在<a href="https://blog.csdn.net/u010698107/article/details/117265796">Python多线程与多进程</a>中介绍了多线程和多进程，它们都有各自的应用场景，在实际应用中，如何选择呢？</p>
<ul>
<li>I/O 密集型任务，并且 I/O 操作很慢，需要很多任务协同实现，使用协程。</li>
<li>I/O 密集型任务，但是 I/O 操作很快，只需要有限数量的任务/线程，使用多线程就可以，当然也可以使用协程。</li>
<li>CPU 密集型任务，使用多进程。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了协程的概念以及python中协程的实现方法，注意asyncio 是单线程的，通过内部 event loop 机制实现并发地运行多个不同的任务，从而实现并发的效果。还要注意的就是asyncio比多线程有更大的自主控制权，你需要知道程序在什么时候需要暂停、等待 I/O，在使用协程时要注意。</p>
<p>在I/O 操作多且慢的情况下使用协程比多线程效率更高，因为 Asyncio 内部任务切换远比线程切换的资源损耗要小；并且 Asyncio 可以开启的任务数量也比多线程多。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>协程</tag>
        <tag>asyncio</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基本语法介绍</title>
    <url>/posts/markdown-basic-syntax/</url>
    <content><![CDATA[<p>目前主要使用typora进行来笔记整理，使用MarkDown编辑文章非常方便简洁，我的<a href="https://hiyong.gitee.io/">Hexo博客</a>就是使用MarkDown来编写的，本文整理常用的Markdown语法以及与HTML的混用。</p>
<a id="more"></a>
<h1 id="MarkDown基本语法"><a href="#MarkDown基本语法" class="headerlink" title="MarkDown基本语法"></a>MarkDown基本语法</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><strong><a href="#横线">横线</a></strong></li>
<li><strong><a href="#标题">标题</a></strong></li>
<li><strong><a href="#段落">段落</a></strong></li>
<li><strong><a href="#文本">文本</a></strong><ul>
<li><a href="#文字高亮">文字高亮</a></li>
<li><a href="#换行">换行</a></li>
<li><a href="#斜体、粗体、删除线">斜体、粗体、删除线</a></li>
</ul>
</li>
<li><strong><a href="#引用">引用</a></strong><ul>
<li><a href="#引用分段">引用分段</a></li>
<li><a href="#引用嵌套">引用嵌套</a></li>
<li><a href="#引用中使用其它语法">引用中使用其它语法</a></li>
</ul>
</li>
<li><strong><a href="#列表">列表</a></strong><ul>
<li><a href="#无序列表">无序列表</a></li>
<li><a href="#有序列表">有序列表</a></li>
</ul>
</li>
<li><strong><a href="#代码块">代码块</a></strong></li>
<li><strong><a href="#链接">链接</a></strong> <ul>
<li><a href="#链接格式化">链接格式化</a></li>
<li><a href="#图片链接">图片链接</a></li>
<li><a href="#参考链接">参考链接</a></li>
</ul>
</li>
<li><strong><a href="#锚点">锚点</a></strong></li>
<li><strong><a href="#图片">图片</a></strong></li>
<li><strong><a href="#表格">表格</a></strong><ul>
<li><a href="#对齐">对齐</a></li>
<li><a href="#使用其他语法">使用其他语法</a></li>
</ul>
</li>
<li><strong><a href="#复选框">复选框</a></strong></li>
<li><strong><a href="#表情">表情</a></strong></li>
<li><strong><a href="#diff语法">diff语法</a></strong></li>
<li><strong><a href="#字符转义">字符转义</a></strong></li>
<li><strong><a href="#HTML">HTML</a></strong></li>
<li><strong><a href="#typora">typora</a></strong></li>
<li><strong><a href="#CSDN和博客园图片大小和居中设置">CSDN和博客园图片大小和居中设置</a></strong><ul>
<li><a href="#CSDN">CSDN</a></li>
<li><a href="#博客园">博客园</a></li>
</ul>
</li>
</ul>
<h2 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h2><p><code>***、---、___</code>可以显示横线效果，注意横线前后要加一个空行。</p>
<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Markdown</th>
<th>HTML</th>
</tr>
</thead>
<tbody>
<tr>
<td># 一级标题</td>
<td><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code></td>
</tr>
<tr>
<td>## 二级标题</td>
<td><code>&lt;h2&gt;二级标题&lt;/h2&gt;</code></td>
</tr>
<tr>
<td>### 三级标题</td>
<td><code>&lt;h3&gt;三级标题&lt;/h3&gt;</code></td>
</tr>
<tr>
<td>#### 四级标题</td>
<td><code>&lt;h4&gt;四级标题&lt;/h4&gt;</code></td>
</tr>
<tr>
<td>##### 五级标题</td>
<td><code>&lt;h5&gt;五级标题&lt;/h5&gt;</code></td>
</tr>
<tr>
<td>###### 六级标题</td>
<td><code>&lt;h6&gt;六级标题&lt;/h6&gt;</code></td>
</tr>
</tbody>
</table>
</div>
<p>一级标题和二级标题也可以分别通过在标题文字下面添加<code>==</code>和<code>--</code>来实现。<code>=</code>和<code>-</code>个数大于等于2就可以。<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">一级标题 </span><br><span class="line">==</span><br><span class="line"></span><br><span class="line">二级标题 </span><br><span class="line">--</span><br></pre></td></tr></table></figure></p>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>分段使用空行就行了</p>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h3><p>可以使用一对反引号来突出部分文字：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>==高亮==</code>：typora中的markdown扩展语法，<br />需要开启才可使用</td>
<td>==高亮==</td>
</tr>
<tr>
<td><code>`linux` </code></td>
<td><code>linux</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>在上一行文本后面补两个空格（大于大于2个空格），<br>这样下一行的文本就换行了。</p>
<p>HTML语法：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;p&gt;第一行&lt;br&gt;第二行&lt;/p&gt;</code></td>
<td><p>第一行<br/>第二行</p></td>
</tr>
</tbody>
</table>
</div>
<p>在两行文本直接加一个空行会分段。</p>
<h3 id="斜体、粗体、删除线"><a href="#斜体、粗体、删除线" class="headerlink" title="斜体、粗体、删除线"></a>斜体、粗体、删除线</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Markdown语法</th>
<th>HTML语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*斜体1*</code></td>
<td><code>&lt;em&gt;斜体&lt;/em&gt;</code></td>
<td><em>斜体1</em></td>
</tr>
<tr>
<td><code>_斜体2_</code></td>
<td></td>
<td><em>斜体2</em></td>
</tr>
<tr>
<td><code>**粗体1**</code></td>
<td><code>&lt;strong&gt;粗体&lt;/strong&gt;</code></td>
<td><strong>粗体1</strong></td>
</tr>
<tr>
<td><code>__粗体2__</code></td>
<td></td>
<td><strong>粗体2</strong></td>
</tr>
<tr>
<td><code>这是一个 ~~删除线~~</code></td>
<td></td>
<td>这是一个 <del>删除线</del></td>
</tr>
<tr>
<td><code>***斜粗体1***</code></td>
<td><code>&lt;strong&gt;&lt;em&gt;斜粗体&lt;/em&gt;&lt;/strong&gt;</code></td>
<td><strong><em>斜粗体1</em></strong></td>
</tr>
<tr>
<td><code>___斜粗体2___</code></td>
<td></td>
<td><strong><em>斜粗体2</em></strong></td>
</tr>
<tr>
<td><code>__*斜粗体3*__</code></td>
<td></td>
<td><strong><em>斜粗体3</em></strong></td>
</tr>
<tr>
<td><code>**_斜粗体4_**</code></td>
<td></td>
<td><strong><em>斜粗体4</em></strong></td>
</tr>
<tr>
<td><code>***~~斜粗体删除线1~~***</code></td>
<td></td>
<td><strong><em><del>斜粗体删除线1</del></em></strong></td>
</tr>
<tr>
<td><code>~~***斜粗体删除线2***~~</code></td>
<td></td>
<td><del><strong><em>斜粗体删除线2</em></strong></del></td>
</tr>
<tr>
<td>Markdown没有下划线语法</td>
<td><code>&lt;u&gt;下划线&lt;/u&gt;</code></td>
<td><u>下划线</u></td>
</tr>
</tbody>
</table>
</div>
<p>斜体、粗体、删除线可混合使用<br><strong>粗体和斜体建议使用星号</strong></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用段落前面添加符号<code>&gt;</code>。</p>
<h3 id="引用分段"><a href="#引用分段" class="headerlink" title="引用分段"></a>引用分段</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 段落1</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; 段落2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>毫不犹豫地，监听员按下了发射键，高功率电波带着那条简短但可能拯救另一个文明的信息飞向黑暗的太空：<br>这个世界收到了你们的信息。</p>
<p>我是这个世界的一个和平主义者，我首先收到信息是你们文明的幸运，警告你们：不要回答！不要回答！不要回答！！！</p>
<p>你们的方向上有千万颗恒星，只要不回答，这个世界就无法定位发出源。<br>如果回答，发射器将被定位，你们的文明将遭到入侵，你们的世界将被占领！<br>不要回答！不要回答！！不要回答！！！</p>
</blockquote>
<h3 id="引用嵌套"><a href="#引用嵌套" class="headerlink" title="引用嵌套"></a>引用嵌套</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 不要回答！</span></span><br><span class="line">&gt;&gt; 不要回答！！</span><br><span class="line">&gt;&gt;&gt; 不要回答！！！</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不要回答！</p>
<blockquote>
<p>不要回答！！</p>
<blockquote>
<p>不要回答！！！</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="引用中使用其它语法"><a href="#引用中使用其它语法" class="headerlink" title="引用中使用其它语法"></a>引用中使用其它语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ## 监听员</span><br><span class="line">&gt; 毫不犹豫地，监听员按下了发射键，高功率电波带着那条简短但可能拯救另一个文明的信息飞向黑暗的太空：</span><br><span class="line">&gt; 这个世界收到了你们的信息。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 我是这个世界的一个和平主义者，我首先收到信息是你们文明的幸运，警告你们：</span><br><span class="line">&gt; - 不要回答！</span><br><span class="line">&gt; - 不要回答！</span><br><span class="line">&gt; - 不要回答！！！</span><br><span class="line">&gt;</span><br><span class="line">&gt; 你们的方向上有千万颗恒星，只要不回答，这个世界就无法定位发出源。</span><br><span class="line">&gt; 如果回答，发射器将被定位，你们的文明将遭到入侵，你们的世界将被占领！</span><br><span class="line">&gt; **不要回答！**</span><br><span class="line">&gt;</span><br><span class="line">&gt; 不要回答！！</span><br><span class="line">&gt;</span><br><span class="line">&gt; 不要回答！！！</span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表可以使用短横杠 (<code>-</code>), 星号 (<code>*</code>), 或者加号 (<code>+</code>)<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 不要回答！</span><br><span class="line"><span class="bullet">-</span> 不要回答！！</span><br><span class="line"><span class="bullet">+</span> 不要回答！！！</span><br></pre></td></tr></table></figure><br>html语法：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>不要回答！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>不要回答！！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>不要回答！！！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<ul>
<li>不要回答！</li>
</ul>
<ul>
<li>不要回答！！</li>
</ul>
<ul>
<li>不要回答！！！</li>
</ul>
<p>多级无序列表<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 不要回答！</span><br><span class="line"><span class="bullet">    *</span> 不要回答！！</span><br></pre></td></tr></table></figure><br>效果：</p>
<ul>
<li>不要回答！<ul>
<li>不要回答！！</li>
</ul>
</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>在数字后面加一个点，再加一个空格。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我是这个世界的一个和平主义者，我首先收到信息是你们文明的幸运，警告你们：</span><br><span class="line"><span class="bullet">1.</span> 不要回答！</span><br><span class="line"><span class="bullet">2.</span> 不要回答！</span><br><span class="line"><span class="bullet">3.</span> 不要回答！！！</span><br></pre></td></tr></table></figure>
<p>html语法：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>效果：</strong><br>我是这个世界的一个和平主义者，我首先收到信息是你们文明的幸运，警告你们：  </p>
<ol>
<li>不要回答！</li>
<li>不要回答！</li>
<li>不要回答！！！</li>
</ol>
<p>注意：数字可以不按顺序，渲染时会自动按数字顺序列出。</p>
<p><strong>多级有序列表</strong><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 不要回答！</span><br><span class="line"><span class="bullet">       1.</span> 不要回答！</span><br><span class="line"><span class="bullet">2.</span> 不要回答！！！</span><br></pre></td></tr></table></figure></p>
<p>效果</p>
<ol>
<li>不要回答！<pre><code> 1. 不要回答！
</code></pre></li>
<li>不要回答！！！</li>
</ol>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul>
<li>缩进四个空格或一个Tab制表符。</li>
<li>在列表中时，缩进八个空格或两个Tab制表符。</li>
<li>三个反引号后面加上编程语言的名字（也可以不加），另起一行开始写代码，最后一行再加上三个反引号。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> <span class="comment">#Bash</span></span><br></pre></td></tr></table></figure>
<p>要将文字表示为代码，用单个反引号将其括起来。例如：<code>Linux</code></p>
<p>html语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果代码块内有反引号，可以使用两个反引号来转义：</p>
<p><code>要将文字表示为代码，用单个`反引号`将其括起来。</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>要将文字表示为代码，用单个`反引号`将其括起来。<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><strong>注意</strong>：URL中如果有空格，使用<code>%20</code>进行URL编码。</p>
<p>链接地址可以是URL链接，也可以是本地文件路径。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>#</th>
<th>markdown语法</th>
<th>HTML语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>[CSDN地址](https://blog.csdn.net/u010698107 &quot;悬停显示：我的CSDN博客&quot;)</code></td>
<td><code>&lt;a href=&quot;https://blog.csdn.net/u010698107 &quot; title=&quot;悬停显示：我的CSDN博客&quot;&gt;CSDN地址&lt;/a&gt;</code></td>
<td><a href="csdn.png" title="悬停显示：我的CSDN博客">CSDN地址</a></td>
</tr>
<tr>
<td>2</td>
<td><code>[我的文档](./example/testfile.md)</code></td>
<td></td>
<td><a href="./example/testfile.md">我的文档</a></td>
</tr>
</tbody>
</table>
</div>
<p>也可以直接在URL或者邮箱地址两边加尖括号将地址快速转化为链接：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;https://blog.csdn.net/u010698107&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：<a href="https://blog.csdn.net/u010698107">https://blog.csdn.net/u010698107</a></p>
<h3 id="链接格式化"><a href="#链接格式化" class="headerlink" title="链接格式化"></a>链接格式化</h3><p>也可以对链接进行格式化，比如加粗，斜体等</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我的CSDN地址是：<span class="strong">**[<span class="string">CSDN地址</span>](<span class="link">https://blog.csdn.net/u010698107</span>)**</span></span><br><span class="line">我的CSDN地址是：<span class="emphasis">*[<span class="string">CSDN地址</span>](<span class="link">https://blog.csdn.net/u010698107</span>)*</span></span><br><span class="line">回到[<span class="string">`目录`</span>](<span class="link">#目录</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>图片链接[ ]里面是要显示的图片。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![csdn](&#x2F;img&#x2F;csdn.png &quot;我的CSDN&quot;)](https:&#x2F;&#x2F;blog.csdn.net&#x2F;u010698107)</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>#</th>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>markdown</td>
<td><code>[![csdn](https://img-home.csdnimg.cn/images/20201124032511.png &quot;我的CSDN&quot;)](https://blog.csdn.net/u010698107)</code></td>
<td><a href="https://blog.csdn.net/u010698107"><img src="csdn.png" alt="csdn" title="我的CSDN"></a></td>
</tr>
<tr>
<td>HTML</td>
<td><code>&lt;a href=&quot;https://blog.csdn.net/u010698107&quot; &gt;&lt;img src=&quot;https://img-home.csdnimg.cn/images/20201124032511.png&quot;  alt=&quot;csdn&quot; title=&quot;我的CSDN&quot;&gt;&lt;/a&gt;</code></td>
<td><a href="https://blog.csdn.net/u010698107" ><img src="csdn.png"  alt="csdn" title="我的CSDN"></a></td>
</tr>
</tbody>
</table>
</div>
<p>鼠标悬停图标时显示的文字是图片的title</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>参考链接包括两部分：  </p>
<ul>
<li>与文本保持内联的部分</li>
<li>存储在文件其他地方以使文本易于阅读的部分。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">blog</span>]:<span class="link">https://hiyongz.github.io/ &quot;我的博客&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="string">我的博客</span>][<span class="symbol">blog</span>] </span><br><span class="line"><span class="section"># 或者</span></span><br><span class="line">[<span class="string">blog</span>][<span class="symbol"></span>]</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li><a href="https://hiyongz.github.io/" title="我的博客">我的博客</a></li>
<li><a href="https://hiyongz.github.io/" title="我的博客">blog</a></li>
</ul>
<h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似，可以用它来实现页面内跳转。 </p>
<div class="table-container">
<table>
<thead>
<tr>
<th>#</th>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>markdown</td>
<td><code>[目录](#目录 &quot;悬停显示&quot;)</code></td>
<td><a href="#目录" title="悬停显示">目录</a></td>
</tr>
<tr>
<td>HTML</td>
<td><code>&lt;a href=&quot;#目录&quot; title=&quot;悬停显示&quot;&gt;目录&lt;/a&gt;</code></td>
<td><a href="#目录" title="悬停显示">目录</a></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>其中title可以不用设置。</p>
</blockquote>
<p>也可以使用和参考链接一样的方式：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[文章目录]</span>: #目录</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[目录]</span><span class="selector-attr">[文章目录]</span></span><br><span class="line"><span class="selector-attr">[文章目录]</span><span class="selector-attr">[]</span></span><br></pre></td></tr></table></figure><br>效果：</p>
<p><a href="#目录">目录</a><br><a href="#目录">文章目录</a></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt</span>](<span class="link">URL title</span>)</span><br></pre></td></tr></table></figure><br>alt和title对应HTML中的alt和title属性（都可省略）：</p>
<ul>
<li>alt表示图片显示失败时的替换文本</li>
<li>title表示鼠标悬停在图片时的显示文本，注意要加引号。</li>
<li>URL为图片的url地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>。</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>#</th>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>markdown</td>
<td><code>![CSDN](https://img-home.csdnimg.cn/images/20201124032511.png &quot;CSDN logo&quot;)</code></td>
<td><img src="csdn.png" alt="CSDN" title="CSDN logo"></td>
</tr>
<tr>
<td>HTML</td>
<td><code>&lt;img src=&quot;https://img-home.csdnimg.cn/images/20201124032511.png&quot; alt=&quot;CSDN&quot; title=&quot;CSDN logo&quot;&gt;</code></td>
<td><img src="csdn.png" alt="CSDN" title="CSDN logo"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 表头1 | 表头2 | 表头3 |</span><br><span class="line">| ----- | ----- | ----- |</span><br><span class="line">| value | value | value |</span><br><span class="line">| value | value | value |</span><br></pre></td></tr></table></figure>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>指定对齐方式<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 左对齐 |   居中    | 右对齐 |</span><br><span class="line">| :---- |:---------:| -----:|</span><br><span class="line">|  left |  entered  | right |</span><br><span class="line">|  left | centered  | right |</span><br><span class="line">|  left | centered  | right |</span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:center">居中</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">left</td>
<td style="text-align:center">entered</td>
<td style="text-align:right">right</td>
</tr>
<tr>
<td style="text-align:left">left</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">right</td>
</tr>
<tr>
<td style="text-align:left">left</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">right</td>
</tr>
</tbody>
</table>
</div>
<h3 id="使用其他语法"><a href="#使用其他语法" class="headerlink" title="使用其他语法"></a>使用其他语法</h3><p>表格单元中的内容可以可以使用其Markdown语法，如：  加粗、斜体、删除线等</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">表头1</th>
<th style="text-align:center">表头2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><u>下划线</u></td>
<td style="text-align:center"><strong>加粗</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><em>斜体加粗</em></strong></td>
<td style="text-align:center"><em>斜体</em></td>
</tr>
<tr>
<td style="text-align:center"><code>代码</code></td>
<td style="text-align:center"><del>~删除线</del>~</td>
</tr>
</tbody>
</table>
</div>
<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Python</span><br><span class="line"><span class="bullet">-</span> [ ] Java</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>[x] Python</li>
<li>[ ] Java</li>
</ul>
<p>可以点击复选框来勾选或解除勾选，如果想要固定它，使它不可勾选，可以使用HTML语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;category&quot;</span> <span class="attr">checked</span> <span class="attr">disabled</span>/&gt;</span> Python <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;category&quot;</span> <span class="attr">disabled</span>/&gt;</span> Java <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><input type="checkbox" name="category" checked disabled/> Python </p>
<p><input type="checkbox" name="category" disabled/> Java </p>

<h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p>Github的Markdown语法支持添加emoji表情，每个表情对应一个符号码（两个冒号包围的字符），比如<code>:laughing:</code>，:laughing:</p>
<p>所有支持的表情符号码，可以查询网页：<a href="http://www.emoji-cheat-sheet.com">http://www.emoji-cheat-sheet.com</a>。</p>
<p>下面举几个例子：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">图标</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">图标</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">图标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>:heart_eyes:</code></td>
<td style="text-align:center">:heart_eyes:</td>
<td style="text-align:center"><code>:smile:</code></td>
<td style="text-align:center">:smile:</td>
<td style="text-align:center"><code>:laughing:</code></td>
<td style="text-align:center">:laughing:</td>
</tr>
<tr>
<td style="text-align:center"><code>:blush:</code></td>
<td style="text-align:center">:blush:</td>
<td style="text-align:center"><code>:smiley:</code></td>
<td style="text-align:center">:smiley:</td>
<td style="text-align:center"><code>:relaxed:</code></td>
<td style="text-align:center">:relaxed:</td>
</tr>
<tr>
<td style="text-align:center"><code>:sunny:</code></td>
<td style="text-align:center">:sunny:</td>
<td style="text-align:center"><code>:umbrella:</code></td>
<td style="text-align:center">:umbrella:</td>
<td style="text-align:center"><code>:cloud:</code></td>
<td style="text-align:center">:cloud:</td>
</tr>
<tr>
<td style="text-align:center"><code>:snowflake:</code></td>
<td style="text-align:center">:snowflake:</td>
<td style="text-align:center"><code>:snowman:</code></td>
<td style="text-align:center">:snowman:</td>
<td style="text-align:center"><code>:zap:</code></td>
<td style="text-align:center">:zap:</td>
</tr>
<tr>
<td style="text-align:center"><code>:bamboo:</code></td>
<td style="text-align:center">:bamboo:</td>
<td style="text-align:center"><code>:gift_heart:</code></td>
<td style="text-align:center">:gift_heart:</td>
<td style="text-align:center"><code>:dolls:</code></td>
<td style="text-align:center">:dolls:</td>
</tr>
<tr>
<td style="text-align:center"><code>:school_satchel:</code></td>
<td style="text-align:center">:school_satchel:</td>
<td style="text-align:center"><code>:mortar_board:</code></td>
<td style="text-align:center">:mortar_board:</td>
<td style="text-align:center"><code>:flags:</code></td>
<td style="text-align:center">:flags:</td>
</tr>
<tr>
<td style="text-align:center"><code>:house:</code></td>
<td style="text-align:center">:house:</td>
<td style="text-align:center"><code>:house_with_garden:</code></td>
<td style="text-align:center">:house_with_garden:</td>
<td style="text-align:center"><code>:school:</code></td>
<td style="text-align:center">:school:</td>
</tr>
<tr>
<td style="text-align:center"><code>:office:</code></td>
<td style="text-align:center">:office:</td>
<td style="text-align:center"><code>:post_office:</code></td>
<td style="text-align:center">:post_office:</td>
<td style="text-align:center"><code>:hospital:</code></td>
<td style="text-align:center">:hospital:</td>
</tr>
<tr>
<td style="text-align:center"><code>:one:</code></td>
<td style="text-align:center">:one:</td>
<td style="text-align:center"><code>:two:</code></td>
<td style="text-align:center">:two:</td>
<td style="text-align:center"><code>:three:</code></td>
<td style="text-align:center">:three:</td>
</tr>
<tr>
<td style="text-align:center"><code>:four:</code></td>
<td style="text-align:center">:four:</td>
<td style="text-align:center"><code>:five:</code></td>
<td style="text-align:center">:five:</td>
<td style="text-align:center"><code>:six:</code></td>
<td style="text-align:center">:six:</td>
</tr>
</tbody>
</table>
</div>
<h2 id="diff语法"><a href="#diff语法" class="headerlink" title="diff语法"></a>diff语法</h2><p>GitHub 风格标记中的差异格式，在三个反引号后面写diff，内容中， <code>+</code>开头表示新增，<code>-</code>开头表示删除。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-oldLine </span></span><br><span class="line"><span class="addition">+newLine </span></span><br></pre></td></tr></table></figure>
<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果要显示用于格式化Markdown文档的特殊字符，需要使用反斜杠（<code>\</code>）进行转义。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Character</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
</tr>
<tr>
<td>`</td>
</tr>
<tr>
<td>*</td>
</tr>
<tr>
<td>_</td>
</tr>
<tr>
<td>{ }</td>
</tr>
<tr>
<td>[ ]</td>
</tr>
<tr>
<td>&lt; &gt;</td>
</tr>
<tr>
<td>( )</td>
</tr>
<tr>
<td>#</td>
</tr>
<tr>
<td>+</td>
</tr>
<tr>
<td>-</td>
</tr>
<tr>
<td>.</td>
</tr>
<tr>
<td>!</td>
</tr>
<tr>
<td>\</td>
</tr>
</tbody>
</table>
</div>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>在前面介绍的Markdown语法中，我也列出了对应的HTML语法格式，许多Markdown应用都支持在Markdown文本中使用HTML语法。</p>
<p>有些时候HTML语法更好用，在需要更改元素的属性时，比如指定文本的颜色或更改图像的大小，需要使用到HTML语法。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;img src=&quot;./img/wechat.png&quot; style=&quot;zoom:10%;&quot;/&gt;</code></td>
<td><img src="wechat.png" style="zoom:10%;" /></td>
</tr>
<tr>
<td><code>&lt;center&gt;&lt;font size=&quot;2&quot;&gt;https://blog.csdn.net/u010698107&lt;/font&gt;&lt;/center&gt;</code></td>
<td><center><font size="2">https://blog.csdn.net/u010698107</font></center></td>
</tr>
<tr>
<td><code>&lt;font color=&quot;red&quot;&gt;红色&lt;/font&gt;</code></td>
<td><font color="red">红色</font></td>
</tr>
<tr>
<td><code>&lt;div style=&quot;color:red&quot;&gt;蓝色&lt;/div&gt;</code></td>
<td><div style="color:blue">蓝色</div></td>
</tr>
</tbody>
</table>
</div>
<div style="color:blue">蓝色</div>

<center><font size="2">https://blog.csdn.net/u010698107</font></center>

<h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><p>typora是一个Markdown编辑器，我在<a href="https://blog.csdn.net/u010698107/article/details/117059599">typora主题配置：公众号一键排版</a>中介绍了它的CSS样式使用方法，下面介绍一下typora的快捷键。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+=</td>
<td>提高标题级别</td>
</tr>
<tr>
<td>ctrl+-</td>
<td>降低标题级别</td>
</tr>
<tr>
<td>ctrl+数字(1-6)</td>
<td>1-6级标题</td>
</tr>
<tr>
<td>ctrl + B</td>
<td>加粗</td>
</tr>
<tr>
<td>ctrl + I</td>
<td>斜体</td>
</tr>
<tr>
<td>ctrl + U</td>
<td>下划线</td>
</tr>
<tr>
<td>alt + shift+ 5</td>
<td>删除线</td>
</tr>
<tr>
<td>ctrl + shift+ [</td>
<td>有序列表</td>
</tr>
<tr>
<td>ctrl + shift+ ]</td>
<td>无序列表</td>
</tr>
<tr>
<td>ctrl + shift+ K</td>
<td>多行代码块</td>
</tr>
<tr>
<td>ctrl + shift+ I</td>
<td>插入图片</td>
</tr>
<tr>
<td>ctrl + K</td>
<td>链接</td>
</tr>
<tr>
<td>ctrl + T</td>
<td>插入表格</td>
</tr>
</tbody>
</table>
</div>
<h2 id="CSDN和博客园图片大小和居中设置"><a href="#CSDN和博客园图片大小和居中设置" class="headerlink" title="CSDN和博客园图片大小和居中设置"></a>CSDN和博客园图片大小和居中设置</h2><h3 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h3><p>设置图片大小，在图片url后面添加</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#pic<span class="emphasis">_left </span></span></span><br><span class="line"><span class="section"><span class="emphasis">#pic_</span>center</span></span><br><span class="line"><span class="section">#pic<span class="emphasis">_right</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](https://img-blog.csdnimg.cn/img<span class="emphasis">_convert/74dad4531df32c064c411b63dec66db1.png#pic_</span>center =300x)</span><br></pre></td></tr></table></figure>
<ul>
<li>=300x：指定宽为300，不指定高，自动缩放</li>
<li>如果要指定宽和高：=300x100</li>
<li>注意=前面有空格</li>
</ul>
<h3 id="博客园"><a href="#博客园" class="headerlink" title="博客园"></a>博客园</h3><p>语法：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img2020.cnblogs.com/blog/2229336/202105/2229336-20210519222822372-875961918.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">align=center # 居中</span><br><span class="line">align=left # 左对齐</span><br><span class="line">align=right # 右对齐</span><br></pre></td></tr></table></figure>
<hr>
<div class="table-container">
<table>
<thead>
<tr>
<th>作者</th>
<th>hiyongz</th>
</tr>
</thead>
<tbody>
<tr>
<td>个人博客</td>
<td><a href="https://hiyongz.github.io/">博客地址</a></td>
</tr>
<tr>
<td>CSDN博客</td>
<td><a href="https://blog.csdn.net/u010698107">CSDN</a></td>
</tr>
<tr>
<td>博客园</td>
<td><a href="https://www.cnblogs.com/hiyong/">博客园</a></td>
</tr>
<tr>
<td>微信公众号</td>
<td><img src="wechat.png" style="zoom:10%;" /></td>
</tr>
</tbody>
</table>
</div>
<hr>
<center><b>--THE END--<b></center>





]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的闭包</title>
    <url>/posts/python-notes-for-function-closures/</url>
    <content><![CDATA[<p>闭包 (closure) 是函数式编程中的一个概念，Python虽然不是纯粹的是函数式编程语言，但它仍然具有函数式编程的一些特性。在以前的文章<a href="https://blog.csdn.net/u010698107/article/details/114716537">Python笔记：Python装饰器</a>中介绍的装饰器其实就使用了闭包，本文来介绍一下Python中的闭包。</p>
<a id="more"></a>
<h1 id="嵌套函数和变量作用域"><a href="#嵌套函数和变量作用域" class="headerlink" title="嵌套函数和变量作用域"></a>嵌套函数和变量作用域</h1><p>介绍闭包之前，先理解什么是嵌套函数和变量作用域。</p>
<h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>函数嵌套就是在一个函数内部又定义函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc</span>(<span class="params">val1</span>):</span></span><br><span class="line">    val = val1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">innerFunc</span>():</span></span><br><span class="line">        print(val)</span><br><span class="line"></span><br><span class="line">    innerFunc()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    TestFunc(<span class="string">&#x27;Hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>在TestFunc()内部又定义了innerFunc()函数，函数的嵌套主要两个方面的作用。</p>
<ol>
<li>函数的嵌套能够保证内部函数的隐私，内部函数只能在外部函数作用域内访问。</li>
<li>合理的使用函数嵌套，能够提高程序的运行效率。</li>
</ol>
<h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><p>在函数内部定义的变量称为<strong>局部变量</strong>，只在函数内部有效。一旦函数执行完毕，局部变量就会被回收。<strong>全局变量</strong>是定义在函数外的变量，作用域范围为全局，函数内部和外部都可以访问它。可以使用<code>locals()</code>和<code>globals()</code>分别检索局部和全局名称空间字典。</p>
<p>一般情况下，不能在函数内部改变全局变量的值。如果想要在函数内部改变全局变量的值，需要加上 global 关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VALUE1 = <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc2</span>():</span></span><br><span class="line">    <span class="keyword">global</span> VALUE1</span><br><span class="line">    VALUE1 = VALUE1 + <span class="number">1</span></span><br><span class="line">    VALUE2 = <span class="number">2</span></span><br><span class="line">    print(VALUE1)</span><br><span class="line">    print(<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">TestFunc2()</span><br><span class="line">print(VALUE1)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">667</span></span><br><span class="line">&#123;<span class="string">&#x27;VALUE2&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="number">667</span></span><br></pre></td></tr></table></figure>
<p>从执行结果可以看到，局部变量为VALUE2，使用global 关键字修饰后，VALUE1变为全局变量。</p>
<p>如果函数内部局部变量和全局变量同名，那么在函数内部，局部变量会覆盖全局变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VALUE1 = <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc3</span>():</span></span><br><span class="line">    VALUE1 = <span class="number">2</span></span><br><span class="line">    print(VALUE1)</span><br><span class="line"></span><br><span class="line">TestFunc3()</span><br><span class="line">print(VALUE1)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">666</span></span><br></pre></td></tr></table></figure>
<h2 id="嵌套函数的变量作用域"><a href="#嵌套函数的变量作用域" class="headerlink" title="嵌套函数的变量作用域"></a>嵌套函数的变量作用域</h2><p>类似的，对于嵌套函数，内部函数可以访问外部函数定义的变量，但是无法修改，如果要修改，需要加上 nonlocal 关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc</span>():</span></span><br><span class="line">    val = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">innerFunc</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> val</span><br><span class="line">        val = <span class="number">2</span></span><br><span class="line">        print(<span class="string">&quot;inner:&quot;</span>,val)</span><br><span class="line">    innerFunc()</span><br><span class="line">    print(<span class="string">&quot;outer:&quot;</span>, val)</span><br><span class="line"></span><br><span class="line">TestFunc()</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inner: <span class="number">2</span></span><br><span class="line">outer: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>同样，如果内部函数的变量和外部函数变量同名，内部函数变量会覆盖外部函数的变量。</p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包和嵌套函数类似，不同之处在于外部函数返回的是一个函数，而不是一个具体的值。下面用闭包实现计算一个数的 n 次幂：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_power</span>(<span class="params">exponent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exponent_of</span>(<span class="params">base</span>):</span></span><br><span class="line">        <span class="keyword">return</span> base ** exponent</span><br><span class="line">    <span class="keyword">return</span> exponent_of</span><br><span class="line"></span><br><span class="line">square = nth_power(<span class="number">2</span>) <span class="comment"># 平方</span></span><br><span class="line">cube = nth_power(<span class="number">3</span>) <span class="comment"># 立方</span></span><br><span class="line">print(square)</span><br><span class="line">print(cube)</span><br><span class="line"></span><br><span class="line">print(square(<span class="number">2</span>))  <span class="comment"># 2的平方</span></span><br><span class="line">print(cube(<span class="number">2</span>)) <span class="comment"># 2的立方</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;function nth_power.&lt;<span class="built_in">locals</span>&gt;.exponent_of at <span class="number">0x000001E9629C04C8</span>&gt;</span><br><span class="line">&lt;function nth_power.&lt;<span class="built_in">locals</span>&gt;.exponent_of at <span class="number">0x000001E9629C0708</span>&gt;</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>外部函数 nth_power() 返回的是函数 exponent_of()函数，闭包是一个函数对象，它记住了封闭作用域中的值，也就是记住了外部函数 nth_power() 的参数 exponent。</p>
<p>函数exponent_of()的作用域只在nth_power()内部，通过使用闭包，扩展了它的作用域，使能够在其作用域之外调用内部函数。即使函数本身从当前命名空间中删除，闭包作用域中的这个值也会被记住：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_power</span>(<span class="params">exponent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exponent_of</span>(<span class="params">base</span>):</span></span><br><span class="line">        <span class="keyword">return</span> base ** exponent</span><br><span class="line">    <span class="keyword">return</span> exponent_of</span><br><span class="line"></span><br><span class="line">square = nth_power(<span class="number">2</span>) <span class="comment"># 平方</span></span><br><span class="line">print(square(<span class="number">2</span>)) <span class="comment"># 2的平方</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> nth_power</span><br><span class="line">print(square(<span class="number">3</span>)) <span class="comment"># 3的平方</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>闭包函数对象有一个<code>__closure__</code>属性，返回cell 对象的元组，而cell 对象中保存闭包的变量（例子中的exponent值）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">print(square)</span><br><span class="line">print(cube)</span><br><span class="line">print(square.__closure__)</span><br><span class="line">print(square.__closure__[<span class="number">0</span>].cell_contents)</span><br><span class="line">print(cube.__closure__[<span class="number">0</span>].cell_contents)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;function nth_power.&lt;<span class="built_in">locals</span>&gt;.exponent_of at <span class="number">0x000001DC127D04C8</span>&gt;</span><br><span class="line">&lt;function nth_power.&lt;<span class="built_in">locals</span>&gt;.exponent_of at <span class="number">0x000001DC127D0708</span>&gt;</span><br><span class="line">(&lt;cell at <span class="number">0x000001DC124401F8</span>: <span class="built_in">int</span> <span class="built_in">object</span> at <span class="number">0x00007FFFA7FAA1B0</span>&gt;,)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>和嵌套函数返回一个值不同，闭包返回的是一个函数对象。闭包和嵌套函数的优点是可以让程序变得更简洁易读。python装饰器（decorator）中也使用闭包，可参考：<a href="https://blog.csdn.net/u010698107/article/details/114716537">Python笔记：Python装饰器</a>。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：位运算</title>
    <url>/posts/algorithm-notes-for-bitwise-operation/</url>
    <content><![CDATA[<p>计算机中的数据都是以二进制的形式存储在设备中，虽然十进制比二进制所需要的存储空间少，但二进制在硬件实现上要简单很多，而且在数模转换上也更加容易，因为只需要两种状态，所以计算机的底层运算都采用二进制。位运算就是对二进制数据进行的运算。使用合理的位运算可以提高代码在机器上的执行效率，本文将介绍常见的位运算以及Python中的位运算。</p>
<a id="more"></a>
<h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>常见位操作符如下表：<br>| 运算符 |    含义    |               Python示例               |<br>| :——: | :————: | :——————————————————: |<br>|   &amp;    |   AND 与   |                 x &amp; y                  |<br>|   |   |   OR 或    |                 x | y                 |<br>|   ~    |   NOT 非   |                   ~x                   |<br>|   ^    |  XOR 异或  |                 x ^ y                  |<br>|   &lt;&lt;   |    左移    |           x &lt;&lt; 1(相当于x*2)            |<br>|   &gt;&gt;   |    右移    |           x &gt;&gt; 1(相当于x/2)            |<br>|  >&gt;&gt;  | 无符号右移 | Python没有符号位，Java中可以使用此符号 |</p>
<p>上表列出的位运算符也可以进行复合赋值运算：<br>| 运算符 | Python示例 |   等价于   |<br>| :——: | :————: | :————: |<br>|   &amp;    |   x &amp;= y   | x = x &amp; y  |<br>|   |   |  x |= y   | x = x | y |<br>|   ^    |   x ^= y   | x = x ^ y  |<br>|   &lt;&lt;   |  x &lt;&lt;= 1   | x = x &lt;&lt; 1 |<br>|   &gt;&gt;   |  x &gt;&gt;= 1   | x = x &gt;&gt; 1 |<br>|  >&gt;&gt;  |  x &gt;&gt;&gt;= 1  |     /      |</p>
<p>注意与逻辑运算符的区别，逻辑与<code>&amp;&amp;</code>和逻辑或<code>||</code>具有短路求值特性，比如<code>x &amp;&amp; y</code>运算，如果x为false，则不会计算y；<code>x || y</code>运算中，如果x为true，则不会运算y。</p>
<p>下面介绍这些位运算符的使用方法。</p>
<h1 id="Python位运算"><a href="#Python位运算" class="headerlink" title="Python位运算"></a>Python位运算</h1><h2 id="与-amp"><a href="#与-amp" class="headerlink" title="与 - &amp;"></a>与 - &amp;</h2><p>按位与操作符就是按二进制位进行”与”运算，两位同时为1，结果为1，否则为0<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x)</span><br><span class="line"><span class="string">&#x27;0b110&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(y)</span><br><span class="line"><span class="string">&#x27;0b1100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x &amp; y)</span><br><span class="line"><span class="string">&#x27;0b100&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="或"><a href="#或" class="headerlink" title="或 - |"></a>或 - |</h2><p>或操作符进行按位或，只要其中一个为1，结果为1。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x)</span><br><span class="line"><span class="string">&#x27;0b110&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(y)</span><br><span class="line"><span class="string">&#x27;0b1100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x | y)</span><br><span class="line"><span class="string">&#x27;0b1110&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="非"><a href="#非" class="headerlink" title="非 - ~"></a>非 - ~</h2><p>非操作符就是取反操作：<code>~x = -(x+1)</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>~<span class="number">6</span></span><br><span class="line">-<span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<h2 id="异或"><a href="#异或" class="headerlink" title="异或 - ^"></a>异或 - ^</h2><p>异或也就是相同为0，不同为1：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ y</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x)</span><br><span class="line"><span class="string">&#x27;0b110&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(y)</span><br><span class="line"><span class="string">&#x27;0b1100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x ^ y)</span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>异或操作的一些特点：<br>1、x ^ 0 = x<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ <span class="number">0</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<p>2、x ^ (-1) = ~x<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ -<span class="number">1</span></span><br><span class="line">-<span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>~x</span><br><span class="line">-<span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<p>3、x ^ (~x) = -1<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ (~x)</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><br>4、x ^ x = 0<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ x</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><br>5、交换两个数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = x ^ y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ z</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y ^ z</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><br>6、结合律<br>x ^ y ^ z = x ^ (y ^ z) = (x ^  y) ^z </p>
<h2 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移 - &lt;&lt;"></a>左移 - &lt;&lt;</h2><p>按位左移操作符(&lt;&lt;)将其第一位向左移，在右边补零。对于左移操作相当于将数字乘以2的n次幂：<code>x &lt;&lt; n = x * 2^n</code>。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt;&lt; <span class="number">2</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt;&lt; <span class="number">3</span></span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure><br>注意在Python编程中，没有必要使用移位操作来提高执行效率，因为Python编译器已经优化了，使用移位操作反而降低了代码的可读性。</p>
<h2 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移 - &gt;&gt;"></a>右移 - &gt;&gt;</h2><p>按位右移操作符(&gt;&gt;)和左移相反，它是向右移动，左边补0。右移等价于：<code>x &gt;&gt; n = floor(x / 2^n)</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x // <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h1 id="位运算其它应用"><a href="#位运算其它应用" class="headerlink" title="位运算其它应用"></a>位运算其它应用</h1><p>指定位置的位运算</p>
<ol>
<li>将x 最右边的n 位清零：x&amp; (~0 &lt;&lt; n)</li>
<li>获取x 的第n 位值（0 或者1）：(x &gt;&gt; n) &amp; 1</li>
<li>获取x 的第n 位的幂值：x&amp; (1 &lt;&lt;n)</li>
<li>仅将第n 位置为1：x | (1  &lt;&lt; n)</li>
<li>第n位取反：x ^ (1  &lt;&lt; n)</li>
<li>仅将第n 位置为0：x &amp; (~  (1 &lt;&lt; n))</li>
<li>将x 最高位至第n 位（含）清零：x&amp; ((1 &lt;&lt; n) -1)</li>
</ol>
<p>判断奇偶<br>x % 2 == 1  —&gt; (x &amp; 1)  == 1<br>x % 2 == 0  —&gt; (x &amp;  1) == 0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x= <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>将最低位的1清零<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x)</span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; (x - <span class="number">1</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">8</span>)</span><br><span class="line"><span class="string">&#x27;0b1000&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>得到最低位的1<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(x)</span><br><span class="line"><span class="string">&#x27;0b1010&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; -x</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><br>清0<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; ~x</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>如果x和y是集合，Python中，位运算符可用于集合的运算，详见<a href="https://blog.csdn.net/u010698107/article/details/116904708">算法笔记：哈希表、映射和集合</a>。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>常见搜索算法（二）：二分查找</title>
    <url>/posts/algorithm-notes-for-binary-search/</url>
    <content><![CDATA[<p>搜索具有n个元素有序数组的某个元素时，最直接的方法就是对每个元素进行遍历，也就是线性搜索，时间复杂度为O(n)。 还有一种更高效的搜索方法就是本文要介绍的二分查找，时间复杂度为O(logn)，本文介绍使用Python实现二分查找。</p>
<a id="more"></a>
<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>二分查找要求查找数组是有序的，将有序的数组分成两半， 如果搜索值小于中间位置记录的值，则进一步查找前一个子表。 否则查找后一个子表。 重复上面的步骤，直到找到该值或不存在（间隔为0）。使用二分查找算法的前提：</p>
<ol>
<li>查找数组是升序或者降序的</li>
<li>存在上下边界</li>
<li>元素可以通过索引访问</li>
</ol>
<p>在升序排列数组：<code>[2, 8, 10, 20, 30, 35, 42, 50, 52, 60]</code> 中查找元素50.<br><img src="binary-search.png" width="60%" height="60%" /></p>
<h1 id="python实现二分查找"><a href="#python实现二分查找" class="headerlink" title="python实现二分查找"></a>python实现二分查找</h1><p>下面使用Python实现二分查找<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span>(<span class="params">self, arr: List[<span class="built_in">int</span>], target:<span class="built_in">int</span></span>):</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">                <span class="comment"># find the target!!  </span></span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                right = mid - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Solu = Solution()</span><br><span class="line">    result = Solu.binarySearch([<span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">60</span>],<span class="number">50</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>在<a href="">算法笔记：时间复杂度和空间复杂度</a>中介绍了二分查找的时间复杂度一般使用主定理（The Master Theorem）来计算，时间复杂度可表示为：<code>T(n) = T(n/2) + f(n)</code></p>
<p>下面推导一下二分查找时间复杂度的计算过程。</p>
<p>假设数组长度为<code>n</code>，且是有序的，迭代次数用<code>k</code>表示。</p>
<ol>
<li>第一次迭代数组长度为<code>n</code></li>
<li>第二次迭代数组长度为<code>n/2</code></li>
<li>第三次迭代数组长度为<code>(n/2)/2=n/(2^2)</code></li>
<li>第k次迭代数组长度为<code>n/(2^k)=1</code></li>
</ol>
<p>根据<code>n/(2^k)=1</code>可得<code>n = 2^k</code></p>
<p>两边取对数：<code>log2(n) = log2(2^k)</code><br>可得出：<code>k = log2(n)</code></p>
<p>所以二分查找的时间复杂度为<code>log2(n)</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了对有序数组的二分查找算法，相对于线性搜索它的效率更高。</p>
<p>对于搜索无序的数组，一种方法是先对它进行排序，然后用二分查找的方法，但排序的最优复杂度也是O(nlogn)，使用线性搜索效率可能会更高。还有一种提高无序数组搜索效率的解决方案是使用多线程的方法。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>Python对象及内存管理机制</title>
    <url>/posts/python-notes-for-object-and-copy/</url>
    <content><![CDATA[<p>Python是一门面向对象的编程语言，python中一切皆为对象，对每一个对象分配内存空间，python的内存管理机制主要包括引用计数、垃圾回收和内存池机制。本文简要介绍python对象及内存管理机制。</p>
<a id="more"></a>
<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>常见的参数传递有<strong>值传递</strong>和<strong>引用传递</strong></p>
<ul>
<li><strong>值传递</strong>就是拷贝参数的值，然后传递给新变量，这样原变量和新变量之间互相独立，互不影响。</li>
<li><strong>引用传递</strong>指把参数的引用传给新的变量，这样原变量和新变量指向同一块内存地址。其中任何一个变量值改变，另外一个变量也会随之改变。</li>
</ul>
<h2 id="Python-参数传递"><a href="#Python-参数传递" class="headerlink" title="Python 参数传递"></a>Python 参数传递</h2><p>Python 的参数传递是<strong>赋值传递</strong>（pass by assignment），或者叫作<strong>对象的引用传递</strong>（pass by object reference）。在进行参数传递时，新变量与原变量指向相同的对象。下面先来看一下Python中可变和不可变数据类型赋值的例子。</p>
<h3 id="1-不可变数据类型"><a href="#1-不可变数据类型" class="headerlink" title="1. 不可变数据类型"></a>1. 不可变数据类型</h3><p>整型（int）赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">b = a</span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">a = a + <span class="number">1</span></span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">print(<span class="built_in">id</span>(c))</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">140722100085136</span></span><br><span class="line"><span class="number">140722100085136</span></span><br><span class="line"><span class="number">140722100085168</span></span><br><span class="line"><span class="number">140722100085136</span></span><br></pre></td></tr></table></figure>
<p>其中id()函数用于返回对象的内存地址。</p>
<p>可以看到b，c都指向了相同的对象，而<code>a = a + 1</code> 并不是让 a 的值增加 1，而是重新创建并指向了新的值为 2 的对象。最终结果就是a指向了2这个新的对象，b指向1，值不变。</p>
<h3 id="2-可变数据类型"><a href="#2-可变数据类型" class="headerlink" title="2. 可变数据类型"></a>2. 可变数据类型</h3><p>以列表（list）为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">id</span>(l1)) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">l2 = l1</span><br><span class="line">print(<span class="built_in">id</span>(l2))</span><br><span class="line"></span><br><span class="line">l1.append(<span class="number">4</span>)</span><br><span class="line">print(<span class="built_in">id</span>(l1))</span><br><span class="line"></span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1933202772296</span></span><br><span class="line"><span class="number">1933202772296</span></span><br><span class="line"><span class="number">1933202772296</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>l1 和 l2 指向相同的对象，由于列表是可变（mutable）数据类型，所以 <code>l1.append(4)</code>不会创建新的列表，仍然指向相同的对象。 由于l1 和 l2 指向相同的对象，所以列表变化也会导致l2的值变化。</p>
<p>可变对象（列表，字典，集合等）的改变，会影响所有指向该对象的变量。对于不可变对象（字符串、整型、元组等），所有指向该对象的变量的值总是一样的，也不会改变。</p>
<h2 id="Python中的’-’-和-‘is’"><a href="#Python中的’-’-和-‘is’" class="headerlink" title="Python中的’==’ 和 ‘is’"></a>Python中的’==’ 和 ‘is’</h2><p><code>==</code> 和 <code>is</code>是Python 对象比较中常用的两种方式，<code>==</code> 比较对象的值是否相等， <code>is</code> 比较对象的身份标识（ID）是否相等，是否是同一个对象，是否指向同一个内存地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">print(a == b)</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">140722100085136</span></span><br><span class="line"><span class="number">140722100085136</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>a和b的值相等，并指向同一个对象。在实际应用中，通常使用<code>==</code> 来比较两个变量的值是否相等。<code>is</code> 操作符常用来检查一个变量是否为 None：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">&quot;a is None&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">&quot;a is not None&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Python浅拷贝和深度拷贝"><a href="#Python浅拷贝和深度拷贝" class="headerlink" title="Python浅拷贝和深度拷贝"></a>Python浅拷贝和深度拷贝</h1><p>前面介绍了Python的赋值（对象的引用传递），那么Python如何解决原始数据在函数传递后不受影响呢，Python提供了浅度拷贝（shallow copy）和深度拷贝（deep copy）两种方式。</p>
<ul>
<li>浅拷贝(copy)：拷贝父对象，不拷贝对象内部的子对象。</li>
<li>深拷贝(deepcopy)：完全拷贝了父对象及其子对象。</li>
</ul>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><h3 id="1-不可变数据类型-1"><a href="#1-不可变数据类型-1" class="headerlink" title="1. 不可变数据类型"></a>1. 不可变数据类型</h3><p>下面对不可变对象整型变量和元组进行浅拷贝：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">print(a == b)</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">t2 = <span class="built_in">tuple</span>(t1)</span><br><span class="line">print(<span class="built_in">id</span>(t1))</span><br><span class="line">print(<span class="built_in">id</span>(t2))</span><br><span class="line">print(t1 == t2)</span><br><span class="line">print(t1 <span class="keyword">is</span> t2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">50622072</span></span><br><span class="line"><span class="number">50622072</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="number">55145384</span></span><br><span class="line"><span class="number">55145384</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>不可变对象的拷贝和对象的引用传递一样，a、b指向相同的对象，修改其中一个变量的值不会影响另外的变量，会开辟新的空间。</p>
<h3 id="2-可变数据类型-1"><a href="#2-可变数据类型-1" class="headerlink" title="2. 可变数据类型"></a>2. 可变数据类型</h3><p>对可变对象list进行浅拷贝：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l2 = <span class="built_in">list</span>(l1)</span><br><span class="line">l3 = copy.copy(l1)</span><br><span class="line">l4 = l1[:]</span><br><span class="line">print(<span class="built_in">id</span>(l1))</span><br><span class="line">print(<span class="built_in">id</span>(l2))</span><br><span class="line">print(l1 == l2)</span><br><span class="line">print(l1 <span class="keyword">is</span> l2)</span><br><span class="line">print(<span class="built_in">id</span>(l3))</span><br><span class="line">print(<span class="built_in">id</span>(l4))</span><br><span class="line"></span><br><span class="line">l1.append(<span class="number">4</span>)</span><br><span class="line">print(<span class="built_in">id</span>(l1))</span><br><span class="line">print(l1 == l2)</span><br><span class="line">print(l1 <span class="keyword">is</span> l2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">48520904</span></span><br><span class="line"><span class="number">48523784</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="number">48523848</span></span><br><span class="line"><span class="number">48521032</span></span><br><span class="line"><span class="number">48520904</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>可以看到，对可变对象的浅拷贝会重新分配一块内存，创建一个新的对象，里面的元素是原对象中子对象的引用。改变l1的值不会影响l2，l3，l4的值，它们指向不同的对象。</p>
<p>上面的例子比较简单，下面举一个相对复杂的数据结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import copy</span><br><span class="line">l1 &#x3D; [[1, 2], (4, 5)]</span><br><span class="line">l2 &#x3D; copy.copy(l1)</span><br><span class="line">print(id(l1))</span><br><span class="line">print(id(l2))</span><br><span class="line">print(id(l1[0]))</span><br><span class="line">print(id(l2[0]))</span><br><span class="line"></span><br><span class="line">l1.append(6)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line">l1[0].append(3)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1918057951816</span></span><br><span class="line"><span class="number">1918057949448</span></span><br><span class="line"><span class="number">2680328991496</span></span><br><span class="line"><span class="number">2680328991496</span></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">4</span>, <span class="number">5</span>), <span class="number">6</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">4</span>, <span class="number">5</span>)]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (<span class="number">4</span>, <span class="number">5</span>), <span class="number">6</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (<span class="number">4</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure>
<p>l2 是 l1 的浅拷贝，它们指向不同的对象，因为浅拷贝里的元素是对原对象元素的引用，因此 l2 中的元素和 l1 指向同一个列表和元组对象（l1[0]和l2[0]指向的是相同的地址）。l1.append(6)不会对 l2 产生任何影响，因为 l2 和 l1 作为整体是两个不同的对象，不共享内存地址。</p>
<p>l1[0].append(3)对 l1 中的第一个列表新增元素 3，因为 l2 是 l1 的浅拷贝，l2 中的第一个元素和 l1 中的第一个元素，共同指向同一个列表，因此 l2 中的第一个列表也会相对应的新增元素 3。</p>
<p>这里提一个小问题：如果对l1中的元组新增元素（<code>l1[1] += (7, 8)</code>），会影响l2吗？</p>
<p>到这里我们知道使用浅拷贝可能带来的副作用，要避免它就得使用深度拷贝。</p>
<h2 id="深度拷贝"><a href="#深度拷贝" class="headerlink" title="深度拷贝"></a>深度拷贝</h2><p>深度拷贝会完整地拷贝一个对象，会重新分配一块内存，创建一个新的对象，并且将原对象中的元素以递归的方式，通过创建新的子对象拷贝到新对象中。因此，新对象和原对象没有任何关联，也就是完全拷贝了父对象及其子对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">l1 = [[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">4</span>, <span class="number">5</span>)]</span><br><span class="line">l2 = copy.deepcopy(l1)</span><br><span class="line">print(<span class="built_in">id</span>(l1))</span><br><span class="line">print(<span class="built_in">id</span>(l2))</span><br><span class="line">l1.append(<span class="number">6</span>)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br><span class="line">l1[<span class="number">0</span>].append(<span class="number">3</span>)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3026088342280</span></span><br><span class="line"><span class="number">3026088342472</span></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">4</span>, <span class="number">5</span>), <span class="number">6</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">4</span>, <span class="number">5</span>)]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (<span class="number">4</span>, <span class="number">5</span>), <span class="number">6</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], (<span class="number">4</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure>
<p>可以看到，l1 变化不影响l2 ，l1 和 l2 完全独立，没有任何联系。</p>
<p>在进行深度拷贝时，深度拷贝 deepcopy 中会维护一个字典，记录已经拷贝的对象与其 ID。如果字典里已经存储了将要拷贝的对象，则会从字典直接返回。</p>
<h1 id="Python垃圾回收"><a href="#Python垃圾回收" class="headerlink" title="Python垃圾回收"></a>Python垃圾回收</h1><p>Python垃圾回收包括引用计数、标记清除和分代回收</p>
<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>引用计数是一种垃圾收集机制，当一个python对象被引用时，引用计数加 1，当一个对象的引用为0时，该对象会被当做垃圾回收。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(getrefcount(l1)) <span class="comment"># 查看引用计数</span></span><br><span class="line">l2 = l1</span><br><span class="line">print(getrefcount(l2))</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>在使用 getrefcount()的时候，变量作为参数传进去，会多一次引用。</p>
<p>del语句会删除对象的一个引用。请看下面的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObjectA</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;hello!!!&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;bye!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = TestObjectA()</span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line">print(getrefcount(c))</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line">print(getrefcount(c))</span><br><span class="line"><span class="keyword">del</span> b</span><br><span class="line">print(getrefcount(c))</span><br><span class="line"><span class="keyword">del</span> c</span><br><span class="line">print(<span class="string">&quot;666&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello!!!</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">bye!!!</span><br><span class="line"><span class="number">666</span></span><br></pre></td></tr></table></figure>
<p>方法<code>__del__</code> 的作用是当对象被销毁时调用。其中<code>del a</code>删除了变量a，但是对象TestObjectA仍然存在，它还被b和c引用，所以不会被回收，引用计数为0时会被回收。上面的例子中，将a，b，c都删除后引用的对象被回收（打印“666”之前）。</p>
<p>另外<strong>重新赋值</strong>也会删除对象的一个引用。</p>
<h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>如果出现了循环引用，引用计数方法就无法回收，导致内存泄漏。先来看下面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObjectA</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;A: hello!!!&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;A: bye!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObjectB</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;B: hello!!!&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;B: bye!!!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">a = TestObjectA()</span><br><span class="line">b = TestObjectB()</span><br><span class="line">a[<span class="string">&#x27;1&#x27;</span>] = b</span><br><span class="line">b[<span class="string">&#x27;1&#x27;</span>] = a</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="keyword">del</span> b</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;666&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A: hello!!!</span><br><span class="line">B: hello!!!</span><br><span class="line"><span class="number">666</span></span><br><span class="line">A: bye!!!</span><br><span class="line">B: bye!!!</span><br></pre></td></tr></table></figure>
<p>上面的代码存在循环引用，删除a和b之后，它们的引用计数还是1，仍然大于0，不会被回收（打印“666”之后）。</p>
<p>标记清除可解决循环引用问题，从根对象（寄存器和程序栈上的引用）出发，遍历对象，将遍历到的对象打上标记（垃圾检测），然后在内存中清除没有标记的对象（垃圾回收）。上面的例子中，a和b相互引用，如果与其他对象没有引用关系就不会遍历到它，也就不会被标记，所以会被清除。</p>
<h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>如果频繁进行标记清除会影响Python性能，有很多对象，清理了很多次他依然存在，可以认为，这样的对象不需要经常回收，也就是说，对象存在时间越长，越可能不是垃圾。</p>
<p>将回收对象进行分代（一共三代），每代回收的时间间隔不同，其中新创建的对象为0代，如果一个对象能在第0代的垃圾回收过程中存活下来，那么它就被放入到1代中，如果1代里的对象在第1代的垃圾回收过程中存活下来，则会进入到2代。</p>
<h2 id="gc模块"><a href="#gc模块" class="headerlink" title="gc模块"></a>gc模块</h2><p>以下三种情况会启动垃圾回收：</p>
<ol>
<li>调用<code>gc.collect()</code>：强制对所有代执行一次回收</li>
<li>当gc模块的计数器达到阀值的时候。</li>
<li>程序退出的时候</li>
</ol>
<p>gc 模块函数：</p>
<ul>
<li>gc.enable() ：启用自动垃圾回收</li>
<li>gc.disable()：停用自动垃圾回收</li>
<li>gc.isenabled()：如果启用了自动回收则返回 True。</li>
<li>gc.collect(generation=2)：不设置参数会对所有代执行一次回收</li>
<li>gc.set_threshold(threshold0[, threshold1[, threshold2]])：设置垃圾回收阈值</li>
<li>gc.get_count()：当前回收计数</li>
</ul>
<p><strong>垃圾回收启动的默认阈值</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import gc</span><br><span class="line">print(gc.get_threshold()) </span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">700</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<p>700是垃圾回收启动的阈值，对象分配数量减去释放数量的值大于 700 时，就会开始进行垃圾回收，每10次0代垃圾回收，会导致一次1代回收；而每10次1代的回收，才会有1次的2代回收。可以使用set_threshold()方法重新设置。</p>
<h1 id="Python内存管理机制：Pymalloc"><a href="#Python内存管理机制：Pymalloc" class="headerlink" title="Python内存管理机制：Pymalloc"></a>Python内存管理机制：Pymalloc</h1><h2 id="Pymalloc"><a href="#Pymalloc" class="headerlink" title="Pymalloc"></a>Pymalloc</h2><p>Python实现了一个<strong>内存池(memory pool)机制</strong>，使用Pymalloc对小块内存（小于等于<strong>256kb</strong>）进行申请和释放管理。</p>
<p>当 Python 频繁地创建和销毁一些小的对象时，底层会多次重复调用 malloc 和 free 等函数进行内存分配。这不仅会引入较大的系统开销，而且还可能产生大量的内存碎片。</p>
<p>内存池的概念就是预先在内存中申请一定数量的内存空间，当有有满足条件的内存请求时，就先从内存池中分配内存给这个需求，如果预先申请的内存已经耗尽，Pymalloc allocator 会再申请新的内存（不能超过预先设置的内存池最大容量）。垃圾回收时，回收的内存归还给内存池。这样做最显著的优势就是能够减少内存碎片，提升效率。</p>
<p>如果应用的内存需求大于 pymalloc 设置的阈值，那么解释器再将这个请求交给底层的 C 函数（malloc/realloc/free等）来实现。</p>
<h2 id="python内存池金字塔"><a href="#python内存池金字塔" class="headerlink" title="python内存池金字塔"></a>python内存池金字塔</h2><ol>
<li>第-1层和-2层：由操作系统操作。</li>
<li>第0层：大内存，若请求分配的内存大于256kb，使用malloc、free 等函数分配、释放内存。</li>
<li>第1层和第2层：由python的接口函数Pymem_Malloc实现，若请求的内存在小于等于256kb时使用该层进行分配。</li>
<li>第3层(最上层）：用户对python对象的直接操作</li>
</ol>
<p><img src="python-memory.png" width="60%" height="60%" /></p>
<center><font size="2">图片来源：https://www.c-sharpcorner.com/article/memory-management-in-python/</font></center>


<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了Python的参数传递、浅拷贝、深拷贝，垃圾回收和内存池机制。</p>
<ul>
<li><p>Python 中参数的传递既不是值传递，也不是引用传递，而是赋值传递，或者是叫对象的引用传递。需要注意可变对象和不可变对象的区别。比较操作符<code>==</code>比较对象间的值是否相等，而`is比较对象是否指向同一个内存地址。</p>
</li>
<li><p>浅拷贝中的元素是对原对象中子对象的引用，如果父对象中的元素是可变的，改变它的值也会影响拷贝后的对象。深拷贝则会递归地拷贝原对象中的每一个子对象，是对原对象的完全拷贝。</p>
</li>
<li><p>Python垃圾回收包括引用计数、标记清除和分代回收三种，可以使用gc模块来进行垃圾回收的配置。为了减少内存碎片，提升效率，Python使用了Pymalloc来管理小于等于256kb的小内存。</p>
</li>
</ul>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>常见搜索算法（一）：深度优先和广度优先搜索</title>
    <url>/posts/algorithm-notes-for-dfs-bfs/</url>
    <content><![CDATA[<p>搜索算法是非常常用的算法，用于检索存储在某些数据结构中的信息。最简单直接的就是暴力搜索，也就是线性搜索，但它的时间复杂度较高，在实际工程应用中很少使用，需要对它进行优化。</p>
<p>比如二分查找，贪心算法等搜索算法，在<a href="">算法笔记：树、堆和图</a>中，提到了对图和二叉树的搜索算法：深度优先搜索（DFS）和广度优先搜索（BFS），如果知道起点和终点状态的情况下，还可以使用双向BFS。DFS和BFS根据特定的顺序进行依次搜索，效率也不高，启发式搜索（heuristic search）也就是A*算法引入估价函数进一步提升了搜索效率，这些算法应用于各种场景中，本文介绍在树和图中常用的深度优先和广度优先搜索算法。</p>
<a id="more"></a>
<p>遍历搜索算法用于在树、图中寻找特定的节点，深度优先搜索(Depth-First-Search, DFS)和广度优先搜索 (Breadth-First-Search, BFS) 是比较常用的两种遍历搜索算法。下面介绍这两种方法在二叉树和图中的使用。</p>
<h1 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索-DFS"></a>深度优先搜索-DFS</h1><p>DFS是可用于遍历树或者图的搜索算法，DFS与回溯法类似，一条路径走到底后需要返回上一步，搜索第二条路径。在树的遍历中，首先一直访问到最深的节点，然后回溯到它的父节点，遍历另一条路径，直到遍历完所有节点。图也类似，如果某个节点的邻居节点都已遍历，回溯到上一个节点。</p>
<p>在代码实现中，一般会用到栈（递归过程也会自动产生栈）这个数据结构，通过弹栈来回溯到上一个节点。DFS可以使用递归算法实现，也可以不使用递归，下面介绍在图和树这两种数据结构中DFS算法的使用。</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>递归写法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  图的DFS遍历</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="comment"># 使用字典保存图</span></span><br><span class="line">        self.graph = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span>(<span class="params">self, u, v</span>):</span></span><br><span class="line">        <span class="comment"># 用于给图添加边（连接）</span></span><br><span class="line">        self.graph[u].append(v)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFSTrav</span>(<span class="params">self, v, visited</span>):</span> </span><br><span class="line">        <span class="comment"># 标记已经访问过的节点</span></span><br><span class="line">        visited.append(v)</span><br><span class="line">         </span><br><span class="line">        <span class="comment"># 访问当前节点的相邻节点</span></span><br><span class="line">        <span class="keyword">for</span> neighbour <span class="keyword">in</span> self.graph[v]:</span><br><span class="line">            <span class="keyword">if</span> neighbour <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                self.DFSTrav(neighbour, visited)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span>(<span class="params">self, v</span>):</span> </span><br><span class="line">        <span class="comment"># 初始化保存已访问节点的集合</span></span><br><span class="line">        visited = []</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 递归遍历节点</span></span><br><span class="line">        self.DFSTrav(v, visited)</span><br><span class="line">        print(visited) </span><br></pre></td></tr></table></figure></p>
<p>非递归写法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS2</span>(<span class="params">self, v</span>):</span> </span><br><span class="line">    <span class="comment"># 初始化保存已访问节点的集合</span></span><br><span class="line">    visited = []</span><br><span class="line">    stack = []</span><br><span class="line">    stack.append(v)</span><br><span class="line">    visited.append(v)</span><br><span class="line">    <span class="keyword">while</span> stack:            </span><br><span class="line">        <span class="comment"># 访问当前节点邻居节点的第一个节点，如果没有访问，标记为已访问并入栈           </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.graph[v]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.append(i)                                    </span><br><span class="line">                stack.append(i)</span><br><span class="line">                <span class="keyword">break</span>            </span><br><span class="line">        <span class="comment"># 如果当前节点所有邻居节点都已访问，将当前节点弹出（出栈）</span></span><br><span class="line">        v = stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(self.graph[v]) &lt; <span class="built_in">set</span>(visited):</span><br><span class="line">            stack.pop()</span><br><span class="line">    print(visited) </span><br></pre></td></tr></table></figure><br>对下图进行DFS遍历<br><img src="dfs-graph.png" width="60%" height="60%" />：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">    <span class="comment"># 新建图</span></span><br><span class="line">    graph = Graph()</span><br><span class="line">    graph.addEdge(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    graph.addEdge(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    graph.addEdge(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    graph.addEdge(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    graph.addEdge(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    graph.addEdge(<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    graph.addEdge(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    graph.addEdge(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    graph.addEdge(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    graph.addEdge(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">    graph.addEdge(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">    graph.addEdge(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># DFS遍历图：指定一个起点</span></span><br><span class="line">    graph.DFS(<span class="number">0</span>)</span><br><span class="line">    graph.DFS2(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>对二叉树的DFS遍历与图类似。</p>
<p>DFS递归写法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFSTrav</span>(<span class="params">self, node, visited</span>):</span> </span><br><span class="line">        <span class="comment"># 标记已经访问过的节点</span></span><br><span class="line">        <span class="keyword">if</span> node.val <span class="keyword">in</span> visited:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        visited.append(node.val) </span><br><span class="line">        <span class="comment"># 访问当前节点的相邻节点</span></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            self.DFSTrav(node.left, visited)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            self.DFSTrav(node.right, visited)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        visited = []</span><br><span class="line">        <span class="comment"># dfs</span></span><br><span class="line">        self.DFSTrav(root, visited)</span><br><span class="line">        print(visited)</span><br></pre></td></tr></table></figure></p>
<p>DFS非递归写法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs2</span>(<span class="params">self, node</span>):</span> </span><br><span class="line">        visited = []</span><br><span class="line">        stack = []</span><br><span class="line">        stack.append(node)</span><br><span class="line">        visited.append(node.val)</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                stack.pop()</span><br><span class="line">            node = stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.val <span class="keyword">not</span> <span class="keyword">in</span> visited:                </span><br><span class="line">                stack.append(node.left)</span><br><span class="line">                visited.append(node.left.val)</span><br><span class="line">                node = node.left</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> node.right <span class="keyword">and</span> node.right.val <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">                visited.append(node.right.val)</span><br><span class="line">                node = node.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">        print(visited)</span><br></pre></td></tr></table></figure></p>
<p>执行如下代码，对下面的二叉树进行DFS遍历：<br><img src="tree-order.png" width="60%" height="60%" /><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root = TreeNode(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    root.left = TreeNode(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    root.right = TreeNode(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    root.left.left  = TreeNode(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    root.left.left.right  = TreeNode(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">    root.right.left = TreeNode(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">    root.right.right = TreeNode(<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">    root.right.right.left = TreeNode(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    solu = Solution()</span><br><span class="line">    solu.dfs(root)</span><br><span class="line">    solu.dfs2(root)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<h1 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索-BFS"></a>广度优先搜索-BFS</h1><p>BFS是连通图的一种遍历策略，沿着树(图)的宽度遍历树(图)的节点，最短路径算法可以采用这种策略，在二叉树中体现为一层一层的搜索，也就是层序遍历。</p>
<p>在代码实现中，一般使用队列数据结构，下面介绍在图和树这两种数据结构中BFS算法的使用。</p>
<h2 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h2><p>对前面的图进行BFS遍历，关键代码如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span>(<span class="params">self, v</span>):</span></span><br><span class="line">    <span class="comment"># 新建一个队列</span></span><br><span class="line">    queue = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将访问的节点入队</span></span><br><span class="line">    queue.append(v)</span><br><span class="line">    visited = []</span><br><span class="line">    visited.append(v)</span><br><span class="line">    <span class="keyword">while</span> queue: </span><br><span class="line">        <span class="comment"># 节点出队</span></span><br><span class="line">        v = queue.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 访问当前节点的相邻节点，如果没有访问，标记为已访问并入队</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.graph[v]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                queue.append(i)</span><br><span class="line">                visited.append(i)</span><br><span class="line">    print(visited)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>执行如下代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">    <span class="comment"># 新建图</span></span><br><span class="line">    这里省略，和前面一样</span><br><span class="line">    <span class="comment"># BFS遍历图：指定一个起点</span></span><br><span class="line">    graph.BFS(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="二叉树-1"><a href="#二叉树-1" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树的DFS遍历与图类似：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    visited = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> visited</span><br><span class="line">            </span><br><span class="line">    queue = [root]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        length = <span class="built_in">len</span>(queue)</span><br><span class="line">        level = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 存储当前节点</span></span><br><span class="line">            level.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                queue.append(node.right)</span><br><span class="line">            </span><br><span class="line">        visited.append(level)</span><br><span class="line">    print(visited)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br></pre></td></tr></table></figure><br>对前面的二叉树进行BFS遍历结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="string">&#x27;A&#x27;</span>], [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>], [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]]</span><br></pre></td></tr></table></figure></p>
<h1 id="二叉树的前序、中序、后序遍历"><a href="#二叉树的前序、中序、后序遍历" class="headerlink" title="二叉树的前序、中序、后序遍历"></a>二叉树的前序、中序、后序遍历</h1><p>前序、中序和后序遍历都可以看作是DFS，对下面的二叉树进行遍历：<br><img src="tree-order2.png" width="60%" height="60%" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeTraversal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span>(<span class="params">self,root, traverse_path=[]</span>):</span></span><br><span class="line">        <span class="comment"># 前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> traverse_path</span><br><span class="line">        traverse_path.append(root.val)</span><br><span class="line">        self.preorder(root.left, traverse_path)</span><br><span class="line">        self.preorder(root.right, traverse_path)</span><br><span class="line">        <span class="keyword">return</span> traverse_path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span>(<span class="params">self,root, traverse_path=[]</span>):</span></span><br><span class="line">        <span class="comment"># 中序遍历</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> traverse_path</span><br><span class="line">        self.inorder(root.left, traverse_path)</span><br><span class="line">        traverse_path.append(root.val)</span><br><span class="line">        self.inorder(root.right, traverse_path)</span><br><span class="line">        <span class="keyword">return</span> traverse_path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorder</span>(<span class="params">self,root, traverse_path=[]</span>):</span></span><br><span class="line">        <span class="comment"># 后序遍历</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.postorder(root.left, traverse_path)</span><br><span class="line">        self.postorder(root.right, traverse_path)</span><br><span class="line">        traverse_path.append(root.val)</span><br><span class="line">        <span class="keyword">return</span> traverse_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root = BinaryTree(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    root.left = BinaryTree(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    root.right = BinaryTree(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    root.left.left  = BinaryTree(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    root.left.left.right  = BinaryTree(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">    root.right.left = BinaryTree(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">    root.right.right = BinaryTree(<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">    root.right.right.left = BinaryTree(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    Traversal = BinaryTreeTraversal()</span><br><span class="line">    print(Traversal.preorder(root))</span><br><span class="line">    print(Traversal.inorder(root))</span><br><span class="line">    print(Traversal.postorder(root))</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了在图和树中常用的深度优先搜索和广度优先搜索两种算法的Python实现，深度优先算法介绍了递归和非递归两种写法。需要注意图和树这两种数据结构的差异，对它们的介绍可参考<a href="">算法笔记：树、堆和图</a>，在解决实际问题中，根据具体的条件和要求进行变通。</p>
<p>另外，我也在文章开头提过，这两种遍历算法并不是性能最优，需要根据实际情况进行选择，比如在解决最优路径的问题中，DFS和BFS的效率就比较低，需要使用其它更优算法。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多线程与多进程</title>
    <url>/posts/python-notes-for-multi-process/</url>
    <content><![CDATA[<p>进程(process)和线程(thread)是操作系统的基本概念，是操作系统程序运行的基本单元，本文简要介绍进程和线程的概念以及Python中的多进程和多线程。<br><a id="more"></a></p>
<h1 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h1><h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><ul>
<li>进程是执行中的程序，<strong>是资源分配的最小单位</strong>：操作系统以进程为单位分配存储空间，进程拥有独立地址空间、内存、数据栈等</li>
<li>操作系统管理所有进程的执行，分配资源</li>
<li>可以通过fork或 spawn的方式派生新进程，新进程也有自己独立的内存空间</li>
<li>进程间通信方式（IPC，Inter-Process Communication）共享信息，实现数据共享，包括管道、信号、套接字、共享内存区等。</li>
</ul>
<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><ul>
<li><strong>线程是CPU调度的的最小单位</strong></li>
<li>一个进程可以有多个线程</li>
<li>同进程下执行，并<strong>共享相同的上下文</strong></li>
<li>线程间的信息共享和通信更加容易</li>
<li>多线程并发执行</li>
<li>需要同步原语</li>
</ul>
<h1 id="并发、并行"><a href="#并发、并行" class="headerlink" title="并发、并行"></a>并发、并行</h1><p><img src="Python-process.jpg" width="80%" height="80%" /></p>
<center><font size="2">https://medium.com/@k.wahome/concurrency-is-not-parallelism-a5451d1cde8d</font></center>

<p>并发通常应用于 I/O 操作频繁的场景，并行则更多应用于 CPU heavy 的场景。</p>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>并发(concurrency)，指同一时刻只能有一条指令执行，多个线程的对应的指令被快速轮换地执行，线程/任务之间会互相切换。</p>
<ul>
<li>处理器先执行线程 A 的指令一段时间，再执行线程 B 的指令一段时间，再切回到线程 A，快速轮换地执行。</li>
<li>处理器切换过程中会进行上下文的切换操作，进行多个线程之间切换和执行，这个切换过程非常快，使得在宏观上看起来多个线程在同时运行。</li>
<li>每个线程的执行会占用这个处理器一个时间片段，同一时刻，其实只有一个线程在执行。</li>
</ul>
<h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><p>并行(parallel) 指同一时刻，有多条指令在多个处理器上同时执行</p>
<ul>
<li><p>不论是从宏观上还是微观上，多个线程都是在同一时刻一起执行的。</p>
</li>
<li><p>并行只能在多处理器系统中存在，如果只有一个核就不可能实现并行。并发在单处理器和多处理器系统中都是可以存在的，一个核就可以实现并发。</p>
</li>
</ul>
<p>注意：具体是并发还是并行取决于操作系统的调度。</p>
<h2 id="多线程适用场景"><a href="#多线程适用场景" class="headerlink" title="多线程适用场景"></a>多线程适用场景</h2><p>多线程/多进程是解决并发问题的经典模型之一。</p>
<p>在一个程序进程中，有一些操作是比较耗时或者需要等待的，比如等待数据库的查询结果的返回，等待网页结果的响应。这个线程在等待的过程中，处理器是可以执行其他的操作的，从而从整体上提高执行效率。</p>
<p>比如网络爬虫，在向服务器发起请求之后，有一段时间必须要等待服务器的响应返回，这种任务属于 <strong>IO 密集型任务</strong>。对于这种任务，启用多线程可以在某个线程等待的过程中去处理其他的任务，从而提高整体的爬取效率。</p>
<p>还有一种任务叫作<strong>计算密集型任务</strong>，或者称为<strong>CPU 密集型任务</strong>。任务的运行一直需要处理器的参与。如果使用多线程，一个处理器从一个计算密集型任务切换到另一个计算密集型任务，处理器依然不会停下来，并不会节省总体的时间，如果线程数目过多，进程上下文切换会占用大量的资源，整体效率会变低。</p>
<p>所以，如果任务不全是计算密集型任务，我们可以使用多线程来提高程序整体的执行效率。尤其对于网络爬虫这种 IO 密集型任务来说，使用多线程会大大提高程序整体的爬取效率，多线程只适合IO 密集型任务。</p>
<h1 id="Python-GIL"><a href="#Python-GIL" class="headerlink" title="Python GIL"></a>Python GIL</h1><p>由于 Python 中 GIL 的限制，导致不论是在单核还是多核条件下，在同一时刻只能运行一个线程，导致 Python 多线程无法发挥多核并行的优势。</p>
<p>GIL 全称为 Global Interpreter Lock（全局解释器锁)，是 Python 解释器 CPython 中的一个技术术语，是Python之父为了数据安全而设计的。</p>
<p>CPython 使用引用计数来管理内存，所有 Python 脚本中创建的实例，都会有一个引用计数，来记录有多少个指针指向它。当引用计数只有 0 时，则会自动释放内存。每隔一段时间，Python 解释器就会强制当前线程去释放 GIL，Python 3 以后版本的间隔时间是 15 毫秒。</p>
<p>在 Python 多线程下，每个线程轮流执行：</p>
<ul>
<li>获取 GIL</li>
<li>执行对应线程的代码</li>
<li>释放 GIL</li>
</ul>
<p><img src="python-gil.png" width="80%" height="80%" /></p>
<p>某个线程想要执行，必须先拿到 GIL，并且在一个 Python 进程中，GIL 只有一个，导致即使在多核的条件下，同一时刻也只能执行一个线程。每一个线程执行完一段后，会释放 GIL，以允许别的线程开始利用资源。</p>
<h1 id="Python多线程、多进程实例：CPU-密集型任务"><a href="#Python多线程、多进程实例：CPU-密集型任务" class="headerlink" title="Python多线程、多进程实例：CPU 密集型任务"></a>Python多线程、多进程实例：CPU 密集型任务</h1><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>执行一个CPU 密集型任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu_bound_task</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;当前进程: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="string">&#x27;主进程: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        cpu_bound_task(<span class="number">100000000</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">主进程: <span class="number">10104</span></span><br><span class="line">当前进程: <span class="number">10104</span></span><br><span class="line">当前进程: <span class="number">10104</span></span><br><span class="line">耗时<span class="number">10.829032897949219</span>秒</span><br></pre></td></tr></table></figure></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu_bound_task</span>(<span class="params">n,i</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;子线程 <span class="subst">&#123;threading.current_thread().name&#125;</span>:<span class="subst">&#123;os.getpid()&#125;</span> - 任务<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">f&#x27;主线程: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=cpu_bound_task, args=(<span class="number">100000000</span>,i))</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>start()</strong>：启动线程</li>
<li><strong>join()</strong>：等待子线程结束后主程序才退出，便于计算所有进程执行时间。</li>
</ul>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">主线程: <span class="number">1196</span></span><br><span class="line">子线程 Thread-<span class="number">1</span>:<span class="number">1196</span> - 任务<span class="number">1</span></span><br><span class="line">子线程 Thread-<span class="number">2</span>:<span class="number">1196</span> - 任务<span class="number">2</span></span><br><span class="line">耗时<span class="number">10.808091640472412</span>秒</span><br></pre></td></tr></table></figure></p>
<p>可以发现多线程对CPU 密集型任务性能没有提升效果。</p>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu_bound_task</span>(<span class="params">n,i</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;子进程: <span class="subst">&#123;os.getpid()&#125;</span> - 任务<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&#x27;父进程: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    p1 = Process(target=cpu_bound_task, args=(<span class="number">100000000</span>,<span class="number">1</span>))</span><br><span class="line">    p2 = Process(target=cpu_bound_task, args=(<span class="number">100000000</span>,<span class="number">2</span>))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">父进程: <span class="number">22636</span></span><br><span class="line">子进程: <span class="number">18072</span> - 任务<span class="number">1</span></span><br><span class="line">子进程: <span class="number">9580</span> - 任务<span class="number">2</span></span><br><span class="line">耗时<span class="number">6.264241933822632</span>秒</span><br></pre></td></tr></table></figure><br>也可以使用Pool类创建多进程<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, cpu_count</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu_bound_task</span>(<span class="params">n,i</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;子进程: <span class="subst">&#123;os.getpid()&#125;</span> - 任务<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&quot;CPU内核数:<span class="subst">&#123;cpu_count()&#125;</span>&quot;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;父进程: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        p.apply_async(cpu_bound_task, args=(<span class="number">100000000</span>,i))</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CPU内核数:<span class="number">8</span></span><br><span class="line">父进程: <span class="number">18616</span></span><br><span class="line">子进程: <span class="number">21452</span> - 任务<span class="number">0</span></span><br><span class="line">子进程: <span class="number">16712</span> - 任务<span class="number">1</span></span><br><span class="line">耗时<span class="number">5.928101301193237</span>秒</span><br></pre></td></tr></table></figure></p>
<h1 id="Python多线程、多进程实例：IO密集型任务"><a href="#Python多线程、多进程实例：IO密集型任务" class="headerlink" title="Python多线程、多进程实例：IO密集型任务"></a>Python多线程、多进程实例：IO密集型任务</h1><h2 id="单线程-1"><a href="#单线程-1" class="headerlink" title="单线程"></a>单线程</h2><p>IO 密集型任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">io_bound_task</span>(<span class="params">self, n, i</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;子进程: <span class="subst">&#123;os.getpid()&#125;</span> - 任务<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;IO Task<span class="subst">&#123;i&#125;</span> start&#x27;</span>)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    print(<span class="string">f&#x27;IO Task<span class="subst">&#123;i&#125;</span> end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;主进程: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        self.io_bound_task(<span class="number">4</span>,i)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">主进程: <span class="number">2780</span></span><br><span class="line">子进程: <span class="number">2780</span> - 任务<span class="number">0</span></span><br><span class="line">IO Task0 start</span><br><span class="line">IO Task0 end</span><br><span class="line">子进程: <span class="number">2780</span> - 任务<span class="number">1</span></span><br><span class="line">IO Task1 start</span><br><span class="line">IO Task1 end</span><br><span class="line">耗时<span class="number">8.04494023323059</span>秒</span><br></pre></td></tr></table></figure>
<h2 id="多线程-1"><a href="#多线程-1" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">print(<span class="string">f&quot;CPU内核数:<span class="subst">&#123;cpu_count()&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&#x27;父进程: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">start = time.time()</span><br><span class="line">p = Pool(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    p.apply_async(io_bound_task, args=(<span class="number">4</span>, i))</span><br><span class="line">p.close()</span><br><span class="line">p.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CPU内核数:<span class="number">8</span></span><br><span class="line">父进程: <span class="number">1396</span></span><br><span class="line">子进程: <span class="number">2712</span> - 任务<span class="number">0</span></span><br><span class="line">IO Task0 start</span><br><span class="line">子进程: <span class="number">10492</span> - 任务<span class="number">1</span></span><br><span class="line">IO Task1 start</span><br><span class="line">IO Task0 endIO Task1 end</span><br><span class="line"></span><br><span class="line">耗时<span class="number">4.201171398162842</span>秒</span><br></pre></td></tr></table></figure>
<p>可以看出对于IO密集型任务，Python多线程具有显著提升。</p>
<h2 id="多进程-1"><a href="#多进程-1" class="headerlink" title="多进程"></a>多进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">f&#x27;父进程: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">start = time.time()</span><br><span class="line">p1 = Process(target=io_bound_task, args=(<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">p2 = Process(target=io_bound_task, args=(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p1.join()</span><br><span class="line">p2.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&quot;耗时&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>((end - start)))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">父进程: <span class="number">12328</span></span><br><span class="line">子进程: <span class="number">12452</span> - 任务<span class="number">2</span></span><br><span class="line">IO Task2 start</span><br><span class="line">子进程: <span class="number">16896</span> - 任务<span class="number">1</span></span><br><span class="line">IO Task1 start</span><br><span class="line">IO Task1 endIO Task2 end</span><br><span class="line"></span><br><span class="line">耗时<span class="number">4.1241302490234375</span>秒</span><br></pre></td></tr></table></figure>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>IO型任务还可以使用协程，协程比线程更加轻量级，一个线程可以拥有多个协程，协程在用户态执行，完全由程序控制。一般来说，线程数量越多，协程性能的优势越明显。这里就不介绍Python协程了，下面Python代码是协程的其中一种实现方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">io_bound_task</span>(<span class="params">self,n,i</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;子进程: <span class="subst">&#123;os.getpid()&#125;</span> - 任务<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;IO Task<span class="subst">&#123;i&#125;</span> start&#x27;</span>)</span><br><span class="line">    <span class="comment"># time.sleep(n)</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(n)</span><br><span class="line">    print(<span class="string">f&#x27;IO Task<span class="subst">&#123;i&#125;</span> end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:        </span><br><span class="line">    start = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [io_bound_task(<span class="number">4</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f&quot;耗时<span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">子进程: <span class="number">5436</span> - 任务<span class="number">1</span></span><br><span class="line">IO Task1 start</span><br><span class="line">子进程: <span class="number">5436</span> - 任务<span class="number">0</span></span><br><span class="line">IO Task0 start</span><br><span class="line">IO Task1 end</span><br><span class="line">IO Task0 end</span><br><span class="line">耗时<span class="number">4.008626461029053</span>秒</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Python 由于GIL锁的存在，无法利用多进程的优势，要真正利用多核，可以重写一个不带GIL的解释器， 比如JPython（Java 实现的 Python 解释器）。</p>
<p>某些Python 库使用C语言实现，例如 NumPy 库不受 GIL 的影响。在实际工作中，如果对性能要求很高，可以使用C++ 实现，然后再提供 Python 的调用接口。另外Java语言也没有GIL限制。</p>
<p>对于多线程任务，如果线程数量很多，建议使用Python协程，执行效率比多线程高。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>多线程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库进阶知识点</title>
    <url>/posts/database-for-mysql-advance/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ce707e4d3daa4a25b7ca6f9db7f40b10ac874a8c1da880b47a539d3fe203a49b">b63abfd0cc043585c7f59d942442ea6dbad3a4000ac292d5753d774d4588170e7b3e361f7320fe1680f7e350e7abdf0afdabb4adc3317aca55cc3bb3bafa12a135e8881fb8ea9678c7fd6c60bc556b3a3b2a594831ab61475343907f3f7b2edbcb74aa2ea77db3764c95720a1de008e4cb746cbec061531f6030979acae2f27fcc13d7c22185f9349ca1cdecdb456179eea323c0034807e354e7269ff3b59e8b7da57453f0b8fa870e0338247947450b750df796869a51390c849fcae0237724602e0cba51351cddc08f75c18df86eee4c5ec223b6a5da27e6673caea6d9ce8f2a0423913136c91ce69a8007feb0b9fe1f511526f722e85edddcc3426e6bbae19efa1e700a6b7e3ebe4e89299fc07b2f8c961cc623972a879d6a60645144c4b747a1b79760a784799e8a727818981b3d4e40c58823fbab4c1bab16dc69c67b3a6bb7dfbfe2c1880b64ac065ba633ee12a6b86e1063de40b1862f8ed5be312fed134a755c21e08a1b49b8d49aa80392cbab9a5a9470319c5085ea31120669b391227ba1f54bbe389410c73b745802467f24a953c6dbaae8e62fd7102828ae1158669f1a566ecad87670a6bf35e5d346c290ea575f02cf955f289cf1a5a87e2570de42b0822a077eeca008343e6f930d1879e699ca447ff5d692567c57d96965cca9a1ea977776d9341a12990a8f971cf249d1482b6cdccfc61962780f046abaeef5dd3cf0bbe5d19d26cfbd33e73d9f6b26cc6dedc94ca124d2f22232d1cf52880b9c69fe7580d60e8510dba2b5425236e54016047efa3ac10e1353627e9cb42075ad41b0fdaa46f28deafbf5ddafc175662959a3263d40300dcbf5740c409ae3cfff95864af42219ea0034f3a2178c5daaadd3368494c9ec17ded7f93f9358260957b93d41ba46bfc3cff65cb9f64d24d8559d80bf7888a940fa1d93eb56174ebe6e551b7478e5e029bce8b126a51c26d12df3b1ee519c369b2a2bcf6e9d67e60c39420f78e16d54727e4e43b7cf39de966678bd06f9b86f4fbea9976948034af22e79504deba837f00ba3cee442f9690709cd5c45358d212de672f5d223fd92375698a699c57468c9c25d3d911a488da6af63a8770c0a2f64e7733cf46ca9480509f3576a60a29137dac4f68bbf6181f323dc61ccb92fa0d20d56ff2ec4ceee6cb5ffa6d754f13c8e126ebc893bc1f1866eaaf80f76be6e62db599c1d725159f5c5e7215bb5d00afab6305f2d2a36b30fb0dcee1a174695b30af2e04888092bbe42699cb3d64bc9f9131258a07b3f5aac4a820c0be66ef351ab0a80eca8df91117fe6628072d88d6932eddfe8e46a6c8e3e018a30d5181455c20ba0138f6777defddfeb6a7f5c120370d4cfde7a5ce4b863318762e43651f7f2c7a681c8b4923707ee0d11019adf81a4c73282c6ad3ce7f9297dac6eb75775fa312fc1b10281ac0dd224ef9ad84b255efc4ae92406958650d3d2bae1c8deaedf8e35d788822c11fcdefe8d3bd2ec434ceec77fbb7fb3e73b97449f0b967d7eff3f9af56ed7af8118c3d8c40fd1b5cda75fbe78dbb61049ca177782c884a85238e3d8fafd8293c82c9b2dcc011dc25408cdb89ba7f730d684b2fb5ac9401b9401145e227aca3a075241fb9bf6552d0b24f3c1a790236051601b823307ac0f81ba98d2dbff87672453561a03851e9d4da0e70bf6932a35dae3f92e50dc58eaef6f521843452821596faffe15bab6f866227235ccbcfe38a3c4478c936f32f88acca02658c7ad26f0de3f7a3c272519fbc94ab2c97e72d8c513396f1c71a4741b07f9a5315758607b50845a546a237e0cea701956053b511c3c979d8f42ad42e7c60eea95e8befa84baf411582dfae9876f48403383ea42dc3dc5a7e7b354b3341e8f0381594ff505601763a3c85b5046680c504259fb3b283a3451e65632d192d019e1c4f2212ee74750037675be6a2c2927d16ce2006f1836c1aaef3c6cbc11eb608e295256f9a4e25fbd6cb7a014595fa1ae56c3e04ad8b6f5d9732b80972bb0bb00d350a5c95d2d2561dbe651c2eef782ac8463d5dd7bc1613855b78d0479285492a7c559d37b280d69f18b62222940f8f0261c704378e8ebb793a83b67f8eeae3fd6376deeec13c5880f04f1a332ac81bb2438a12167254c06f03f8d7f6bc54ce4c65e20bc55211707892bda5d4796a18a158b2779623d6d1d04770d47e8e00a4b3d0896c2a84dfea66fbd00f7cdfff7e3552a4e0de59603fe4bd1d1a243fd76ddfe0eaa570486c5ca69f248105c50fe935161183fd3ce5d5c699b7c43d0edbd5de9dbfbc7c03b666316e73c57b9c38ad28d5b053408a1ec919325a0a2b49d0e7addb48f4e08cbe08732dc260f36cd07b1834725e41e115dfc40dc16288fdb77a6a6611023da5cabde3a36b9d3c2ff1206271759e5c6c81c53634660174213ab6bc67abb19f224e6ad472a5f733079b4f4020ed5918bca468dec01f44f02ed373a55907fcfec89913c39aa0ec4edc5893926826656a312b12950e18925871720eef5a4c5f1a458cab4fd0ff5390c0e449f355ee114debae9f4a2a7ab7c6026c9afea7e4282bfb77edcb489ad8aa6f46578751bff9724025b8d828f2f9f21cdd4a41dc675275054158cfaa34223d80923ecc99cdccccdd63e8c3bd8bcca05b12031e890d6172c86c1d1260ac44d4bfc2e7acf1a18568b61050845e3b0029dcc4695d14894c5d4f002d813ef90b88a8a92e145a87136781fdd3f64ac019c3f7464f170c604366758730e7f4da04c167752ca826aba2fab2c6634f4f43e816fdc540e2cc087d27988f7bd6eb8967b33be1958e19bd3c477d4723e72a1ff36142c51a049f4a215e91f5cd23907009f35c2fc068e88e06f89ed847b970accb86d4737dd11d31e81ff2006f531c4e4d63205ba979a6e2f5387cd88318d33a2ae70fb6d282ad2231243bcedd4d4f749270b4c234fddade1352b8576a3f3c0af3507178dada91d2c537ba6bebd967b43429dfb5f4bad393208e277760d3b4a732cb3bd465d44b3834939a0847170eb3631d88c1dbe329e20507a0febfc4ff9c0c30e7de51ac14ac5a675be8c206332473db91368bbb8608eeb2853fdbd20acbf2ef7faf3181fcf762823713b287ee8966eb7f04d0cb4d817e1552e2f3533f6b79ad206b3b6701c424b02b23b4a1e9228dbfd960d9a4b363aed7791b04a835d69d5c1d0924f0238b666a161e0ed2e8655fbe062cff0221d314fe003aa077d0ba28625d2478d0d82ff607518f8f93bf43913cecb80c83907a13dc1c1c59928d00ce8c142026d877b6f4e3bf09d2a1c5c7ad1752f1dc57faeab958635e1fa8d322e348a96e7d85c68072eeda63bc7269eba43db85ebcfcf4f76ce1ed6005684cc18b1acf4405fd9a29250fa657952874cd18874fb278cbfb5d2b4ce1951afcc78eb0b4139475c7dfcde1b986233c76e67470a09667245721d2e1941b18a77edea12bf060e2b1d3d816a8c30e42ddc129f4679391c54eab56a3dd17288442fbae61241aa7fca0c5184703ea57a189e61d0f0a4fb4f5f7ef1fafcfedc90a008c476b9895688d4741071de8284e6389359de8834dd316469e675483d235ca70a80c433d7dbd336b8b8c3af4d1613d41345a002cf07de926a9cf45487e8f9f545bac1e21fb28669109e725209542ac05a4fdf4ebf21f97c5c819d7633823e658bf0e57d176a7918c0477d030fde02625cca9a2ac614dfb270d6a1680ada1a8dafdc4f7d57c3445ef9b1c32900e6a6aa991ec7c94f3a224dbd02cea95df2e45e7962779bd2a2c596758ea9fd7b5dbbc8a7a23cefc9bfc32b901d4716ba63f4d6f5e4726930eca8461f5d82a03c275e0222d55513393d93f51ae207617ab5b1993efe21dd68656533d1db93d9b8833ec648e77ac581efd9f0dec40893cf25e2f3d5fb580bb6fd4c546ff588281607bc625aa3a0885e4938f9430ccd782a2873875ac8938ca38f01102e140639a9b3ab269ebb311eed614f72f9853cd952ccab3dade036d337e69238948d9cbefd54e08b5c6437d3a739d16eef9f483f8e5f5948fa51ef6c79f7aa634fcdf6c07cfe1b6492eeb553866d6de44197cc638ddcd687996a39d21cd5b02e84218f8906f6aaf9d746b349e85c9e7044e005c34454e12598708dddf1d63d7ba9c8dc119d1622a0995443a6b3f23de4b92944e041a53cd7bf1d3ce706490013e6e9a049178862740d42ba38baff16911f1713077a2fb2048229529741190890843bc7fca39a41c40de1d4e234693286a557c50dedad74d7ff5a05f9f9250e8a7ba29f85215f61931fbd94e4c4d676dff20773b967d84dc07b6a869e7457f831b1964c7e57db6d261166463fc5297a18e2c78057d141a2e439abc27c8bc9c16e59416fefea5e139ec450cd2217db05cb4f09a625a5f4a7850396cafbbeec5e35a413142d0302ce05165a176ef06fab39dd46b838f1bca1378dffd36d02d119f867f72eb20a4a1c9815479cbc478aa4d275f37e055220a636d59f866df2380bcf64a0517f634f0425fb1c31f10fbb0ccea3b31f3b92db06f110ddee1446b7881b1c87eb8970605fe10e649abbddc2048bfd01f4354f95e1f43aded4414770a11164796b4fe509a492c98edd5b81f5538407018c7d0a5e8b7be5b1abf5ad89bd5a8c6f3393bc7a8e39b4a0862c57449653b10a8e9fabc00930505831fc685db5172dc76308f89dffef9452378955adf2fd138b8378533067a8e60b91a27471344c2858c10d5b5ff71898e828a11009064d642517d37300d5cfae781b640f6b9d6c5288fcaf51ccbdaaa5386ef54c4a7a3645cda433c916e4ddc4a608b68b7f0b89dd255dd4f3efa71bddd84b582d1e04dc203a75df8dcab1f14544c331abe8053db0efdcdefa70206ebad6acd8d9a7177f5c1104dd6af7176ed397758e2d78e48f8698c7028d5741ffa03d1868a9fd4f26c3d419d60dee24da2d53f85e6c8ae2c6d0d319af94503591a1f552ecd9b007f3b45bdaba88990458231760fddd2b5460017069450ff07053099d923deff2ffaf823e48ab440fe0723bc2057b7eb6992097d1467340e70cb7fc95c6d788ff12fbfdbae74720a09fff894a79e42e73d10b760ef122bcd44a0e3cf48927fdfcb564672f76213cdd53e57108f9a5b4eb1206bb6887b4710dad8f025ac0035a4e1f541ef0a1a7bd4c4cf01d36917633e29c229094f467f3aa075100088a4c7f7d35987e3da07d3efec156142155190571240f11e53e03c91ba9afcd64bf922f254136394fc558a3ce0dbaa4cae4dbf351502b1537ac73235d59b74d4d1eb80bc240308bad626db32dc00e190efc9cd83931986b79abd91b727426ef2fbb866d129eb4b4d97823c962299ca1f412c185a9dbada673f24df4da7c9ed58654c6c7dde4b80dd7c0d8c7890077284d748e6962007deb99fd58b4d28102fe10369f80688734265c72cfaa37188a62a7d59e1e4161930da112dadb870ceb2482dc0f961d2510379ed43e4139351e9d962b804acbbbba86b3b620a95b42774ab264b9918ce2c0308b4e1e99e95aa8f29e7804be4cb4bcd9841999c5ecc1a3dc2d913379e6a1376f15684f67c5a18126895f883fe269f0029389ed2e7c4e55a796cc6c1abc5866e262d042de1f6c6669535761422e121a472376589937bf4ce07a0c044a5ec79cd4da90e45ed27eb3f3ccb483f57920757ac84fdfba869859434c9fb8176cc060f31c46b04728600c564236fb824426bdee6bdfdb02db20af50625d626790fa5c60df2902375e16a4f91461b6d902cebd328fbe985382650c51ae3ebf55a2f099d280efe3c81f216c82fa75895a42166fc0a897e3f5f4f6595caf1e1f2ad728b078b8e96da7ee489d099e8e6f5c1473a2cf96f6eb0198102ec71945eca612ba2895902bc61b6a2a206afc2ed1f856294014255815910f9af6b2b251206b8b23b0b00eee2a9509b4f50383ce08c5555687a9f0fe76c90766ee6852223b4f061a1ba32df9e9379a6003e3411adfc251a134e7372021273f67dd34fc9adfaefbeddfd0c92d4e2a98d3faf941ba3ca5a43ed5db53f5b8437ef723ef83a090026edf704deb4f3072d094ad95090104199cac9215ea7cee49ce4c810e0b8187bc443ca470fd2a7284e4abb0f4dd5f1d5caa0642953319309998dbe58c8a1c7ebb474db81f2ee4f74fe361b3978b9548885b1c87c5505b571620574ea63aad36d2edcfed10f4ef3702d17584902cbd71bc094d4ac113af3f51dfe30d4e960a648bad7fcfb44a58525dcdc85e1163a145f602fc53fa85073d0962295ae5b1fdecf8b0b1aedbf4842f1d0081b6532e8cf8e8a3f6a2ba452e2b9acbcbffbe2f5e4e2f227c1c72c4668cfbb86a6e385bc4eb2c7e9ae0b235e010f58dbbe8727d703e13a0d1c03adef81780714a0416c73e02441041cd5aa1458cb1b09509f1874195ded6c6ac0b58b2e89dd6cdda5b351bf30fbf942a76e5774911ef9c5d2d698f9683dc61a6b86e3bb0f30aec5e249dd2b3960223cc33363eeb76b63e8e1fd12f695d9a7bf01ee083d68bb990ff64b261ab27173d05933f7dad4c7007ceccf31e317a8a5fb6058ce04430ad0091149ee43e057704b19fbf7b4b014e2c75d9e90a12163abeaf31a83493939447bcd34a894b2680bbc5f043b7cda539dcf480fcef3b9a7f80ddbe74186d795efa87f40ae61e746de9167552ae6b991840e606d3b8635a8d86afe9d75972ec4678160347337f67c31d0c69ab5cb6c91e497ddcc17e04e59b11fa4af744d6e8fd606af5ac310611c41182285f883143196a2a2f363b4f8ab2bf9120f74349f6e6b7cdbaac4dc603db7ef6f4b13512e94311ea7d598491c719512516d1ad644eaa315a4f07a737a9bf1ad395285009e43070caa945507b34dc022242403b62ce512307abfec4861ee84b6b8a5767b590a1e618bbbcc40ce625ab759a0d3c1ba6687114abb476ad803b739603b243658ce2ac74615597eef996220a1c2916d8e1eff8ee9a07f67fc10b2e967e1a70cc89005966f676e63e4b64619ea5b6ac6eddc7c2cdb5bc4012560290f3959647b668efbd48bd98adfa5ace7cc3efa4d73ee4db0a633e7ba071ef2624d789f9e3cf2b8b58af6708ecda54ef973b378bc0df0cf6fab5236d89c8287809556ad7453139e4efda8cd8326b818abddab4739a8756b4d7f294a8395d2643a2702e5a62b9af9604333d7c560cfa6c5366648ac6978f35ed0e580d996b3d02036059043f398c7fa9b452ca871b2719c3a28bc0cdc7171ce4bc501391ca3e28efb12149b6a0747a839963e18688aa2659228b3e43bd057a78fa099bf6c5b763c20d5ac718785091fd5b5f3093fc94f917fea2e374c5361142ca01c5c82fdad7c3c781c1f0529045aea48d36385c019e8138473fab5026cfcb7943d34a4d5a18fa8c491987f7f84b3366228b105de768afb5692b2b7d342ee8ac29d581e3200c81de382450f2b6d1ea8d5f58bc22110c861c4b405a2a6249f8f9e3c60c6ba234e69127fce0edd07977e4b4217c00728421fb21974158602c844ed971b3a5b29d8e710ec0ed4bff6b49212d1d33c9ae32e8599af4347c7c061635fa7cdaae1f4f5dd7d5626448d0106ed6eaf41183a9215cde2dd168d216db248c41366b9cc0079086c74119a1992d9a53a6efa963dbbf3d3e8e40c2ae969ec1b8cc332599780e3b457fd65a6b7e6a72587903b9270018e9c1201f711316182378b55815848e1efdb9a16aeadda5d6e309305bd2a9cb9bae698386c222c8a6460899686fcfc05afa76a6cd0a1b7cc20d0972c023e3746c6a5dd6ee9782f1adaec48c68cdd456bb88bfb14e5a1fd552aa5a750bf81fcc43922598181c2c5cb31c790992f78e0b30e61eeb25fdd7a2a0b9e32962bad08c521a43757b622dfc03dabe31c6c4b3d9dd107e5a91679761c51a72a1a0c292dd36a2a66395e06598feb274be69804278a00f39c6286342bcdab5a8163606ad400d10f52f0ea24d8b4219b7274f9b870200d044635b9b642d485d6a17104e87a9065009cf6c39565584314e293d52d0ace386a6615246541e6661f0d2caaad40f12e5f07660bb85d131a1182d2ef02c5439a919bf05191bf8475ca216efe5319cc7bc23d507aa375f8f9745944ca378f927a8965b1e2a16065d81f1b001d84cdc7b5eb82d7ec3566805f8f2c8ee332cf6cc1e22419b6c3ab8076fba7621a543766da57f23a05d0a865d1a8168937f60a0106a24c508bec36d1000536874ed6e5e860adacd3ac79faf18145750bbaad86a6942044e73113da5958ca2375fe668dde5a846d671c74ba0029fd2a4fa0ec5e6c504be6be0093dc0278a5ec0cc6767adeb2b180432cc9bc82c60e29d4f3cfae87f001c7bc7abb7479f040be493d247314755a5bfb38e534c253fff74d3d4be949ccc17d8a0fe9634be857c43ae6e47911963e484f1cc39014ca19da1870865dde8c75886c542ff556d1992955a90866a402011d9e77dbe3db94c89a96ebddb95352c5cc05ee5574b75e10d89d0773bda5a538965212bcd23d4c816fd440f8f6ced8810212d6b2752d2e8f3fa15372722bbcf114c52f5e5c7747aa1af672334cbe76ba267290359050175a153105e16018d73910aa1c8484da4fd89df47148e98e0a2803a7468b7d4648957e75805f9fc1aed1296e25fa9e65c4fb9d2e88454226c2bf7460aecc1e8e076221a4af0befcdc8eaae45e2183241c5e11e04577d0843ab229fb0837d87c16230b695003e9b6e1b25b5365a2a6d3f3dc80abdb231b099bb0eda97ed8d74b3bf57bb8cfc209da52404197cb3125f1001e00e27c39430bbdf490b10f87d3b7e8a7ff38e2188457ab4abb6bf5c5ab8fa3093daba6b06683aed6578d342f160b703891e4c11a172db2678b86ce0ca8d7f0f5ced88460c5ccc48899485c8efaf2233a62ad2d0b78014a53e6e5c6f6be9946b66df69bccba5919e206fb5c60c3181cf198d5b547fb458ddb4800c27d8a7911d112a2fbe6f5f054fe07252f6857bcebe0ccd5717d36db5896a61e942a827c99e56a63f2972550645bc980265599240caaff74c0e229295e0cab76c19a98215c0277f24ff4cbd7456fdfeb6fbf4b4496d75f9968561ff98d09bfe0de5599d99987afe156119e37f1df148d0d0bdea726eee14fa2005aba2358c0f1a7b8c021a90ac6876736d63ef6bd77732646de6a52ec9a80480cdd2ec1734e7978c8edb3105e68f0f0e7b4a042fbf2bbac5807193e8c24cbb0105f62f92e168cd981ef58fbe897adfbe4be7e2952e4a5c5e1f4add51e8c20768948f491ed4ca43e18b1a0ef64e75401ddbec00e950b74168a3c2cbe43e587a5e8f8109e33a2bed459c864831d23be75c7292d659ed8315509e9fd55a835d1878da0047cd8f02b7d7a5c9d3369f88cf3f984d5ecefecf59899f9240826c3d76625cabf7b00d5986b74eae03521865631beb52a55a9b8fce6848ee652191400750e020b92d001660a1c1ffa343796f98e7d9f20c4adcaa6f80c069f0689d598cc9a232eafad5fe5d5ee2740e8b2e774aebf2dd12f399f002d92b49d456ebfa9a732b405940cf38fe8346e748b4f5607f9c55c3a05cd22dad94b4fe118bb83fa27cfc51e0c41ec7ffc7ced6f705e9bd45bf1e89d115eb45d58e81b595ee8eb430b8483d7e55011733fe3758eb0b69f2798625d79ab7f60ae017ccff880562ca64468eaef0400aae37e4163be4b02ca9b984f1de3d77ef1d7de13580e111e6b0ed12c6814ad3e6f8b570a8a54a7163e36374da36b7d67b6452497d654211f54105f8356b83f351ab79ca49a0f5c6202f128cc58139fa72125204f34b7ab6a175d9c564b93dd2cff00ce6b78674cb63421e7c4bac447ab77405f282fb61f3de8b596eab798b8c596718291a3902ca3bbedb9e47864644d3f18c1bf8fe08caab5d30b21ef9ee293eb24e0f0cbddbdc16ebd3259d6df4381764569a0de77faf3e9b41c9e2ceb9c7e75f83839f858507e4e5c757819d3f7d293db3c7e5f91f218fc517af90169caa3ed2778d9b8e7f13e613f862b7a3e6890a1d76caf89b75d4ed5fe649c8dfdd4a1f3965f7dca22f0db39db008e4e88695f399e5f4e918c654cfd0cf7f0aaca3a770aa6cf7693247512229447f0f7ec0cec29f6b33bbef5634b8b77519eb9d45857b56f2cd6c8eebdd52b80439afb71c4d1d14276722087f15047fe6a064d5d5135ef15961707ba25507e90d08267e7122e40e1aea2f6c029e6b11826108b7ab32c9066ebd7b74adbb883e4329ca60014db209910b6cfe22f51281554bf68272a6b49475f113f65d137d3f48b6766dd42ebc2ea1ac159240c8f44e1d74827296b74f8d6a9cb52a1d34d35891cc89547963be33c4e402d1b792c81ba38102a4492e84f31a16bced0c8c60709d078d86b6abb56144d5be261b74b0f4028f6850cea8dcdbfc07d6a47764745a2974a41a05a5956ed060e924d5b6eb1aa18cf327e3b0bcb00e878266dd1e84991301265e6375053c0cbefc32cba624dd4eee35d1ef1774ec6dd0c407d39123bd70b7ab0830a30c4d9000b6a1e6d0063da899d3a313b2bb14c85a741dbcb705ee424eeeff697d180ca15f7e9fc5947eaa7e862d761807856ba0f37b7a9a13dda58744d6a953c23969afc3332970a0b10125f26bff03f21968091f5879645573fccad1bdda68c2b0d13f7ddbab59becada801a2ce19d03655e752d45541206cdb7f0db1b519638d5d3c751e287d8a909e97bc0f855c6d95c1fcc83639fbdd7efbfe7361080e0b61082ff2cf0a47d36c4da047322a3a905927137374923498488907ff4f7876cc82c7f50082509798e86ebad1f786015ab35c467a0e24796dde5ec6506b1706d16f0d7fb99e55dc03bd76f47e897e00548b540313751050c90a10e00ccf996e6a1ce88a0c2091435aaf5e7c57ba6bd0e9418851cc4b6ca4bb6b5f7d56ce0403a0c60ca90f9a575771b949b84392e27c85fd19a8e6b3b0d990f4c2e3e0d6afec7b682c8d9040c814001255a0774154fe427a15dfdc333cdf951974bafe7cc81d21e26fcfa610693d7fac274398a57d2a38e8c966bc06ab8d1df8a62e65954f2eea60f4f57b8bcf5277a9a3dff4e12288af80ebc15063b2e34237cdb36346f809f2eec47a9fc27490f0659e456455b435be100bf7f882c145bf5ac6f2f4eba55472b0a482b604f653eda34df0e35cd97c6cc004a3f2ced8ff496aa150d2f924db54c43edebf9d3f2733cece57daea06011e0c004bcc0389333d66fc53adfcb24d4fb5fe62a94b2400210471987b001ace2687913530dfb06b3bc7f54c32f935eebf5225c0f31ea82eeec77ba23f1f129954705b626dbe8bed2383fc0b39c2b43596650f06fa709db292dff783d2fb62cfb58c5f650353abcef678e1a504b4d12184e08182dcf9aad8530d144c0d6752da5d0d3b2cdc2efeadd0b47b8ade77b840de120b1086a565392dbab25745f8ba02b37b035da3ce08fa067f5c269e2d5cc09e18e8a0062d5a5befbf2326e2681b1986bc8a40a7f76f82e84cb11a2916908a3662a045288dd33ae4bd843258b75422b0ed3644c69eb06c26048e350b271243853c5b68eaa291be659ccfeba224bd6be2401d26f46981b0148b3579b54c26973496c1eef1e1b12d31902391468ef415b5466c6a57f92299f6902f12a780d6304f56465fc515460d71ee5b69d0a7b82283402454e083c0157dd97e6ea96892a1a2b73cd3b9de11669c7a0abe89ab530ef587943413806de3656fb33cc190bf0019f1acb33a9efc3b49ef5cc981bff28b8a277f863324ad0bdfa540f8fcd9519a09afc14a0c658e97ba74addca7516cad9f5fe5a559cd1d40584d13cafc885889b36127a96159bd8df62f46e3caf829345ef07a87ef8696ab90aee43d0f5beb5a822da8e39504cd1d567bc2e56f20e78a91493f0756fc9e123639ae7e4a63ea1b71fe97378a2cc880a5bfdef60dc73cf34c4e3df23fbfdcb258b33f7da4c907974761315b8d012687d24aee9bdbc356e0d272a6d036fcc9945452f59a6d099112785cc3c2fc64d0e461a48393b66a26270e4d3d44564e4932e4ba1373a7195de201fe37235cc5f8ae5d220308c0fee9b0cfe3c9885af7514d27e53b1fc46215df5d3d23e384ed76880b36553376e33a171a3547197980edc9e0fdf37f2f824db2bebcd9b559d6a04b4e63ad34a95a01b0e6fe87258496d08b28066cbe1d6d0ebe67bfa62c6fdf80c7a7a697afa2c612e59a1014e2449bd0b12f0373f79419581398497c1b30a84607cbbdfd1d3b15d2670fe30a34fc2065c13bdb9eaedf1bc97b0d581d07314706abfa0be5d40ce99afd078472ff51d05648677effa4a19888068d8ad535eec4fb21bffbf283e90d628b90010353258647d24448c602aa3254148a18b29bea199a6986c3b16f9a05f2d4d6793d0ab2f7ec12df7c3801302753d56a7e9758ba8dae5f5dc74f19eed90dc95d760c7635d9698568eeef2dcc87112c3d08cfe205e5882fe4828541daa602f8e0d534a54099c44d55076208dbdf5f4f0353f8a1679081a03796cb886550f4dc2161c9b564dc4c2556a8c091ddc43838e4950f307398638cf1d73dfbdd7f45f79fb3ebf8c66ccf637a2bb5388e9440a55cdf00998d8a714fb827dc4a34df2f57f3e33855099bef46c8d2d69eb109f2a3c0b39691a627139b886e7a74528bd523bf5707ab750f7c670a5b768131ee97b9014840530f8173c931dea1bf6a1680390d3219c31a904cb45c75f0a5ca0a7c0356fd99eda5d05818663ce1018b04a3b92cb13dc511a83d7e5effbf69c7b3c8b1c1702d05d5d7e2a40e365723ea29468a77febd3d83498d096a858dfdd797b7e409e3a2119a2a64acab1c8f09b6e8c23077ac962accb2434d73ce35200a4faca040710b98ed4fc682b673b0891746dc2d2e4783f2babef662128daf819dc31521d631180e9e0f4c6566b2b52795a1ce6092a54ae33304d8a2be1e52a9fe09d1c4dbd405297d925e5de56ee262b79b80838137b18199e7b12b56180ad608e7355d8f7f0a72dc10483c9b204307ee181988f570b7c11b06b0be09615b38b23b60be6c7c3f2cb93f8ad4da24f17b6cb46ed22fa5b285677a870aea3d6ccfa298b629f235b7e091e80cab482464fe0f6fc12dae697c489523e65e10c9743ae168309ace24f86db12160d24199180669987abf19aa4919f54badbc897a9f67bc19d294971ea200197c91eccbccb2d114dcf9f63dc189d300cc1b7463193239f84763e834aa9a952f5ceca29aafbb567a355a534fcf0a754e0d2326d4f7d4d6a5dc57ba0e824ae5380313df5bdb200e141e21ae6f29e3f7e2dcc23b95db6d2206fc22dfcc74ea71439207f1a00a80d15589092c52102d2536000a72ca6bc219d75e944153f8198ceecc65f3d4e39565f0512d0cebd09a7cce924fd0193e51d804b832a6c54d70f7a9d826e8b7d46a16e6e522d76c7e10a27bb361c55e29b45c9564d406d2156b0a378369cc06b12ee5e87325aca588d43fc83c483213d28a594cf4046457aa46c39673b4fb330ef44dbeee86a58281a5a2909a46aedd8aec0b72da754d0fe3b688d52ba7d066fe718ce02d561604145d62facb8930ed15d2a5ef00c28fc104b535957556ca0a2cfbc395002d02089932a43d2c290e921ff7a3140773fa487fbc55d7ac055bf263049e99087a05cd687b3dbd1fd7c5e1ba9a3a2ee738425db0ae145a7bc9cc2706ce0896de0d8a342e3d2c3717db523f78cdafba6d1e216f48ad751b00dcbba61b16b9f84998692d2c987f3153e96d52c1a34103878316508a32a7e21b87a1046f07867861bdb58b72e2d7c002854e41da47ed0e4293dab84d6358f2d664c411000fe9ce8245c1eeeeafd057b9f067851705ce708f9f7ce909a9b6efdda03ec026b24d81087700f9fee1ec31861306edd747e785e9215f3acbe180d0c6b9b8ee6e5354f02e7e5ac803072109b08f9546fb7979944662a72f6a4f954e65289e3be054bfec13564f79208d48328fb90e60343d74fc0fa9ff27f38a6456c7d32764787e67463fe7bcd6a712d667f7a68888efeac7d8d2ae74745edc540d67a2fa7117c5734d6b22397f51572000ba781367f8fed85e860d09721cc7f9e7f850404a5161dc7c1f0055ae2fac9555c711fe227bd14a12cef946d146a232cd244d35ee0aa8fc85c0faece914d70b7aed6264234974cdb45d9d84b504f86ca79928bd45cce08f1763299ba5373138f09412c55ca72d54d1a35157127d5d3f2bb62899e9de5726f031f9794bbf3367880233a540ba4e6e6f951bee65529fe94af0ef609048696774166a60f4dc552e1dbf0553a8265a8ebcc8fbbfe453bff22cddf0965b4d6f7bddc6c44184f9dc6a3eb317d85d0ada79809aa729d2da4f4ce50f7689766ff5fffa5876ad9b7545dbea690313fb8d434e936550d7051e505c583c22774f92959d2a13d23258f28cdfce8b99fbbb574797c86ee6fe8505aa8be346d0ee18a1277803378aeb4527a2172a236fc410bff52398903dd3f781174db2957519a8ed1f6c9b4e1c0567573ec5735342f14e4d12a016d505fe6fab9cab95efa796d1460b67d16095ab2afa7b57b075f1b9e0b63228af32562aaf40ae555eecc7d133b681aae53d5aa35db45a575778ec1c603e2e0b00a45f0a51beee6d988db940f31fb1f031d338b0c57df998cc8d7dc40fd3b17e0b7bcf5a27e94d3953ce1ca86d01c51890bcb31288da85ef383c82789f5aebe14df94d0e34a9883b056633e28be59afd373f961f99ffd04e027f7937d5d6be0c85a07a34c73684e170cfb03f63f75dceb10c05a9ef2af9da85ca928e2fc3383b96ccc8536e11245af6e58183c66c9b0db80435c36fdb39dfb285a34d9bff2f94f37fb5bca31cfee1d1526fdbe439dd072927a14d90da47cbb3a1a718feddede98661f971f81f1e30a7359b0a5614e6020f75fb8405277b4fff847085beab68909338903b636ac0054b4caf69b84c43dcf8e45a6c4accc16e05f75c119c53d37f7a2ccd6958eed69d7b1099f932b83583352e8eb46d1973ba7ee106a290c0668d9c1a8d6e2810158fb0e36c71f55e9053390ad9f97236adcdc88f622a78c74db829dcd8f35df06504765dd1b04d831f57f99401957d0273d0098ada3d2cf1f6657d7632d504f87352b1fee672feaf4f6a1620d80c24e4215b5510d6038b02b6cea094a60139514d9ec82982d5d755359dcb380da56c23c83e74e79e6fe17e188949e5d002016aa072d6e5e6d0b898659ae95556eda56a54188be68132e898120f09476c83bea6a784603d04366a4253b05996789d8318061c5b335062497b33f30d3a0a01d3c330cfac9649987e3ac67cf0c56255f23effd7e80084d3445870a2a256b0741da4e325e478b35ab9e4001866356faef6e8094cc29c3df762431dd2d9e4e5047282cd580a9c7f6fa661c645ae6ddd838197b24e8818bb0e4f1e576e29851220ae4b89c9d2c9462f2e5fc4318eff585a7a432dd2da7bef686c94c6de4ac73bf76fdcaea8ed1675965bb0fc42df3b0f6c2a44425ad4b4c13c8d65f7c8aa1233dc31a48e16275b39924bb3afa6cf6bf53d48f965ff792122c9773b6800010f5c2c8ef4d16742663a2b74595f308406524172a4a150bf39af99cf1693c410a30720869262b5abebc95976aebc320c48ad751eaa1ef20cfa08ae36a02fe737ee43adda34de8dddfe639370236b1e55bea2bc4c5a351585299c0844592a86a49412face238b46bfefec0e837bfe642a7a4cd3b0d3e4d1f0b63956886c922a1314203f3b84e8daa24f1b19d68fde4fc4a61253de2c5b83c5ed6f50b5f8cf4cb8bd03f993275060708a22e9c19f4306d6d4b39ea607283110d7535817c428bc7b84b3d60b41365bfeb49a7358397bb57435c5c7c38f88e503663ed147af8d06fbbd6c2c007acfecc445a88d9d595bbd7e4b8a33df38d385259ccac136ab5e03a978950d0b3cf4d32c692e1bc43bcc5414ce8506754c12abcd5c598f17491ad01f5dce66bef037de569f687051caca7fdaa96d3c4552a14284974ba3d76adbfdb11658b4377dcd190a1f77d2f0922fe7647828c06b3606cf92abc4e5cd44f893b39ecbabfd7fcffe96db6d8c5e3fd0c6fbb0dd83a604534db0067e80cadb7d5ac6dcc8e7c511d03f78240e53ce43d7ea873e375170041fa373d5d97a18a21450e71a0954ef9ad9356091dc8cfa465d959fd228e1368bdd4a224b0f77614f3edcead05bfa95bb2ff15c699a1858408d9faa1b56118adfe3dc84299c113ff6154673d6671d2237ea99e555f1d1402b8df19bad169abb65ad7d339dff94e4f5d3b0fb9b72220b6f0ec2739b71451990d2bd9e84d30dbd45bcdb07a361e5881ee9afeb7f97e649b4a1a629e2ac6581bac4db32ee9186e76458ced016936d3a1dd0d344ef9c528bb6e6c104605ae1a832d27aff868edf5fae7b771d851fa6a7b49c9fb04e61b1266c30a3c3adf4b4b3042e03900563999425677cf2c92dd8eed58e09aadd0c3c36e79a2882408b332883f1e3f7c47b63e73c267410b6f0c376ba23073ed908accf715b56da595845cfaf8247d658c8b5b20cada5453572314a783634aa842ae6f950173304e91011484927d38b885d84934b5a2b4c1c5cb7b9533a6495dd7fd23761df6800f86a446317584c2cf3fff6eb80e8cbd2a72fe040df4871abbc436971719446c8710c397f1e2f8db206bcd9ba2b76dd304e4f9eea9a5514abc71d37a668ccc82ea88504cfc7bf6d3ddface74539dabf6478f0fd010ad446b812ab656fb2caebbdc4cc57799bd5fde9b27150f5106726020e300a6ba1b72c96ad79b4974c2afd6e9384234b3fea35b1c6f8f63727976b968f85ce3472cde5c2aafe47cee9d42e23949fbe09ed946a24eac374e1388016520ca32d9eaaddf312baab3289045a4cef432075a5da84d654e6ccea5f41a093f276d95daac52ec187a004d023c912c900fcc00a525786337cf4aec1e68df46fbfc4d9c3421839c4332765a81ac2029c940cbad72ecda273b40ec58c90092bfd5c29e37efb1a18997d0c12a85c1830d856ac22ebbdc9ca1b7c991322e600f407f218842404c1dc6679bf4eb3c5d7a5794595ce654f78cc809dea0b599c9b3be7cec1239b02e8d69fb516f6bb00eb051800bcf61b5f4b9ecee36d25fcb13ed16af0d81073b7cc20ce42c1a36d60940832fb2be6b187e543e8a89da25fe5b5e8165875b1fdeef013acd01166833046da8b1db08b24eeebb567845e7e338a0de9bf6b7e024975557ac093512e4fd9dbdf998a3a1f722fd61eefd005716f047ad895094a7d610c8528095a3ab6406950716151dea82a7d92932a657d8ef0a843b4038c34d25c4915b00ec5bed2169adabd1492299f2d45d19a4ce117c40ebb794d82fe0afd2163c7073ce3446139f4e0fb6f6210af9e978f339d6afaf17ffe1a50e8659013a44cbb2ca2ac87bba3904d053aafa48d4ccb91b88a5849e33f3651fb811eb4cba59526078a8ea81ad86e17831875e30664aa03f0a44771311fc2c496d2a9cb021df3891ade239c922c684dc581530e2ee579859f6c17ebcdb31c4d04590011b86abee07be645a9a4ff0e5e07393d28ff91c7e5fffeadf1aa8bba34b25781cf9a7c1313ef1ec1c7126ee8c285a7516a25544caa31412a0eaee19aeb289df1e5ef58fd94ca2261a31662f278d242f02f1ba0d5c5277d98208d25d854b1659f79c95ca237ae09ec5cfe5b64bed7820a4091d77595c9dc18bd8c61fa0507d824d4bd94067ed2672c273864710578c1f7d979a3a49da9170e93db68de8c6bbbc0ceb90490f88109e13cb8a3fb887d784cd334c1426d0f59f69fb484e9c6de694252222e984e413ccc4acec84ce31e38dc55d0efd1af89379805619c51aceb35c6ed5cf413000383ebe2af8c274bdce246807c86b86dba229a3390aa1f2ccf594289910d96a92f86fcdfc5c7036ccf8f940fbfa34d5fe95ad99a9299aaa72e24b11a0ea229e6852766a3ecfcabc74a8dd33b549fd3659005eabf7697dbeabe7f263ac4a91a3a6462e2363d2a9267de6ffe628fb5fb9cdffdc4e99cd0552eb13a61297bb4b0adefd24a6b6a4fbcfb28f981cd17ab3a986fbb09d136e7dfda708c1da3bc26e72a9cabc3e9f88db6563d5239b2aa6c52eecd5dcf793d70b1813ac9288c37dd6d1a16f976062ce2d9f0b49c7c2a86326e60c085d8aa844a23527629cece5dd31a1cf736141ea483e589747c2cf5103743200b6f7ba279791dfcac906c0be1121a1b51384b109987d927a7ae451e42d91118f8d5d5bdbb305ae5a9f1b928bdd2ba979ed4cfc529475ff367a20767d86c1cb883f6dc4dad5e1a7b91304fa80d5d10d706ff8ec34f20eb13e498884cba814258cf0907ce79792cc0c3e45ca00098d73c0725341143ecbb9b5c6d4f6da43df891b725d1bb31ee1429c5b0bfedd85b9a641cba740396865546f8d5a806cd2401545e5766ef46916971aa85733169776d56879283ae955aec04d519eafb0efba41c37ce8568adbc1cef86a340450fedff01947784f80540ae0d25db98151785299b4fa66e2404b7a07aa11cd1325a2a86b383fd3bcabce4004959ac3c1b0a61e0a8f90773deffb05abb139374f1687a8878d93afe0c7a62bd9e64616b07c279553f7312d22add56c6fc847659e001b99875ef22439c08754c9e0efa1de8d58be975b1d50fe39e3f99f494649ef1ddc97fa2f519d58bff0e8c6c867470916f1d1a93b328516d561dcd26f4c5e2ee1c01180ffaa648a05c6c6e208b86a48460855ace06737de86a7c0a25148c50325654497e8a20000d32853a67d8459ae734fe44e9b149592daab489c2ff6b24b863f3946719cd3b133d1e4138225244ec84c8e39537544580da745d6ff167bce986b44a4b61d4753ee9fdffcdb4a367109c01d5afefcd2dfc4bfdc858c4183f63ece37a644267360a2c549a7bfe35309cdc5d96934b010a3e81339e252b74f99faf6169f72939552c57bc9d68a7278042c181685ed09ad43ffdd7229de7d831b56b3189afdef690298fa973635b3c94c56a5edf04dee9780feacd2778c3770b342cabfabdaa428c81ae4ba6b8d97acdc9e762b98a8fd5cb1fb4525926b197e9034e7a62876404a84d5387b1c33f4369a0449dcbfdb6ea9153b10e4df7286e2e04d9516e67a0f7252c04ea2e273d07ee9d5532a0bad050bafd21c1fab4a05d0471e1a3d811ee06280b41462b1840cda846e5cdd1bbb584901aadd708b70bcb48edcdbd9ed26b4ceb29420007b6db2dd773e173ab42f10cdcff4878e36d00874e5bdf6bf8edd3149e74c283315b93996da9705708937f2643d5bea48d172a788816fa0dea142851be590590a0478847aed13fc4e605b776707a5582eb34c07d420b7e9c4af8c3fd54c4e977c1e4d435922f75c993f8daab4e81b2f1964a0c05f2ae75588d63d857ee76ffc17026e0f2428ea5fbbdea5a976baf94545652eb5fc38eb78d1d1a49a8b011dbb6656a5253a1393a414699fba1d774f36f6c43b77c6dd3f7ceb4fbb8ca1a755a6547f2ba97f0446654aa1a652dcbcc75db3b036494428ec6cb33010cd865e5eea55bcb7764262529abad4a52aefee52c2c31b69bc9324da4d19d51471cfbdc616aaba9ff74a06a06ddca51ec6406cb0550bef6990e9bb66e6328f8616aa4e049834b2954defec1b67e38ea7b64c423436498f9b1848d6acd82b1c9c7cd72ef82bab80f71306164a9f689d7b8a37ab30c7f531e67a0ddf6325669f40e8f6f0a16ec47fdcb45365ee7e8334a99b7365549a4293f9d91855549381c5c46adb3f63cff8982a59ba3a7bdfb9f4a857d2301100b599164ca215988529885a35b7348e417a166d32a7fab99547a6fa50903b92bd701c674e693b7d03437b9e6cf68ab1556187029513a765ad8c35620504423a2a05824c8ac83ceb199bf95dcff8fd1f065835ef12456da12e9cbdedaaaee2c1f39a99f229137203dfb3d97864885e4fe68a5dec24e98f1e979214bd4b1dc85c597372144bece69f6bc3030aff00f3b645ebdb90c48e5460893fd39b8a2760465792cbe247135d16ad8c5c4b64ca0195aa6f0bfa77a21a27f839d246c7e2cbe22b87b250eb9a1112372d47c79cf5f372c6078642e909400dd1e50a3f91cfee2c17527e7f886d6184fa37524ef5473bbee0584e5fe7dabe5c1c779b09941ae14ba760eafbc28f0c9facb3f73d996fbb0b7028af3d42185ca35f9d04f68e516f914af870008b17a17683730332b7230439eec26f25135a3d591a5da85454cf173a7c75d30a1476bb1dee69f6c7db05f2c0ec7ba085bb761d09499fd9754bcaa266676b9563cb44b3959c3baa1c72c5be75d5baf521ff953525375bd5f6d1810a6cdc3b1f495c474b866334fa2212da5817832fddd3ca16d3687ca9ca913ec27c1b9bbfa08fcd646a1bab5894e71f7f43afb0176881db3dd1193e98676eae8b3af5c3254142d97782700fc6f05331a7dc6e07a396b454b84be7eb9d3060e0777ecf810cda9c416ba58a38ad56f5f94b9450a706c5a58a8b13796fbebd83143ba918f06c479573976db426eceb8c8fc8886c29f1c77c90ed47da01f78be28671b7537309d2d67e8b7bd9a93018b86092cd940972b76338fc99ff2b4b19452119f1b84bd9dd4403c6e688a9fc5929400d4398208e82111d5d6a716452b7880dd9fce890de21e0c9a482161d5cf3f56647b4c5ad6ea431e05e2462b7290df3b3621a3dec4721ecbb42a9bac333bf86bb4463bccbaea018f159960224d2402614022a2ebbc0678ae308afcea99b78c528f4268eb1c0d0efcedd366bf9c5831c3e7374fc5986b884a07e7b6cd153bae16f6d73906281746074cb08062cb356fc46fcc4acd227358dfa11ebf3adf958cde15cbeb2344f52386f19f932172530df7808c21b24211f1b6684ef641cd54163853aecc6593d3a451695faa90b6ccbb5a395f1da808e62693e66167d4c3b5c3d94b900375e6d80dc4b08643edd5e376b62e34c9ac386978ebfea0fe85becc6760e4f75c786ef15598eb97a4bffc8ef0632b6ac0bd8f6db0f16d9e83b36daa638ac3afa87dd3a28c5027c01681f65118444f955b26c736ef46c202b16555c609afffc311a4f8e4dd69d309ba8ac6c5ab4f575281cf77bbc09bfbeaf0039a65ec12a6720aa5e542851b6b0f5d06674015b5128bd1c16c0ec8cb439124054dff0a878ef69e1aa69770b5eb4295d35bd1a096fc2733deb8cc9a6001be4f1f23c02f8a7c07878c5a465e069a0f69448f7fe9c64b195606ca9e8e06352d8456723df8fc976dbc6120265f59dcb0231490e7e14737e799a1f72fd9c53186c87da1dbc9842f298b90e8bd6e23d21675c84be604c110cbb5052dc619a4c25825ec6c70b8a6a665b92bb0e30ced578a239a570a93df6f1eab8bf61cffef5e17575010744c3224b5df8293f0cc7e5d64b04f7565d9aae07bff4c483c52020aefaf381de6ecf45ea35cdce2ef67d520d5de77c57d3884b06dbe3fb2e2ccad6c144dca41bd83633f469bebc37f86204b41c2a7b6a9dcdbc5ed13e785569dccb6513a4a5c5befd2675fff2466012466e1f38e91ca8d94b7d6f9d086ef8e9a2c7a29078111d127e7802b2144443c6b38026e3ad2754a7bb7b5fe02cd6cc4a0059799313dcb13bd012fb6baab6b632df15cc1c8d47756f1d473e9458b25da43ae32898f0381b4c314a3221825f542d00d86c873a99aaac1e372c17f9657dc6717c33ade676edf3dfb31f496728ce156cb065bc5f741880dc6a6febedfd4eb17191ab5bed4f33882624571f2ab5ee218b201a941a6efe52370e69157b9c535d6dfa355d7ad07d5a8936c6121fc2321fba55df58e18d3b1d28ca44e7261ef4c637e29255cfe5d78a556ac1f480787de0023dc4132c2f1013732b18fbc0d44751584ef65a6fd29d85c3a4442b5e15c22b0213abe6382e0a0b51b7e50e1fb2de030486eccd8e8e282e5513382e388ef32d5d75f785953b2847b4a7864c5dcc66514b0b8e99c3f04a6692f0952c8b46b7d47ac3b87fd08acdba74faa7ee33d47d77f4ed1c63420f286158a9db05c9592db1a7bc98cfbd571dfdc2c981e8067cac4b084b8f8bae38c1f1373fefb77b8b5920bfc5f9fbc50bd057525df3598062c8a76072eeac656d9c7036037ca9eddcd41ea289ea237ee982f8de16905a229d9e9d8496c2f2c150024b9cd6d773ff456fbf25242b052338ec39ca0be372d88f90e5d9277e1ffb9a83834ebabc20a80fb2e5f07fa91ce0b342c20ecec28e9ee48f69b1def51abd66553b50a29ce214b0439e5ca37498e4bbfee55cff63f2acb68d32a4d29472bfbcffc5394e6867b20aaf705994d962772928f0444bdf603ace5dff70debad94d97ea39fa081ea9ecd1b1d2303fa2155665dce1888487b9cdc0e8285a53553247b6cab51298a0e3c119a24e1f2221b823c2c78ed5bfec69dc9074aae34c0d793a5b0f883fca2283a6e0cf77c2fba4af46613f296eaa965bf92e5b6ec8b662f0a0f4b1646bb907fb788e5088ded0e696773d1e3fc3be9bb381fe1d7438155c9890f0a97b2a9e516bca1155a24d4c625aaed3a9e878ceff2ba7946e286ffa2aeeae42eb83dc2d2d22c6126a9f42d4b68895855372c1697fb5d227335b9c18a9f823ee283e99339bbd8ae21a28f682dc263a858d60aa246052444977cf5ffa08fa806b3d1e56a771113b8f1d764f2e24e3173777cd67e310cc311050f137942b2f0125a6252a72caf3445a22ff9019af736520b6c1b1aba74a47491b8492c6f12f7c7bbc0b84b18c0f8861e4eb0023394cb58143b2e7fa9a4c6014c81eaa0a3a5841dad2b44035b0c5d42c842b7f138c851e5e685840414759dc7a3c38562c8fd2ecb2299c1308d4a4e62da3e69528985ef60399d1d53e11fa144a1cc43567b977ec9371655a00911f7619d1c0d3b02d13dad61076ef38b2d1423901dab1c0872e3eee1df8ea6666070971e2b139405f2fb59c99a4524bedc1036451be00cccf0b9d1585e3bd9c5330320a295ef5a918879077122e1f909c0abe5050dddd1bc5dee7bc4dd492f9f3a7d9e14dd1b361a77e425615417d594f0ce246491da0c1cb2f06905cab50a8ab8f93d0e772430ecce4d2caf3b6a2101b8c4231e821d81a4fa10222fe8710010d2aedabdbe0551713cb938eeedafd39836cba98985283ab01dc29f7314a853f6bbd55cd158fa4bc0388770da69cbc9a82975101d3aa8bb40f9c72cc672fdc1ddc40ec717e228ebb67e3660fc11bdb1495c03200ffc91e42b62effe9b6fbb4f1788c968d73bf16f0dc29f30d52557ded3c51f8f7fea43f9292680ff7262b96f7cf6c62820ff5be9eef70f40a83293f97509c39e5fc8133d463432f64ba47db8dbb2aec306fa8a327387743106a734a53ae1c74d55ccf6ea2a78c016105a58855dc69b2506b19838649b07a9db8a7007bc7b5030468c90f6ea095454b9a48abdc98e77c3f8f33195c21f9b3464db8dc3b3e0df9617b5ec49829ee9a5dbaf9858ff3745514219b4e202b08c8b2125f81efe97f63d54cc0545406dbc7b0bc6ae198f4d19ce202dfcab1febbff2ec639a6fad5f2d366c6627b85e602a32999f9648a73485868eb5872e414648e5259f66e26353b807f8ebfb8077240ff8fb73d4d59b24755382c26ba257f3a6be3046e1b3b0a18a1d18f7c1dcd3b87a3f62ff4b1584818702e28e45014f4f41bc048f9d1b9a6e08e80b3cdf9a7880d6436117f3fb971b8a4ccac06fd1effdb2adb242cff590e3141290775cdb4f65aa783abf00431c04bb51dbdb1682b79bf5447aacedee561091a80fbcb3d59a109d7cced80757bfce1a3e37d30c4192a8c4549136720359f3a91829a7c55d82ab081cc2730a8bd9fa4faaf09d4b500a07b144df87cfc3cffcbeb09f3e3ddca8fa3dbccd31206cfaa5fd795c3506cd159d28692b8b71d0733d35ff14a7a40a9eda20401da22675292a9fecfc71a9ad646f5e832c5a11247ada86434eb74ed90db968d1e37c60d3a9081c437a06101621b10c06dfb267370f72f44241d1474aca94bcaf045bdea0c8a828f446e64fb5d5cc627606e551377957a98c04c91540fdc5620d458046d7fb55b564d45c6b4a01557570312b57ea6c4acf5ce8ec57332ee98b04b954d96995a93e7a41281e3d927854bf946269af7699b6342fba900a683ad903884c44e0af1936ad90aa52490bc32441862595031c7d99faf4376be6d0e73467dcb9d4619ef301d2fe98015e1dc41d538c7947aad4134ae948f46a5f836631473724bba40b58d07063406b522c7ea2afa2d3e829c4c9fccd733b1e9b0c273fc6d6a0c54703629a5737dfa7f8b4c0682017101293ae679e9c92a1ddffffe32f8e4456d7fa7ee4e82c327a8853867f73f3cb4dd279107caeeaa10ad730b55f561bb09342de068d6a78811dde1d411fe4989f57a86eb88c21bed7abc872a1441c0d22d766d2b40a924ed48822a5af9587d3b9993bdbd56fc003402143aa9837758b93a368b0db50859388d50b3e918fdd26195a8149c8550b2046fbaad4cf71e82eec7d4198a7a518f8349114d799b514a08877c7ab410db688101326e7557f7239c7c70a0ecfa1ff306a11a4002b49c9ee44615f9e3ff711480d4c3edb2ad57f921dcea4af3cb73caaa525c6d05b93237d07adc16d08eaa43490af359308b0752b54efad8137a4abb53392641b05cdb73e8e24137566e449a0fd2b20b082fffb083f68afac1e8b207ca3b7d00b092bf136d88160540f4f56c5fefdd36853123a30f5fa627ef8be7d3d505d310d231a86779d63bb27c55340d463a309968363a8faee254f8a3007fbdf199ffa065f47589083acf27b27733818e0a7c80c4369d40d48506eb77e3b0d1f84cebcc42c1137d253d49f477eed2f3488b75fd8fd87c9c430fdbd48cfa7a127828482155020a4c7d97d8ebb742f451ffed3cf836ab7a6e3c9f1b5acb2f49410e068e062078380e7a381741e914aa31eaca595bea32e5326a409ccc2d7fb2868820aea3418754650c0814b54a9c1a9114aa32958e94d93288cb636d80f0ac3b7c0339182e16cc9ef61797185def8d623022cebc2693a6aa5747e3f516710949501b5374950a768da7346e5aa3e3be40451a40b3bb8c857f66fc4705ca444ee6105359f4b327aeb256136458317ec70f2ae064211f873b6108796daad0da3f40fb971245f11c32f98deb73896178383521f5667498a3717e0948a12087fff215ee1792eb46d62035a9c1cd4e9068989c48d935de4de60ea37f4f40e29c2d5e367a6c4b0fbebbd0bddbe5d40884a508a64ebe0b7496e4db5e877b975d2995b3032cb680ee7f8f9ca29782778ae2e99b08d2d32e57431841718ad7fe2770248cb054c5580ef06e023d79be1a5c0dbd23ae6b203bb79fa3d505d24d9c57f3a05e2ac61dd1884f1b294360a72b3d006400854dc1ab9156549b54abadfab12a7b00eff32eaa86c5d00a7e51de74276b84e23386e0beda5c7a12fa1b58c6946e6e699234fe9a0578ed8b5b0bafd30ce9aa39e9099dc6b018033b655aba3349ce548a91ae279609acfc02cca8117ce6381e3df62234539eb2ded3609b6d4780134d2feb7e329f7dacc5492dc98ff02c209654da2e673a6cb96876c5a51f822e436cd27ff1c2057de746adc4703882bb0e8fede7f540283489e41a639103657062c711408cda243365495ea916465cc65264ecb0bc685e81ea8ee29921374ada3cad857dd965d42a8d2349296b01c3f0256cf77e1d8a0b076f59190b0c360b73686d2c7e8f7e08f9cb524721f81d513db853df51e27acf9a0efa279d8df03aa6833055f47d5cde34499310c62cf5ba5997094790c84dc3ff24d04ef9e0f4e0cc2e33765150d13a18a2588cbe68875f2157b9fd2e07b010e7742d464d99d47b02845c5ef17e9afe30bdd89ec2eba8ca125904d0403f8fe2b14df3144bf67541466e70adf1cbd48407faadc7c319e13113fcf02648fede65eebcdc2ae49cf2ef5bdb468eeba128b21dc69b857662ea941ddcf8aeefc8af92578ccd375859269b8e07c9ba6361d4e79836bbec236b6a0b94b4f48f009e1bf025dc419ec1563e4eda7148079eb4a1d61e4fac0a1a296fb3337f8f4c5af83ce115a17641cd94fd1ce2d408a4bc974103ad1e8668098fcdb1b77a4a7e7e338ea7fe0a0e958a6d4e8c6f14f4b80829047b4e3929e699510aea2afc3f7f732969e0adf7d9c458d227f075d954f075357663abb592c0eff2b675bf7ba1e2201396c6630a70aebde5754f8065a174420424212e2559236e0503c8c3314149c905a4d9cb86ae4473f4313d456c64c75dfac7894dcb5d397675512e1b43aee7d6fe84b6d4e5e161c858c816268b53c4e902cef51c15cefa25f0ce4839e9b134a978793047e783812124c530fe8b918b0b856191a21573ce9ca3a9944d9267bce2f6db95348a8366cdfd8029f3856b9e13d9807d58a234918749f7c902fe7dd8b05a7906991abfcea677537bbfd509914cac193a130b41c04500b1d829fa20603a48c320a48cde03f2d0056e577f8634f918d3df6aae368146a18933ce5b86f26f9db8d680a5eb7af09942ba7dc466678d213160ac10b9ac0ab975bee7b598bc15be88eb5d80a70d0baefbccea96fc43018161fd871d1e1cac92a7e9a97c4bd746bf92e6dc3c2e35e59c75226dcbf0abcde18aca893b51560d83e05a50b452bf57d27d4a1da00870a25d19bb9dde17026e85105d3cb95b35bf8e02ae6d2d349b1f2db30708f89a330692738b19275e131f4fa5d7033d3299a7e90fc1320cb91911aad5cd928586fafb18c5783da06880643e6ec069a713124a2c3bc79448eb615ec08cd7853f03b3355a9b80a1267abe9e42937f1fd71c5127dcf5d0e4e0790cd6575a71197d393608957d4ef1ed21c2b770ce59c010a219622903e193242157322a3d9cfecee44b1c46186d4e918ddde5d9192aba125261578807e75d766e1b656298234c1bbf38e8fe71ff9ec2e28d06921f9afd2ece0a3956e7ce29203dde9b5f349886b5116eddc3ab09a8e6043817b3d45cd6b33e9c9c06bbb0c1c2198e6dda4f929e2c7d4334175992f46a5a49e63b10144ae7586e20e00ccd1a524e75f8782f886d896aac3de9f585c88f60ca149f3ceb54f209ff1ef3f8e4cd10a8297099dafefd7f2e0c7062252d7555314ff2d3a62448d881ca358206f898981b873847366e555671b5aee85de556a39f1ae0ed73e3ab1a2cc357b42af2a2061b83aae1619ae1d6efccc8a013ee9d0b95686c7a43e715aa9420f9d827aa4bde74bdbd1ea8b11086c7caa0438d1e58baba90ae67b6237cdd40fc517261a699be46c493cedac9ad531ee0ffe3bc1f1e45055eea0a8871f1901ab01b108ef73d8e59468fe06ccd3c85df98d362436554ac3fd98f72e855084f3cc5e268c8e2262e2f79f32765e5db76b6999842c54a263b07d5ef728660e231f9849b720d7cb95bb3ee0b206be07ca154c887b983179b2d1b90a03347029a03c0d1048d3cfe854102b04c663cd595a7badb77068ecf759dccd24ae9123ee5ef7bbedb92d9de0562bca314bb832013168ef19c7808317ab2ec13558d69d7be231d8fba15ee0ca34390e8bc49cd1a40f87d192c233d69a06726b94ac76e6525c3469111db83b9f0e9c4644ce3ce5e979ed3de56ae9ec0c446bfd845578539d90e11dadaa71d06b56aab4844a1e59106f7df3e9d6aca38a2755fc4b67f80f16085731b5fbaa8016a890412c78aac687adec9c4ca401d740eb3c90762004b15d41952f3560afc728da7b259fcf525aa1e840727635b70c0e99fb7bf0ceac99f7ced2ff5de96489786dd7de0c5e15eac9c0f28c9c63c579815d1b534b7950626501b041c02cad1ca8c0771f17796cf1ed5ec79fa5007d5f1acd165e4479c7629fa37d75eb0000250fdd880aff88a8fb53daec50f04bac18ce455ea7ca356c10fd5cb6bf571ee223e427e61c2207b4c66a136bd79d95d344fb314b9705197750e05a28781acbda1769cfbfc4c9377e15fe7d4dcecbdf5454dc58cbac4f6f69c527ef419385f51db327ac410dd1ca6459ff56730197546d0f113126b158df58040516a297d1b9b7b9e0bd9f21f9071c1d788431f7c3b6902b5f7c31f20f0630f6f5d45889e41db29f6aefcfe339032c2650ac506b50b3c427ac64c59ebddda76a0ef10c355d01773a205d417273ad9b7ef9dc969712094913f8207f89355550e9f16b06b13de531a0053ccaa8629fac78b0eb6597538e28d016a1bca4e2f0a9228e75d5ca2104891d02ce95ab205f09afa150b6b99f71eb0c5df899e380b1dfbee5d21d00223f22a84edbdadf0c90d3d088782bb51c395fdb9a16d0f9fd94d0697c49760cd7cb4be226cadb300bb158c33391a743adba766119b68b6f178a0ea3adacc8331c38c2c9cc7728dec10b8dc78ff27b2161630d89174b0ceb352ee0534d4a98348a4325a889102e14f54ae8957e24b7b0c56de64a09e7a4a7479865c1f677024595359d65d3f8602a79336166680717acac9d73f5192c6168e27789e3ccdcbc08723abc7170ad129437b00754ecfc68e2cf2af78b95348c32b867b672752963ff107d9476acce89286618c6d1b59bc8a68456eb5a1c83d5067122ebaecf1db0387939367216db4eb34253301290be28e23867b565592ff6ae2e940759b098633cfa420268c5252933b3af45e53437421751e2f4cdea102f1c2ff1609b08ee1b4cd367180df24429cd79b20328fad12db43c6b217e54780e8d9141e8fdf3de6d95860ba25d2aa505dd535f0921829f07b2220feaabc46424b514ae07e44bc4a74878cb50bb687a84ff8d3349440f3757781e6cd9423e9add455e2f3909f91dc1062dd30279b98efebd990134d760f951147f30b5bf2a3bc322c4dde86d40afe887574cd53ae8bd50b4719c703352f5babb7705b62029a9c3952329a2c48dac1e63eea808b1d34e3943ac472bedfb704aede4c60202f43bae46fdabd0fd8c1e317455044bc659316e67174c0ff438e0f6a711070fae875920b5b6f2dbdd6ad729fe13a616ccaa049777531a9b316880c596400bf144c05ae168f9e24c6ae4dd0c4d5553d3f73338d2336ed45e27eb51781fc34b1c69316b455fafe7e1cd481551709c28e9433ef62475141fe439230596f813c95aa242cbaf0c9d92ef5fbd1e6af7df887bffb326bd0f6b8874d976ca92b0481faef8fed04d947420b75a9f5ec9fc9b3e2c4846deef65bcc266997e1ed74422f57cc4eba9ed85f8930de12a127504b83933c31fbff88ac66d91bf7dedcc273200840de9e74529b99d1c7c811740ad185fbc34050ff0e5bd0a936bc30ef860c60ed92b5f82c9c7f654b5ba5f4f972455298ef77a27a89857108c6365c6c39a1c03514022447b852bf5c19813af559ee73b7d0731f7ab9549284b06eadcafdfa79db01753922cd19e270900914cc8833b224c174955fa80bdd296ef1b6ac1bb9edcb65c524e1086aee9506b9e833c123bd409ea6cc75407d049261eb9030d3a88dafd774450e92171d118ae9b9278019743b6e733a9a3e1eef533c899809859009e46d4e95f71099f0f93f3740658bdcc72cccd04588aa8150f4423b54a12dd976622ab89d197981e17ff4f11ad2393a464a72f9ce469f22a04d84c5fc561bf7bac73f158d5d70e5cdadf40adddf430d25a0b8e26f8637cdcaf940e411cf832be3147935a4f3db2a3eda49de629573a03d2c353131b5b6b9c2f4c12cdfcfd4ae205b8f50b62047221c509ab0420f62290c3fff64793eda7016ed38fba7100d1628adef64d2ed2d0f96312c42ebad45d3a77108f46e224c346f20c64d6b496a040ed4da6e33794113e526c89d1468606c5a33aef22fa0e0f8468c83c94c649aa6d6d787e6843f523877b64e92190656441b38d1f27f2de678f62172c23c7a73f5b1a38ea0a55f8f01db32fd62fa2d5660a1dd278b84c96c5b6aac59d509e890714f51a830ce466451df1735541998484712673393cf2d0f57a3da6a49eff177954fa385c9c45e9cc74d658fd4ad522c413275a4b20057da739eefd65187429658e09c17d7d9d5fae3ea91c8aad86fd915f215094d77d8e873ba909ef4d28b3625153d4001b13efb9cd1a35e204dedcaa8da1a7283cc0323b95051f718f9308a3685fc2385028ca9da7d5d049ba861beb3aa8f467805ab768165c8d75d523b7f72864715a6bf9ad92dc678d3862e93b494365c83ab06e902906a283364000d6cd475576c5f432ab7c527029dda78ed4e25e31e1075cca9f7169176b9cabc45ee7454b61aca0e15d267109c5c90371cae340fff366b281ee2e86129d7ef2b7efb7e73d1cedcbf2f31e409aa59e96ea4f66c35e2d3b0b91441b13358d4bae3c05c28a24e676e81c141692b3646f4a53c18f86587a60cadb7f572c2709a87adec0eef9e51d9928cd62dea3bc1bb338f271ee68b7668d2342ab7ee904788c697f044f68fd9f7eaa1a5f2b47e11fe52500640769684cc57303db22124cdb1ed4a845d91ee1923e18fe89fa8276e97280e88974b915bc57d0f487f49e1087a730081ab63f06983fcd1b6aeb5a14746f1e5c9784a8d16a7e598adc52343322dc72e2c800881f0fb6865c21e986d546d7575e63883db44722f77dc0456adfb30730e5dc81580fea82524760014192fd9a4e6e4115f45a46cc01a800149b9f25d4ab327916b8eeaa49608252e014f4285c8c2cbb8842d53b7f840b80c3cd126a9584f69216a12f1f6c042de5656b1ff051208f6e81fa2c660ba27f051826b3b6a964500c72647806788564bbfc886cf252cec459b0f6a0dd40fad7480df9906f0360abf9f0c9325f6ada64a73ebae3443c5946c19add5fc636f3a2fc2a83a21912a70e8c3389b9033e5542f52ac7bae27af58aa90d3e29957da97f2aeeaa23e582904911a2a27204f97e3950f856078083a54f039edbc24d6a7153fee315c55c76a4d9562a21b8adcaed52f56d78390dc4bb78d04310e6a7583eff88fd02afa532d9fe6f1cfeac4c1e35022acc52e8e568fa36d70e30575dafaf2c6e840f4fcf259d9468f4d3c84afee72a6fd6de702b2c7fddaba649b8e70b2625324b6bd158cbcf1b710ca1a83d33505e29958d87872030b1aa6c3e4247e36a7f58537a924c6562a36de8bf9a5a84213051e07ab4a15766001483b1bc9438dc1f2854c0a83bab122ca3b6192fd7f1bd4022b7f66ec51bddb73f9b44a4d8b7e799c60863f43299f0df5cf884886376d3171b5f219122ec8d3740b2502be576082546a2cb72b1788a6f47e0dd83d9cdb7b8ccb09e841deb21410860b40a4f36fadeea6d4ea0ed377692c2f28c56847bef4840865496e486a36d6fbdfd0c80da4898f429a2286d8e0856c105598d94af3cb73e57f217fcba16aa3b57c2c50dc14523fdf13ffbc2326a076ccb715159494583e3ddd735341545f742109391c69752b6864be76ab9584a23950189a5273d0127dec4da28e8ffeef99b27304137bd77407a50cf43660a26d37853a8b8817031d79f8305377c18161aac7f2054357fe63cf26a7611f84f59ad95074907e81e747b56d34b60679bdb78b6c6603cbf3397b07a785950a78a2e068cfab1938d2fdff2ade32ca85e8af4001e636630abc83d64163dd1380f39de1443371c610e4e8a9c3a7ac280dbb15dbff281968f545ad2a4422f0dbc2b675b21ee2909aa53291102dec6fba5b7d0506241a1bb60f1c8a3f28f59f50cfe6994941e531c82ca4bf558aeace2f95f5eaf866e355b4fc20107c8dca373890d436b728c5745382728d86217587afd929eee88d667a3048ab608bc496cc4f08749fcbeb59a0fc190fe62f278f6c65e70d17e9f62d2c13ec0180f571fb2062bdfc3b4091f647ccd60c8b0da2ccc3d20e8e763903ca7b6bd5af87e5715de2f9dab7520d5e096f301986e43254cda82e4589874537fe6a9ba2d5d8f8671550779b45c992fc2ae8f65885e2942c9f631949a4a772409cb06a014975334b43a4464a2e25b801dcfc1215794f9cd33a533de3a4d3c09840f86372d23497b39dd68c3a92308f1e4159ba7c6f4b37703c0e20f97152d3108c6b8d4c8ce3fb0dff52454167cf817c54827f9913b97ccad5bc639e4b11523954d498eee5ea8d28fd523ea28ecd99ae8b63e44ace5af79c1b22653638ab700b110506fcfd1c916349eeff38ed5ba4292d8b6fa5bc79f090369a2bdc3416050560a86d1fc7ce8bcc477dadeaffc1ef382aaafe855e35452737482f661987f7a4b7e16b57b9e7201a6534fb63466a2e92744c538d032fa3a9e849fba48114faee6adfb61202ed1007a59aca92fb11823e1d20508eb700966231dadd3758c6294bca6ede48c7426b46ae27b3006a19aa00ac1d1efb5c0223627f9ae199a5b1b18bd9f5b1e42acf29d04a2ae74f5c1154d492223428aa181ddd0425549fe16f490d0e55f11fedc9d1e71ec16cdce477014038132b66fc626b1e4123f227dafce8e98c786ae4f8add00ba254c34f00b1767feb7d1a762dde8514007cb4c33f162d0f9dba3fe9361f81e2a61cce0863ca89f6f17bc720eb3d5862faa2477ffb97c2c78603a75732b9b7c3203fc86ce40679cc4e2532e0325dc0cf5d238b27634262272ae578715bbb0a98a354ae2cb766cd37722b79e74c6616588bf17f50a70ab173dcd14d6ec965d77fed1951a92401dbc77eaf4f424cc6a834c3e0617a30e051391473259e07885728dc69958af3368e39fabb29f1c45860d52c82da9f92ce63d984e1448480b5143e4ed8ab0f686b7bc73e190ba5dc318b693afbc46b0697acbd115ed6d5a8ddbac0c89f5535560c24b92a9854a1129d9a361029d5df76863b853ce7ad0f1ceb2c1159441fc6fe3422e9f1d1f5c9aa399adfb662ba12d6fa118770862a4f6bb8746b3dc1a5161c5304d823d47de7fc8c84a98f9550c18f4169f2a96965bcc4dce120a1ff79e754e70c8e52a092fe5f491698918b4fad500fa399a8ed055fe5d87d95dd32e02e9d29d4edf9222918713a43600b7379e40d42a27f099aa6c04f914dc0f5472baea2cd7de6eec948ce68ab3084534f366918a2bc3ff3c6f78105cdd1008790955342ad6e884e6ff73f1c31a926ff8434d6f0861af9fe22b62c54da693d086885e8b6bb0ce93f2a0b5a68f2d962ee2215add65174abb6a40b3824d4bd4a767d67f2c044fdd213e4b6edb9a179ef402160ab3c5cb5fe111866d143234d1c84ca92276389020bbebf9a1ff542ff0da9fcb8d94bdf26a4b0a6a4017e04ebf043f79ca0ee83f4853056f96e67b92e4e2a07d1b5d49ebf61ba9fb3f483d4446dee72c09b37fba52c7a8bd5d6cf40433026ff957050a222cb157388c7e9c77ef059bff4c2c057ad5a0e3e432645596e1d30d076333ea5a22ada62d1f0c62517b72381b563bbb70044fbaddfd70463a7d684230845e7a77e13021bd6be6a88d6dd7ff1a0f6fe6b4a18202dfad183d6a02955e5989680c0783ee9d4522f8c5369c8a65600528511bb085ad0b55b0e7b8d2fb1aee4fbcf1f4ddc2ee778cf655269fb2e30f454a330d893640761379a988bcd649c01cc56a1e8350d534b34718527774f0b1df8adef3021d02a07d5f15210e1d60de529c40b96047a7f1235b721035e2c903c7818706f257a7d028149d812a335c47d98686157bf49390019c0f95964d4697f920ffb5a909bb35aee2f801bc08aa8133441b71a741b67fd483877127d4c819e81d2a12ad3512ac2672a0f94e7172e26a9f879000b49f24b0db3a4838971b5455d0e96522409eab3880c7b2fee26c53c73eedd1ce6a14f73965e2bff5bf8cddea90e628313848d9deee28fd123c9c6ad190b4888f90396288b6379fa8bb70a4e67b3e5c2822633e2e0401b35aa62f5cde8cfe367ce4a4fd5d655297af629ab9c9e0d32705ab625a9efd05125c772a59b4ade6d9836188ca281a70908df229ce6f961c41bc6c7a8d301f9095d9c190d9b3287bf720a41b35ca08cf1f68143517d81036040b632491a476bb8bf0d57446498ac0aca7a9770af9025912e7dc89943abab940da3661400ff0732df3d3abece37d45f7796df441993c0e5d9b9a5be0b23a97e6ef046f357971cc302f9663a0889bb8f27ef2728e0cde9188c73e59b3d02929989077e619969f13a22fe29eaf497546980eb5bf6577415acc88281a74489f914f9b3e676ac8fde8263ca736731751b608de09d012616187f354563947a862d6e879e37db3dba16830e8f7fe0f7cf24270d6a9868bd93b78216e89a55084375ad24c9d5cbc2d16c390d364848b771f4b67cc0fcfe6b335a0aafd509743a714e5585c40733b186cfbb9ab29a32f37a93442f86199404b1b3d938aaa0ad6246840ecf61da17a8dbcd656f9b33bec0c7ca4e5a9a1455ababe27eea2965ba27cb1383741b3491c2c69e4b29cb348cca1f88a6016bdbcb0de16749e09482dcca138c6753be849649091c81dffd96ebcbbd58f237527f4869db7b4b59c87ab48416490beef25e3e62d1412bae40cb0dab3e5efac0f212bd04a5df4355964427f83514de7da1bb67947828a0d18efda627e95bf990f3fc9f5261300834c9610b9c2bba6a03a37c344af599bae271e848e113942316d0a31b0933cb9d2e6010a238f87026c8ba19527cc1f2aaf8b9c12b1f4721af0491320bbeb12a2ef138434c43d2e5e2fc356e3727d13830a92914b25dbf06c9670d3409a7999feb3d18e9ae5dd3e7a97bf8433000289aea28250d9726847c4758acd8f9a0b551b2aab6783cdcf115ce6f0f9c712111fa56a639de51aa0d3cd749ee0f0800a9291f4bacfd585c437f953a61c865cf90ecf36ecb78886ff0757257d5045fac3ae9c8f96a95859af2a45d22e056e402e3f749315e9552862565ddd7cd49efd234cc40ab76c9742fffdda7e54f17390c5ac22285f707381d69b889c3da0109708d8704eb6026fb09329cb3720f94927159a65e2a9666a946648a53ce03888d5e5abf1a86720bc2664f27a0492273e29122086b96b3ac3e0da43d4474c9def9341324cb963553b41a285493b6819aa56e6503951629e415616a52df64ab76fb9db9d056bae07ff94c8004024822cef538a25636b697766978f55af741ddc48cda576b043f3eba08d5b4c1473de85169d14658c4aa3c34727a58c8d2b152eeab21c35e411f3bbd4ae90537ee040c14fa2bbd03ab327f8df217962ec4245c501c6e2ac55b7450169d6d8d67498d03080f6f728a7bba3bc739fcaa8860d4d8db38268ad0becc4a9c26b2e4240bb5f786e1c069b385982bac3247ffffa940e1d09058d57354788b85e2c487626c22c8d94a30f03e6fee634a201094120e2f1252c645f786823bb6fbb62805acace2af6d933cfda9ff81a9594370b7d913161ddcd7016a149ca44b8b2909c018830af4415efba6de27e8ea02cc5178dda44f22d62e1825ec8c48ddc38bc5b171d72a69d8f6e2ec98fd79e6be40225b5d4aa64e63a903c61981bb5f1a5220a28d1ad481d3787daffadd8d45b665ea1f14ef1114db792ba9dc7da0af439f9c154951e800fe545ab3843d328cc9317877c722cacd0470fa5ab252f0b0db8ec14aaa4da326d99c3a90e74e490672e692121634b5b6f9041f71e42f117c9315ec721e979913f4cfc2fe845c668045502a1ec539ca2a315e2ec89d8a7bd8026d8f4059768016ffb34a9fac1dfe0e7dd4b9d5711b00f81d0d7c77d237c7c48dbcaa1deb05ba3ad9db571c8ca7767561176d31de9a63c120113c1fb09b23b03f2713be251fd8f232dc59334480bf36a9071a0682fd7fbcb074e8004b9ed532dd9e1758ea812b730c3cb4a939b0252b89ad68cb8628ac3e3e369391f052d9efc78244187d64680421036ace3fb59d4bb9c77fd15123eaf4479b3fa1ea05839cab43b726bec140ecd3c89b229f6df1118d287d9bcd989f795c6d114e9dac3b64f63f76172f907411f58d7d994d640595d93ad07722d2e28c16b484452c96ef212d05a14f0bafdc6d0d1bc069709694cf1a7a563c2ff87c27e7c8bfb3939e71a0bb545636126cbe0ad1968c30291c4672be64e960dc9bdd1956bbbf7286350939130215f174b8f397efe49fb2d5154a3db9daad03526e5a3b2e4f13aebb2dc3724d448e48e5bebfd95b01e9e75ceda427a2ed82a6acc0f4866b421125a24f6314dfd5e2070921820ebaced3eabd7cc54c8654f47030479422b310d27e22baf223c37ebce048076a72bdc96105dd0c1aa42e583b8e12ce9f9e3645ff08ce749ebf15298272039c63717ad2b959068be781395351df20fd6e4462d31d33c6c0a1b5351922456e0e2afc941ff8b3780ebaab51b487c845a7cd28ec2453a7f2edc41a782380b55a18e485cde9232669913b93a097438fd2d6de4b34d19b96d8ab9e9823fdc194eb151df810d2863d848550ef4639bac70cbc47f05d69b08ba2ec7f39253d836f4f55f89ec1263089d8029b62ffe5ad675830c39f188514edded7383b8eac2a66624a7481a311288de7755decf34dd97cbe3b3377c6b429dd25ec16d2ec7fba8551e2013b0773e27eb972dd030c15a5cd363915612a4bc0a7ca914837ed0dccf8202c84146c583e7e70276f3ff177b764391ad2315a5a33b90ccb7005d39ece0295a680d7a9e1385270129dfee584dcac876ae044c353ee2a90ff819915c5c8f3466a11ff61ac6505409222093b6c945f4340a3f3fe8d9f65b3e37e93e7daa4b467e30e3af67c7cd63fe95725fdcace45c40e827e859ce44d7d585de878c95c02816c30f555412705a786ab029fc4ceb4e0d94eb10ed6ae36d28673f7d396a8f1546001d87ccc9ea35a72d62e925d3e43784759a2391a8c0fd7537ee4bf9f8ae8fbcb3aa175055494033f11944a6dbe3229502e29e36e93eb7c12839a7dcff0a8a9c582db58cb668597afe6ee0e2e36cea9f3c4eb4e8f2288c8723ecdded32df581f138574a36676ac2e97f1166eab5d601eb3fa3ca1a779c292c598742056fe78e6177c8cdd1c095d0f973e7e65ceeebcb8b128c38bb599d515192a2e9d38aabe23694e9769c3b5c6279ee78c91091055318796a97951a52c8deb5d5303e53bad1849ef5e90a45a72dd883686df9301a524536d48bfc7a345acff69ed00f2b2e4bb6828029cceb3c138c6e430dc083f89de6758d50909f9a4aaa39b310f6b488f0361266362eca2805b0d65dd564e66a7e34d2cdef7aa1156c5e9c278efeba24a0df8d63ecaa593858b2b2b2c3f00d303304625bec553fc6beb360677c3e80e86a6b87872da5faedfde79e65e252619955f1bd060ca10cf2eabaa1f73cdd3b86e9f547012cd3409267c5ddc2a4104d476fccc1218efb41d945148234e20760cdf13fd194d54b6457f189da4ab1a50e5154a692843bce0b1268dbfb17dce02563f8585af76a9bdda295f393fd95d52d5e27e21d7c870262259776105a660b95da0ed2055264f548bdf098b25c3077840c6ebf32c3da0ec04b8c45a10efd4bc1afc4c673abda5306eed3907fd65991fe3557f34a8b5e87a0f2448f8e8b4cda65109f3f4eb73dedf26ebb344970b934788af2da6174d285256c4d0fa183bed8f7a1eb57061309f6e426f26f08d9884300ca8a32f720d1751be674207e95e2f6b1a4912c4abb8127b2cc51e90986c271784cd98f5436559f2c37ca3b11504d5d768b874394f7e7abbd61afc837f6cab26edd524f50c1dd276cd21b4d20046d8e7d9d8dd87bc48d65409d19cdcb546146030bddfd90609fa13603c31feff20b50ee6c34417d000536e24f34540d6587f9c3b4010ac3c4cc300390c13b7cd3d73e2fe2327c08f8fde280c6db39411be4d92083e9c637957e738060b57329c370505cd82f3a9dbb557c85a76a15f0c11db0ba07c0495f88ce59cefa8e71d65daaa21a4cc5a162a55a313e797d33b0991c645513808938278285cf48c07d3422142e271e6698ee7c0937b52eac3068ed3381d67828349a2157883ece465a6c12d89c13c50f2b32834c38d636244de5a48be2c9dab66b66f98a80bc53610ad88a4d7d0226b607681c158563c84fbcd7cff1910cd2a5f5b3bd8c7e4f4e9dcd8183dec6a29820509cc4d7f7719831107fc9edf5f63b9eeabe996bd7633b497aa3aa45cf269722decb0f231412e5f9a0a8cc0834bf54fd6c371d118dea8c6bd0068c50521e9d5b18fb46c41fe70cb350126a3611238e919ace5f9c160c788e3dc9dd6d81c32fca4e0967cbe18943a752de4d2bdc512e0c264b341514613d3d1baafec6e1a305867e6834e2ee0fe3e58186a8786be5463417b8149a1a59a01a0ea405a111ee8a8de9b253b629a3d9b4a180cc6f58c94ab2afaec9247cf5d071f664e97cfe17da580298a59b1c30f3a214a30b24975233618c2d15ba19a1a49aa1f4205fe11902224174042c88506c2229be59557f0251796ef21934f49fb54b6b93d8c08782c0c2d8bc38bbf12fa50eebf0a01737b562318810f4cd37edc6d048bf1dbfbc936d3496b6c6fd7de4a8ba7327f904e66d256dcedf9db52d106b23faeb482d0db362e6e85b4ac61cda77a6bd22d7664d9c90120f84cfc860b9d2bfb67243307e5a105a453561ee737c41b7c0fab418ae11dc57fdfd9f73226aed4fc93e5ffa5212c88348c250c958082690c8d56ac31daeb97d9cdc9736ece694f2cfb7e6f0be1549866b0100e1638f3fff1e9ec732739516dd1c9b0f6fd28d22e7621c4cda8fed914a4d36a6feda3fd6c1eec0549dba0366a2bfa0702f3563bb2db88ac3f34fc12a92da36f7167d1c07ec5cfb08a24cfe373b91b9354077490b13acae4a973ead8fe9fccdba1db6ac8070f20b18bcffde8e99e973d762dbf22e65521dd7955129ac0ef9a35027285a18994c044fb6454184014a5abfe7fb11a1f08c4b49895613d6d20701728132c5bfd222426bb282afb3525056c2d521bd655064276b895108932c88f2217725cf786a4694dad62b0e65c9523e977d0b6e0c3be0dd75925d8090baea293a780b4f4f8635ad0ce5f5b8b359e82eceb1b3904b20ecaf44da3e52d7c9b7fb90c23ddf7c474f8874ba7a9b1d435095dbff4770146872eabcfa13320da003bb41f488dd21d5469bb15c790ca173553395608bf8f566a21894ab4b7d01364d1dd7336c1e0537a10a8586895c71644881d60bc3e85bc823da9c9b657fb85b57990ce6920bd7c4846ffb5bdacae779f7ae99fbda443f7e9019f76114858bd07e1666d1ed2365b4163815c334b92f1709009fa39903f16cb613fc796a4428d948963536f746c1abacbf00da2e1a9a81a6c32677313ab4b0cdfaf062103678a675f9ccc54c4e2080c9a0164b4d5e1f6b1907f1b79ba4d8b76d38bcdc0008d4b44bab8031cc03a22f71a2b3a21b86cb7dd280e7ff0e16b412baaba88a173c92d6712dd9a95ff5761f40eb41e08c055393fe66377ff66e3b1bf78e6a1989650f5688a59c5af02fb89da0345bc96456cfffcd3917983166720b16aa306af9449df058df9ead02c2a91b96b3f46344bdc339ce458ae1447006062475b0209f09107c92d96b74c2c8d06cbc2c7695eb93f5ae990edeedbe7966130739afa3d93f538bc8a0b6074b00b29800b924303e11c45b951275ad846272cf97864c6a13b7d3ec60ffd014be39ea327b73c33aacfb06a2fdb28a7d1878c1b7d1bfb2b9b8cb3307ccf252d38b28e645edc9f979f565c1e5ce43e96b36577e8dc890a90b61abbdb391c2965a3593db1b2306aa2a6d25df0e27841142808d2f6788b0e1ffcef391ce0802c3dd1d90221b73f4c160115db052c8e9da83d82e262a14841b5a31815d69ed0dab0ec9a51436464f69ce9933f8180fa4bd950be91b4f787b91093f039ecda0616ef7a44620d13d8f3208d077d10a66f6a4af1ae40b4899662e868f4823361493532e7258f4510f5da043677e926e8e17b29bf451647a2f623f9dadcd06a670392b6cce1f4db35c768ac61270802980f63fe2ce3ebe8e6b6056263ca141ebfb7badf47ece43494bf16391f99924445376bc652eb51d4298fcae4b5595b0f3ecaa71c62d083c340d2ed8b69772a2a80c5b9e2f6a0224400192ff551433e0a2efe822755d90dbc337c70c2ebda19fc45f6e2b14b6a889947e8d207b8c9060903c20078257f39fc0556eaa3c457711bd4b4a03461a5b5c1c284a0f640f167893cdf42a8d4c3467423e60015cdb4bc9a998af5b96155d5111f4c8c8fdf2a8270de327ffe311d7369e8d995e77057c4fb588594971ab9e65fb41673e4e5eab4b095f62e6d2b2fa5f4ac6cd71f05f3c8a12d2afe8774678e5258b95a6f20a6aa18dedebbbbe497a01eb08c93bd939730b7552fb7390b28c0519ca10d90e74105731c70befd50dbf377988434722e9da64dfce77766ab15c1f0868949ae5e89f09f46607d41fa8f27404a18da9bebfcea6737ff98c552788e400db772337b208c3543307eaa1b257b987afc9f3ea2f483468561d81908067ada777c9e7fa2e27a3f5a93de6f27cc1a3080d80c53962fdd15f332bcd33e131cacc90d27260a6afb42ccd395ec919fb5aab10e10b1894aae397b8f8335cba38ea38ea0ae35dcdadef3e46e995723f47ef24ed30fa31bcf63481e707a8717845a4d4ddd033625f9a0a990492f93785f67b8b655cf7a177209bb34b13c38f3d1c1cf2ffc07949bad5b0c32bcc4a99ecdd1720463c9605c1bff73551bedb2870f49f5db792497531f6bf1069d6f86c8648376ca85af8255aa4c6def69d6cb08a7286e2d81cbef1df0b1b68639a8eef2609934a008db0108b3dd245e744c9b9df87a92d846b2dae72adfe5b94cf5472038dcae0417ec76f9ff5fd3f6ef0742bd45827a5600a31cf43eb016f5056a88cac2e265b5ea295e46085c9b5997e0283eb3920db643c03b40f8eaf79dae8f9b9f402d39a3519667ffd51fdd5555b207fbc09b7c1ac90760e98e9be8a74a387bfabf8efb15f9f25baa9e1728dc073e664fc55c67929ccc975b5ec26da75d8afc6a3a5a93c40c2afa8b4f565f8a64c7d4d12e9fd78b39c7fcfc1978cb895867bcaa071664e46ef2c43f10f5edf890f4ba3569d45c7ac345da7d5e5abdb5719c3ea74ca767ae53a7bb64c41f5ad8cc96d7aabd58aa705a37aa0960b499cd8574efadae3f14701ce106127236e3a24b97df7159e51bf1f421749f4f97fca9d0ea0c4255f5d00a77279c5ef874dcdf46aa46c5860dfe36df2fe8811770bddb05429a094e6c41293c1f98f149c597fbbec71a8deed7e1494ed20a47d65e171ad144dda4901398f7581fd0cd8089a5be3087396c0962162a007b380cdab02ee2bf534d65202002846494bb48ab21723d74c55d3d51956b83af1921f97bc4570ca65be07eccb2f5c705ecae681bf62e225d558e25b11480cb96e048e2de8fdee27108b57af13980400021ffdfe0e244561e4e042d3af5dd9c7893736bf2d7953d90291f069a1a44c9d4fe319cdc3a5ca7bfd5c606835e57dfeba51c4edd730a3480f03875a1ac30b888ff4ae1adfde5e8965a8bb2565657fef8cbacc0a8cbcee1d6bc2779eeab8917a22940e8b056e6d64d8f25c8a5e87809c1c2538ff3b761483e1e74cf6803d3df8d49050b313610e13a472bbd3c5faf6fab05e9951eb6a9b83316d0862e0952eda14dae4c0ce81bf3928d307326f3b8552f332b2456669de8fa2cdb3c9c6e616f1c82b37219d873db3678345803d71cb47d7824f760787c03c76214f3591cbc94b32458a3d27a3172c7876e3a87e3898be437ff64c70f0c5115bd5268c8d31a44383c0b18d471c001f185997f99f9fdc93ca23d294479fba124901e36d33644ff33ec409d56d72eb88254be4b3e10d6a41550627f99f68ca5d939c861fe74f55da18b78473d10b3cb64c77068e6e6c84e915e1d595a6dedaffd125884dafb9bf7fb8b5edbd64502f5c4a79b3caa48925dba8114e4b0c81026f1ae21c4b02435b54f7808d4e544105cc1cc5f84ce8359b5553e9fe085c6123a65c5700cc2756bacdaf4e03bdf8e22097ec262e7bd84727898f750442cee52434272916467b12c83fe9e6dd4a6775d5afc326e0c2457a4d1fe522bbd5fe9a011b56678602f84140f35531b800c332b11d2ac0febf477d86f8c5db8556c014384cb67ca1bb749993ef8a88317f7f39a32460ecd11782cca98b0643005accecdf41642f92b94a0b837dae3d2bd42e275a7efef238c35f20f3160c7e130a3eb3ff20b7e8efbd7f08f043f19962d45cb29ff225d44b09c6a3f586ff9878bc78654a9f8298824de0297a38988d8322beb3e68224003833304901a8f32f5c2fba4b4f260d4b2b0394cf697007669e796339f8261dc49f02c8bb660485edc7c332a0125b350f84f7202498086714e8681006397899135619c06743e076d501448788d6bb04898f9b7f9665d426721dd28d8cf93c32c4d1833794ee5810e01a906c2d792094a2e0ca754275f66a0b71790b0a6d10243173bbd83f90bbac0ce156ae593b9ee1ea9370b87bdac27e6beb69120701d07273f3ab927378ba0cef5c94deb75fee6ef0c862642e1284ab3eaf9eb31db0395ff1273dc3c923acdd64f39f102459d51070c4d0f6c1e362a001b1d64c73559373423bed4b805681c5f8ac8125bcc97081539b698badf9babea1049b667d52875facbe5e36c489347993978f96d7b77da79746852dc9e1bb9906fa977a5952ba3b181142e3a3654da65eba628e2d87d16ed2b66e3e727577a768e30f7c69ef8559be5fe64dd3a4b762708079330f91f8a4fca8454c1892bb773a2faa168ecd78e2d7604da2a28fbe45f3dd712817c3d75585ef62727dfac6b0c2570e708ac46aa4fd0f0f9eb5806468cff8073ff3b0f4c727b0ee7471677644350a087dcb5fc82b7a32e63b4c40736ab702f3825b46c3bd48747e1fdb0e82f04fcda4036472ead5b62dccbe9e6dd842479029fcc3f5f88d05662e35900c5046a11ad9999113431bcf45de8f4198dd1dde8fb0ea86adf86c9aae09d3a4ce6f1491bd22eb87340853c6fe07254ecae457082d6203a97a8779358350bffe5b85ac5b32f460d6bfdd581e0df7883f4cfe5b60616fe8cab43777e26ed8f444003a5d2910c463e3f2008c11ef853b933ea44e38a0863a1dc7b0563d5c89336451d51c4cc01527425cad87531fe4f2e6d57e36b28c68cf0603d56f430692603268e7528ee71dc96db07e2eb4ede26e721a5412c4525dbc4aa486c347f18ab418161ba3aa060003ebf7e48bf4b759b284015e71d680c81e4c1e2bd5785772f54e5e41d9c17037fa21a0d1d1337ebe60f8bc14317be535c562f7b91fd18fb836ce1237888c0490b266ada4fc46f0361c4b57d5976c9f1495ae99bce4bb5e1025017397d83921db4353b6f7e9ba4ae8a2d6329ca3911d1cc4b1fdd1c7838cf98ceb1605c641a37f0434692fb76809f878fce06c70486058ae8b107eda2eb40681ec6437f607dca277e9f7d1517ca6bad08f43d58291da3b163148965eb2958772ceacaa02e0a2b994c4c450302f8328e6a57809473ac2a8498c97f0e5c5b930ae5b0f0b0b61a23d063faff18917e98f4ff22f29ecc09d90b3e39327d63c447db14eeaf04d575c1dd0cdfc9b9cf861b855186b00389e1277ea2b86ca62701ece5a8f8803fd0c030e9c8f58d2335a7454432442d8a1ebf6d274ad336a595b098e4c0a2584a102ed1229dc61cbd853ec230da7818aace8324241ea42ff489c1c97aaee459a8721c94aa7ffa8ffdd836a7d4c8c86fe0b8ca2ece4a629c69676d85f01b4069f5ea994f2feed38c44467c96bf994335158028859c41b7e375d220d47c27061d5a000b81207d78350b15f67ec2b221963208ba57cad16bca4ad3e284fb1ae5e7ab0bf1fda38ea82bd2e460fe30ce66db542a9b00f251857c585f4cf2adbc527961e5b56c4d54f5e1e4878493c9877841375af549173f9329e1797fad07e92cb436c2c96a5b1dbee15963db57d52d8f621269c8d392d7328fd18486f915fe59d803d39666ef66dd3fd9cd3992cca9a3a729f46b5ffc6dfcac3ab05490ea042f5ce73d061ba9e204ea209c1528d97f87236b8d791498af43054ac930401db30dc429167dcab7e09b1733253fcc274bf36b51d53bcc40ff0a5fa3b4f7649789883ea3eff229d512994c2078de3c95cdc3a26967b091012f5baefefe653355fe5ffcd5be4decd8f67f02ffb6228cedebff17dcd31825d3e8243cee08e019f112982cb2289d4500c2616b808a09eabdbdee62a6864b73242c622d2e9af21d03f82abe797b5d80c148b01b994f3aeb31c42f7f0aa62355804d1e2b2d2bc972cef6e60421ef43f29fbf78d816d1031fb09335a997070c7d5f1ddd5ea33b19888803162cae08440893275dfa2a15c160298abcadd2d058813940fd217fcfaeb726973e3b0192793fc2a7d2b7d73edc43af3ccc8f3870888aabb56b33e9c7ab67e14087cea6d3afff106e66b9d06e0a47b20521221f836d0df32f4df94aab443563b40fb50f806f49e4e73d99f42d27652549224f150f20b5428a3b3fe0f9a4e0facb8110c80acfd11002f2bc81856ba47c93eee63c8ede46085ba9de1508a579f9785244b09729344a99e3944d3bfa20bf5922a2bfaa68e1015db7c9ddffb766670e3085d5bcca037cc63e4b9db2d6b3ad96f35964a18338069e84bd1fa0b53102c9f83e2efb38ea9995eb3c4a3c77262dd7955564c0564d269e557a3f5626ea8c682ddda1a492445940bb68c42ad05997001c6d86a80d9a7ddbcb33ebee74ae39a78147b10eebdc6e33c3c759cffcf5b76d9e0f39d862007b00cb754aede86706c08c358731ccf654e7ba1c624250b13f769a09664ec89b02b93a34963d0913513e374fa5bce80db9c11d7b3961656792e1d16346ce451403ca468231e52e38f5d1d78d4ab160758ea469cd7c1fef5f2d7e48286ccb121646bcbcafc820e32bfcf28991738040a8a0e7e90bc66c88ce6d6ab2d77c76a83c666d0c8b678072022b18ea007d39efba2613122b640097fd6205f136e5ccde07f22f0fd588bfedebf92a32173e6c4e3d1b09fb377d303f0830242e1cd5bfa571914db31f3242c7416e8484d1bc30682f3217a537d5532b52b6954a76c136854076497036a500841cc2af54f2609544f677db9bf06ccbdbeb9d606a779f3dabd836a608d91867db515b80baae9fefb4f1e278a47e57e7dc7d5f8791eb2d1720f6e89d0cad2a025a2ff49e64bc69b6d9c4303ae99c1ee88184199a382718a80baa9ac7fc33ead662a59e9ed6e1fbc3c75dd93b44f4e3d9e1801382afa0d33a414a70f7de49aa1023eeb06ed9a8ce60f0ffe19bb6808e69d6a27b051905e20e49a11171b861c3a0873be52314942fd314246812c582ae5cd64e0d1f26f93b0f7554b1e5afb05dd9e85ceaee364565e4f7a2ee5e269fde0896a7ec2645a5c7cf09d294c39ffa15363cd9e4d10336ca3540eccea0ec7d9518368445a1a43d805c7cf4653d2aaeb01d29d8351fa7e100e3e78f2198c68008c877e464dd07c99eb00d32052031122fb3b988d518cf5b119d85b7640809b0735662d134fe58e309874a59a001a5ec004228957dbbbdc576a6c27181a008a1f95d8c9035d38c9742abc11e53170b117d53aeaae84e1bc388533f508626f437ce114d44fcfbe7af40144c8f39e8de89c5cfeaa4eec0656d4460b5af8a2cfd0c5d6e0522e2da4aaccdd68bb8cb121cfec968e2bd6cd8155e5f8f2b9b9b9742bc77c3c81115256f3ce0dbd899abacb6aab98a2169979b5ffedb46bd3ecadae65d033b446298263f4252003cccc8458162ac2b98717b48f4b3ea22b172af328edeb7b78eee81f61ab43a29b4fcf4b2db046ce6fe65b4aa25a74196035e75ae2b59ab6a57f0f05b36d9a1946bb5361d2ee8a7f6649adce2b0220affb88de5964d09fab140f0142a072982508e279b0d03b7b0e70c34656e72b86ee288c99393ad5b6aede21c9d3868ec9ce10a4fed6dfc89f841381da09e6559c2ff5b98ebdb91fd40862345e44f9ac50664bacf582ca749f290d6583ac579728212b60e93257252c4f13a23f2aeedf79f5a6ed773a904095ae43939ac3d5c55d87eb772642a7d97b8e09e94ff4c714a3613115763fb4226c22fae3a5bf0119ef97ed2e34fcfc9ae11052f4a8010e505f039f956b21f1dd868e92a612f256945196deedf3acf420b331b8730479b331825665256cf545655d7f45654577b248edc3e6d27a3d75c1d64a275be11ed971ba24a3c0788ffd94dfc0fac819b8c7cd83f32def7c006af72e13d80b3674fdabf0325c50c889ebc7402d3a7ac80f42f90e08e38e2223db927512b6e29c75f27674d3a5c4d122821263882c85052903c8752cf5a6e8765bb1128187219aa84aeebce06347414a429ff9f085bc63d72daa442bb01bb5600da7fc8f6913a368f8157a4fc7014a17a0c1ee9178e8440df2c5fc28cf4cfaffba471063b432f12da512e3439d807fdee0cb3650e0948f3b85615900768cc9fd410e3c2b856911af5a4b408c71d7f261fd3ea6b3b33741b4de14af708e1777284e5f69b0c46afc281fbb819ddba8780128ed3fc23e73ebc6ed4c20a615446e51397efa1599ca398a751b8095d3a6ebf622574a954b38b88cd2b207aae0b0fc7e52dc203c83bba318beb69407a848faf59dc189fd3e91845daa8b31e9d37aa8ff04ac71b8d0ff1a8cdac256bf20625b1c6bda81e34d936ab862ff116b979d492811a00bcd2f636a0e18d090c0b293d2af8cf5baeedf02e351c2601146fabd794b50bf3631927c3b3a7f241cef067204fc72fb216bf93bc12ede265a5ec15bc5fc9ff50916ff6f06ae4f14531f379b0aa9e042eb1971cc3ddb6c54ef8e9a4a4a707fc7d54c671105a04514dcd9e9792ab4ddfc7c8e9e2abaae2000bb7923d1dd0328ad33d6fc216be78d1cdf21d27850cd258804127db2c2c19453a5828c74efb237744d2825438c078df5fd20aa1e3b1121d199ca7130c8fcd30aed45975865b3ec4d9744ae8acc21af43f68492282e44c020c27f8e55cd20a18c5f2f8f74a6c857d979f1bac524a47a8b124f2e89d6fdb3d19a1b4a79d82a4223128217f2e93bf44ac5dceac1d5a2065cecdeb94ad2036f5a1a2b25f0b4e24f7ac1412c6a0f04b85154b194465e8a1f5e10399afca0ae72ebcce0152a2d909e263fa275ccd372316cc1250365c44155a6b8a63560f7f07d067e2f88aeab49f9b25a49d5e262a180b661d1f071b8cc7b984de1b836fad061d17cfcf9e301a24bfbb9f3da0a64f9155483a435c69f3dcca45de64b0547a47be2e22be82b863a6b523ccddf9b94324ac70f64e6eaac252c2ca1ea0655ca2d979fb9365265e5a18239ab6375763bda73596836f7c9f9a2f9724b4384c72d0e2b1a73d3a0774db956a2b06b8fb91a3587c6f59ffe78bc0ee7f6c1847770f6ad4605d2226011cf5a167995c722402c928f9058828e3c8b692a2e4931eea09de45e7487b372d5c569a7d11724f980a3f4afec5e69e2d25c2a60be48596fbd045ddd73c3eff7b22be5d3cb6ccf751ae0fddcabeeeef06121f19d760f3a0a5b9b2cc29c9ae983edee123ae5417ec399d0c7094d113eae410a79f3da13db0b2b56b92029ac6422bd4b674f73d943e035b3eef44bcb0a51fccc0f4e9c0af64a046b6f0647b3ed7b15c6152a96e26671c659fe73043706ded4f66875a6190c2c04045523a0c79d3b985e0bc57d12e4a21ec281118c7bcbd9362a6b36378b8286f2d1e97a7b0c6b2a102d5654faaf01c732bcf05abfea9a4fc1966299174957d72a473b2be6f7ef0d7be62ec2acea3cd3b9f7859e71e7f8989a76316776b2c2f99d1ac0d5d8429b674e44565e1fc44c0ff09a2cee47201c4a3ce04c6b67670479112f772a4d07e83994e4085456cb4ce42d7e459c27931ca6a39bf3fe039b487a6c825a3b591eaabb379adbde4fba9b91239bc889cbfeb917fa9745d6b6984b09ce2120544e4acdaedee8a205339a1bdd1adad2468c7dbfd7d3e69cc4446e33676178be0e550fb2661195637aafaac9ac12db6219507fb6e2e947b9798ee33c4e6671996add98736a1092757cd0a237d9a019d1234677a8127f68095ca8a8771c5a196e53833f01d7be75666538b4ec8787933821fdc9aab179aa4ce1ca8a60e09279da9633b33710020c4247b1a9abb56760847ccd8b1774ce7ae96f123828964f51823924a3e8dc725df4a514376d1603c633f1014ad1692732ddce5c6eb21881328903dd9fb18c2dc9b66f403520ac0e8e19a15c658b073bed41311aa13ed6d5e2ace95e9dfad9f1484d585302eed913d88cf1c11966d2459f45ebe170373f737abab226e279998146f0b8252add4b2791a7858b59e6044740bcc19c7bc8f3f10948c177c0d8e56fc805a1440f48f520501d6e9061d776eb754fa885d3df18d8137a6a35ee666e3747b3cacf8345f992880eda165d1f19956cf8ab0ba206e629d766c85ba951c4d80ce50cbe0137147da459fd23ebe2cab1c90e2f37e0b7f907be74987587b5b40c1f2818b79384bc7d00fbffdbcf9f0aa4470856fc97fd721ef417e8c0d317d1a73321928c99610ee9e8a06b0d119434c1bb8a75b56099450828003cdb88921876e21c5a92cbfeb4479a220b6b015b70c531dcf2f430aac0ca55283087cef56326f9521e1c2f45347b33f7b421bdedb8bd96f2a632933112616cdbacfbb0ebe713d05e61aa7ceada7c48653673e43426b2e66ef08468eaa454fee8ff7157189b57786bcd9e314a34a9fdcad017c91b5c5406c4ccad213a16a953bf658192704a417ea2078e0095127e963945e5cb2177ef7331bf0d443e9667f211e7f84d3bd8a049484f3d43098d3951c9a6ecf30efec3200e6ac21e3f7655d03d9ecdd52d296dfd660d23f9365cdd0609f8d5b72f256ff0faeaf0fdfff8f95b0a7615f449097d69a1c66a1c47dbd407e1e9a1c800ad5847e675b9aad21b3e946df367a405f0b1dc8c65fb570b3dfbf87f82ec1455aceea6326867b24cdf03bfa6549310ef54eb29ebb0ae12aad1f0efa36cc061827bf7394f92c7480b7b75bf9f7665c143cc7077e672459bf180d0e7aeae1c833a07926f8cd4848a53fe87cd27407f73ada43da6cee60cf040ec9f8bffd208bddb7e5571e5b295d46ecb278f60cb00e487075a39cd12c1d5a38cf4907b87f56cfd5fb62a57128b0194474bffa722b57395b5f6128b0a0ef071357b4ffc4931be74cfccd085091180128e620b476424d5ac83d55e1b2721fed7f1f7546e5d53128bd5a8a62dd030929a169b2ea935079eaa2f0d6f1490eb6b4f9e1ea531da663835eb0dc09cff8a7e7d8b7d6a57f43e97be4ad421a32cccc7a302e52b6a7e6365b59cac726308c0d60207deb3dbefca09dff43e6197294ff4d1b994cf1869923ac49594ece4a3e25891c9682b4814f6064f0ab9a6d11669fdf543a94a780deaac2cb6e337a68736698ed2092b7aa8d1c2e2604cae3d7f7f8b423f0f05836e497cc4862e202a7e44c7ced37abe87a724ee6e078e9bd882874620675fb1631c3006535f7f5e0785c30249cffaab775f612cb3875ff661068780114b15dfdfb2ae664621ba34be3614f3e0c0e02f9d66fdca239fdc0a0f971d640267efbcb92e96af88a36b1bb3c48c5246dffb19a4e2f25ffe8c9e2c3207f84751b8c22d4ff20e982baffc21c843f988c5a38ad55ee8d3754cad168bd9115a3ebd3b76c13fc07467350844ced1f1e3fa417f61b963f16c1e02b21a79fc7f41f79e1ba7e83ff8dc1e60f722986f7fa43472715c75fa8a1d43cc0d618e6c1c3b3ceda2f5dd7647bcf33d92389bd4df93e0ad8cc8668842ed499a3ed82d4c868492bf590ace8d997725bde2c6ccef2970ba256e6d5d0bbae959e999b2cb4feffc84addd7e187733da71b2b151f50c594d3965d012a91f3d98c62c43a5634c1b3e8c51219a5e4915aba8216f1713f32e39a98ae415ea9c0d931b030fa6967c08ff5bba49231811a573e0d5b71d30293b1fb6b0dc54206903b1a60c93a8adcac60b6ad7be2399b3f7e1f35bd54556c0f3f8ed172fc22f24306ae64eea35d5b8612a28aede534d8cab8833b2643479ecfe8907a4ba142828b5e14cbdea3fcd43bd8c44bd87f9b4553942ac010de7e781a200f8639d43e4194898dc9326adfff65077eb03a892fcf00ee237ea20261832e10ec473af970407161442408af8ac9c31537d25caa4575fb38a87fa053755a30197659e4ba8dcdb6921f1894140205d44612e17c64b73b8de6c0bcb8a71afcea325dc9d050d54ece1035c9470805997cc278d36b8148894334d77cd427d9125ce6fd62ac0e6acd64a076afaca3e29f49224b344f8f56f6a5c78a2ee0f21dcacc434fd6292351b1723ed1b093ad3c052254251f1bf39f1eefbe4ebba2ee020124999d77f4c13a5efae225c2dd228f4adb3fe84b24da0b8f101e44bb85ca1982758e140c99d03a1a01bc4f0d188e10d4adc5387611dd26807d44c826ba889f9d8aae7ba2c33b1e9f24187e9c9b4dfc2751dfa29195447bebc7e6d5b5af6fefc302652f2844c4cd9b6a37c7e947bd3a402b3b8790e7e48ec67be8e89dd0601b912f2dbb3a07e7c3a5b172bd712b571f71bcca69339b15003785d8816111ac6663e70ab17f215d4df598a5c79bd2093207da1c48f9430f33586bb83aa46b8d7f235b1481221151f24cc14d0de77d07c1858b684a974f2794526b73e78f631c7972dce46254ed4b774aac761ada74898fca5e5e23948a4365f4792e6d55cac6650098aac78eee76b0a265e3fff59f94519bbf2f71c98d965b44af09f67b7507f4e20f50c6c7bfcc271e332f8a2c3278f0281538a73dee307197082b0ab1d15724486e03a31b5b3d9f95bb74c4763a491acedea9f255eda6ab868f959c4d206eb4590da57c8514ba00d91d8be312b77e0758391c5a7fc35dc820de337409db3d69eaf1942397eec42fd620d45ada80549a82a795adb5c1fcf36d992ce26995e1989355faf9c3a8de1e515e275959d5df2c3861e07aa4768c895565be861ac9fce375f40351d139ebddbaa1ee97b65eef112513bcf9112083ba4997476af4e3b768711161890efdc0b05c0b7b179d8582fc52b7e131ee594550aae625fb472525a85e43562033480e5309a26f9b7dda2020beefc8c21d4d752bb2567bc25d6f9f0e7ce8eb956c75111b4c585694dc5f40dc87a0394e9c3fe2a0956417e4a9971dc63f041d18deac2f76da4335e89db9f94d6b0dfe552df44f0d2a27689bda096a562c9158635c4d483880023cec583717184a26846202fbf3eeb7210fba87c8bce8164dd54154c998dacdf44a6fa35ed0dcaa431dfa667881eeaa492a7071d1ea76df64573aeb42273897865cf667edd7c08f4929bd6423b38347107a11073267e44d06632822ae7a8eb2777be77dd6f5d7233f521b21ab10ab3d04aa5fa201b94ea26509f94121db227bd4da59057b322b3947cef01b2a6172543f58adc8cc07aaa1924afcdadd62b4227741ada368478dc59aa3e544958598da682912a47d40e91bd6700e55a41847adcda868c5d541cc7338d6dafa3aea3d330e4a8fea1f5ca6d58c1d3e874365d79166e82b815b9b9503981daebfbedf65453f865b1b8968a87db624e7d5737b58c5435dffa2125ca5eaccbcd1ea581acb9a23d87749fcab5d5ea925ecd4047cf0d6a478023247188ab37982a656c5c3f2f7a277056be2fc6869857ffc7f29ab967177ba1367833230139352803591ec7c3286ad5712e354be2bee4ca5ba216c31707f6a27afbacb6808d56e5a61e0a402ae2e2599dbef3f3a974f08141effaac98d96ba4e3af05229f955d541a12375b93ad7abdb769b3dd55a7e7f3d94d8773fd29253b3ad187e56f04abdab950468af6758ce049fc794c83c6979de59a867624228d38c38a30463087021ecf4894e478f323cd5f9051181212fc8568270058f0874a775b2b67cdbca52d7ce2a1845c3502469cbb3226704cde25bbfe2b830f63eac8642025c7ff0bdbf465c135369646e7dfce5209fc25df229e3f88fed6286a97a87d8108078eefba07bb3c7526ef3234ff0c414ca4a4bac36c472aefec631847a366b393d39737416e8e90bfb5f13e35ca9e4bc42020aedaf8bd5b2f3747675b07715977ceac847303e0d64e73d0700d804daa33fd48a8e603edd3cc28110b201f063abadfbc3758b92e17308f6e206f8bf71ee6ba76eb4f02a7c53c2e25d691a272823875f3a8c962272216eeb758a511a41631f94ff2d66da62572c2e2e90135af56014771021f7201b00066f244f6a5c2f0f0f773496eb0d1b76782bffd7ec1894a2e3f54eac0e85041a74670b616e42f652e8439076f79b12b19fce738d15a03b8e6c0810b0982a00bd6a51a8bbbf7aaa1bbe05770fef0ac3cde85ec5ef1a2621ba4ca95b9e6e4ce5fa3eb0a0e0fe800606b94c5d0d1f547826367692ba8d60a1844aca5bddea6219c0650ea81ec32619900587141298abead52b48287988a1d874941c76f605ba88103bb590c32be2bb311da4bd87cc971dc63c40402ee760cc5ddfa17b10922b71abe87200a68e5cd942906b63b94b5b809cf747704795d672aaec0c41088eb3b83f05695060273b883c2d7825dd2377d2fc26ec773122d16d7d2e81af7e2bbf446ea5d7e11bb51905afec776f94509feb2689573b5696bdba1d783d8babba35673281f33b747713525047178f3e035254de0afba54fe64ba538ec6e7846a41d013d8df624c5a5412c80f8b4e4d0ad3662030e1363d190d2686565bfb7fd014f2cd49635ed5355d9f287f1f89afc7be980cb451c28f5eba2e3afc5801a9ea0439f3376efb8b9442ddbfa1026cbf090cfa08e1fe083c7c01374d27fbfc0c768de98f5909162c067a10038328647bc3dde782321df041e778698deeb0f43f0650d167836e92b67e82e44c8dcf5ecec613a3d6cb1d5c86873e3078ca8a7c72edce353d1cb27b1e00c9516b081029bddb308a08fbe562ee01e46958dc6cd03bce8e5eca131cde75240f95b32a846ce7f166ae1584e8eb42d09076f87e113d172468283046a686e85b7a47736a2af3f86d1cca9c34d85d5509ce21146c0b7f484cf4963e4795ff260cc71ec861960f29118c3ba470fa0ebcf54cdc6b3e8f928eaed09d4059b451bce5900e721c4200c0095e9f989eaf9b0c4b446dfb8e28339b6eefe934e4b4070021b8dfc7e9595d849ebf6a1d17726e0224feba77fee954f9b6f6739709f10f59e73f16ed4617cacf6c58ee92ecfedccd4165d2447d29730a7e05149e67e2572ac73cb0ef5e858b4145b836b365065d9de669dc43d83739002b663eead919046c8508f85f3eed8bd96da03f2449d4d9fc5398d04729bb77c7c7eb7afaf602ac0c7cdcb7d3768105a0d0af79ce2fff24e743bff40a0a604837015ea72b57ff44f8e5e71a2e9f04870c4cd21acf425d5e93aa42b676106556b8cc6d30331d3499676da06409fd97414387ff642eb2f68df9a20cea2762b47faff11ef8877da350ede58f2095862beda89abac85eea4378659494b0e6b1452f96824fe5f33902900ddc4df13548755a04acdf3fd066c15554e173e4a828c95610c886852bca4016df579b7e22c08cb04a1acc43a5e657f11b18b4dd1a743a63acbbd4d4bffedafe11fa2db082f2aada50de70d8dbb71e7f68b66be382998143f8d0abd27ae603ac8a6223fd6a099ef045f949261cfef3184b7dadcc26bfd6d4b88185a175d6543ab2422b8171f62cf19b806870ffdc46ecf9ba66f728ab1366aaccdb2643a5abcd53401bab199363df60a22dbc45d3649f2f1e907b9982d4d01ac7180039d191ac7ab789b12df8a35bb30f3c8c12a3082c09888230d936e77360d51f5613f474b70eed4d8adb8a3f426dc1ec04a9d7133b10343a8621523f0cb7fad67cc08cf30184add62ed96637ebb5658ef08a76b21d4fa16845a451bb2419b5d58bf30ebcc4d7d1a169b6581e1a563050e3be7573a7b3fa96607b519088bc6069d7eced7b403eb95cc6f5698ab07324d1570c96a8a9dedb29cb823f855cf030dd3adf6b8761b1fdb2a2975249d2022df8fb9a27759d62e50a4e4b64043e448aee6aa620f4219b548a785dcb2c50ba8103bf6bb12540754d493dbfe9bc063b1cdf63729f83d5ab92ac712a79fa2ca227a22fdad927e3d5ec6a3badda5f1c1dabf814a7e51b1213a7aeda677c62f41e750fd4d0cc6acc6ac06e1386bbb4ca60ef1d06e86a5e5d8f099d59b266fc30794ec91f2febd566c80219ae7d989ded3ff755e1ba5f2409e6a8e51d9b0ee9e258c08dbdf28daea95fbb50f89a8cdb129bfb5e42e15d3131e8374059badc1f2bad98b1d41fa36819dd6fa88a43be0a836d9e0ba606cc4336343c92258366bcaa75f73f75449e30bd877ca03bb4d85d242cbd0a03f05ea53cae84c23cc5193d63ed3d3bdbcb3c83bcbc254161e20ac04baa462bba477f99a815efc7a9b237b446ca5c6da7359340a01d0cf0c72728a3a9b5563bde7913193c0a1bf7ea3ac89e079dc1851e2a8b69a31df0a3c13aa0ebb03eff3ccd59ae7925a5a7f7d7fe02acaa78eff8242f09144e622d774363f1005e27a7526fe3f6f58c6aea5c639b8298f68e2a1293f84a4cf4b144650ad3c341a6a635c0c97e7567fe190e86388bb3b435767f7cc37ea3ca33a535400e8bc1e47494b83ebf6dd3fcdb9842ed0499318a64c17e8f0a6f2e3fa979cb0268d06bc519a86b45ece168a3df27bcf31e5f88147b93cc123f3bf47fcc5b903bd2a5e664c1bb99821da8271ebb8bb99781ae54f5b9aa23c201f46ccf3acb8e034cdb76401a8ee519aec279b0b2839b72354abdfb834b5c777278ae4e3be4b44bc3f88d53a3f0ae3b87754943b89097a55315b11ac8d6cf1a91caa667fb8773c644523657771825db8195272a53b739a6f38ba01dfe91a0dffcba296b3ce6045bead63abf7fb03285613aa6fe14d617ad7e964631bcfcf798552b6d163466cb87bc1d736fde910fedf906190666edb7650567d8bb50c1ca926217dc7c4be8c4397e76153f2a316fcbce57ea2edbb8c7a743fe2a846ffdec1f11b86ba747ff6b9287c04a688bac4d37d1d7ed62223e964d4d95f5ce550428914d7f3b52fb82cb07be81ae2e4f1b4336ca508a68304b7644efb060acfa9c017301196f2f7422cd3dbaca3f8a04c1d45a4fd54f667c89ca0aacc160cccb454474b8f902271697a590f4c69cfcadfe80ceb009ea3e0bc8fa4ebf7e4a12d6a39890ffc69c4f0823dca232eeb2eddca6df400fba9281d2ebebdd7b02467449a850a3136c9f0b123893ea8d1342e12dbec0e0fe3002eb3d8530fdc2021658f481aef2b8cec7f879a13f5ffa2ae28488a91707f1409d7ccfffb67cd987c361e0bbfc4e739db88f539255c6247c1712ed612f7d5ceec4c1aada7643c41c45031972791300f14159df09ce0a3b0c0d2efb7d96f8278fdf0171c401d3c073022e1c0bfce796ce9097191fba7a7dc7bf952e2c3875fcf431779f017cfe82643eb781596f531cfd86d1fa0b9ab505eeb13ef12d92208ec8de0f3c04875f25496d91716fdd060ac514e4d87795a832fef959d31ca64c54bbc07a7d25b85841beef9b435dec080145eb0aaf2bd98dfc5aceb5882f915e7750347de8320c0baeee5983fbf71ee44d68c977d22de351f415346c90f2631c5dcc9b7faf48422f901fe02f3b7d3487af2e7705ad542cbce3c8598fdb488e3ad0a35482526a73262674c3dca3675ab8f24d51cb3292a6e688fe81ffa6a6c2ed8fd4826fe3694400e55beb2a5dd059cfba299c275dd565de4b3f0e47c8a8f18a1d65dcf40aec2eb9067b47bf776070a52279a73f644790c207e46813c33a80ec1b17dbd13612d50dbd446805dd2867f627ab758def107facb5ba3f9e92a23c80638fcb892fd0a3506594a7832b9ac1cc872b6a64581047ea590f95fba376ce00ce97ed2701c50f7bce72a82de536a168379b0af4885e3334a16e2f899a6b990809f1ec58ba16af8fe745e03b16bf09ffa09bbc3c06b62232a49cc4be79728945ad081e54efb2d918c9380dd61c0027a8b2d42925dcf261ef5bf54fbaa82995b038bd41efd381e56cc0a0754dc2daf799a5fbd5318b5b7b9bfb89bd0ecb317b0adc3dd5f115e44b2b0efde6619a873db923164178a26dfdfff70938c19a04bcc55e94f3c9646217b91e0a4f5c0f6ddc0969c5574eb038f5489091f44cf42cbe9bb16608540e60f8f7b79f30898596e4c9d37af4025932b8c9c0b3f27dda7589065c800cccf834945b11efd26050e0c4cf9ca488c1b19d6456898c3c53c0b32b5c5bd907221c26092a7b41c3780db395c3227a86c568e5212fbd8b295e919de4fb6ff6c7129bf3da3002e224025c2d51bd57edf01beb11730f8d01897b213fc55dfb42afa461aa165e165cb4affb31a7f6f67bbef56745b0db41531c29da6ba8b98c1600240f73d2dd1b2f76c49382f0f82ca2527463153176e60342b32b33a2a70f9535306915c996fd690822c32fa9c9d16442a5adc863775896e457204e765a16e5b5f866e332de4c797acac55651fd4707e2325be2c81a227221eec904d434ee27f7c864e35882c27b2ca6cd8395be982c38c1b83246cbc8fe547377e1a78330ea9487be33f0f1640108e1e198f13eff4c882d07f623a10256981245587db4f627e209c4b43025423264bed6e1ca16bea0ff50f7d8d222d33254dceda3597685633137c7c3734e2f0cb0104f008624ff4da01916864f45c308ebc8de1691bfc62ddc1b99e88de87a812f520a0639e370dad2ce5874280ab1bd81ed14f4b3bd8e690aeff0e1e68a1348566e597d5226a6dc54713c0b38037f02102cb2bfb8557513ccff51bea53aab1509accdd6440314a5fc8fd322ee6891544216a7e67a27bbd0d2221576631aec701ae8b343fcac1d61d758ef965ebe325c7e413a2858f3bd552f2351e7da151369fb7d17f9fdd27062809e34707bc8830d058a25d205eaddfc87b148ea84d65dbd2d2851159e358b9c021f88968849dbeb7e0e6ed8b0ae90f6cca81b442616e768b993d6d6732632388d23b992d423c7067d72cf9ae6ae372208eebc87e3f52d40b03238bcd5c69137d98fbe545921f39927d1da2dac5971f4a8737b934803249eb41d69bc8a92dd864b139c4f85b396511fb0f182d6bda14477f5785ba8193a644f69c4e0d5745f0d0ea7f5573e3799ac3655462dcef3bda0876b4d65624ef73d08c88acc84d1e3ac2e3e02804410f109e94154da080724aa039842ed97533e8811880ac7f5c2bb5b7ed62c14f962b188acaa9e93021aa7daef5fd5cc3076a20c240f0e31749b7a782b87528900554f74041d9a379b29040bb06d8ce377575f17c5a01c936d4f290d0fb8684bdf1e0f0be7eb8ed7a4fe33b65ecc8d3c9d772df37f20f3c343aa7c3ae183fc2356c75425d5550b33801326b1b14e85ba7de63bc13a8b58890aed195f5b22501731c1f35d50c4e43979ac66b2c091af449e96aafceb77c1167e9fc76ad5d8a7ba54fa2f550fa4b84274fcfa350c3a38326293b7ec7da4c2e70aabe885a2930cc8e56829171f8d778d2e656af18cf95b7726e60d56f0bc06582eceb1d6d9cb698fe78749e900120a859da4ed5c65af61ef533f2130e20c8cc84ef14e4aa3ab08dbff0f372310f54bc03c361bf7985d6f7e1c8349a9c11c0c355543690bf877957e185dd36b5a6442b13907353f3273a636c94d69b62fe5c48ea76628c9179625f7e054dc7727e25fde6f611c49f3ef049f7240a3352de06b1f5881b492d21bea5ed2cab2df4598d2097a61760c3cbe41a9e6644b154ed5222c7eb98a5d543eda099f05fd5a72e23a733b5f2c8beed3b23980951f918ac4feec4745e2576ebd87a78b06d8c3bd8c28e5e908d8acef9d1173aab7f32183f246127853bf9cc8456cb98a2ea03aa92a53537c98cf653eea2807589325859c0f138834416371914e1448a6948cd87226e4755a73e803bc2627e1239235b2f90d5dd4609d971b7dce75ee64fb327d315a09c918408ff6e5dedfa87e1ded388ce3454c1b8a65c44afb4ce8598143452c05a3d531758a0005d79a96da796083bf06536f9127652050695d262d627539f891c01319037b79f2706f4e597f8045239519925d64fc5be2e24a376218f492154457be474fffebaa2fe8d187c2b263c3c8e323ce5ac225c0d4040d3326fc5021beecb4091cb848315c7f2a2ce4c615079bd87f90b777f89fc5ef0e9b2953eaef7b9b3c43be1fb6d70300919f525287949c3a31047ca885147b4d3c26276e2c29560cbf66069c43cf6bddb2fbf831d8972eed827883815118ef5f312029af7c3a0f3e0b67f2f92c6f61062106cafe0690cf6ec2dd4cc0741a24ef4f40d76a06b5736fb81883966ac4c75b14f1447246ba9cf815cd81ca936abfc78357aa6a4e9c049da860cb519fa9858ea96c1281d4b3b1950b2b242b11609f0a93381a15bfc3289f6996f894f084dbbe6042e35a974eda5cabf07bcba26d293133a9eeccd1853e71a26f8f9be1d6ece0f4c8e99aa8b99b74b124c0bee81e3944b8bb1d26b86c5ba8c87e1f37e6e53089d42a67988ade11cbc9f549ec12e58edc77dd44ae0b094dc8a16ac0c89ec80dd152d99d37b9bcd75eb01913c7d2533ee0ac012a3933a51df085883ab0e8f42ac812b0d7aab9aa9d53707903c380c6d388baa885c40d2de611e1788f08dc7c949998d949527cc18129c1cfc71005231abe1c3e24b753e6716ee105e8977b5609d003e6e5b5fb9edd95e0b14ed9a76a5172bd06c61df289809bacc8fa9aebd688701e06990c6905bf6545c45c100803733e0dba630aec4ec83f40be896eda1baf2120dc9e161ab1323b78aaadf3ddbedaa7e6372464d3380d3d971aa1d783dd461b7b02228c7a22bd9caca0689740e5b65f155c6fcee2372b2cda28a925efba1566d7f122b0e224f13d262e464b73e86b2aaa4d46a1320c285debdd900a84cd7fd8782e1b87d59586798a5ee4bc270f319093a9514cae9cbe37b17b9b7c700c4bdd73a0433b6a7cf635b2babc1301c276d538b56bf456f46ab7b017c660885fa917b092a427252b7c1c9ef10e21f472aa9ad5ee84ff6a4b6821f30be55ec3b112e101ced3268d00ecd67b93b7ca6fec2ea72c5958b63be64b9f97e3ed0e0f1da0e4515f454eefe57af185137606de86723daa2be4f8c4cfdb182c78750e92e7f1dde390f9e1c85883b8ef2ab026473a7890934dcf48546d6ed64f2237de87194c70d60a67ce045f81d4e85d196fb9e47a7a123723ab4b17a6787d0e05a7be418beacbbdf261878282fb22c5083da8c7939e3dbd65736688f02e57cf965dfb948912e964e9d9c1b49ce72ac803c4235377f246353c168997cb4c6f63b6c69f7db8bf981e9efab0e2c12a72b9fff8c6b391c2e1ada9f9a712f565f744e580fc7aea67f898e9d7491c3493f2aeccd9184182ce23459dcfde1cb82ca5c646d6b80e02d76582c4ddcf022159437273a401815cfcf091b02fe5035f61b58f76c057c3a971fcdc81e7cf4bb13551fe6679e0dbe1aa02c908b8b7dfe2043263e884438ee5ad31fe387bd10b3247ed1cba7f08936d83c3b55167291baba60b5baefdb934c2e4a131ce6705aacd6b833443f93bc63b90271b62da5e0234a258c7715b450df9d39419fc164bfdfb21f618755cd036ff67850c9a2b70dbcf8bf3772b5c49a557e2baac45e7e6fa5657eea0ead282104031a95609e699c95384f95e153941b4acf8675ec06b9d20ede84eb091f1f63bf0ff34a7d8897c957039f3667e263dbceca3688073ed2f6d7edd50fdb520f4b2e58fcc3d6df919c9109ebbacf417b7649f0fb8e077ab12a5ad5f25eaafbf46fe84ffd2a2c55c75d7b7a860ec87ccfc0c5e993a061e50834c9bfba15eef19a13df1263fa30967e1d745f3583ef7dfa165c9bde8a84d5ae2e41cfae44019ae28c966634a6179cff029798707ea2f2e4a590557e8a3c95f7d23649a13cb1d3b680aea6ddf24193cac65a6bff5ed682c9bc21b258cd20eddb78e0b6cdc5f9c74e634f84cf7794b4de168c0d46ffc366653d51843add2c402fabba5737f49fd9078af67d276912d7a51f42c90ed0d03da82d279461f23f0793158af4c548dbda8d009eb379bac0b985a8207672294a2a55ce8d2c1e102af7e9f0f2eba1dc33ded98400c0c38bd3ee6b0eab3c4968e933a3ea0bb3231fc5043a577f5b0f451ce7b4ec3c21cb1dd3431712f89d5ffe9fbda2c59af7160f1467375742c532d73fca831d8dbf1ec7acc7b13ff9aa4ae772a88f5e5556e1d93850303da58e61a7be230ac460a2cced71787bdaf73019536ecff674d6549cc438aa6dd23601346a0129f019cacb307cbb57ebb53c86f2a72dedd53609a9850664be275334402e80e78ae678279c63ec1167246b2bf4065fc3de97c4462ff41599cbe5f0a4c9899b3da18d3b692bd35351cca8775919255583a798979a18b297ac73df271f8c63293f1fed91227ce14d222a094cb230ffcdcbfe7027add558500b941923335199b26456aeaa8f086d2d86f5293f889fb808fca8ad5e8a561ae4f86908b3ecbb9b379f5d22ce9ebc71418eb5403ef3d5a553f8a54ef5f82b77d4417de8e5f2ded6977ec7989c80e8d7ae98f695fc070970b86a79afff46c708350ca09c139d48c051def15339afedba992fb888ce8a669ef7631bf5dee2fc344f5a6c449a62ce7317b8e125234ba782854dcbffa476b29dd5be167cc4e33252ff16cbb3c0ccfc67bc4022f128a73318e13b687e1f83aabb19f0c97d74ec0611a81b4973db2490f956bb06e08d045ad7dfbafe7deaea463ee1cfe3db411717de54fd2e6438165caaa6ea00b4f46f707c73c5fcf7db0670aeca4dcb85ac2414e45bddb7162c5ea0bf3f6f965837afbb65fb69b31023b03ec03204ae66e09a6a946f106cac0d0e16e11eb7a38b1ba4e8deb2d367f85370a5730da8567713f00cd3ac00b637f583b9ae645918ee4ff25411e5523d861c597ded84367e83c6dd9851fdfccb2ff861c38cbef494824119011df933e628ba2594d6a59a9509c2a9253b8a6542897fb1bff798f801656f9960415bd33ff8f02b363746f5d386065b3a79cf47a13a8b56062a4e9e56d18bb45ac16b752d02c0eec984f923dd204fd5446230b169941d1634f65340b6d33d786e677c9706d44478da7f9651c8de6a837833d871a9b695be1048b805c018c83b6e033ca986d331575778d0bd10d1fce31a3d299b403cc2c8613a50615157cfa6960e44428517d0cd9f7f8058ff406fb68f1681982e7d0ba6b247636fe2f906260c5aaad8dd59d6e92d9f448e0d055bc8f0d1433072667de751b56026b37867648af82e8a0d07541129afee53993a3ea57fb35cb72c3676fa63a5e586d3f0629cc67265e30604880260e9537c4950618eb720a4b0d65e9ffe82f13588750268873669f17c8362b1c96b8825c4ea328ff50ed36caedec18b315d020056f232ff94c8893c02eeddb3553cf8f4df4798db46eb0ff13984917c5d5d0c0019bdbcf767d7a3ee05acc029a4305885b5fae4c8d13e63357447e9efc2e544fdbf00094cca7ed2d08e1d7a6da56c09acd9a3da14da043e4a7bfc7372cfe4acfe6df110407f390986d3c3246a098ff0cdac835cabb88091b9016c02b2e3c03ef0ce6b9b1a949e5aa513064f14317494e177927cf86b4276b997aa62ff794b44edd81d33297c02e8842b7590984f88c316e5c321cc42dd348889d993aa174edc2b2ec865624246989569ca3edd056c4d6134f03f3f681a29fff4e0924ed5b361e2e77e59754c250d1cebdcf218f3fdc3a5403d581f10583b17af0f2dab3f7ecbb4a96d5675e795f0d7aefe66bdccdfc95a74feb429fac7b62f71945e10b7ba0e57141416eb40b72d7f07974b76c1770cc5c20b5202e1ed0cdd766506f6eb05f02c59d7e709f81e313fe7b460860c723ca98f85dff68dde3dba1cfc74f7ce86e7bb6c91b8c274ead18ff5857342673f086110f9bfd03d0e7d0efb1cbaeba93d185dc9b47c56f7c3629bc567d4821a9ef934b1f2ce8550203cac2c004c5878e5206f6b97e2de4aefb950759526e556873e040387bf2d848555a2d01c01b8d26e437959e0e4300f2b392b9e45323ab6567da57d845a165f09631cb7e8d598bb7d6c0719392ad6e93880d420d7826a477aa3c1ae1b84642006f2662b269219ac005dd18b56b7bfccc69ff8bb117a0a3b27ff55a965e4939a362444f41273cb74eb726172909fc56cf312f0d64343f005a54649e00b887c178d17610fb767e19de7ae7bd4b36faa723708391121c3ab4ac43fda292ed3530182c8169345614e6918f8dfaaf1797c69262b2d158fefc4df31c3162c3c1e4d8799b4038bec34eda2666ec06e6922be38e3f217687557bc4623575f04ae67c43b7bec76062d97a22a21a91c9b0ddb012db5b6765f2aaab6e0632780aed01cff167261fcde95c6680e73af842694717dc0a743b70723ef702109cc29a853a1099646b97bc04f4c31dbf3b7d67c591cdccae9a84dee67483549a4111b960e27fd52a535fc62c71c197d59a0739df7368f4043dda0b84db931326a8485a15a06b239c3e4f82b9926442ed24f3065a9e7546319913fb60999dd9eb60c43e1fb70b64e6b7aa9c75ecebbf67af62e97cd52326772e7e354a22b4cf0538d499bf2dbf5672d7e07fa15aac8f07d0e9ee854f9578cb052eaf4f8abeb821fccaa8bed927d355a6719547bb8d3525b660e9883a1eb372d2e0a55cd78d2a2154979bdedf0b316e1c3fdda7c40c44854810d96f5fddbee340703bd5dbc3c3dbf9d9d7766107df762a69377c382f511be99a985e09f3e6b9a4e0ec9bf1f09f1921b9af97af9131b2f78dc834344b58354adb5cbf007720a655babd958b0d46e9d33864ecc2a54b1cb48f53ad5df52194173153d7e320388e502ff7a19dbe224ed1c0b5f27bf5061b13b47d1a845e0e80620a0a36671b69b1036265e337bf1be64c2ea2eaea34e3621ad7896056340333aad6ed31968dd9ec100f88dfee543d57d90f83e299ea660a748e34dcc05060ec33c5c8f61b30e77f73bfc61bf3cf28fad44eb2fcb6159fb81cf2ca3329054e82793031fbf1b0a51ce392bb8d3ea191c61701e05ba512b9e4ff447ca4b9793b38a5adaef8eb5881466a9795804f003c317f20f3ba4ea8371b82f811c6187f34917ef24892eec8e49554a47dac23dbca375985c23c312064f10ea3f095d109ee9ecf80607c41144115ce884db5d8b9cc1fe4e98d988c73869cd5e8016fa30fdb27ffe6728bec16140f9a551ece3f0d4dd4b18f5f2607d9ce4a63321fcb7abbb06a2bf7e7b34b2816975bffc08ece4d2960683903dfc0dd169918a77fb76ca203278495883fa2710598a36e32b35da6fb83ee12d0bdedfb7fffaffb69490d555ee70e2b7669bf045aa72e49139badbf64078bddafb1dcd2a2245606878da328d4166b6a7637410996ab0328fb8685fad0a0db5a4e676b04c9f43c42f1b376d940ee50d2462b2f4b92035208b73fcdf81012754ea262d1fb74b4f46a7462481d9960e4d168ad83d6cf427f0228ac023e0b8d243678bac4dce75aa2afb114784cebbc22a6838476884126ad99721b620c3288c868a4ed862a60e60ca492dccb9241b6f03636c72df301ca28f0de79961cc54f2fd7dd0b8b72acb3b3c2be31e460ace854eda9f674a67575b181ba7eafd8063680348e05f63f0a0a6b28ed511317b80f28211f0d175f7e223d4f5eb0a22a579ba631a673d6ec344152ff053782210bb112f5082f508525cf0d12e08e96fcf58eb5e2102e896991de690464a37dca024efc781a20f73c9b1fec2511ee1d193d92cdf2d2c1023595c015a4a6687ec0f59968e83c74e4553c3c343f2d41575c1a9b7178329c8d83a5c2fd5f252495d1ad8dd6119fba208f3203ecfe78a1e75b1752e9a00da6b7b4a5eae06767713e55b4c85dcb5eeaaecf912365a5290aeea0c69a28ad901b93b97a614a7b70bcda42a8392e55f3ca2ee0fff6c1543524de66bef66308626f2219544b4740b25ec9856be09ea620048134e1bc63ad02caf3b7781607e174104ee6a5d8e685816e59de528d842080c0b54e84231501924262add0dd6d076c43525bd05a305f328454f34c03dd00a840f437cbd5436b6217c634cfa670d0c33b08f58314d0f80c69c6666f0dfb004a780f207e57b4df97167a4cd6a6cabafc1984b707a593a9dfce34d52b44191960fb7f624f42ab923351df2ef621d53128fd0ec842b8e38a1f7cc65dfde128fd1f8969efb1ae18e7e5370cbe22609f953bd99226d3f5e644b624d442776304d2177eefa5b40d404d31fddd663f829d7c15b632871d737a99aa7a319e942c2ae1f316ed8899d458614324785b6b120d44dce44d0b04ff1f24216710b1cf708095e6eff6bb44ff6727e021c876d092511a0b61c0bdc5451bc58e0f7c6032c22da238a444c8632ab9087498b388e9f75ad3b96b0a2add6080c591d4a8934f882992ef6e6dab3ab4fb6b7696c7fbebcf3e96a89acae8d852133728d150cc015097b1d87dc37dcc307800c43b316ef8c8c7e94fac39aa111565e78fa64a4a19cd5255a0689c115e496e45a7668b411168108222a8be6c27e2960b49d339de636d2fd3571dd08d59bc2bb9fb44ad7b5d131543cd13a8b7ee4ae5fbaff53f526b44bfca2d541e011a8a084ca130cca873201a7bbed68a8767f59d3c531fc55e0067990afbaca3847f0caf0db541b40a81f818c0614f3f7986775e329221559c3036f4a4975ac32af089be161e828a13d2fe779a0a70d5e24c807cf1c4512386529605ca172ccdde14f78cea7e1d162860204165065748822540158f003a8bb1f4e189befca643c54df28c19d2120d8ed5cc98917410add87f35586315c51aceb0ffb89d5d201212650ba5f4f945898a3ca7410ef079583ab48fef1e8d1d6f009ec68c88694a914e08f9193ced2333e52cdf58ab4ee73564013b8188595c2b4f03ed67bc7f9e0f1b5904d70950b0bb12152844b07457bf24b3bd94f9fce905fd94852bcf7dd48bd2dcb7a49d49fc0db07986a41b7e952529e85d0e095708d02ce50c96121dec237fc5f5a9f2a49b164fa2dd2ef3d918e7f9104e8f2f753e012d423741d5984d975d23534af9f39f705e89f30f4b1a37a98ba8853230cb859dde733ea8f9b42f8311fc838b793acae9ced96413b4641170a7f2a3beb3b264d7380e51deeaa3d36c47ddc3b6f83e70a727ff4498fd0da01252bfac39d1365b56b9f9ffc50ed68ca8165f06c119899afbefe28094e5f509ceba245bc741bb1e30786293f053e66b7433008a828c33e1b540cb3985627a3a9943031b32e32ad66bda3d386f5347abed7606f656d1ab6e48d2be3e8cc514832ac38d44bb4de05e8b68d75f6ca1293aa3000a683d42de083e2bb8c403a591effff1055e1bc2c441f363ed420e484eac80363ec43fc691f10b135ca6768f450d21da642478ab69cba000e13dff63add6ace1a3356ef3c5ec213a3e09f60221e7dc5e33618caa1edc4f1e87502e2025fb066a8191cc38d917abea4c4d984814b0054c3e4642eac4b9acadb46d6ccd73b2681fd66bd4f9f4cc692d0e45125207574e50a7e123cc04ce50235c2b6fec1081128feb4f5e1aeee57a2ea2b6e35fe1b39779fd0af9db3b8dfdf62ce9118712083200ea16b79fabe523f453c6fe51d210bb9b98b14d71f6c6346785b77d71bd70db19dfbeb5945b7e989330fbaa581147df6e3002b95cf8c6251dbe2448e0240d57300770bf077e0d2c363d35a4a6bfadac0beab415d86b67356a3c157392beccc039f2b920e0f96d3738db6c797549daec5ca302662b03ea179f2bf1b117bf79f20fa8d26d4a361beb3b1cb34fba27f3b83ed0f4faa0a00efe05eb00e0b746b65437982361ae3c9bacb1d45b19d7dbb4c13b5bab0505e8b79d4b3d87337b1050b033b3d44b00b336761fb0d920d6d286897c756bba8b421f7d7535fbb57b0494d3fd97e6861a98dfa6878f0f59eb86e819106c646d9e69af8ff2e6ea3b6de72a37177c323a5f0f62c26034c68491bf4efefcbed1d8d610ade9bbf5c974ae803de132166dbad875ec923fd71b91f03bfe3d55aefa3a747ac0a502de5d17d3fa85bb56746b21e3e5b022e2abe70760e6ebe3e433a3b4bb3eeb2c9bacbd10be417361ca301ef0c65a6f20e0323b1192d4e159b0765dc24e18a7bfe289d017e929172cd21a1883a2aeba5ad08432283fa7fdbcfdaa94f4d4c3db53812a004f07c1c9eb57950d0ee44a4b8362e26f683ba88fb9090067b155ac07ffe577debcb8c7428c701a107a58e8d0c99cc14b929f77cc8dddb1c85690b3b676b8830317ed14c06fff61b1d57def9d267f666d36ff76060a3fadc9ae1af4d37f5d1fd76f9c5eed2c60242fdc8f16790d16c182b39e05abd94e7907912a162532172373080438611dc6feceacd3e306ff2ec91dae04f0f8bfcc4ee87d578139879f50d095ddd712d7a564e8897e28b685b63220acaa5fab4dda7ffac84b98fde27326e7aa85e4cb1ec0da93ff06c260e82241034f7ceaece67eedf9c6f59ddfc52c7462414f62a27b72d2b4fbe9794c8cf767c5102c4075a186221310cc21a4409edff4c1312b12079f3aab1c878ea2d6bd4fa658580ebd695addc44037cf68e6e64076838480138d590b094fd1d7492023f8554495d9e5bcdc378d0f5bf74094ce8e4992ac1bdb236c19a94b33ed9aacbba4a7c829a8e0437a22d5bb0d06fad7b7cf7682a8c776627343304b246a71758f653ef7676b20bddf69886448ff874341d55a37a03b1ee443ce442a4205d677766dfe9887b15fe8bc2a96f3f0444f105a44b1946f75d248976f82da5c3fb288cf177d10f261482a1ec94fb5ad3287027e94a70aad59892075615da786ac3836275bcc6c29491dc976fca349db0660860b534639439e0ce3ffdeb0189f18e019d35c4a88b32b66ccb3ee227007c5858cb93712a797f78648e0b9116e7d85ea588cd948459138ecd37ef17b68675b6170d459ecda2885830503f32d7d925e994ec12ef949f13d7209ce3b72ca92436fe832404e4e73fa537ac44de7d110d7c6371b126ee03e7b452f1bbaad965942cb9002c7f670ee49add37eea0b3a7492a7d568cbb9fd91b1fef89236fc1869b4d0266214460b935a0fd1d4d806237b4babb0c6d5b153c9ac6645b01433babe0808ca9d5e923c4f82c122036bfec8b3c41a83c029561ea630008d203d8acbb6abca6a7526e67351f2d17e6335e1ec38de501af54ae06d0cbef3bb8ecebfea496a95a911b5bb626a543e59798bc149efa8fa27aaff0bc2047cf42ff9f29f05793b7b49a8613016ec5d76102c74df82538b839c6ef23184a51ab08e568a629b0cf4d031df2a59769043cbca5c856ca3e425b30771c7159377bf570bab053c51b7acee335254e08221aea0482eae3b22a9c2b4805bb0335502e3bb3cf3c0add2f4216f0ad219787556fd526abe88dd72434e8599292cbf95767a52ee365e2dd263f717b37929fd2852c66f2555dd3523f64d032742d3a449f60d41488304d164432b1dcedfed8a535406684d265aa3b3307f4d717e5c95e4b2df08ddd697969e8639f379c6023f15112fe1319751bd3544b68c012bb460c8b3cdd81427c8e213c39b6fbe762c75a8d86dcd19ce64123a9b804b0f46455d74076c0f2559d318998cd3ccc347b9222e5e08ed1592435b93b1c739a3e83407fa661a8d48891f1b4e29bce76192a0a31cd179003f0a8b1f6ef10f81d78981e790d084e732a1bc75dbdc08da0425b967dda5625a7718e0055234fe1a4892a9790818b0c5d4f9f94ce0ec66ae6e92ac4da00df362283f3032737f16d3db62a890810011201edfe067e67ae217bbcf5b59b06e6dffb285a101025976dcf8ed7997e83b5633174ba495204e17c0bd65aa57c80206d106429f569a1bd9054193687debfaab9650a43796611205a71acd31b6f814e21f82f2b74755f7ff8575ea5cbf36ff4bc608c2f8ffe676fc310c88ca54e23db93df10c430277c4c46a71fbadb06300e08f615cdb753a0e7b72a7d7376f6fab044c99fc1997e0a9120e83d21144ff634d966375ce7d0501aab1a3fc3e74e7e7144f6c34724f4dfda5581ddee12ed3423e87f4927c1eff3ed7084e58a5bb9829ad7be961f4500ff95fd4fb1096f51e3ad42750d8dac97b48fe1aec4f015a7e292c059bfdbc0260b56dcd61aa9e2550b43df18266a0d24ae1e324248b8eec10fe91bcb69ece15c3cd5424426429c44cc1521f18cea7b64e3ab4b2c4e2289622ec33e36a6087a15a69cd7779c417d36a1988a174bb97bcbfde6fb51c19199212aab8e54841b6379dc1ee012d2a02b1a0e4ad2a90c511a21321d83986f160cc53fabb3c20d0b1dfbeae54f82b2296bce6fa353aa1a4f9d26a6911eabbb402909609bcb1180714c987f4c88ef8ee1e2c1895f7565a3fe7ea7c19f697414f9a99d5c2c2f7801c39dd6f602b1f7ece6e81a7d06d110cf941928a4053cb4a6d30e4ed97e8fd06ca2475c6f9ead3ab7ffefd30966364b5150e72c360db4894f841aefd4c9b1d45d7c72322132d62cebe87ae710275231e98d29cdad544886f311119177606e4cba9f626e61367b9216d73822cec213158fa2ab9fe62ae866e0290ba91e42efdde23218d11ba0d35f61509a60b6b2f94febbafaedfe6705ef7c446a27ba876d575c41db0e684e1eb573eb69443108f9a4ca301d616d1b642f9da812ebad59337864803838dd821ea3b2e689001bacca7c853dc39150004e4ef9392267d403bd1e9bdfa00d19de333b2a4fb46d7a3db3fd3648e153314af375fc54d2ab39799043928b19c784d1165014fa59841c6fd8a0ecdc8da4b25ab8b9b3d3aab01be88d4de10057c4d02504dadeb1982c4a687dbb627ed30cda71f1b8279f4c59a8f4ea66419891ad935d936ff27abef59784028fcdea244b3340a382ce74748d6ea8443dee1f641282fb84767207ac9f771e3cbc34d38b604fc52f368dd24d1271c46d32b95f9887d487f3d97cae1c539b406e1fa59689aff1929f3a8584548cf7c5103a69b3bbf014c1b1f0babc9389cb89d978670822463033e69674af83e66ac0fadad456f14713841d51217754a3aad8d7f2bb4603e6c98c53e95e5e64ac3ba55a84bbff6e9e484314f4ad0d10a5683b754647281832a5eb8505cb35e938b05e7ec7ef7d290546591129b8b6d624709d2f684c25158f76372ebfe715ddaf740865d8db684831716d0a3dca876b53d9e8aba5ad62038845bd5a266b9fdc66962418868f1d6fe645561efb145105bcaf959f9a1ce2467cb438c2086994f9fba6ccc3b7bab6577daa05b9d25cc55b40c562ab0d5a1fad5c7bcfe1240530f028e37c19f3ad8876a92c65aac115109413fd06223da0556fb36e71c4dfc0ec1ede041ce659b9b88e6fa69ffb14c93ea1d18837013f500394b3aec8d989ab728cbaff0abab63887235c809166bd778172b35af15f5b9850c7c07420b6d513f151fca3389573ff28c2bc330046c430d6a0e4887caa97fce5694a9785ac069812ae7fd8abe752d26164967f065649bca306b666dacd359b7e0a5662825912f32cf47e812d1b394f8a9d38ca960d39435ff49cf01eb45ced11a383ccf74ff64444b8ffb9d8cf482075db3a1bd3754174a465f22490bb812595add90937de047f3681a2704b2644c5245110de30ec0c75a667c829ddc59661776666f7a3f276187a6093e436706bf3caabe9355d0bd1ad55b5df8589728243f3b0745092338285c9b92e8dc7f839724473b4914412e3c7b92ce50cf24247064a13e688ac6ab534361cc434dab7e537a2ed571dcfbe741b6ee6ded95b633da5aedccc9ebc9b956ad74c000605640c13fc1b0c349d3f62707d1f79d0f4f32d80a52fe6bd68d4f0c031ad1706ae0f340787c3a7b0c77e0b06d9b66ee2a8af0b7976ad08550db7848b29d17652af0317ce1ec887a582d0b2788a45cb2dda99d69f3677e16ee7df159eb36f35701913e172f5fe76a0bc9730d6cd514cf724604d3cb2bf16261c4d7dd34c3ab1cf3beccf41e474e3ab9423c3929d0440afe4dc5009bf1b2df8c73ab498de141dcd6ae35d7c11121de4ceba2a140824daf1d03d61b4557bef94710769e03ff2219b088fb499848df9c4f35c325790524ccc6403779bff1d77ef938017412cd5a62b1a2c1ddd897bfb37e7a2021eb6f8fb5833476e8682217008a334fe23e974d0e95b49ddfc9745eefe1bafe13becc51fa4fc2a2ed5aacb9c40777a2e8b816286e450d4545c7147c84903dfddcde0c26d713968eafbc02cd972aaac4efe3b61982c5f14ca32223b9b0025357eb18e6a8c9a1cef47fe8866f3d0702b59a577ff1ba7acb4a71390185f10d0264d028d571caabb798dc50ee5172f77341fd066fac85e82397bda581fef3cd3ef57ab489018f37a022485e571b90b7e9507c636522d1f51097ebcec6f585c6077a2b582ce6df9f0462c1c3a22c26de30d21a4a030210264121df3f2c2e904f082628517ab2c3ec75557f3aff2e4267e2e3b23a062ec3933027597dc2ba7e8417f1af023d44e9cc2ab33e8f58a3070f1cb4be22094833c44f7b3aac1df491c2f819c5ccf2601df6c419c19b4f04b3511bc05271105363643b457cec8922e10ea71e8141b663c172e74c39c326863299e59698ad2ee6ae04cb0d07795ffa621fe91e2dcd5babd78f6b5270c333819e6533ed638ee2f5d325ec60c6539bb477c201f726570a41deee9a736a1e2e7a7128615815d4eb485855ecc9293f264f8f327d2cc16cdb92f42a3880d89221eaa49585eaa7ef605f9096b587a1fe6b101f930b6c4597632925f14661854af4af8f861c58905147d2d5806ac5d18211f42325eb4f8c1223fc041064b1374476dc5c81a717feb249a5dd7339dfec7a90b1a206d760f6fa120f69b828c8cb895dbd693a35f9d32912868805b80c70f1ecfdb7e05d11dc312eada5ea6142f167a2c7db4e36da525097cfcaa649ee3936ccd24c61ef5d483dccb006ff5811b90dfd0034c5dd7ee18383b594cd8cd9cbfca3221877eef7e8de3996d5b7ebf06fff660e45676ba28ba28da3bda963a5a377c96752af9ab9254e1101355a5d3e87653f9d0a7726a28d892ad8ed6ab639c922c930b2125f2b25d6a5d6d159d5dc3c066c82e1fb33e26ffad55aaf4f79b14a7fcdc370dfef209a2340f0801af55ee24628f8d7fb2246d97d7b76e38d9e5c9d9e12d9679a78423454986bee5c3531d645b8c99ba3fa40543c7b0b72c89771157abd85d97b2797ef99d152159dfdc5414e3bad1a3653c08e02d5d35b504736a31e13e5ea2595a6c074d7ffea6e1600ad7814afa252b58a3e2b4e0953aa921eefa5037aa0402939e774d8fa14c898c05b1931fdb5f7edeb51cda2a02e0d9c627aa3a771fd74b92bfeef5dea9c088266b2be95532fff0490d8161d3941e757afbc3dcaf0efb946da1d09b5193a7634badb5ee8ca8b455a959977ebba2280f8a201e1f012a2a19e1be9891dc55095afd4100e0c5a627e109cff765ea3c80000702f68d3b0a5c74d2e426aab5e2f78814ebaff9f203328018992692d7a14cc2267d34258065e84f1f3d3b74e240bf535fcd6c82a53c5a64fdecf34df7497fd8cb0436824a8e4e86199431e14ff881651e61c02316b88c158aa536ca5d947514dcd58350a400b86cd055b5d9dce9d05079dcd8214dc59752546c4aa38ffc788ade2ab17d6a938a81e5405b9ec9d56fc165db8bbb88f6c2055787ab35d73b626ea1cb2ec33e7e8dca25140921f7fbe7eba7fbc2eea31b0d25a403843bdb4bd2672d51b9de2fc706698335a157f8089bb76dbeea2643cd2d46629ad8a36acbeb8a05ba0e4598dcad0626e59870aeea28963f5d210c39faa2790ec652884a2f11568ed069430e8d1f20e58eb83f91e20d5b21b2736701463df6af3d5f5d4b0acb3197930e1ed51ae45c4c0c51cdbb78ae7fca2ca256324957ecb20b0fd75992f9be98c8cf888b6d91a592d58dd8f26ebc541ee14fc66c89311081ef07b62c6ee6fe4df80e4ce4508efd84217ed818da2339c36b3997d7aee624c0a3df809e712cf8eb38b8c3f134c36166f80e1fd37a6d28505a65fe3bae075044801206a93f4276dbd07d4e0ecfb6c2a3d03b1391d60089721bb91a0ece18729e0f27347f031125c21478ed998ae344d5df46735e549ba9f39ea335cedb855fb4b8796f3de77071ba22645c59edd3f5e03a5b20f07284ea7539d9f78a0957184fc8fa6a32029c20ff7045b92e45e0779dc24f07a18f2003a34c72caaf04fe8d64804dcd3a1c368205038f512ca9e6230906976dd7c7341ab657f7f2006d89b98f06d70da70b3b0985752f1b68108244729eec81e5afd3c6050ef67079edd6702e466a40f5b691e3c8748f643fd38557e663fc122f1ff4cad731e2782701a01b5dbf4edbddee061e0fff87c3cd0f08b63e3edf6b1b4b3da9ed1117b352b9364031dd0be8a31d591ea5421b6684e4d8a2201516e2e5bb15970b0f6f366819222f1e92ea6bec8a280e1a78</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试开发</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：树、堆和图</title>
    <url>/posts/algorithm-notes-for-graph-tree-and-heap/</url>
    <content><![CDATA[<p>前面的文章介绍过链表，它其实就是特殊化的树，而树是特殊化的图，堆是一种特殊的树。本文将介绍这几种数据结构。</p>
<a id="more"></a>
<h1 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图-Graph"></a>图-Graph</h1><h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><p>图是一组顶点和一组边的集合，每条边连接一对顶点。在现实生活中，到处都会遇到图网络的概念，将问题空间表示为网络，比如计算机网络，社交网络等，由一个个节点和连接他们的边组成。<br><img src="graph.png" width="60%" height="60%" /></p>
<p>图可以表示为Graph(V, E)：<br>1、顶点V (vertex)</p>
<ul>
<li>出度：顶点的出边条数</li>
<li>入度：顶点的入边条数</li>
</ul>
<p>2、边E (edge)</p>
<ul>
<li>有向和无向</li>
<li>权重</li>
</ul>
<h2 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h2><p>图主要包括以下几类：</p>
<ul>
<li>无向无权图：节点之间的连接没有方向，是双向的，边没有权重（也可以说权重为1）。</li>
<li>无向有权图：节点之间的连接没有方向，有权重，比如两个节点间的物理距离。</li>
<li>有向无权图：节点之间通过有向的边连接，只能一个方向。</li>
<li>有向有权图：节点之间通过有向的边连接，有权重。</li>
</ul>
<p><img src="graph2.png" width="60%" height="60%" /></p>
<h2 id="图的常见算法"><a href="#图的常见算法" class="headerlink" title="图的常见算法"></a>图的常见算法</h2><h3 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS-深度优先搜索"></a>DFS-深度优先搜索</h3><p>深度优先搜索（Depth First Search, DFS）包括：前序遍历Preorder (Root-Left-Right)，中序遍历Inorder (Left-Root-Right) 和后序遍历Postorder (Left-Right-Root)。</p>
<h3 id="BFS-广度优先搜索"><a href="#BFS-广度优先搜索" class="headerlink" title="BFS-广度优先搜索"></a>BFS-广度优先搜索</h3><p>广度优先搜索（Breadth First Search, BFS）：一层一层的遍历。</p>
<h1 id="树-tree"><a href="#树-tree" class="headerlink" title="树-tree"></a>树-tree</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>树是特殊化的图，由有限个节点组成。最常见的是二叉树，每个节点最多有两个子节点（左子节点，右子节点）组成，一个二叉树节点包含以下部分：</p>
<ul>
<li>数据</li>
<li>指向左子节点的指针</li>
<li>指向右子节点的指针</li>
</ul>
<p>python二叉树定义：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure></p>
<h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><p>和图的搜索一样，二叉树的搜索也可以使用以下两种遍历搜索方式:</p>
<ul>
<li>深度优先搜索</li>
<li>广度优先搜索</li>
</ul>
<p>深度优先搜索包括前序遍历，中序遍历和后序遍历，每个节点访问一次，且仅访问一次。</p>
<ul>
<li>前序遍历：根左右</li>
<li>中序遍历：左根右</li>
<li>后序遍历：左右根<br><img src="tree-order.png" width="60%" height="60%" /></li>
</ul>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>二叉搜索树(Binary Search Tree)，也称二叉排序树、有序二叉树(Ordered Binary Tree)、排序二叉树(Sorted Binary Tree)，是指一棵空树或者具有下列性质的二叉树：</p>
<ol>
<li>左子树上所有结点的值均小于它的根结点的值</li>
<li>右子树上所有结点的值均大于它的根结点的值</li>
<li>左、右子树也分别为二叉搜索树</li>
</ol>
<p><img src="binary-search-tree.png" width="60%" height="60%" /></p>
<p>二叉搜索树的搜索、插入、移除等操作的动画演示：<a href="https://visualgo.net/zh/bst">https://visualgo.net/zh/bst</a></p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><img src="tree-complexity.png" width="60%" height="60%" /></p>
<h1 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆-Heap"></a>堆-Heap</h1><p>堆是可以迅速找到一堆数中的最大或者最小值的数据结构，根节点最大的堆叫大顶堆或大根堆，根节点最小的堆叫做小顶堆或小根堆。常见的堆有二叉堆(Binary heap)、斐波那契堆(Fibonacci heap)等，下面主要介绍二叉堆。</p>
<h2 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h2><p>二叉堆是一种特殊的二叉树，和二叉搜索树不同，是一颗完全二叉树。以大顶堆为例，二叉堆满足下列性质：</p>
<ul>
<li>是一棵完全二叉树</li>
<li>树中任意节点的值总是 &gt;= 其子节点的值</li>
</ul>
<p><img src="heap.png" width="60%" height="60%" /></p>
<p>二叉堆一般都通过数组来实现，上图的二叉堆可表示为一维数组：<code>[99, 90, 85, 50, 70, 60, 30, 20, 40]</code> 。可以发现其索引具有以下关系：</p>
<ul>
<li>根节点(顶堆元素)：a[0]</li>
<li>索引为<code>i</code>的左孩子的索引是<code>(2*i+1)</code></li>
<li>索引为<code>i</code>的右孩子的索引是<code>(2*i+2)</code></li>
<li>索引为<code>i</code>的父结点的索引是<code>floor((i-1)/2)</code></li>
</ul>
<h2 id="二叉堆常见操作"><a href="#二叉堆常见操作" class="headerlink" title="二叉堆常见操作"></a>二叉堆常见操作</h2><p>对二叉堆的常见操作包括查找(最大值)、删除(最大值)和插入，他们的时间复杂度分别为O(1)、O(logN)和O(logN)。</p>
<ul>
<li>对于插入操作，元素先插入到堆的尾部，然后依次向上调整（与父节点进行比较、交换）整个堆的结构(一直到根)。</li>
<li>对于删除操作，先删除堆顶元素，接下来将堆尾元素替换到顶部，然后依次从根部向下调整（和子节点比较，将较大的子节点和它交换）整个堆的结构(一直到堆尾)</li>
</ul>
<p>二叉堆是用于实现优先队列(priority queue)的数据结构，优先队列中的元素被赋予优先级，具有最高优先级的元素最先删除，具有最高级先出（first in, largest out）的特性。但是二叉堆不是优先队列的最优实现，插入效率较低，比如斐波那契堆(Fibonacci heap)具有更优的性能。<br><img src="heap-complexity.png" width="60%" height="60%" /></p>
<center><font size="2">图片来源：https://en.wikipedia.org/wiki/Heap_(data_structure)</font></center>


<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>树</tag>
        <tag>二叉树</tag>
        <tag>堆</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>typora主题配置：公众号一键排版</title>
    <url>/posts/front-end-for-typora-css/</url>
    <content><![CDATA[<p>typora是一个非常易用且免费的markdown编辑器，是我最常用的文档编辑器。它支持实时渲染，不用打开两个窗口（源码窗口和预览窗口），真正实现了沉浸式写作，所谓所见即所得。它的界面简洁，操作简单，非常容易上手，这里就不介绍了。本文主要介绍Typora的主题配置，实现公众号一键排版。<br><a id="more"></a></p>
<h1 id="为什么要配置主题"><a href="#为什么要配置主题" class="headerlink" title="为什么要配置主题"></a>为什么要配置主题</h1><p>typora支持配置渲染的样式，默认提供了 5 种主题。选择主题的其中一个目的是文章编辑完成后更加方便阅读，好的文章排版能提供不错的阅读体验。其次，通过typora将文章排版后，可以直接复制到公众号上，仅做简单的修改（添加图片）就可以发布了。公众号排版我尝试过网上提供的编辑器，感觉还是比较麻烦，也可能是我没找到正确的使用方法吧，不管怎样最终还是放弃了。使用typora就非常简单，完成文章编辑后，直接选择对应的主题进行自动排版，然后复制到公众号就可以了。</p>
<p>那么最关键的就是主题文件了，下面介绍怎么使用和修改主题文件。</p>
<h1 id="主题文件使用"><a href="#主题文件使用" class="headerlink" title="主题文件使用"></a>主题文件使用</h1><p>typora的主题文件其实就是CSS文件，了解前端开发的应该都知道，<br>CSS(Cascading Style Sheets, 层叠样式表) 是一种描述HTML 文档样式的语言，描述如何显示HTML 元素，typora可以根据CSS主题文件将文档渲染为对应样式的HTML文件，Typora 的窗口内容其实就是一个HTML网页。</p>
<h2 id="主题文件下载"><a href="#主题文件下载" class="headerlink" title="主题文件下载"></a>主题文件下载</h2><p>typora官方提供了多种主题：<a href="https://theme.typora.io/">https://theme.typora.io/</a>，可以在上面下载喜欢的主题。Github上有个markdown-css项目也提供了一些主题：<a href="http://wecatch.me/markdown-css/">http://wecatch.me/markdown-css/</a>。</p>
<h2 id="导入主题文件"><a href="#导入主题文件" class="headerlink" title="导入主题文件"></a>导入主题文件</h2><p>typora点击 文件 -&gt; 偏好设置 -&gt; 外观 -&gt; 主题 -&gt; 打开主题文件夹，会打开主题的存放目录，将你下载的主题文件复制到这个目录下，然后重新启动typora，在菜单栏的【主题】中就可以选择你加入的主题了。</p>
<p><img src="typora-css-thems.png" width="60%" height="60%" /></p>
<h1 id="主题文件修改"><a href="#主题文件修改" class="headerlink" title="主题文件修改"></a>主题文件修改</h1><p>当然，除了下载网上提供的主题文件，也可以手动编写，定制个性化的主题。最省事的方法是在已有主题文件的基础上进行修改，如果对CSS语法不熟悉，可以参考多个主题文件进行修改。</p>
<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p>typora是一个markdown编辑器，主题文件使markdown文本具有一定的样式，也就是通过CSS渲染，因此，每个markdown类型对应了HTML中的元素标签，这样才能实现准确的渲染。</p>
<p>它们的对应关系可参考官方文档：<a href="https://theme.typora.io/doc/zh/Write-Custom-Theme/">https://theme.typora.io/doc/zh/Write-Custom-Theme/</a>，上面有详细的介绍。比如标题(markdown类型：heading)对应CSS中的<code>h1~h6</code>；无序列表对应<code>ul li</code>。</p>
<p>CSS属性设置中，比较常见的就是设置字体以及HTML标签的位置、边距等，下面介绍CSS单位和边距属性设置方法。</p>
<h3 id="CSS单位"><a href="#CSS单位" class="headerlink" title="CSS单位"></a>CSS单位</h3><ul>
<li>1em： 等于当前的字体尺寸。</li>
<li>2em： 等于当前字体尺寸的两倍</li>
<li>1 pt： 1磅，等于 1/72 英寸</li>
<li>px：像素 (计算机屏幕上的一个点)</li>
</ul>
<h3 id="CSS-margin-属性"><a href="#CSS-margin-属性" class="headerlink" title="CSS margin 属性"></a>CSS margin 属性</h3><p>设置外边距属性，设置给定元素四个（上下左右）方向的边距。也可以单独设置属性：margin-top，margin-right，margin-bottom，和 margin-left：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin">https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 所有 4 个外边距都是 2em */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上下边距2em 左右边距1em */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">1em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上边距3em 左右边距2em 下边距1em*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3em</span> <span class="number">2em</span> <span class="number">1em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上边距3em 右边距2em 下边距1em 左边距2em*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3em</span> <span class="number">2em</span> <span class="number">1em</span> <span class="number">2em</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改主题文件"><a href="#修改主题文件" class="headerlink" title="修改主题文件"></a>修改主题文件</h2><p>先选择一个主题文件，选择你喜欢的主题，然后在它的基础上进行小幅修改。</p>
<p>Typora提供两种主题调试和测试方法：<br><strong>一种方法是使用Theme Toolkit</strong>：<br>在浏览器中进行调试，也就是使用浏览器自带的开发工具进行调试，具体使用方法参考：<a href="https://github.com/typora/typora-theme-toolkit">https://github.com/typora/typora-theme-toolkit</a></p>
<p><strong>第二种方法是直接在Typora中进行调试</strong>：<br>windows系统中，Typora 点击 文件 -&gt; 偏好设置 -&gt; 通用 -&gt; 高级设置，勾选【开启调试模式】，然后切换到文章，菜单栏点击【视图】，选择【开发者工具】：</p>
<p><img src="typora-devtools.png" width="60%" height="60%" /></p>
<p>这就和浏览器调试一样了，对相应的标签元素进行调整。</p>
<p>得到合适的CSS属性参数后，需要修改CSS文件才能永久生效，可以使用VScode打开CSS文件，它有以下优点：</p>
<ol>
<li><p>方便选择颜色（浏览器调试工具也可以）<br><img src="vscode-color.png" width="60%" height="60%" /></p>
</li>
<li><p>方便查找CSS属性文档<br>将鼠标放在标签属性上方就会弹出文档链接，下图点击链接可以打开text-align设置文档。<br><img src="vscode-css-attribute.png" width="60%" height="60%" /></p>
</li>
</ol>
<p>本文的排版就是使用typora实现的一键排版。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>markdown</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：哈希表、映射和集合</title>
    <url>/posts/algorithm-notes-for-hash-table/</url>
    <content><![CDATA[<p>hash函数是根据关键字key计算出应该存储地址的位置，哈希函数把key转成哈希值来定位数据存储的位置，是基于哈希函数建立的一种查找表，Python 中的字典就是用哈希表来实现的。本文主要介绍哈希表、映射和集合这三种数据结构以及他们在python中用法。</p>
<a id="more"></a>
<h1 id="哈希表-Hash-table"><a href="#哈希表-Hash-table" class="headerlink" title="哈希表-Hash table"></a>哈希表-Hash table</h1><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表(Hash table)，也叫散列表，根据键(Key)访问在内存储存位置的数据，通过把键值映射到表中一个位置来访问记录，映射函数称为散列函数或者哈希函数，根据哈希函数建立的记录数据的表称为哈希表（散列表）。</p>
<p>比如键值为k，对应的值放在 f(k) 的存储位置上，这个对应关系 f 称为散列函数，通过它来建立的表称为散列表。</p>
<h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>两个不同的key值得到相同的哈希值的情况称为<strong>哈希碰撞（Hash Collisions）</strong>，也就是 f(k1) = f(k2)。哈希碰撞的解决方案有：开放寻址(Open Addressing)法、链地址法(Chaining)、再哈希法（Rehash）和建立一个公共溢出区。</p>
<ul>
<li>开放寻址法：产生冲突后继续寻找下一个空闲的空间（没有被占用的存储地址），Python使用的就是这种方法。</li>
<li>链地址法：散列到同一位置的元素，不继续往下寻找，而是将所有关键字为同义词的记录存储在同一线性链表中，HashMap就采用了链地址法。</li>
<li>再散列函数法：产生冲突后，就再来一次哈希计算，直到没有冲突。</li>
<li>建立一个公共溢出区：也就是建两个表，一个作为基本表，另一个是存储和基本表发生冲突元素的溢出表。</li>
</ul>
<p>哈希冲突的发生，往往会降低字典和集合操作的速度。因此，为了保证其高效性，字典和集合内的哈希表，通常会保证其至少留有 1/3 的剩余空间。随着元素的不停插入，当剩余空间小于 1/3 时，Python 会重新获取更大的内存空间，扩充哈希表。</p>
<h2 id="python-字典"><a href="#python-字典" class="headerlink" title="python 字典"></a>python 字典</h2><p>Python 中的字典就是典型的哈希表，是一系列由键（key）和值（value）配对组成的元素的集合，其中<code>value</code>可以是任何数据类型，且可以重复。<code>Key</code>不能重复并且必须是不可变（immutable）的。</p>
<p>在 Python3.7+版本中，字典是有序的， 3.6 之前是无序的。</p>
<h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建空字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict=&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(mydict)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">mydict</span></span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict()方法创建字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = <span class="built_in">dict</span>(&#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = <span class="built_in">dict</span>([(<span class="number">1</span>, <span class="string">&#x27;apple&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;banana&#x27;</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># fromkeys()方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = <span class="built_in">dict</span>.fromkeys(seq)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="literal">None</span>, <span class="number">2</span>: <span class="literal">None</span>, <span class="number">3</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = <span class="built_in">dict</span>.fromkeys(seq,<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;apple&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>理论上来说，直接使用<code>&#123;&#125;</code>创建字典比dict()方法效率更高， {} 会直接调用底层C代码。</p>
<p>直接使用Dict[Key] = ‘Value’的形式新增元素，可以增加任何数据类型，比如可以嵌套字典，列表等。如果key已经存在，则进行更新。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict=&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict[<span class="number">2</span>] = <span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">2</span>: <span class="string">&#x27;banana&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><p>直接使用key访问元素值，也可以使用 get(key) 方法获取，如果键不存在，调用 get() 函数可以返回一个默认值<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.get(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.get(<span class="number">3</span>,<span class="string">&#x27;null&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure><br>setdefault()方法也可以用来获取元素值，和get()方法不同的是，如果查找的key不存在，它会设置一个默认值（default=None）：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.setdefault(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.setdefault(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.setdefault(<span class="number">4</span>,<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;orange&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>: <span class="literal">None</span>, <span class="number">4</span>: <span class="string">&#x27;orange&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>del删除元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> mydict[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><br>pop方法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.pop(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>popitem()用于随机删除任意键值对</p>
<h3 id="清除字典元素"><a href="#清除字典元素" class="headerlink" title="清除字典元素"></a>清除字典元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict1 = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict2 = &#123;<span class="number">3</span>:<span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict1.update(mydict2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict1</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;**mydict1,**mydict2&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;orange&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取字典key，value值"><a href="#获取字典key，value值" class="headerlink" title="获取字典key，value值"></a>获取字典key，value值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.keys()</span><br><span class="line">dict_keys([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.values()</span><br><span class="line">dict_values([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>items()方法返回(key, value)对：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.items()</span><br><span class="line">dict_items([(<span class="number">1</span>, <span class="string">&#x27;apple&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;banana&#x27;</span>)])</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> mydict.items():</span><br><span class="line">	print(key)</span><br><span class="line">	print(value)</span><br></pre></td></tr></table></figure></p>
<p>python2中，has_key()可用于判断字典是否存在某个key：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict.has_key(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br>python3删除了has_key()方法，可以使用 <code>in</code> 操作符来判断：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>:<span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> mydict:</span><br><span class="line">	print(mydict(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> mydict.keys():</span><br><span class="line">	print(mydict(<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h3><p>实际应用中，通常需要对字典进行排序，一般会根据键或值，进行升序或降序排序：</p>
<p>根据字典键升序排序<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">3</span>:<span class="string">&quot;banana&quot;</span>,<span class="number">2</span>:<span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(mydict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;apple&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;orange&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;banana&#x27;</span>)]</span><br></pre></td></tr></table></figure><br>根据字典值降序排序<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(mydict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">[(<span class="number">3</span>, <span class="string">&#x27;banana&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;orange&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;apple&#x27;</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="判断一个字典是否包含另一个字典"><a href="#判断一个字典是否包含另一个字典" class="headerlink" title="判断一个字典是否包含另一个字典"></a>判断一个字典是否包含另一个字典</h3><p>判断mydictA是否包含mydictB<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydictA = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>,<span class="number">3</span>:<span class="string">&quot;banana&quot;</span>,<span class="number">2</span>:<span class="string">&quot;orange&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydictB = &#123;<span class="number">1</span>:<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(mydictB, **mydictA) == mydictA</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<h1 id="映射-Map"><a href="#映射-Map" class="headerlink" title="映射-Map"></a>映射-Map</h1><p>映射和哈希表类似，也是存储key-value对，通过键(Key)查找值(Value)。<br>java 的HashMap() 和TreeMap()</p>
<ul>
<li>map.set(key, value)</li>
<li>map.get(key)</li>
<li>map.has(key)</li>
<li>map.size()</li>
<li>map.clear()</li>
</ul>
<h2 id="python-映射函数"><a href="#python-映射函数" class="headerlink" title="python 映射函数"></a>python 映射函数</h2><p>下面介绍一下python的map()函数用法：<br>map() 根据提供的函数对指定序列进行映射，返回映射函数返回值的新列表。一般结合lambda匿名函数一起使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>
<p>两个list相加：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, list1, list2)</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></p>
<h1 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合-Set"></a>集合-Set</h1><p>与列表(list)类似，但集合set没有重复元素，集合没有键和值的配对，是一系列无序的、唯一的元素组合。</p>
<p>字典和集合的内部结构都是一张哈希表，字典存储了哈希值（hash）、键和值这 3 个元素，而集合的哈希表内没有键和值的配对，只有单一的元素。和列表不一样，集合不支持索引操作。</p>
<p>java 的HashSet()和TreeSet()</p>
<ul>
<li>set.add(value)</li>
<li>set.delete(value)</li>
<li>set.hash(value)</li>
</ul>
<h2 id="python集合"><a href="#python集合" class="headerlink" title="python集合"></a>python集合</h2><p>可以使用{ }创建集合：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 或者 setA = set([&quot;apple&quot;, &quot;banana&quot;])</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.union(setB)</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA | setB</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.intersection(setB)</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &amp; setB</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB.intersection_update(setA)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB</span><br><span class="line">&#123;<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>isdisjoint() 方法可用于判断两个集合是否包含相同的元素，如果没有返回 True。</p>
<h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB.difference(setA)</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB-setA</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>子集判断<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.issubset(setB)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.issuperset(setB)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB.issuperset(setA)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<h3 id="对称差集"><a href="#对称差集" class="headerlink" title="对称差集"></a>对称差集</h3><p>两个集合中不重复的元素集合<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.symmetric_difference(setB)</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA ^ setB</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.symmetric_difference_update(setB)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line">&#123;<span class="string">&#x27;orange&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.add(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h3><p>remove()删除不存在的元素会报KeyError错误，可以使用discard()方法避免KeyError错误。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.remove(<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line">&#123;<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.remove(<span class="string">&#x27;pear&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;pear</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; setA.discard(&#x27;</span>pea<span class="string">r&#x27;)</span></span><br></pre></td></tr></table></figure><br>pop() 方法也可以用来删除元素，用于删除最后一个元素，但是，集合是无序的，所以不知道到底删除的是哪一个元素。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.pop()</span><br><span class="line"><span class="string">&#x27;banana&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line">&#123;<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>
<h3 id="冻结集合"><a href="#冻结集合" class="headerlink" title="冻结集合"></a>冻结集合</h3><p>冻结后集合不能添加或删除任何元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozen_set = <span class="built_in">frozenset</span>([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozen_set.add(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;frozenset&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;add&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h3><p>集合排序和列表、元组类似，使用 sorted(set) 方法排序：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(setA)</span><br><span class="line">[<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="python集合运算"><a href="#python集合运算" class="headerlink" title="python集合运算"></a>python集合运算</h2><p>python集合支持以下运算：<br>1、<code>in</code> ，<code>not in</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;apple&#x27;</span> <span class="keyword">in</span> setA</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>2、<code>==</code>，<code>!=</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA == setB</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>3、<code>&lt;=</code>，<code>&lt;</code><br>setA &lt;= setB：setA是setB的子集<br>setA &lt; setB：setA是setB的真子集<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &lt;= setB</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &lt; setB</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &lt; setB</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><br>4、<code>&gt;=</code>，<code>&gt;</code><br>setA &gt;= setB：setA是setB的超集<br>setA &gt; setB：setA是setB的真超集<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setB = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &gt;= setB</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &gt; setB</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA &gt; setB</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<p>前面提到过，还支持:</p>
<ul>
<li><code>|</code>：并集</li>
<li><code>&amp;</code>：交集</li>
<li><code>-</code>：差集</li>
<li><code>^</code>：对称差集</li>
</ul>
<h2 id="python集合特点"><a href="#python集合特点" class="headerlink" title="python集合特点"></a>python集合特点</h2><p>python集合有以下特点：<br>1、集合不按特定顺序保存元素，是无序的，不支持索引操作，集合本质上是一个哈希表，可以将集合转换为list后进行索引操作，也可以使用<code>in</code> 关键字。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setA = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> fru <span class="keyword">in</span> setA:</span><br><span class="line">    print(fru, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">banana</span><br><span class="line">apple</span><br></pre></td></tr></table></figure></p>
<p>2、python集合只能添加不可变（immutable）的实例，比如可以添加元组（tuple），字符串（string），不能添加列表（list），如果添加的元素为list，可以使用update方法，update方法用于新增多个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.add(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>), <span class="string">&#x27;bapple&#x27;</span>, <span class="string">&#x27;anana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.add(b)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA.update(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setA</span><br><span class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>), <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;bapple&#x27;</span>, <span class="string">&#x27;anana&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>相比于数组，列表和元组，哈希表和集合的性能更优，特别是对于查找、添加和删除操作，字典都能在常数时间复杂度内完成。对于查找，数组的时间复杂度为 O(n)，如果使用二分查找，也需要 O(logn) 的时间复杂度，但需要对数组进行排序，至少需要O(nlogn) 的时间复杂度。<br><img src="hash-table-complexity.png" width="60%" height="60%" /></p>
<center><font size="2">http://www.bigocheatsheet.com/</font></center>


<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构与算法</tag>
        <tag>哈希表</tag>
        <tag>映射</tag>
        <tag>集合</tag>
        <tag>Hash table</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>投资理财-商誉</title>
    <url>/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E5%95%86%E8%AA%89/</url>
    <content><![CDATA[<p>最近，文化产业又引来一次税务风暴，记得上一次还是2018年的范冰冰事件，导致华谊兄弟市值大幅缩水，当时作为一个吃瓜群众，倒是喜闻乐见。这次由郑爽引起的税务风暴让我无法淡定了，先来回顾一下这个所谓的“郑爽天价片酬事件”。</p>
<a id="more"></a>
<p>郑爽参演了电视剧《倩女幽魂》，根据张恒公布的材料，郑爽方将片酬谈到了1.6亿元。而在2018年6月，也就是范冰冰事件时间之后，中宣部、文化部、税务总局、广电总局、电影局等五部门联合发布《通知》，规定总片酬（含税）不得超过5000万元，那么郑爽是怎么拿到1.6亿元的呢，也就是通过签订所谓的阴阳合同，世纪伙伴（当时是北京文化子公司）与郑爽签了77天4800万的片酬合同，没有超过5000万的限制，另外1亿多的片酬通过投资郑爽母亲科技公司的方式进行支付，这样就绕开了片酬限制。事件曝光后，“日薪208万”冲上热搜，这样算下来一年就是6.4亿，“爽”成了新的货币计量单位，一爽=6.4亿。</p>
<p>而《倩女幽魂》去年已经拿到发行许可证，准备在今年播出的，又遇到郑爽的代孕事件，导致播出延后，现在又出现这个事情，播出更是遥遥无期，这样公司前期投资的钱打水漂，并且退还播出平台已经支付的费用。前面提到北京文化这家公司，就是它让我觉得这次的瓜不好吃了。北京文化投资了好几部爆款影片，比如《战狼2》、《我不是药神》、《流浪地球》等，还有最近《你好，李焕英》，也就是看好他们的投资眼光，所以买了北京文化的股票，没想到是个大坑，一把辛酸泪啊…</p>
<p>2016年，北京文化花13.5亿元收购了世纪伙伴传媒有限公司（投资《倩女幽魂》项目的公司），而当时世纪伙伴账面净资产只有3.62亿元，为什么以13.5亿元收购呢？这就涉及到公司<strong>商誉</strong>这个概念。<strong>商誉可以简单理解成公司未来带来超额利润的潜在价值，在企业并购中，它是购买企业投资成本超过被合并企业净资产公允价值的差额。商誉是指企业中某些非货币、非物质资源的价值，也就是无形资产</strong>，在会计学中，无形资产不等于商誉，它们有一定的区别。</p>
<ul>
<li>客户忠诚度、品牌声誉、管理团队的经验、公司创新等可以算作商誉</li>
<li>无形资产指那些非实物但可以识别的资产，比如计算机软件、版权、专利、许可协议和网站域名等，无形资产可以独立于企业本身进行买卖，具有一定的使用寿命。</li>
<li>商誉不能独立于企业而存在，不能单独出售、购买或转让，只要企业在经营，它就存在，</li>
<li>商誉只有在两家公司完成合并或收购时才会出现在资产负债表上</li>
<li>随着时间的推移，资产往往会失去部分价值，因此公司有时不得不定期进行资产减值。</li>
</ul>
<p>商誉对一个企业非常重要，一般来说，商誉越高，企业的盈利能力越好。在20世纪20年代，广告商开始进行<strong>品牌推广</strong>，也就是进行<strong>商誉策划</strong>。</p>
<blockquote>
<p>在20世纪早期，美国与欧洲的公司投入了数百万美元，为之前没有任何广泛内涵的品牌打造关联概念，这些品牌包括“凯迪拉克”“卡夫”“好彩”“亨氏”“可口可乐”等。</p>
</blockquote>
<p>凯迪拉克、道奇、克莱斯勒和通用电气等品牌都是由西奥多 · 麦克马纳斯（ Theodore MacManus ）一手打造。麦克马纳斯通过<strong>形象广告</strong>打造值得信任甚至备受尊敬的品牌，他追求的不是说服客户，而是转化他们，从而创造持久的忠诚。让广告“<strong>不是强行植入想法，而是逐步渗透</strong>”。他的目标是让人感觉到，“制造产品的人是有诚信的人，而该产品是有诚信的产品，在所有产品中值得优先考虑”。比如可口可乐、苹果手机，它们的品牌形象深入人心，商誉很高，这种公司的盈利能力就非常强。</p>
<p>一般如果商誉占一家公司总资产比例5％以内是正常的，而2016年‘北京文化’的商誉占比已经高达30％，世纪伙伴占了大部分，也就是非常看好世纪伙伴的盈利能力。前面几年世纪伙伴盈利能力还是不错，16年净利润1.35亿，17年1.5亿。2019年，世纪伙伴经营状况急转直下（原管理团队流失），营业利润为-24.03亿元，北京文化巨亏23亿，而就在2019年，郑爽在《倩女幽魂》中获得了1.6亿片酬。</p>
<p>在2020年4月，北京文化以4800万元的低价转让世纪伙伴，导致商誉减值，而减值的部分就要计入当年的损益中。转让当天，世纪伙伴董事长举报北京文化财务造假，2021年1月，北京文化被立案调查，上周北京文化被ST，改为ST北文，两个交易日连续跌停，股价4.94元/股。此外，有近1000万股将于5月17日拍卖，最后倒霉的都是最底层的股民啊</p>
<p>投资文化产业风险有点大，属于周期性行业，不适合长期价值投资，受政策监管影响太大了，如果再遇到这种财务造假的公司，真是倒血霉了；再者，以高价格高商誉并购资产价格较低的标的公司，风险太大，以后投资股票一定要慎重。</p>
]]></content>
      <categories>
        <category>投资理财</category>
      </categories>
      <tags>
        <tag>金融小知识</tag>
        <tag>投资理财</tag>
      </tags>
  </entry>
  <entry>
    <title>《时间简史》- 广义相对论</title>
    <url>/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/</url>
    <content><![CDATA[<p>广义相对论</p>
<a id="more"></a>
<h1 id="广义相对论"><a href="#广义相对论" class="headerlink" title="广义相对论"></a>广义相对论</h1><p>然而，狭义相对论和牛顿引力理论不相协调。牛顿理论说，物体之间的吸引力依赖于它们之间的距离。这意味着，如果我们移动一个物体，另一物体所受的力就会<strong>立即改变</strong>。也就是说，<strong>引力效应</strong>必须以无限速度来传递，而不像狭义相对论所要求的那样，只能以等于或低于光速的速度来传递。</p>
<p>为了解决这个问题，1915年，爱因斯坦提出了今天我们称之为广义相对论的理论。<strong>认为引力不像其他种类的力，只不过是时空不是平坦的这一事实的后果。</strong>时空是由于在它中间的质量和能量的分布而变弯曲或“翘曲”的。像地球这样的物体并非由于称为引力的力使之沿着弯曲轨道运动，而是它沿着<strong>弯曲空间</strong>中最接近于直线的称之为测地线的轨迹运动。例如，地球的表面是一弯曲的二维空间，飞机按照两个机场之间的最短路程的测地线飞行，虽然它沿着三维空间的直线飞，在二维的地面上它的影子却是沿着一条弯曲的路径。</p>
<p><strong>太阳的质量引起时空弯曲</strong>，使得在四维的时空中地球虽然沿着直线的轨迹，它却让我们在三维空间中看起来是沿着一个圆周运动。事实上，广义相对论预言的行星轨道几乎和牛顿引力理论所预言的完全一致。</p>
<p>在广义相对论中，空间和时间变成为动力量：当一个物体运动时，或一个力起作用时，它影响了空间和时间的曲率；反过来，时空的结构影响了物体运动和力作用的方式。空间和时间不仅去影响、而且被发生在宇宙中的每一件事所影响。</p>
<h3 id="光偏折"><a href="#光偏折" class="headerlink" title="光偏折"></a>光偏折</h3><p>广义相对论的一个预言是光偏折，光线必须被引力场所折弯，除了行星，光线也必须沿着时空的测地线走。理论预言，由于太阳的质量的缘故，太阳近处的点的光锥会向内稍微偏折。这表明，从远处恒星发出的刚好通过太阳附近的光线会被折弯很小的角度，对于地球上的观察者而言，这恒星显得是位于不同的位置。光偏折现象已经被许多次观测准确地证实。</p>
<p><img src="Image1.png" width="60%" height="60%" /></p>
<center><font size="2">太阳（A)的质量畸变了它附近的时空。从一个远处的恒星（B)来的通过太阳附近的光被它折射了，这样在地球（C)上看来，它似乎来自另外一个方向（D)。</font></center>

<h3 id="不同高度的钟的速度不同"><a href="#不同高度的钟的速度不同" class="headerlink" title="不同高度的钟的速度不同"></a>不同高度的钟的速度不同</h3><p>另一广义相对论的预言是，<strong>在像地球这样的大质量的物体附近，时间显得流逝得更慢一些</strong>。因为光能量和它的频率（每秒钟里光振动的次数）有关系：能量越大，则频率越高。当光从地球的引力场往上走，它失去能量，因而其频率下降（这表明两个波峰之间的时间间隔变大）。从在上面的某个人来看，下面发生的每一件事情都显得需要更长的时间，这个预言在1962年被验证。</p>
<p><img src="Image2.png" width="40%" height="40%" /></p>
<p>发现底下的那只更接近地球的钟走得更慢些，这和广义相对论完全一致。地球上的不同高度的钟的速度不同，这在目前具有相当的实用上的重要性，这是因为人们要用卫星发出的信号来作非常精确的导航。如果人们对广义相对论的预言无知，所计算的位置将会错几英里。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>时间简史</tag>
      </tags>
  </entry>
  <entry>
    <title>《时间简史》- 空间和时间</title>
    <url>/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>牛顿运动定律使空间中绝对位置的观念告终，相对论摆脱了绝对时间的观念。</p>
<a id="more"></a>
<h1 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h1><p>在<strong>伽利略和牛顿</strong>之前，人们相信亚里士多德，认为物体的自然状态是静止的，并且只在受到力或冲击作用时才运动，重的物体比轻的物体下落得更快。而伽利略指出，不管物体的重量是多少，其速度增加的速率是一样的（航天员大卫 · 斯各特在月亮上进行了羽毛和铅锤实验。因为没有空气阻碍东西下落，他发现两者同时落到地面），表明，力的真正效应总是改变物体的速度，而不是像亚里士多德想像的那样，仅仅使之运动。牛顿在1687年出版的《数学原理》中明确地叙述了这个现象，并被称为<strong>牛顿第一定律</strong>：<strong>任何物体都要保持匀速直线运动或静止状态，直到外力迫使它改变运动状态为止。</strong></p>
<p>物体受力时发生的现象则由<strong>牛顿第二定律</strong>所给出：<strong>物体被加速或改变其速度，其改变率与所受外力成比例</strong>。<strong>如果力加倍，则加速度也将加倍。物体的质量（或物质的量）越大，则加速度越小。</strong></p>
<p>牛顿还发现引力定律：任何两个物体都相互吸引，其引力大小与每个物体的质量成正比。物体之间的距离越远，则引力越小。这个定律极其精确地预言了地球、月亮和其他行星的轨道。</p>
<p><strong>亚里士多德</strong>和<strong>伽利略—牛顿</strong>观念的巨大差别在于，亚里士多德相信存在一个优越的静止状态，特别是他以为地球是静止的。但是从牛顿定律引出，并不存在一个静止的唯一标准，也就是不存在绝对位置或绝对空间。</p>
<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><h2 id="光速"><a href="#光速" class="headerlink" title="光速"></a>光速</h2><p>亚里士多德和牛顿都相信绝对时间，时间相对于空间是完全分开并独立的。<strong>但是这种绝对时间的观念在处理以光速或接近光速运动的物体时无效</strong>，</p>
<p>在牛顿发表《数学原理》之前11年的 1676 年，丹麦的天文学家欧尔 · 克里斯琴森 · 罗麦第一次发现光以有限速度运动。直到1865年，当英国的物理学家<strong>詹姆士·麦克斯韦</strong>将当时用以描述电力和磁力的部分理论统一起来以后，才有了光传播的真正理论。麦克斯韦方程预言无线电波或光波应以某一固定的速度运动，根据牛顿理论，不存在绝对静止，运动是相对的。那么光以固定速度传播，那它是相对于何物呢？这样有人提出，存在着一种无所不在的称为“<strong>以太</strong>”的物体，光速应是相对于以太的，通过以太传播。</p>
<p>1887年，阿尔贝特·麦克尔逊（美国第一个物理诺贝尔奖获得者）和爱德华·莫雷进行了著名的<strong>麦克尔逊—莫雷实验</strong>，证明光速在不同惯性系和不同方向上都是相同的，由此否认了以太的存在。</p>
<h2 id="狭义相对论"><a href="#狭义相对论" class="headerlink" title="狭义相对论"></a>狭义相对论</h2><p>1905年，<strong>阿尔贝特 · 爱因斯坦</strong>指出，只要人们愿意抛弃绝对时间的观念，整个以太的观念则是多余的。提出了<strong>质量和能量等价</strong>（E=mc^2，E表示能量，m代表质量，c则表示光速）以及<strong>没有任何东西能运动得比光还快</strong>（狭义相对论）的理论。</p>
<p>当一个物体接近光速时，它的质量上升得越来越快，它需要越来越多的能量才能进一步加速上去。实际上它永远不可能达到光速，因为那时质量会变成无限大，而由质量能量等价原理，这就需要无限大的能量才能做到。由于这个原因，相对论限制任何正常的物体永远以低于光速的速度运动。</p>
<p>在牛顿理论中，时间是绝对的，如果有一光脉冲从一处发到另一处，不同的观测者对光走过的距离这一点上不一致（因为空间不是绝对的）。由于光速等于这距离除以所花的时间，不同的观察者就测量到不同的光速。<strong>相对论终结了绝对时间的观念，每个观察者都有以自己所携带的钟测量时间，而不同观察者携带的同样的钟的读数不必要一致</strong>。时间不能完全脱离和独立于空间，而必须和空间结合在一起形成所谓的时空的客体。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>时间简史</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash之getopt命令行参数解析</title>
    <url>/posts/linux-shell-for-getopt/</url>
    <content><![CDATA[<p>Unix shell 中内置了命令行参数解析函数getopts，但它仅支持简单的参数解析，不支持长参数，getopt是getopts的增强版，支持长参数。在<a href="https://hiyongz.github.io/posts/python-notes-for-getopt/">Python笔记：命令行参数解析</a>中介绍了Python中的命令行参数解析方法getopt()，本文介绍shell中如何使用getopt进行命令行参数解析。</p>
<a id="more"></a>
<p>先看下面脚本(test_getopt.sh)：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FIELD=<span class="built_in">unset</span></span><br><span class="line">DF=<span class="built_in">unset</span></span><br><span class="line">COUNT=<span class="built_in">unset</span></span><br><span class="line">green=<span class="string">&#x27;\033[32m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>()</span><br><span class="line">&#123;</span><br><span class="line">  Usage=<span class="string">&quot;Usage: sh test_getopt.sh [OPTION]  \n\</span></span><br><span class="line"><span class="string">  Options:\n\</span></span><br><span class="line"><span class="string">        [ -f | --field FIELD]  \t\t-- 字段 \n \</span></span><br><span class="line"><span class="string">        [ -Y | --display-filter DF] \t-- 条件 \n \</span></span><br><span class="line"><span class="string">        [ -c | --count COUNT ]  \t-- 计数 \n \</span></span><br><span class="line"><span class="string">        [ -h | --help ]  \t\t-- 帮助信息  \n \</span></span><br><span class="line"><span class="string">        &quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="variable">$&#123;green&#125;</span> <span class="variable">$Usage</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ARGS=$(getopt -a -n test_getopt.sh -o f:Y:ch --long field:,display-filter:,count,<span class="built_in">help</span> -- <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br><span class="line">VALID_ARGS=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$VALID_ARGS</span>&quot;</span> != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">help</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">&quot;<span class="variable">$ARGS</span>&quot;</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    -f | --field)            FIELD=<span class="string">&quot;<span class="variable">$2</span>&quot;</span>   ; <span class="built_in">shift</span> 2  ;;</span><br><span class="line">    -Y | --display-filter)   DF=<span class="string">&quot;<span class="variable">$2</span>&quot;</span>      ; <span class="built_in">shift</span> 2  ;;</span><br><span class="line">    -c | --count)            COUNT=2      ; <span class="built_in">shift</span>    ;;</span><br><span class="line">    -h | --<span class="built_in">help</span>)             <span class="built_in">help</span>; <span class="built_in">exit</span> 0 ; <span class="built_in">shift</span>    ;;    </span><br><span class="line">    --) <span class="built_in">shift</span>; <span class="built_in">break</span> ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;FIELD   : <span class="variable">$FIELD</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;DF   : <span class="variable">$DF</span> &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;COUNT : <span class="variable">$COUNT</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;其余参数: <span class="variable">$@</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><br>下面对脚本进行简要解释：</p>
<ol>
<li><p>在开头可以定义脚本的全局变量，green用于设置字体颜色。</p>
</li>
<li><p>help()函数用于显示帮助信息，说明脚本的使用方法。</p>
</li>
<li><p><code>ARGS=$(getopt -a -n test_getopt.sh -o f:Y:ch --long field:,display-filter:,count,help -- &quot;$@&quot;)</code></p>
<ul>
<li>短参数一般在前面加单破折号(<code>-</code>)，长参数使用双破折号(<code>--</code>)，<code>-a</code>选项可以使长参数支持单破折号(<code>-</code>)</li>
<li>如果参数必须赋值，在后面加冒号(<code>:</code>)，</li>
<li><code>-n test_getopt.sh</code>：指定程序名为test_getopt.sh，如果不设置，默认使用getopt</li>
<li><code>-o | --options</code>：短选项</li>
<li><code>-l | --longoptions</code>：长选项</li>
</ul>
</li>
<li><p>getopt接收所有输入后会返回一个状态码，0表示成功，其他值表示失败，状态码会传递给变量<code>$?</code>，对变量<code>$?</code>做一个判断，如果不为0则打印帮助信息。</p>
</li>
<li><p><code>eval set -- &quot;$ARGS&quot;</code>：</p>
<ul>
<li>eval 命令把字符串当做命令来执行，这里用于处理参数中的转义字符。</li>
<li>set 命令将命令行参数替换成getopt格式化后的命令行参数，也就是将getopt格式化的参数分配至位置参数（$1,$2,…)</li>
</ul>
</li>
<li><p>接下来就是对参数（$1,$2,…)进行遍历处理</p>
<ul>
<li>通过shift来移动获取参数，用它来实现移动一个或者多个位置（也就是弹栈）</li>
<li>每次循环，检查<code>$1</code>参数，对于必须赋值的参数，需要移动两位，因为它后面跟了一个参数值，需要移动两位才能到下一个参数。取值为<code>$2</code>，因为第一个参数为选项名称，第二个参数才是参数值。</li>
<li>移位到<code>--</code>后，表示所有参数解析完成，退出循环。</li>
</ul>
</li>
</ol>
<p>运行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ sh test_getopt.sh --<span class="built_in">help</span></span><br><span class="line"> Usage: sh test_getopt.sh [OPTION]</span><br><span class="line"> Options:</span><br><span class="line"> [ -f | --field FIELD]          -- 字段</span><br><span class="line"> [ -Y | --display-filter DF]    -- 条件</span><br><span class="line"> [ -c | --count COUNT ]         -- 计数</span><br><span class="line"> [ -h | --<span class="built_in">help</span> ]                -- 帮助信息</span><br><span class="line">$ </span><br><span class="line">$ sh test_getopt.sh -c -f <span class="built_in">test</span> -Y hello test2</span><br><span class="line">FIELD   : <span class="built_in">test</span></span><br><span class="line">DF   : hello</span><br><span class="line">COUNT : 2</span><br><span class="line">其余参数: test2</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>getopt</tag>
      </tags>
  </entry>
  <entry>
    <title>金融小知识：通货膨胀</title>
    <url>/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80/</url>
    <content><![CDATA[<p>通货膨胀指整体物价水平上升，货币贬值、购买力下降。通货膨胀率一般通过<strong>居民消费价格指数CPI</strong>来反映，今年三月我国的CPI同比上涨0.4%，由于疫情原因，去年3月CPI上涨达到了4.3%，物价飞涨。</p>
<a id="more"></a>
<p>由于人民币在贬值，在投资中，我们的收益率至少要跑赢通货膨胀，也就是跑赢CPI，而CPI仅反映的是“<strong>必须消费通货膨胀率</strong>”，必须消费是日常生活中最基本的、必要的消费品。如果想要更好的生活质量，我们需要跑赢“<strong>可选消费通货膨胀率</strong>”，比如优质的教育、医疗等资源，由于它们的稀缺性（人多资源少竞争大，比如学区房），它们的价格增长速度远高于CPI。</p>
<p>这些稀缺资源价格的增长速度跟M2广义货币增速有关，货币供应量增加，市场上的钱就多了，物价就会上涨，货币的流入推高了社会稀缺资源的价格上涨。2008年金融危机以来，世界大多数国家大量超发货币，在2010年左右，我国的货币供应在30%左右，并长期保持在两位数，也就是最近几年保持在8%~9%，去年疫情原因又到了10%，相比美国（25%左右），中国控制得比较好，没有大放水。个人估计中国不会再大放水了，会保持M2增速在10%左右，逐渐放缓。</p>
<p>说到美国，2020年美国印钞折合人民币多印了25万亿，而中国虽然只有10%的增速，也印了20万亿左右，仅次于美国，所以去年股市涨的那么厉害就有这方面的原因。</p>
<p>综上，个人觉得，投资收益率要到10%左右才能跑赢通货膨胀，要想财富增值，一是购买抵抗通货膨胀的资产，比如房地产，股票，基金等，另一个就是努力赚钱了，也就是投资人力资产。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>金融小知识</tag>
        <tag>投资理财</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记：《时间简史》- 哈勃红移</title>
    <url>/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%93%88%E5%8B%83%E7%BA%A2%E7%A7%BB/</url>
    <content><![CDATA[<p>《时间简史》 - 哈勃红移<br><a id="more"></a></p>
<blockquote>
<p>1929 年，埃德温 · 哈勃作出了一个具有里程碑意义的观测：不管你往那个方向看，远处的星系正急速地远离我们而去。换言之，宇宙正在膨胀，这意味着，在早先星体相互之间更加靠近。事实上，似乎在大约100亿至200亿年之前的某一时刻，它们刚好在同一地方，所以那时候宇宙的密度无限大。</p>
<p>哈勃的发现暗示存在一个叫做大爆炸的时刻，当时宇宙的尺度无穷小，而且无限紧密。</p>
</blockquote>
<p>哈勃红移是宇宙大爆炸和宇宙膨胀理论的直接证据，表明宇宙中的星系正在离我们远去，而且越远的星球离我们远去的速度越快，宇宙像气球一样在膨胀。</p>
<p>什么是红移？当光源远离观测者运动时，观测者观察到的电磁波谱会发生红移（类似于声波的多普勒效应），光波向红端移动，频率降低，波长变长。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>时间简史</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：命令行参数解析</title>
    <url>/posts/python-notes-for-getopt/</url>
    <content><![CDATA[<p>有些时候我们需要通过命令行将参数传递给脚本，C语言中有个getopt()方法，python中也有个类似的命令行参数解析方法getopt()。python也提供了比getopt()更简洁的argparse方法。另外，sys模块也可以实现简单的参数解析，本文将对这3种命令行参数解析方法简要介绍。</p>
<a id="more"></a>
<h1 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h1><p>sys.argv是传入的参数列表，sys.argv[0]是当前python脚本的名称，sys.argv[1]表示第一个参数，以此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br><span class="line">print(sys.argv[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>命令行运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test_sys_argv.py 1 2 3</span><br><span class="line">[<span class="string">&#x27;test_sys_argv.py&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">test_sys_argv.py</span><br></pre></td></tr></table></figure><br>可以看到传入的参数通过sys.argv来获取，它就是一个参数列表。</p>
<h1 id="getopt方法"><a href="#getopt方法" class="headerlink" title="getopt方法"></a>getopt方法</h1><p>python的getopt与C语言的的getopt()函数类似。相比于sys模块，支持长参数和短参数，并对参数解析赋值。但它需要结合sys模块进行参数解析，语法格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getopt.getopt(args, options, [long_options])</span><br></pre></td></tr></table></figure><br>短参数为单个英文字母，如果必须赋值需要在后面加英文冒号(<code>:</code>)，长参数一般为字符串(相比短参数，更能说明参数含义)，如果必须赋值需要在后面加等号(<code>=</code>)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArgParser</span>():</span></span><br><span class="line">    <span class="comment"># 预处理输入参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">usage</span>(<span class="params">self</span>):</span></span><br><span class="line">        Usage = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Usage: python test_getopt.py [OPTION...]\n \n \</span></span><br><span class="line"><span class="string">        Options:\n \</span></span><br><span class="line"><span class="string">        -f, --field \t\t-- 字段\n \</span></span><br><span class="line"><span class="string">        -Y, --display-filter \t-- 条件\n \</span></span><br><span class="line"><span class="string">        -c, --count \t\t-- 计数\n \</span></span><br><span class="line"><span class="string">        -h, --help \t\t-- 帮助信息\n \n\</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(Usage)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arg_parser</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">&quot;f:Y:c:h&quot;</span>, [<span class="string">&quot;field=&quot;</span>,<span class="string">&quot;display-filter=&quot;</span>, <span class="string">&quot;count=&quot;</span>,<span class="string">&quot;return_flag=&quot;</span>, <span class="string">&quot;help&quot;</span>])</span><br><span class="line">        <span class="keyword">except</span> getopt.GetoptError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.usage()</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> opts == []:</span><br><span class="line">            self.usage()</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">for</span> op, value <span class="keyword">in</span> opts:</span><br><span class="line">            <span class="keyword">if</span> op <span class="keyword">in</span> (<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--field&quot;</span>):</span><br><span class="line">                self.filters = value</span><br><span class="line">                print(<span class="string">f&quot;field: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&quot;-Y&quot;</span>, <span class="string">&quot;--display-filter&quot;</span>):</span><br><span class="line">                self.display_filter = value</span><br><span class="line">                print(<span class="string">f&quot;display-filter: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--count&quot;</span>):</span><br><span class="line">                self.count = <span class="built_in">int</span>(value)</span><br><span class="line">                print(<span class="string">f&quot;count: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;--help&#x27;</span>):</span><br><span class="line">                self.usage()</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arg = ArgParser()</span><br><span class="line">    arg.arg_parser()</span><br></pre></td></tr></table></figure>
<p>命令行运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test_getopt.py -f <span class="built_in">test</span> -Y hello</span><br><span class="line">field: <span class="built_in">test</span></span><br><span class="line">display-filter: hello</span><br></pre></td></tr></table></figure><br>注意：短参数(options)和长参数(long_options)不需要一一对应，可以任意顺序，也可以只有短参数或者只有长参数。</p>
<h1 id="argparse方法"><a href="#argparse方法" class="headerlink" title="argparse方法"></a>argparse方法</h1><p>argparse模块提供了很多可以设置的参数，例如参数的默认值，帮助消息，参数的数据类型等。argparse类主要包括ArgumentParser、add_argument和parse_args三个方法。</p>
<ul>
<li>ArgumentParser用于初始化解析器，可设置脚本名，描述信息，帮助信息等</li>
<li>add_argument用于添加参数</li>
<li>parse_args用于解析参数</li>
</ul>
<p>下面介绍这三个函数的使用方法。</p>
<h2 id="ArgumentParser"><a href="#ArgumentParser" class="headerlink" title="ArgumentParser"></a>ArgumentParser</h2><p>argparse默认提供了<code>-h | --help</code>参数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;脚本描述信息...&quot;</span>)</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure><br>命令行运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test_argparse.py --<span class="built_in">help</span></span><br><span class="line">usage: test_argparse.py [-h]</span><br><span class="line"></span><br><span class="line">脚本描述信息...</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p>
<h2 id="add-argument"><a href="#add-argument" class="headerlink" title="add_argument"></a>add_argument</h2><p>下面列出部分参数：</p>
<ul>
<li>name or flags： 参数</li>
<li>action：对参数执行的动作，比如将多个参数放到列表中：<code>action=&#39;append&#39;</code></li>
<li>nargs：关联不同数目的命令行参数到单一动作</li>
<li>default：参数默认值</li>
<li>type：命令行参数应当被转换成的类型</li>
<li>required：此命令行选项是否必须输入</li>
<li>help： 此选项简单描述</li>
</ul>
<p>下面来添加参数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;脚本描述信息...&quot;</span>)</span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--field&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;字段&quot;</span>, action=<span class="string">&#x27;append&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-Y&quot;</span>, <span class="string">&quot;--display-filter&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;条件&quot;</span>, nargs=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--count&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;计数&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args)</span><br><span class="line">print(<span class="string">f&quot;field: <span class="subst">&#123;args.field&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;display-filter: <span class="subst">&#123;args.display_filter&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;count: <span class="subst">&#123;args.count&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;type(count): <span class="subst">&#123;<span class="built_in">type</span>(args.count)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p>命令行运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test_argparse.py -f <span class="built_in">test</span> -f test2 -Y hello  world</span><br><span class="line">Namespace(count=2, display_filter=[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>], field=[<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>])</span><br><span class="line">field: [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>]</span><br><span class="line">display-filter: [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line">count: 2</span><br><span class="line"><span class="built_in">type</span>(count): &lt;class <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="parse-args"><a href="#parse-args" class="headerlink" title="parse_args"></a>parse_args</h2><p>parse_args() 方法用于解析参数，在前面的示例代码中使用parse_args方法来提取参数值，对于无效或者错误的参数会打印错误信息和帮助信息：</p>
<p>命令行运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test_argparse.py -F <span class="built_in">test</span></span><br><span class="line">usage: test_argparse.py [-h] [-f FIELD]</span><br><span class="line">                        [-Y [DISPLAY_FILTER [DISPLAY_FILTER ...]]] [-c COUNT]</span><br><span class="line">test_argparse.py: error: unrecognized arguments: -F <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了Python的三种命令行参数解析方法sys.argv、getopt和argparse，可以根据自己的需要进行选择，getopt和argparse两种方法相比来说，建议选择argparse，代码量更少更简洁。更详细的使用方法参考官方文档：</p>
<ol>
<li>argparse：<a href="https://docs.python.org/zh-cn/3/library/argparse.html">https://docs.python.org/zh-cn/3/library/argparse.html</a></li>
<li>getopt：<a href="https://docs.python.org/zh-cn/3/library/getopt.html">https://docs.python.org/zh-cn/3/library/getopt.html</a></li>
<li>sys.argv：<a href="https://docs.python.org/zh-cn/3/library/sys.html">https://docs.python.org/zh-cn/3/library/sys.html</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>getopt</tag>
        <tag>命令行参数</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法-LeetCode</title>
    <url>/posts/algorithm-notes-for-leetcode/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="70807c1cc21dbc24c725db84b7f6fa452487211d78daf8fcb6bc57fefb272bba"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Windows 快捷键</title>
    <url>/posts/windows-shortcuts/</url>
    <content><![CDATA[<p>windows 快捷键<br><a id="more"></a></p>
<h2 id="打开-cmd"><a href="#打开-cmd" class="headerlink" title="打开 cmd"></a>打开 cmd</h2><ul>
<li>当前目录下打开cmd：Windows 文件资源管理器路径栏中输入 cmd</li>
<li>当前目录下打开cmd：在文件夹中，按shift键，点击右键，选择在此处打开cmd</li>
<li>user目录下：Windows+r，然后输入cmd</li>
</ul>
<p>另外，在文件上<code>shift+右键</code>会多出来一个 “复制为路径” 选项</p>
<p>cmd 命令窗口中输入<code>start .</code>会打开处于当前目录的资源管理器<br>cmd 命令窗口按下 <code>F7</code> 可以显示历史命令记录</p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>win + s</code>或直接 win键 打开开始菜单后输入名称快捷搜索打开应用和文件</p>
<h2 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h2><p>打开，命令窗口输入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">notepad</span><br></pre></td></tr></table></figure><br>记事本第一行写上<code>.LOG</code>：关闭时会在最后一行插入编辑时间</p>
<h2 id="文件资源管理器"><a href="#文件资源管理器" class="headerlink" title="文件资源管理器"></a>文件资源管理器</h2><p><code>Windows + e</code>：打开文件资源管理器<br>在路径栏输入<code>shell:startup</code> 或者<code>启动</code> 进入启动目录<br>路径栏输入<code>shell:appsfolder</code> 进入应用程序目录</p>
<p>选中文件<code>ALT + 回车</code> 或者 <code>ALT + 双击文件</code>：查看文件属性</p>
<h2 id="应用程序窗口"><a href="#应用程序窗口" class="headerlink" title="应用程序窗口"></a>应用程序窗口</h2><p>关闭Windows自带的程序窗口</p>
<ul>
<li>点击右上角的叉关闭</li>
<li>双击窗口左上角的图标关闭</li>
<li><code>ALT + f4</code>，在桌面按下 <code>ALT + f4</code>会弹出关机菜单</li>
<li><code>ALT + 空格 + c</code></li>
</ul>
<p>Windows + ↑↓←→：调整窗口布局</p>
<p><code>ALT + TAB</code> ：程序窗口切换</p>
<p>Windows + 1234等数字键：按任务栏上的顺序快捷切换窗口</p>
<p><code>Windows + g</code>打开Xbox便捷工具，比如截屏、录屏</p>
<p><code>Windows + d</code>：显示桌面或恢复桌面<br><code>Windows + m</code>：最小化所有窗口<br><code>Windows + Shift + m</code>：恢复最小化窗口</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>清空浏览器缓存：<code>Ctrl+Shift+Delete</code></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Windows cmd命令</title>
    <url>/posts/windows-shell-command/</url>
    <content><![CDATA[<p>本文列出一些常用的 windows cmd命令，使用<code>windows + r</code>键后输入命令或者打开cmd.exe命令提示符输入，其中cmd命令提示符可以通过使用<code>windows + r</code>键后输入cmd打开<br><a id="more"></a></p>
<h1 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ taskkill /im chromedriver.exe /f</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ wmic process <span class="built_in">where</span> name=<span class="string">&quot;chromedriver.exe&quot;</span> call terminate</span><br></pre></td></tr></table></figure>
<h1 id="切换盘符目录"><a href="#切换盘符目录" class="headerlink" title="切换盘符目录"></a>切换盘符目录</h1><p>切换到其它盘<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">C:\Users\10287&gt;d:</span><br><span class="line"></span><br><span class="line">D:\&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">C:\Users\10287&gt;<span class="built_in">cd</span> /d d:</span><br><span class="line"></span><br><span class="line">D:\&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="设置windows系统时区"><a href="#设置windows系统时区" class="headerlink" title="设置windows系统时区"></a>设置windows系统时区</h1><p>参考：<a href="https://winaero.com/blog/set-time-zone-windows-10/">https://winaero.com/blog/set-time-zone-windows-10/</a><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">tzutil /l  <span class="comment">//查看所有可设置时区</span></span><br><span class="line">tzutil /g <span class="comment">//查看当前时区</span></span><br><span class="line">tzutil /s <span class="string">&quot;China Standard Time&quot;</span> <span class="comment">//设置时区  </span></span><br><span class="line">tzutil /s <span class="string">&quot;China Standard Time_dstoff&quot;</span> <span class="comment">//关闭夏令时</span></span><br></pre></td></tr></table></figure></p>
<h1 id="打开资源管理器"><a href="#打开资源管理器" class="headerlink" title="打开资源管理器"></a>打开资源管理器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">explorer</span><br></pre></td></tr></table></figure>
<h1 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h1><p><code>shutdown /?</code> 查看帮助信息<br>关机<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -s -t 60 <span class="comment"># 60s 后关机</span></span><br><span class="line">rononce -p <span class="comment"># 15s 后关机</span></span><br><span class="line">shutdown -s -t 0 <span class="comment"># 立即关机</span></span><br><span class="line">shutdown -p <span class="comment"># 立即关机</span></span><br></pre></td></tr></table></figure><br>或者使用wmic命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic process call create shutdown.exe</span><br></pre></td></tr></table></figure></p>
<p>重启<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -r -t 60 <span class="comment"># 60s 后重启</span></span><br><span class="line">shutdown -r -t 0 <span class="comment"># 立即重启</span></span><br></pre></td></tr></table></figure><br>休眠<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -h</span><br></pre></td></tr></table></figure><br>在rononce -p、shutdown -s或者shutdown -r倒计时结束之前执行shutdown -a可以取消关机或者重启操作</p>
<p>按住 shift 并点重启可以使重启后进入 BIOS</p>
<h1 id="windows远程管理"><a href="#windows远程管理" class="headerlink" title="windows远程管理"></a>windows远程管理</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mstsc</span><br></pre></td></tr></table></figure>
<p>无法远程复制文件问题：</p>
<ol>
<li>结束进程rdpclip.exe</li>
<li>重新开启进程：win + r 输入rdpclip.exe</li>
</ol>
<h1 id="windows计算器"><a href="#windows计算器" class="headerlink" title="windows计算器"></a>windows计算器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">calc</span><br></pre></td></tr></table></figure>
<h1 id="打开记事本"><a href="#打开记事本" class="headerlink" title="打开记事本"></a>打开记事本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">notepad</span><br></pre></td></tr></table></figure>
<h1 id="打开控制面板"><a href="#打开控制面板" class="headerlink" title="打开控制面板"></a>打开控制面板</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">control</span><br></pre></td></tr></table></figure>
<h1 id="打开剪贴板"><a href="#打开剪贴板" class="headerlink" title="打开剪贴板"></a>打开剪贴板</h1><p>Win10：windows + v</p>
<h1 id="打开屏幕键盘"><a href="#打开屏幕键盘" class="headerlink" title="打开屏幕键盘"></a>打开屏幕键盘</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">osk</span><br></pre></td></tr></table></figure>
<h1 id="服务设置"><a href="#服务设置" class="headerlink" title="服务设置"></a>服务设置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">services.msc</span><br></pre></td></tr></table></figure>
<p><img src="services-msc.png" width="80%" height="80%" /></p>
<h1 id="注册表编辑"><a href="#注册表编辑" class="headerlink" title="注册表编辑"></a>注册表编辑</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">regedt32</span><br></pre></td></tr></table></figure>
<h1 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskmgr</span><br></pre></td></tr></table></figure>
<h1 id="写字板"><a href="#写字板" class="headerlink" title="写字板"></a>写字板</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">write</span><br></pre></td></tr></table></figure>
<h1 id="画图板"><a href="#画图板" class="headerlink" title="画图板"></a>画图板</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mspaint</span><br></pre></td></tr></table></figure>
<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall.cpl</span><br></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>重置 Windows 10 本地帐户密码：<a href="https://support.microsoft.com/zh-cn/help/4028457/windows-10-reset-your-local-account-password">https://support.microsoft.com/zh-cn/help/4028457/windows-10-reset-your-local-account-password</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 网络管理命令</title>
    <url>/posts/windows-shell-for-networking-management/</url>
    <content><![CDATA[<p>本文列出一些常用的 Windows 网络管理命令。<br><a id="more"></a></p>
<h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>ping: 测试网络连接情况</p>
<ul>
<li><code>-n</code>：要发送的回显请求数</li>
<li><code>-t</code>：ping 主机直到中断</li>
<li><code>-i</code>：生存时间ttl</li>
<li><code>-6</code>：IPv6</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping 192.168.20.8 -n 3</span><br><span class="line"></span><br><span class="line">Pinging 192.168.20.8 with 32 bytes of data:</span><br><span class="line">Reply from 192.168.20.8: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 192.168.20.8: bytes=32 time&lt;1ms TTL=64</span><br><span class="line">Reply from 192.168.20.8: bytes=32 time&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">Ping statistics <span class="keyword">for</span> 192.168.20.8:</span><br><span class="line">    Packets: Sent = 3, Received = 3, Lost = 0 (0% loss),</span><br><span class="line">Approximate round trip <span class="built_in">times</span> <span class="keyword">in</span> milli-seconds:</span><br><span class="line">    Minimum = 0ms, Maximum = 0ms, Average = 0ms</span><br></pre></td></tr></table></figure>
<h1 id="网络信息查询"><a href="#网络信息查询" class="headerlink" title="网络信息查询"></a>网络信息查询</h1><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat: 协议统计和当前 TCP/IP 网络连接</p>
<ul>
<li><code>-t</code> 列出所有tcp连接</li>
<li><code>-a</code>：显示所有连接和侦听端口</li>
<li><code>-n</code>：以数字形式显示地址和端口号</li>
<li><code>-o</code>：显示进程 ID</li>
<li><code>-p proto</code>：显示指定的协议的连接，TCP、UDP、TCPv6 或 UDPv6</li>
<li><code>-s</code>：显示每个协议的统计。默认情况下，显示IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6的统计信息，可使用<code>-p</code> 选项指定协议。</li>
<li><code>-e</code>：显示以太网统计。此选项可以与 -s 选项结合使用。</li>
<li><code>-r</code>：显示路由信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -ano -p tcp</span><br><span class="line">Active Connections</span><br><span class="line"></span><br><span class="line">  Proto  Local Address          Foreign Address        State           PID</span><br><span class="line">  TCP    0.0.0.0:21             0.0.0.0:0              LISTENING       4896</span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       1032</span><br><span class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:902            0.0.0.0:0              LISTENING       10388</span><br><span class="line">  TCP    0.0.0.0:912            0.0.0.0:0              LISTENING       10388</span><br><span class="line">  TCP    0.0.0.0:1080           0.0.0.0:0              LISTENING       11476</span><br><span class="line">  TCP    0.0.0.0:2425           0.0.0.0:0              LISTENING       7728</span><br><span class="line">  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING       7940</span><br><span class="line">  TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING       4</span><br></pre></td></tr></table></figure>
<p>查询5037端口占用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netstat -ano | findstr 5037 </span><br><span class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       34212</span><br></pre></td></tr></table></figure>
<p>找到对应进程（也可以在任务管理器中查看）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tasklist | findstr 34212</span><br><span class="line">adb.exe                      34212 Console                    1     10,692 K</span><br></pre></td></tr></table></figure><br>通过PID或者进程名杀死进程：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ taskkill -pid 34212 -f -t <span class="comment"># taskkill /pid 34212 /f /t</span></span><br><span class="line">$ taskkill -f -im adb.exe <span class="comment"># taskkill /f /im adb.exe</span></span><br></pre></td></tr></table></figure></p>
<h2 id="网卡信息"><a href="#网卡信息" class="headerlink" title="网卡信息"></a>网卡信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ipconfig</span><br><span class="line">$ ipconfig /all</span><br><span class="line">$ netsh interface ipv4 show config</span><br><span class="line">$ netsh interface ipv6 show config</span><br><span class="line">$ wmic nic list brief</span><br></pre></td></tr></table></figure>
<h1 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h1><p><code>route add [Destination] mask [netmask] [gw] metric [测量值]</code></p>
<ul>
<li>-p：添加永久路由</li>
<li>Destination： 指定该路由的网络目标。</li>
<li>mask：当添加一个网络路由时，需要使用网络掩码。</li>
<li>gw：路由数据包通过网关。注意，你指定的网关必须能够达到。</li>
<li>metric：设置路由跳数。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipv4</span></span><br><span class="line">$ route -p add 23.23.23.0 mask 255.255.255.0 192.168.97.60</span><br><span class="line">route delete 23.23.23.0</span><br><span class="line"><span class="comment"># ipv6</span></span><br><span class="line">$ netsh interface ipv6 add/del route 2001::/64 <span class="string">&quot;Local Area Connection 2&quot;</span> 2001::2</span><br></pre></td></tr></table></figure>
<h2 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -r</span><br><span class="line">$ route <span class="built_in">print</span></span><br><span class="line">$ route <span class="built_in">print</span> -4</span><br><span class="line">$ route <span class="built_in">print</span> -6</span><br><span class="line">$ netsh interface ipv4 show route</span><br><span class="line">$ netsh interface ipv6 show route</span><br></pre></td></tr></table></figure>
<h2 id="禁用启用网卡"><a href="#禁用启用网卡" class="headerlink" title="禁用启用网卡"></a>禁用启用网卡</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netsh interface <span class="built_in">set</span> interface eth0 disabled <span class="comment"># 禁用网卡</span></span><br><span class="line">$ netsh interface <span class="built_in">set</span> interface name=<span class="string">&quot;接口名称&quot;</span> admin=DISABLE</span><br><span class="line"></span><br><span class="line">$ netsh interface <span class="built_in">set</span> interface eth0 enabled <span class="comment">#启用网卡</span></span><br><span class="line">$ netsh interface <span class="built_in">set</span> interface name=<span class="string">&quot;接口名称&quot;</span> admin=ENABLE</span><br><span class="line"></span><br><span class="line">$ netsh interface ipv6 <span class="built_in">set</span> interface name=<span class="string">&quot;接口名称&quot;</span>  <span class="built_in">disable</span>/<span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line">$ netsh interface show interface <span class="comment">#显示接口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过python脚本自动化控制：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.popen(<span class="string">&#x27;netsh interface set interface name=&quot;接口名称&quot; admin=DISABLE&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="释放、更新地址"><a href="#释放、更新地址" class="headerlink" title="释放、更新地址"></a>释放、更新地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipv4</span></span><br><span class="line">$ ipconfig /release</span><br><span class="line">$ ipconfig /renew</span><br><span class="line"><span class="comment"># ipv6</span></span><br><span class="line">$ ipconfig /release6</span><br><span class="line">$ ipconfig /renew6</span><br></pre></td></tr></table></figure>
<h2 id="添加、删除IP地址"><a href="#添加、删除IP地址" class="headerlink" title="添加、删除IP地址"></a>添加、删除IP地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipv4</span></span><br><span class="line">$ netsh interface ip add address <span class="string">&quot;本地连接&quot;</span> 192.168.1.100 255.255.255.0</span><br><span class="line">$ netsh interface ip delete address <span class="string">&quot;本地连接&quot;</span> 192.168.1.100</span><br><span class="line"><span class="comment">## 设置静态IP地址</span></span><br><span class="line">$ netsh interface ip <span class="built_in">set</span> address name=<span class="string">&quot;eth1&quot;</span> <span class="built_in">source</span>=static address=192.168.5.125 mask=255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># ipv6</span></span><br><span class="line">$ netsh interface ipv6 delete address 本地连接 2001::1</span><br><span class="line">$ netsh interface ipv6 add/del address 本地连接 2001::1</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>cmd</tag>
        <tag>wmic</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：数组、链表、栈和队列</title>
    <url>/posts/algorithm-notes-for-linear-list/</url>
    <content><![CDATA[<p>从逻辑结构上来说，数组和链表这两种数据结构都属于线性表，从物理存储来看，数组占用一块连续的内存区，而链表在内存中是分散的，由于这种物理结构差异，在对数组和链表进行增删改查操作的时间复杂度不同。栈和队列是特殊的线性表，数组和链表都可以用来实现栈和队列，本文将简要介绍这几种数据结构。</p>
<a id="more"></a>
<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组-Array"></a>数组-Array</h1><p>数组使用的是连续的内存空间，内存地址是连续的，所以在声明时一般需要申请固定大小的内存空间。对数组元素的访问可以进行随机访问，时间复杂度为O(1)。<br><img src="array.png" width="50%" height="50%" /></p>
<h1 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表-Linked List"></a>链表-Linked List</h1><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>链表可以在非连续的空间中存储数据，访问效率低。由节点组成，每个节点都包含下一个节点的指针，在进行删除插入操作时修改相应指针就行，所以相比数组，它的插入删除速度很快。单链表链接方向是单向的，访问要从头部顺序读取<br><img src="linked-list.png" width="50%" height="50%" /></p>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表的每个结点有两个指针，分别指向直接后继和直接前驱节点，对双向链表的访问可以从任何地方开始。<br><img src="double-linked-list.png" width="60%" height="60%" /></p>
<h1 id="跳表-Skip-List"><a href="#跳表-Skip-List" class="headerlink" title="跳表-Skip List"></a>跳表-Skip List</h1><p>跳表只能用于元素有序的情况，也就是链表元素有序。跳表(skip list)对标的是平衡树(AVL Tree)和二分查找，插入、删除和搜索时间复杂度都是O(log n)，其中Redis中的sorted list使用的就是跳表。</p>
<p>跳表其实是对有序的链表进行升维，也就是空间换时间，升维后就会多一维度的信息：<br><img src="skip-list.png" width="70%" height="70%" /></p>
<p>可以看出，这跟二分查找类似，第k级索引结点的个数为n/(2^k)，在跳表中查询任意数据的时间复杂度就是O(logn)，空间复杂度为O(n)。</p>
<h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈-Stack"></a>栈-Stack</h1><p>栈是一种特殊的线性表，在一端进行操作，特点是先进后出(First in Last out，FILO)，或者说后进先出。<br><img src="stack.png" width="40%" height="40%" /></p>
<p>主要包括入栈（push）和出栈（pop）两个操作，Python中可以使用append(data)方法实现入栈操作，使用pop()方法实现出栈操作，可参考：<a href="https://docs.python.org/3/library/collections.html">https://docs.python.org/3/library/collections.html</a></p>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是允许在一端进行插入而在另一端进行删除操作的线性表，特点是先进先出（First in First Out，FIFO）。<br><img src="queue.png" width="60%" height="60%" /></p>
<p>在Python中，入队使用append(data)方法实现，出队使用pop(0)。</p>
<p>一种两端都可以进行入队和出队操作的队列称为<strong>双端队列</strong>，还有一种队列叫优先队列(priority queue)，队列中的元素被赋予优先级，具有最高级先出 （first in, largest out）的特点。</p>
<h1 id="python中的列表和元组"><a href="#python中的列表和元组" class="headerlink" title="python中的列表和元组"></a>python中的列表和元组</h1><h2 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h2><p>列表和元组都是有序的，可以存储任意数据类型的集合，支持切片操作，主要区别如下：</p>
<ul>
<li><strong>列表是动态的</strong>，长度可变，可以随意地增加、删减或者改变元素（mutable）。</li>
<li><strong>元组是静态的</strong>，长度大小固定，无法增加删减或者改变元素（immutable）。要想改变元组，只能重新开辟一块内存，创建新的元组。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_tup = tup + (<span class="number">4</span>, )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_tup</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>由于列表是动态的、可变的，而元组是静态的、不可变的。所以他们的存储方式是有差异的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">l.__sizeof__()</span><br><span class="line"><span class="number">64</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup.__sizeof__()</span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure>
<p>元组的存储空间，比列表要少 16 字节：</p>
<ul>
<li>由于列表是动态的，所以它需要存储指针，来指向对应的元素（int 型，8 字节）。</li>
<li>由于列表可变，所以需要额外存储已经分配的长度大小（8 字节），这样才可以实时追踪列表空间的使用情况，当空间不足时，及时分配额外空间。</li>
</ul>
<p>为了减小每次增加 / 删减操作时空间分配的开销，Python 列表每次分配空间时都会额外多分配一些，这样的机制（over-allocating）保证了其操作的高效性：增加(append()) / 删除(pop())的时间复杂度均为 O(1)。元组长度大小固定，元素不可变，所以存储空间固定。</p>
<p>元组比列表更加轻量级一些，所以元组的性能速度要略优于列表。当然，对于增加、删除或者修改元素，列表的效率更高。在实际应用中，如果存储的数据和数量不变，使用元组更合适。如果存储的数据或数量是可变的，需要随时更新，则使用列表。</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=<span class="built_in">list</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=<span class="built_in">list</span>([<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure>
<p>list()是一个function call，创建list时会进行一系列参数检查的操作，而<code>[]</code>可以进行直接调用，是一个内置的C函数，下面测试一下他们的性能差异：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>python -m timeit -n <span class="number">1000000</span> -r <span class="number">5</span> -s <span class="string">&#x27;a=[]&#x27;</span></span><br><span class="line"><span class="number">1000000</span> loops, best of <span class="number">5</span>: <span class="number">6.7</span> nsec per loop</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>python -m timeit -n <span class="number">1000000</span> -r <span class="number">5</span> -s <span class="string">&#x27;a=list()&#x27;</span></span><br><span class="line"><span class="number">1000000</span> loops, best of <span class="number">5</span>: <span class="number">7.17</span> nsec per loop</span><br></pre></td></tr></table></figure><br>可以发现<code>[]</code>方法的性能更优。</p>
<h3 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取list长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(l)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增元素（末尾添加）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增多个元素（末尾添加）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.extend([<span class="number">9</span>,<span class="number">10</span>,<span class="number">12</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定位置插入元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.insert(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>可以使用remove、pop和del方法参删除list中的某个元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.remove(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.pop(<span class="number">0</span>)  <span class="comment"># l.pop()删除最后一个元素</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;l&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>对于 Python 3.2以后的版本可以使用clear()清空元素：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取list长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印最后一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[-<span class="number">1</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印倒数第3个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[-<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印前3个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印后3个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[-<span class="number">3</span>:]</span><br><span class="line">[<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">reversed</span>(l))</span><br><span class="line">[<span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间隔1个字符输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[::<span class="number">2</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式是Python中比较常用的功能，用于从其他可迭代对象(如元组、字符串、数组、列表等)中创建新的列表。语法格式如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newList = [ expression(element) <span class="keyword">for</span> element <span class="keyword">in</span> oldList <span class="keyword">if</span> condition ]</span><br></pre></td></tr></table></figure><br>比如计算列表中偶数的平方：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_square = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> list_num <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_square</span><br><span class="line">[<span class="number">16</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">64</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>上面的列表推导式等价于：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">list_square = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list_num:</span><br><span class="line">	<span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">		list_square.append(x ** <span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><p>下面列出操作list的其它内置方法</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">index()</td>
<td style="text-align:center">返回查找元素的索引</td>
<td style="text-align:center">list_name.index(element, start, end)</td>
</tr>
<tr>
<td style="text-align:center">count()</td>
<td style="text-align:center">返回目标元素的个数</td>
<td style="text-align:center">list_name.count(object)</td>
</tr>
<tr>
<td style="text-align:center">sort()</td>
<td style="text-align:center">排序，默认升序排列</td>
<td style="text-align:center">降序：list_name.sort(reverse=True)</td>
</tr>
<tr>
<td style="text-align:center">sorted()</td>
<td style="text-align:center">排序,返回排好序的新列表</td>
<td style="text-align:center">sorted(list_name)</td>
</tr>
<tr>
<td style="text-align:center">reverse()</td>
<td style="text-align:center">翻转列表</td>
<td style="text-align:center">list_name.reverse()</td>
</tr>
<tr>
<td style="text-align:center">reversed()</td>
<td style="text-align:center">翻转列表,返回一个倒转后的迭代器</td>
<td style="text-align:center">reversed(list_name)</td>
</tr>
<tr>
<td style="text-align:center">reduce()</td>
<td style="text-align:center">对可迭代对象(链表、元组等)中元素进行累积</td>
<td style="text-align:center">reduce(fun,seq)</td>
</tr>
<tr>
<td style="text-align:center">sum()</td>
<td style="text-align:center">求和</td>
<td style="text-align:center">sum(iterable, start)</td>
</tr>
<tr>
<td style="text-align:center">max()</td>
<td style="text-align:center">求最大值</td>
<td style="text-align:center">max(list)</td>
</tr>
<tr>
<td style="text-align:center">min()</td>
<td style="text-align:center">求最小值</td>
<td style="text-align:center">max(list)</td>
</tr>
<tr>
<td style="text-align:center">enumerate()</td>
<td style="text-align:center">返回可迭代对象的下标和值</td>
<td style="text-align:center">enumerate(iterable, start=0)</td>
</tr>
<tr>
<td style="text-align:center">filter()</td>
<td style="text-align:center">过滤序列</td>
<td style="text-align:center">filter(function, iterable)</td>
</tr>
<tr>
<td style="text-align:center">map()</td>
<td style="text-align:center">求最大值</td>
<td style="text-align:center">max(list)</td>
</tr>
<tr>
<td style="text-align:center">min()</td>
<td style="text-align:center">求最小值</td>
<td style="text-align:center">max(list)</td>
</tr>
</tbody>
</table>
</div>
<p>注意，元组没有内置的reverse() 和 sort()这两个函数</p>
<h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>理解了这几个数据结构的特性后，我们可以计算出对他们进行增删改查的算法复杂度了，可参考<a href="https://www.bigocheatsheet.com/">https://www.bigocheatsheet.com/</a> ，列出了对各种数据结构操作的时间复杂度和空间复杂度。<br><img src="time-complexity.png" width="70%" height="70%" /></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>链表实现代码：<a href="https://www.geeksforgeeks.org/implementing-a-linked-list-in-java-using-class/">https://www.geeksforgeeks.org/implementing-a-linked-list-in-java-using-class/</a></li>
<li>Java 链表源码：<a href="http://developer.classpath.org/doc/java/util/LinkedList-source.html">http://developer.classpath.org/doc/java/util/LinkedList-source.html</a></li>
<li>跳表：<a href="https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html">https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html</a></li>
<li><a href="https://www.bigocheatsheet.com/">https://www.bigocheatsheet.com/</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>数组</tag>
        <tag>链表</tag>
        <tag>栈</tag>
        <tag>队列</tag>
        <tag>数据结构与算法 - Python</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：时间复杂度和空间复杂度</title>
    <url>/posts/algorithm-notes-for-algorithmic-complexity/</url>
    <content><![CDATA[<p>算法复杂度包括空间复杂度和时间复杂度，是衡量算法执行效率的重要指标。为了充分利用计算资源，提高业务处理效率，最有效的一种解决方式就是优化算法。</p>
<a id="more"></a>
<p>在介绍空间复杂度和时间复杂度之前先问一个问题：为什么不通过执行代码，然后统计算法执行的时间和占用的内存大小来度量算法执行效率呢？</p>
<p>答案显而易见，算法执行时间受硬件影响，同一段代码在不同机器上执行时间可能都会不一样。再者，执行时间也受数据影响，比如数据规模，还有比如排序算法中，如果排序数据长度大小相同，但有序度不一样，执行时间也会有很大差别的。</p>
<p>算法复杂度通常用大O表示法（Big O notation），计算算法的渐近复杂度(asymptotic complexity)，表示代码执行所消耗资源（CPU时间和内存）随数据规模增长的变化趋势。</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>时间复杂度表示为： T(n) = O(f(n)) </p>
<ul>
<li>代码的执行时间T(n)与每行代码的执行次数n成正比</li>
<li>n表示数据规模的大小</li>
<li>f(n) 表示每行代码执行的次数总和</li>
</ul>
<h2 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h2><ul>
<li>O(1)：Constant Complexity 常数复杂度</li>
<li>O(log(n))：Logarithmic Complexity 对数复杂度</li>
<li>O(n)：Linear Complexity 线性时间复杂度</li>
<li>O(n^2)：N square Complexity 平方</li>
<li>O(n^3): N cubic Complexity 立方</li>
<li>O(2^n): Exponential Growth 指数</li>
<li>O(n!): Factorial 阶乘</li>
</ul>
<p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlog(n)) &lt; O(n^2) &lt; O(n^3) &lt;O(2^n) &lt; O(n!)</p>
<p>O(1)：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">6</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span>+n);</span><br></pre></td></tr></table></figure></p>
<p>O(log(n))：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">1</span>; i &lt; n; i=i*<span class="number">2</span>) &#123;   </span><br><span class="line">	System.outt.println(<span class="string">&quot;n:&quot;</span>+i) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>O(n)：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">1</span>; i &lt; n; i++) &#123;   </span><br><span class="line">	System.out.println(<span class="string">&quot;n:&quot;</span>+i); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>O(n^2)：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">1</span>; i &lt; n; i++) &#123;   </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j= <span class="number">1</span>; j &lt; n; j++) &#123;       </span><br><span class="line">		System.out.println(<span class="string">&quot;i=&quot;</span>+i+<span class="string">&quot;j=&quot;</span>+j);   </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>O(2^n) ：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n&lt;<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">	<span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="主定理-Master-Theorem"><a href="#主定理-Master-Theorem" class="headerlink" title="主定理(Master Theorem)"></a>主定理(Master Theorem)</h2><p>主定理（The Master Theorem）用于计算分治算法的时间复杂度，将规模为 n 的问题转换为 a 个规模为n/b的子问题，其时间复杂度的递归公式为T(n) = a*T(n/b) +f(n)，f(n)是将原问题分解成子问题和将子问题的解合并成原问题的解的时间。</p>
<p>更详细介绍参考：</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms">https://en.wikipedia.org/wiki/Master<em>theorem</em>(analysis_of_algorithms)</a>)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%AE%9A%E7%90%86">https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%AE%9A%E7%90%86</a></li>
</ol>
<p>比如二分查找，二叉搜索，归并排序等算法的时间复杂度采用主定理来计算。<br><img src="master-theorem.png" width="60%" height="60%" /><br>搜索算法DFS、BFS，图的遍历时间复杂度也为O(N)</p>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>空间复杂度用于度量算法运行过程中临时占用存储空间的大小，可表示为： S(n)=O(f(n)) </p>
<ul>
<li>代码的执行占用存储空间 S(n)与n成正比</li>
<li>n表示数据规模的大小</li>
<li>f(n) 表示存储单元占用大小</li>
</ul>
<p>常用的空间复杂度为O(1)、O(n)、 O(n^2)，相比时间复杂度，空间复杂度更简单，比如数组的长度，递归的深度。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>时间复杂度</tag>
        <tag>空间复杂度</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：持续集成</title>
    <url>/posts/software-testing-points-for-continuous-integration/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8172993a4ee7a239ca167947040da0abd79798d97aa9c628548611f8b64d18f2">b63abfd0cc043585c7f59d942442ea6db36abf15959535f892fa87de01756606d5c9791752ee9190280362e37d571f03acef95b94d4115214ad9d0624a4a969fc042c946c9158f232e113b03197d65c654b39fc6539305e3ef7f76d5b2dd3b8225649d767c8384927443628bdea9e0216d7bc7fb9e36a90dbc9ae2c395ec50642627b3b26cc26cd4a5328336ea64cab132e3751b2d34387f50cd88721f44e827f9b3f2820086df755c01339262b87f0327261903c278be5ea3c4b09492798876538ff38728ecad023f66663407eac84c4167b83fb31b6f64fb83d484b97acd69b49e1df8ef685e6ab12e69dc9391e0a967e650716bf46ddc0514c9d12ba70b644e42832e0ba4ab0ab9d513a2be4f876cf2453278be99a9d25ad1627f633a53beca7a5fc5bcfc8d113e3cfb2f0af5d0f6d7c27374bcb04bc6cc5b25df842967775945ee566386a9e885760204f379eeb81e8ebe2deae9062d66d4be91f1a05a9b99d12615e30e4c5f7598dc77a82a04a91189d5db5bcc8b4611589de07358b4ff2d95294b1c0522d97acd9eff7d36a415f0429c6f332c9e8e4ea760493d2b93b1846202b38f8ff1d355429320e8ee9ac0f669f17d01f6a34ba3210424649593bc11c9c080461bbfe374711bfa8f7b407b4242f0ff3207e545f4dd05b9e6d98db28487348c71c451c08ceda0b17934cad5db636215104767929fe8b39661da2e405707fb83d611e008cb40d43e9b2a6bd4b5c5002098e3cf431c0efaf42bd0c29c20a4ba5442e5fa2dd52953ffc9072a16a07ca7d2a62f33cfa16d4cb0a52ebd97daa2e1e92833bed5bfd1282bba88dc9a5719e797fc98e67c68fcf510341cd0ead681d793ea9868dfa4a0319f09d80e247dddcf117e6ae3c6c065d26dec8e21df69e52d00c21743d90372259b62e19ab3c5007a92119413da13eeeaff13cecd42e659aaca6e72d3da47036e4cd02ba0bd18623c3ed4a37c1118c42e27687633ff0d71fd46a4a6ce108980f03d6c99b5b66046afa3985e6a986ac113c1ddf4ed5a3195b2b8cbfb58b5b812e788d3ea0ce792a294e94555291782f2623cc177f7beeb40bc95efeff12dd43e548a622c01201ed38fa3621cb1b7bf30bcf6b3dcf10342a8dccc8c8613c72b4c71d45c1d0afb9ff492e7af36eda8c6c60b052a0850998e7c94cd0c3059976daf6c90eb12b4f27a9f0b08a2ab5aa98f5c6688e3898bb305fd2c03005603130674a8e5b428875080105b691c249c53031c6e05bbdd8c67</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试开发</category>
        <category>持续集成</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：算法</title>
    <url>/posts/software-testing-points-for-algorithm/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bb9a2ad4a6727f7ad8cd3c123380b847d7cd6fcb2c17ab44e9a98643f19f0b3c">b63abfd0cc043585c7f59d942442ea6d35d2ba053943895347e2a5939164eb1956a80327e8cf0d0d6fff25ab98b280529ce56e1506a0f6138170807cc7d93f2b10227b6ef52ea69bcec000e25e0ea227f3b1afa8f0f2c5880bcba60be6de7020246add904e7f4fbbd40d5274bec0a06d62043300ee37d374664aa678bb88b39985f411ad363ac0a04f51073fa4a97cbfc72c18acf6e55db8b59fa1f50aeebbdfa1c5ce31e1e26e82d3f05907cda862ed3e6e7f64f59a1d4c1b867911ab3a3da6739cc896b665f0accdbba24e875ac61eef7b5c100ef8bad4e3e11d936753de352fa50af5d6f3e18e507d5aebd925834b61a542a4c7c136706803986892398ef9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：docker容器</title>
    <url>/posts/software-testing-points-for-docker/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bdfb63e69625a46f6e74f93fdee44a090b31e5382cd34ceb181fceee787f2e2c">b63abfd0cc043585c7f59d942442ea6db36abf15959535f892fa87de01756606d5c9791752ee9190280362e37d571f03acef95b94d4115214ad9d0624a4a969fc042c946c9158f232e113b03197d65c654b39fc6539305e3ef7f76d5b2dd3b82f0393321e025e45bd119dcca05b4bd49fdd969d7f1d47703092c1dc4b070706864633dd769c88c34dc312a29c790cc3ac3a01457bb182029aed8c9a219c149b97e4507abaa61ded98ef7f0d1735eed91d60a8fbd875c23303d5c3923d58118bf4f2cd4888736e4d0d0e8e1da0c9fd0e2e5072a8956892c82c6ea1ce2ade1780f3a89259cb816c328da288d7ac8d0a2996e22642591669b3a9c018b074102c87d194b8bc99823db307d763debaf241ba02e6e967edb36be057fcd6b928354b682889e105b0c0ec08b72071448c49d13546f285858eb48d2769a5f3e03842abd7be6636084d59d273aa5beeee9fa218e2e06fe387f8e955d003d1ef18b4e78e22fc0c27939d58d907018a18bd9d22ac8f71b3d625edce224cfdf47397a55611654139cdfe138d672a8313a16397f79ec105df038e26f3aa0f307715018fd52dacb4d4c956bb63862ce571d2ad974ae50fc0b2414da4135e757900ba84ef1c389ef6d334e064107bd425335279333bd69d7cba3bb2cb79350e865e8d640bab2bfe742d5ce8162605f16dd3b8c58f58d30348d841b8f9ac98bcdeb5eafe42aca3381d2434a778172de242891bef8a76a110c30175e95014c9f69b396f9ed252d6493dc0dec3bb0881ef7c30f467cefa62dc96c36162e118df5704961a3f448790b9a207d6a246045037f017f8b59508491db5f24f8eb463f569424a9ca0ceaac66989020f4a77c088e9f3b5df74fa64424662b135bd4584217781980d71506eedbc5b687880fad6e059c7610a8ce5ed7450fb0ec3c93e270d82cb171ca1302c679011056d13967f0e6b6d5176305190570095705f5b5bcc5aeed43a3c3829eb350efe91942fd4b5a45a1844f3ec58bf1e4d9603207373ff4c6206b65e405691bf3e580e4dbfe27c2923e9069e024ecce56eca250875ed71519c35f5397fbb48611edbdf2e81fde830c78042cbf7324583825b49ce4efcb867baca94fa6e0a07455ae</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试开发</category>
        <category>容器技术</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：Linux、Shell</title>
    <url>/posts/software-testing-points-for-linux-shell/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="85bb323f92c506245b18a6924de51aeecc3463b15b8fdf4876298df387461b2f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：app自动化测试</title>
    <url>/posts/software-testing-points-for-mobile-app-testing/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="434fb464a5eb02cf85b13414b1ebb0c167b230bf7af685e8cafd6a3e6f3e4ac0">b63abfd0cc043585c7f59d942442ea6d28da3d34570ca4525470b8aa28c3e312e03219c2858c404e7e75ac78343d90f2d0c1e66865e84b1f2e9974890c290e2bc59049a667e063678fda96d67a350753ce163381ef74722fa293fd4fd6ddee80b5828937c33d6e62d550cfcace65e40232003cbf5f154b98b4d9d296b22740f8007ae6ba888d8fd612acfb8c3d160344c25fcdbaa269d75b78e5e1afaaf77c27f1e7da1920674240cd9cacf7507ef08e5a279796e0e12861819d8138ebb845a984bab590e676ad3c351a2a385b05a579ea38fc2f161754dbca407334c4a0ff174ebad25483d3c9d2868bd7ec851f736442a29e1d0d6697a3f1ff50a052c2e8b97fbe4a279191d507b1114501b482addc06a4cdb75b3781928b7bac92a112c8f716673d63cf7d0567979fda8eaa3467bfb02ec8b8616eb3654853d2a9a302d5efe3893e4a27ee418e153c07105efeb22ec4d687436dbef35799b13121a21026c23ba535ceddba07acc7de42d7239299515cdb0add9c627d3eed2bfd92bec740604cda15d3ea69daaa26b87b3ab7b547cbd3cb76593431c99475a86b14806d214cd7356bd691071504eff9020e02c92a1a245a593ea4253ebe2e54f8fb205c329c61c1890556977d8f57659d03b518af173a3d1c975f351f7db3fb9be73b55be5c2883f27e667e517903b9ffe29e41ebc36d850cf8819ebf980bc75ebcff6bac1931c92f47903a6ed8bb1b03ba316c1272f5a500d95d3a288dd2311e68fc639f63741ac32dbd413f96fbd1b4457035e38b77b0f4b1ce7bd466d69ae7280d4fc8f5837b4d1144abdbfe8d5ddfe87e2634528b68f049752e125e73c0ea2c37e61c1b783e8c8b842c617904b2849a1236d351932d38ae7f41562f586cecca97033696ea7b7d5d7229a0033015f805053e49a23f7eb1577283343e036a0eb122316a874af4cc3f8f487d747a568be238e8b69f6606e181b7f67cef543aa5e76635b2a0b5e3c1652fcd8810009dc70720e5e2b6306f19b7afd724d4507213a44104a492da6886a18ae722175ecf3edeb222f77a7037889644cbd52d80cc0bb50a388f91251cc35b714c13586705259c48fbced3d56211d7164720251e920dd0da3593117221bec33dbfa740d9da8af56a216d998057763b40ca0d8e15623bec13820ad7b3dc261e9179ebd4636ef70f6c7a7c08d6c64d04d5f96c6d579ad22d0bf0e469a42b3632218a8a87a56f1b6cf73b20d705acae436e7cde00ac50663ad0feed4b05ec55b0373b4490567749c9655bd290bdf492ff13961ed2ed0ba2e605e03a3be73fdb84c05e460402fba33612625bb9e3add1136b8cde263a8714fc6ee4bdea7cbdf2d1aecf0d3e6a3613f72b2cb7d3fd2d48f6504c2ff525deb8549322d63f26fa1dfab4001b0d886ceade8cf2f600374981a2ae25666be440cdf4f07b2730a7c3212cfe2415e89904548f1a7d8463dcc826270de149e74ea9f1864cf545b5f6320ae723a8cbb49a1dfbef98ca8f88b867bc05c8e6fa1f0a8e7467b41032807ec0cf67c37da882fd40e3287833abddfe391314aa56c516f96ed2630af99afc4d210cbe7ef7aae0b03b28d4e48c7c14b36cfe259c72fceb75c23d408a6a6c172211d26e710ebbd5b010172978562dce4891490d8b5abe1ae3be609c9044b0e9f66b1a7c9af316796b6250e8eb7730154dffcdb5babaa38d091a6c2b46ef8ef779d03b2fe22411b3e1c4162e37b9d65fbeba6b5ee968735c9844e63ca61683c2b0940044f44990eed59fa67e35ae36b9bd89d4672c782994a7704ac2e2ab594b16e65009e7701d43ea55a4ba7ce3e12c66d5087e13180f676824ad7dd638ba1a370663482ffbfd0305dfc6753798aef2a721880785039e44b49b0814ece007111270df8224c7b7876390ee0ec1e9e90507d530d5857d482b46ac187c33c1b28a258836715d0f626b451e4947e0da97f1135921029ad591472f9f622073cc595d7a22b0754b0b2481533c6ff83b5b3eb09e4fc513565a0c6be1e0fb70ac466b33f079604464bf5dd0592e24f3971e1108bd7ff1fcd221236e8fc463dd0230b9f33d36faea111d27968811ba8800d7908393dcfcd2532576efc28487a04efa57840410eb9596990a52cb8aa5c7a3858415dc0ba0bb1de054d799204cf851c5c5201b10a322c92a2eee9e73c85eded86d80955a75e38a3b6e5be950401e37dac7a252b0cf9e2dc2ac2800a3f0771500ef56f73d5ebe25c4aab222a88013d0479e5c39d3419699d5deed1b5db8b90f45447adc9e0961de07815ec28a7760f242c7011046ad24734e76083a3146ff099a084bf12a8fbc94fbfd27b87960119472decb8308fcf7cb16fb17202d6617e6117be2c1ce2adc5a7435bf44004e52970f51e36bfc29b1ddf73f0497d89b310043387e09343171f2d12cbc16657970b5bcd9cd49aa214c23a15823271744f51a9f5b13d8bb88e2004a7a11109ef15a7c565d5f418830c7a1fa40ecc84f2a2a593f281a91f96960e336030eae765019db5da63a7713bb17d86498103b981d992f9dad7911716b1a63e8ce00fc67365cb2c8d589a06e538fdd73c3f4ebbb093a6d1a3c91289b180c8c927c4e8a84d87acfb3e3f44af7543a0069f0d34675bb246d670e0ca7b6f528c4edca6836d09841a0f30bd031a9034c1a77ef011f177679bff0e3d27d98fc416f3858fc1eb202990e8a9eb683a46f364ad4e0718809674c23b2c73d7da3f3eb682af4db78e5e059bdf379c14e504dc1d9c8fa5d7b7f88e84a72ab0ce5fe8343d084d647351f4db1cbfe8cc84b366ae41034ddfa3e8f6d7d61d8ccd6fcece51f3341c68edb44095d8c8856640430ebcccbd785a393554ccda17c13eeb066acde38a176b55548dd824800c4a0d23bf94944fc6423dbf51a0b226a8f5fc0d29758e77ac01a0848aa6221f4416ea96fc50108d2934d7f86f6ad884a8b69bd13542a408e537bc232508fc020e2f7fdc15eee778aebfe59602f4c91a5542eaaa224e0d14fd64cdba27c471d69fdeb6de459dc299f346b52f6d8499fc104ec3b33152708f7d1500633b8bf87f092253dbbb2de7789a341d6938939a766358472078873a07d18ee2481e55949c0e0e9cea8b1a8d32651284f6eac52925b4e154e7acf683f8725bbd87e04cfd5e6a20a2813c9626d98b876cb4bdde8b8cf256908015b3b48c4d9f17676798c129b8457fef9cdb876e50f3fa179824c3c8620b2c7cba2c2820ea1e03ceedb9559b70e949810806f328cbb636c28ca5231f655d2c01847ffdff94c1b991507adeef76513b9ff38e5a7a3c5f47768a17318b1b69435d9f7f51b19de9d81886303d8f3a898714e5849ffaec49904bf396c3dd985d6c87621d595c48e2b24feaeb50f0062eb223e1a2e7782654e54c39da8cee2311ad26e1ef6615be724c27d5558fa5318510edd1547cc28b90c580ec417bc563b2e33564440073a01b9e20baa1dc30c35f92bf24bf0b263c7dfebc3a9ed048b2585e39b33b5b37429953fc364cc7d1658e543fe0704457730bc33b1dafc6ccf3d82f04788058c75d33cc406d273f62caac45e46a0480ebcbb0781de10c94cf9c380efa989be31e8a5cf7702b4990127eb320cb4a5e56127bc41dfb30603eea895cea2f8ea1185df2550589c8fda36ca933ddd62410317cbafdcf09794c1a545acdba3eb95f5047faf67ad74874c1991a199a8df960770635d679a39d7ab4350761228f3b34cab6a182f97a3cad7ccdba271942cb0b7986261230de53ecf504c8025e22c6ead63cc5f4965afff919cff57caab1c06b2f297ae646aa6d43fc68d9ea5259ec75741a6c75fd50f209158b9726bf076a2e6f0ce04f4fbe98f1e740ab500c276c8339691fae2e6333250ca12c2937395642543e2e27211c6f50452ede674883ee0456e8bda9e9b4507f72545318730e1f367b7c3e8b2ad98038b157e605f032bd514a193759d86cbccc5c4e232e9613a1de3751317c04aa7ebfc8c2e19c0bb84388c2485b03869849ac6ce987ce8ba2dd7179715cbe1c0bab6f5b4e3c61169881ece457c07e69321a98b27b8c84b23987313d0cb56d9cdefa4e15ce934f9abcc89531d600c66b9fec91ca611c83014c2de271f27bce342d1fc661263d4942190bd5ea8e15d444bf72a7faab4e6a7bd6a8e48a532de0b81b07b696c53cb6c6ce04a74a9d00d318f1d2bb5c4c416e701682d8314bff7f5797b92b7524575729074917b1249cde1dae7c2beccb0e31dfac4f9988abe947b9e4eac313636a189288ecff93025e29482888c6ccd3f55e7668e658aa8c1b9050303f7584f35b2ca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：MySQL数据库</title>
    <url>/posts/software-testing-points-for-mysql/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f291e0555a72060c9ad98168481aef1450280ea90f75f8c1e78ee9b1e7b2db77"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试开发</category>
        <category>数据库</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：性能测试</title>
    <url>/posts/software-testing-points-for-performance-testing/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="745b0e23f5d8509fbab08a84b91f49a2393e6c8bbd1eb65f7a46162cba4decb9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>性能测试</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：Python</title>
    <url>/posts/software-testing-points-for-python/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f15f4b81ab8f09a09a885efd59b177e24f149e5b56d2df87c59c7f7c30e62445"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：接口自动化测试</title>
    <url>/posts/software-testing-points-for-requests/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a8515a27f1f0de05a1095f151848b8435c7d2ac897382ecef1a40132bc321ef5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：软技能问题</title>
    <url>/posts/software-testing-points-for-soft-skills-question/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e76bf2c359f416fb0a7a7b26a54efaa0855a36049e44a61769cb02713fda011d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>软技能</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：测试理论</title>
    <url>/posts/software-testing-points-for-test-theory/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cb536dfa9027abd36e0893ae2fee3af213e4b13be67d40617bacef7e263fbbf6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试题库</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：Web自动化测试</title>
    <url>/posts/software-testing-points-for-web-testing/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="70007bfc95e634ac563ddb7e25bcccbba2979231f4d172983bff3d5be5717696"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>测试题库：计算机网络</title>
    <url>/posts/software-testing-points-for-network/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="10180a776d6e097c16f150ee3d5d2901f51b0617d51cceec850d3f4245bc1168"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算机网络</category>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jenkins实现hexo博客自动发布</title>
    <url>/posts/continuous-integration-for-jenkins-blog-build/</url>
    <content><![CDATA[<p>本文介绍使用jenkins来进行自动发送博客，检测博客项目是否有文件增加或者修改，如果有改动就执行本地构建和发布。</p>
<p>PS：写这篇文章时还不了解Github Actions服务，刚好用过Jenkins，所以使用Jenkins来实现博客自动发布。如果你只想实现Hexo博客push后触发自动编译发布到GitHub Pages或者Gitee Pages，可以使用Github Actions服务，实现起来更加简洁方便，具体实现可参考<a href="https://blog.csdn.net/u010698107/article/details/120476856">使用GitHub Actions实现Hexo博客自动发布</a>。</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>去年使用hexo搭建了一个个人博客，使用Gitee Pages服务部署。发布博客的步骤一般是这样的：先编辑好文章，放到特定的博客项目目录下，然后本地生成博客静态文件，本地构建完成后进行发布，也就是上传到gitee博客仓库，更新Gitee Pages 服务，这样hexo博客就发布完成了。hexo博客搭建和发布可参考文章：<a href="https://blog.csdn.net/u010698107/article/details/113781267">Hexo+Github/Gitee 搭建个人博客</a>。</p>
<p>这个发布过程，开始是进行手动操作，每次编辑好文章后，除了发布到公众号，CSDN博客外，还需要发布到搭建的个人博客上（个人博客搜索自己的文章更方便），Gitee Pages服务与GitHub Pages不同的是，博客push完成后，需要手动更新，GitHub Pages是自动更新，出于人类懒惰的本性（哈哈，是我比较懒），感觉这个过程比较繁琐。然后写了一个自动部署的脚本，这样本次写好文章后，双击运行脚本就会自动进行上面的步骤，脚本执行完成后看一下部署有没有问题就行了，这样比手动操作省事很多。</p>
<p>但是又发现一个问题就是，构建博客的环境在一台笔记本电脑上，但我不在一台电脑上更新博客文章，也就是我在其它电脑上更新文章后，需要到笔记本上pull新的更改，然后进行构建发布，有时候会忘记更新，所以希望实现定期自动更新。什么技术方法可以实现呢？想到了持续集成工具jenkins，它可以实现持续集成和持续交付。本文主要记录一下这个实现过程。</p>
<p>下面先介绍一下使用到的自动化脚本。</p>
<h1 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h1><h2 id="检查博客是否更改"><a href="#检查博客是否更改" class="headerlink" title="检查博客是否更改"></a>检查博客是否更改</h2><p>检查博客是否更改主要包括：</p>
<ol>
<li>本地仓库是否有文件删除、增加或者修改</li>
<li>是否需要同步远程仓库：博客文章使用github管理，需要检查远程仓库是否有更新</li>
</ol>
<p>远程仓库是否更新的代码参考了<a href="https://stackoverflow.com/questions/3258243/check-if-pull-needed-in-git">https://stackoverflow.com/questions/3258243/check-if-pull-needed-in-git</a>。</p>
<p>脚本如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">repo_path=D:\\ProgramWorkspace\\GitHubProject\\GitHub\\hiyong\\<span class="built_in">source</span> <span class="comment"># 本地博客项目地址</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$repo_path</span></span><br><span class="line"><span class="built_in">set</span> -e <span class="comment"># 告诉bash如果任何语句的执行结果为false则退出</span></span><br><span class="line"></span><br><span class="line">UPSTREAM=<span class="variable">$&#123;1:-&#x27;@&#123;u&#125;</span><span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">LOCAL=$(git rev-parse @)</span></span><br><span class="line"><span class="string">REMOTE=$(git rev-parse &quot;$UPSTREAM&quot;)</span></span><br><span class="line"><span class="string">BASE=$(git merge-base @ &quot;$UPSTREAM&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ $LOCAL = $REMOTE ]; then</span></span><br><span class="line"><span class="string">    echo &quot;Up-to-date&quot;</span></span><br><span class="line"><span class="string">elif [ $LOCAL = $BASE ]; then</span></span><br><span class="line"><span class="string">    echo &quot;Need to pull&quot;</span></span><br><span class="line"><span class="string">    git pull    </span></span><br><span class="line"><span class="string">elif [ $REMOTE = $BASE ]; then</span></span><br><span class="line"><span class="string">    echo &quot;Need to push&quot;</span></span><br><span class="line"><span class="string">    git push    </span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 判断本地仓库是否变化</span></span><br><span class="line"><span class="string">if [ -n &quot;$(git status -s | grep _posts)&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;blog changes&quot;</span></span><br><span class="line"><span class="string">    git add -A</span></span><br><span class="line"><span class="string">    git commit -m &quot;jenkins update&quot;</span></span><br><span class="line"><span class="string">    git push</span></span><br><span class="line"><span class="string">    exit 0</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">    echo &quot;no blog changes&quot;</span></span><br><span class="line"><span class="string">    exit 1  # 退出，jenkins会显示失败</span></span><br><span class="line"><span class="string">fi</span></span><br></pre></td></tr></table></figure><br>1、jenkins中，非零返回就是job失败。<br>2、<code>-n</code>参数：判断该参数是否已被赋值<br>3、<code>git status -s</code> 或者 <code>git status --short</code> ：以精简的方式显示文件状态</p>
<ul>
<li><code>??</code>标记：有新增文件<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">?? test.txt</span><br></pre></td></tr></table></figure></li>
<li><code>M</code>标记：有修改过的文件<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">M testcase_name.txt</span><br></pre></td></tr></table></figure></li>
<li><code>D</code>标记：本地删除的文件</li>
</ul>
<h2 id="博客构建部署脚本"><a href="#博客构建部署脚本" class="headerlink" title="博客构建部署脚本"></a>博客构建部署脚本</h2><p>如果博客有更新，进行本地构建，然后发布。<br>博客构建命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<p>更新后的博客需要手动更新Gitee Pages服务，使用selenium实现自动化操作，gitee登录使用cookie认证的方式（cookie的介绍可参考<a href="https://blog.csdn.net/u010698107/article/details/115710435">Session、Cookie和Token介绍</a>），python脚本如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Dict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGitee</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=<span class="string">&quot;D:/testing_tools/chromedriver88/chromedriver.exe&quot;</span>)</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://gitee.com/hiyong/hiyong&quot;</span>)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># self.driver.quit()</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_blog_build</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;登录。。。。。。&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gitee_cookies.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># cookies = json.load(f)</span></span><br><span class="line">            cookies:List[Dict] = json.load(f)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;expiry&quot;</span> <span class="keyword">in</span> cookie.keys():</span><br><span class="line">                cookie.pop(<span class="string">&quot;expiry&quot;</span>)</span><br><span class="line">            self.driver.add_cookie(cookie)</span><br><span class="line">        self.driver.refresh()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;点击服务&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># articles = self.driver.find_elements(By.XPATH, &#x27;//*[@class=&quot;article-item-box csdn-tracking-statistics&quot;]//a&#x27;)</span></span><br><span class="line">        services = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@class=&quot;ui pointing top right dropdown git-project-service&quot;]&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        services.click()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;点击Gitee Ppages&quot;</span>)</span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">            expected_conditions.visibility_of_element_located((By.XPATH,<span class="string">&#x27;//*[contains(text(),&quot;Gitee Pages&quot;)]&#x27;</span>)))</span><br><span class="line">        gitee_pages = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[contains(text(),&quot;Gitee Pages&quot;)]&#x27;</span>)</span><br><span class="line">        gitee_pages.click()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;点击更新&quot;</span>)</span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">            expected_conditions.visibility_of_element_located((By.XPATH, <span class="string">&#x27;//*[@class=&quot;button orange redeploy-button ui update_deploy&quot;]&#x27;</span>)))</span><br><span class="line">        update = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@class=&quot;button orange redeploy-button ui update_deploy&quot;]&#x27;</span>)</span><br><span class="line">        update.click()</span><br><span class="line"></span><br><span class="line">        alert = self.driver.switch_to.alert</span><br><span class="line">        print(alert.text)</span><br><span class="line">        alert.accept()</span><br><span class="line"></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">            expected_conditions.visibility_of_element_located((By.ID, <span class="string">&#x27;pages_deploying&#x27;</span>)))</span><br><span class="line">        print(<span class="string">&quot;正在部署，请稍后......&quot;</span>)</span><br><span class="line">        WebDriverWait(self.driver, <span class="number">60</span>).until(</span><br><span class="line">            expected_conditions.invisibility_of_element_located((By.ID, <span class="string">&#x27;pages_deploying&#x27;</span>)))</span><br><span class="line">        print(<span class="string">&quot;部署成功，请访问：https://hiyong.gitee.io&quot;</span>)</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://hiyong.gitee.io&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p>上面的Python脚本使用pytest执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pytest -v -s test_gitee.py::TestGitee::test_blog_build</span><br></pre></td></tr></table></figure></p>
<p>好了，主要使用到的自动化脚本就介绍完了，下面开始配置jenkins项目</p>
<h1 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h1><p>前面介绍过，如果博客有更新就进行自动化部署操作，如果没有更新就不操作。下面介绍一种解决方案，构建两个job，一个用于检查博客是否有更新，另一个用于博客发布，也就是配置Jenkins父子多任务（可参考<a href="https://blog.csdn.net/u010698107/article/details/113823608">持续集成平台Jenkins详细介绍</a>），如果有更新就触发博客发布项目，没有就不用触发。</p>
<p>另外再说明一下我的jenkins部署环境，我的jenkins是部署在虚拟机里面的，博客项目部署在物理机，所以物理机为一个节点，Windows节点添加方法参考<a href="https://blog.csdn.net/u010698107/article/details/113823608">持续集成平台Jenkins详细介绍</a>。</p>
<h2 id="1-新建检测博客是否更新项目"><a href="#1-新建检测博客是否更新项目" class="headerlink" title="1. 新建检测博客是否更新项目"></a>1. 新建检测博客是否更新项目</h2><p>新建一个名为blog_git_status的job，运行节点为配置的windows节点名称（我的为slave2）。</p>
<p>配置周期触发构建操作，我配置的是每天晚上11点进行构建操作。<br><img src="jenkins-build-triggers1.png" width="80%" height="80%" /></p>
<p>添加构建动作Execute shell，将前面写的shell脚本粘贴进去：<br><img src="jenkins-git-changes-build.png" width="80%" height="80%" /></p>
<h2 id="2-新建博客发布项目"><a href="#2-新建博客发布项目" class="headerlink" title="2. 新建博客发布项目"></a>2. 新建博客发布项目</h2><p>新建一个名为blog_build_and_publish的job，和blog_git_status一样，运行节点配置为slave2，配置Build Triggers为blog_git_status：<br><img src="jenkins-build-triggers.png" width="80%" height="80%" /><br>添加构建动作Execute windows batch command，输入如下脚本：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\\ProgramWorkspace\\GitHubProject\\GitHub\\hiyong&amp;&amp;hexo clean&amp;&amp;hexo g&amp;&amp;hexo d&amp;&amp;D:\\Anaconda3\\Scripts\\activate.bat&amp;&amp;<span class="built_in">cd</span> /d D:\\ProgramWorkspace\\TestingDemo\\test_blog&amp;&amp;pytest -v -s test_gitee.py::TestGitee::test_blog_build</span><br></pre></td></tr></table></figure><br><img src="jenkins-build-publish.png" width="80%" height="80%" /></p>
<p>可以配置一下Jenkins邮件报警，构建成功或者失败后会发一个文件，这里不介绍了，参考<a href="https://blog.csdn.net/u010698107/article/details/113823608">持续集成平台Jenkins详细介绍</a>。</p>
<h2 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h2><p>运行第一个项目blog_git_status，如果构建成功就会自动触发blog_build_and_publish项目。下图是构建日志：<br><img src="jenkins-build-output.png" width="80%" height="80%" /></p>
<p>blog_git_status构建成功后，触发第二个项目：<br><img src="jenkins-build-downstream.png" width="80%" height="80%" /></p>
<p>blog_build_and_publish项目的构建日志：<br><img src="jenkins-build2-output.png" width="80%" height="80%" /></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了使用持续集成工具jenkins实现博客的自动发布，构建了两个Job，一个用于检测博客是否更新，另一个用于博客的构建和发布。除了这种方法以外，还可以使用Jenkins的pipeline实现持续发布，就不用创建两个Job了。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>测试开发</category>
        <category>持续集成</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：排序算法</title>
    <url>/posts/algorithm-notes-for-sorting-algorithms/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b0297727d6b0d1648ad18b72c291d351828bfa5c704b61f52d6b070b51186239"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>编程语言</category>
        <category>算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>测试开发</title>
    <url>/posts/software-testing-points-for-mayijinfu/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3b35ff22b7764e8b923eebc4316add631141d33ac802841adc498d01e20a74c0">b63abfd0cc043585c7f59d942442ea6d4699e462251a37067c709d14aed2418191fce61ab1f8bfcacb0be14094b3e5a76a062c5ee9bfd264274954c82b6b66173d1ad145cdbd934a486f42654421d990fee59625fd08651675e0eefd10895947af6cfa1b56710ba201170c3d710017031b60701d527aa202b44c67acc54f294ee19a45212d1abce32d9b02323bd3aa5fe7bae333bf22bd406ceb98c2f184de844c0dae5f4a27d32494af51be89a285d187edd8ea2768a9e17d59ed0c07b854569c79c729912fc034cd3c565540d1cb32247222e0adb79d0ee79b29e916be5d002ffe1a43636dd1a523f9d302022928a6f97443f2a34afe6a37641262f8311f41f639d50c3a01670079975eefa1f7100be3e8f414eca9f605c51925fa1960e26fd00d9d3182bfd1a6e87ae61bc972fba98cc076def2bd5b8e9b5fafba62b8c3e572125aae7b7ed47935156d9e4237b06bdbaa398477ca26aa7093ca56faf8a71f9172c96ff8ac395f69b809b483ef2973b4afd5a9a4989c9cce1a0e11a8982459e6807eb3e63744bc0b492b8b4c83490e94a8a2b914af6a6cf150cbbf311c20da47245de60012096dc10ddd27e171d2020b7ac564ed6560043a37e7f153bd7816893a4f650b829fa5ba083c90f03226d4f6739ebc219dc32b2f019f44e66b9e2a51d82d5d6b5047b4c5e30c94595a389685f58b5528e0647f050371635bf2bc650eff11b1d833e9892749e2d6a293199f221048f67f1b5c9fb0dc974b46a7897734ed4e4f5d8404809567c1af6e142f139e92db010d8da01ae28dfdfeb91ded078d83e90427cc74ea60b1f0a5e3f41e70c08eb4f5e67771e721a691bb6d03a50f0ae57826faece3babad8bbfbad1eee6f3066035263b818125dc6ec5a3b9b4919634c825999e348a95c56f441bda65b3b94de565b3ddce2e58861c47cf75de1b2b931e398e278de8a271940797f8e5acbe3b1ec683535212ac6b687652ba56baa5c7c967f00f5ff4baff958e37cf27db1a98256c2df7dedc553786363e838d766e2c02e3908a4c755bf661ba344edc81f71cca6228158cf483cd9e298887844461546ab513071961b63a4eeb6856e380b4f27dd85bbd06af2cb2a4cefce4b8862eec0b5376e8be77dd1f1de6e0acac2f6bc5254784a87969470b83b19c9be6377a63a8721bb30bd0eaef84ecc8163090e05bfd4c11b1432cd81a0300a22a249efa7962c175419f606525430126f8692dccffff6900633f33b4fee8142e349546cb8a1c592d491824b6ea64a64e4fd13700e006ebd3390a9aba4eb51aa7c69de80a557b0f9c54e59c0aa126c2c79c2029596b0393c30644006271ed4f369060f0d29eaec521f72dec3f022d1e898d88273fd5a5dfb63b729e3a37eed8fee442a62c5b53a023e7f242348b522855fb5e95bb846368eecc371c4982e84fb29de377d7bdff71e1d3c390a006d0e8cfd1ce660a07fe42b933b806df2d43fc67e93afaab097a55e94ee5fc388c7bb1e37cbd52f503aef4729b0d2a0fce38f013891b59bbe4f5e3481d1ba714720c9b8b94df48405233760db392434394577f53c601659b2234349950520a3c753c129ce3c9e4d26e694955481086f761367b92ff64fc718f9ae74aa2eb7edfee3878d1558e7359445cfaa82708012bdbb88c4c116e038890eb088006a703112ae247b95638b5026dca0fbcaf487613ca1fbee6ea543cdd17682560a5af49f8d3da498cabdb9410e335108bb106c16fbb58fe17c9e35471609ed21c54174476b8e25746d7523d6e0ea8430411dc46703fae72529b3349ba6c9a419a2c6c39478dc6fde8de10f1214c4e417444e911380d810c4ddf4883ca0c0b8392597f0a7937db02b4510f1b5d29f51101a7ec721535dada0f1e33fa642f391a5fa53620f26fb439a6221461c2159f9b61d114a7db2f3fae95daea028b8cf9bdfa1158c2fc70ebb06126f6d498ccd2c0664ff3b666cba9bcbdfc46688ff928efe0fc06a33ec7fa24e9faea0013dd1268acab4ed30632fc442f5315c4987b89b5988e565b73128bc7cff2f6737de768070644dc06667d40f33873943972c7a9a332d8a5646aa1c6cd31f093e16f8483d8736b6e6cfc5e014973711ca86ab15d1c9624a737575c7adda78c838d51107190b6821a76d9b5bd4fa688f1b565de12edd817e96e1c70c2ca97b600717c8c71b2a9df1c532e7d45d1936173fd98411b5adfaa4c1129fc1d6e0aae3d80902a2799a91c3f0335e636f02fdb8b5e7135e0f6c1c274d06d1590ddaa9caf0610675d62978bfd6e3931902a1e2f7a2da17acac85b7e7dff35074dfb62bfe24f43d00ce123cf37592bf72787406cd6ae33d8392aebff4510c4571f7f699ae5a92dc194d5fdf14508c09c545f83a16bf201e309b0276fb8a2528baeff283cbd90b51da7e72d8aee90e2a9c51049bee490505707324a5f729acdf593a583a42b665cf6a31fca48ba1b78f059d9ac4e735d5ecc687d9a41c9b43ef4c4c38ed6564f3fc757106a88ceb894030b4451f298a7953badfdf5a11dd902a72e0a7c2c5801cf581932175c6de23ca1809e1b9865697718efd7c14d9731304d748139d3bd9a54c24ebd516acbe4660e20ca23e3c140b6e5c0af0455d5c69db904a9a4a36b23e8b178a0e140e15fde3b026c0ff886924076df2eb95af692a2cf3b559ae7dea11b0ebb81a9824fdcbb7bc8264f7ec8b3a64b07d76eb165165b68b178668c26a9322a3c1c0a8896fb88e56b6931385916ca30db3fc46d8ccee61a6a6971c7b2aa45c92d9e1032b309a51085b8022014af3598046cd234d45210d9f13587751b29da76418963b6d54b5b2d9d0c5ea6b9beff0272985542c557d01eef4516a17f8604546e9c56b9e6cb0101dd3d2fd4451ebbf97a1acafa676e3ddd74d28add0e5adc13ddc3d285d47ef560bbf28543d3a085f2a46765e6ff352bf0883f465551a06ee53de10ea64c811809f6c8c2bf6f211b984fe342e7f20723506c583eb5f9a7ebba14d055769587851ab197a513a4a9ac58a70ea653802999e09e54c4e931d3bcc1b3a36a3dd745ee226cbc6c3a12a24abd82d590daa48ede258ff1551afad436432322e9509770c856d55a1e2fc6d2cab107a01b87d1318a9c70719ff93e6ec34625f916fb6ad08355d701a845f70a418d3b79b0a22df525cefe6cb6a973424679c90760c9a6dfd0bb63f5a06c32ea81c50cb895340d40fbdc99b40fd6c5a1137fe43c3449106fbe72941e02122a0c06520715b5183d868f392569a685d240f9c609af48b93a444ce1c6e49028b9f967aa38fdbb4ef85b50d84eb242da7eac89320f7cbb63e37f794442c2ea60773f9e7e5587c2a45b4e29a6eaf0fde3e4f7be5c93c8d4320d64e2f40273834a11f1eb37c3007d14f93ffb7a4e9bfde9db7443555f31cc42dfce39537a3278595c3b1bbb3d7bccae99595dc7f157de9ae2c4801c3b0f15748eeb3608e27d55e145d902622a7971f6728d1af8ce93928049d3921266ed2729e012a1f94c33211837abc712760710a3b4d8b5ae66b3a34a4d6b7205ed247ebe4f05e4089dd09383c2b48a40d624f6e31c6538ff03312f9971289f3031fbb59c2d76cda529e43bcdc57e2c316cd7c258fbf387e8700422b950a17e49e5f295058441b9cdf1f3b3b5ca942971b2e0ffc41b6b3fc46f6bf98dec8820fd2ebf413024cbafecb64796bdd1a2bc9604e6aeba4d535343c40009c5d14bff817872aec151db38bbc6eae00995ad32202e6a01c081c8fd786698d1118a9fb7c33b17eabd34366872d8d6925af2b97a6b73d5ed3e9b7919ad37fe9f5b608e27bba64731027d40f98631c8f3122fd5b72ad257af0f86c7edc838b04e74e056baa7eb43a078a60620a71defb402d685acbba9f557cd0f8a6b79011d1fbcf864f21a011d5d9c6379da04d7c30a9e6ec5e2fb8cd829934105307379ce2bb66b197a225795576a48a536ef74fc768fdb1d307e4cac4e3ce98a8b7442947e2b1f24ea53c3e282c18a948c4e315fdaddd2740dbc8ed12b0627b4036a7de021831e46805bdce19c4efb66f6440ed97588bcef45dab1cb91adeebec2187a5c1f5aa69b7b94ba05d9c3ba39ad9a66aaa3ffb43b9392ef67299c5f6db9b326c0a5edf81d2e0289e21334cc3ccf94840a0c098e870d24547752dd9773636bba6c1f339832d33f4a66cf925119f4b2dad1ddbdb9697c041ae3792730d5470dc10980e7fb05c97f0d4c84459aea50358ed06284656f666c103dde7bf69d23d2a51e8de2fb7ec188c2c7ce48eb18eb03714cc09215f5e19204f6ab0dd9bb12332fcc4513aae95ae552680872917563c8edfd1cdb271710a019dfb05d52fd7f98ad281ca1d843b9036a41e5747aef3b9efaf331f398d91cae6b7174135c70769f85e6520d5ad79967bb1945bd4a0f4b867cb202a105575b86e4301801fc203dd7c4f71841d08f64788cba6a559b80c95ba12bd70e287e7c704ff28920e3b5bbbe0694830088375f77b81a74ab3d12345b6afdfefc379d9058125dc8904d94d8aa65820b90422e2906cdf39101a26df36b9730e1426f3e0f3465e007d62e1d009e9514664f0b74cb7ca6d98ba50ded1601c54556e07da2e1e01dfae7f2fe7ecaa71a7011a3e5211dae3351446c127cfc6f8a0cabd62e9eedc80522537e48b77a6df8ee93ecf9f75b99c1875d13edc3ce1493cc09cface573ee410e7503cdf2b434410c8c34be8e6fb4c6ae57ef4281ac5dba1a04e95215bc471f7e3b66cc3ad1dbe681dd20a2d387beb7f7c3632c577ed9640026bf57cb195e64c6bf59d120a75b22f2d029277404e8d1ff2b69cf1b9a956a19b108897903f507dd68199a916593ca683cab8ca78a4c489e8f6b048fd242082a85c32f5983050429afc0eabcd6b6255e8cdca312ebb46823ad757fcdbdedcdff484584843d6191fc61bcec0ebadec8e85f91c7716996ae5a054fb421aba30d51c0cd69b819b34b7ef09d24db77b40d4da57cf6186163a14dddb8a0f9add1e5c2941419a4ca17fef56ad34c274ccc01e1651f1c3b9c953a88d07d793c60c6b83def19ef833ae992e11ed5bed18f173f976940121681ee211d10d5ab4c8d5c204689a62764c81737dcb17212c6307937479eddfaf186c5ca942767e89df8bb9aecfef9c113f4c9ebb9a496127213b16f96d8072e88571e74d6b82807af08c409c9accd0ab4aba07ce65cdd65fa5df8fad8bb19061e176a61808ef6eabe6a28072d6e1205438d6e2d5260a5a6aaffca58772bd2aa9cd31a03420a86cfe7c67d809fa5fafee844b1f88f3f10f87d129f48f2e3895b1d75da7c890e263a5393342b8527d4a18e012983b1bfed13ed7c3f700221bffdf677799d82f750208ede16b5d67b399775d243be98c34c9a8ad187099020ad86beca13cf3f58026aaed3e3941ea6120001f577b06096b2ce844691e00d11d2e15e8b9ed4ff14542313dd106f79ce90c0317918799f801f6ae1e32b6f2257be70460ceb3c2d7bbc6c7180eea1ab31cea87eef842e9f97979a3ac87906202334b72d084f44d3c23dd342030f1caff1a3e692675a072cd9bd96fce2f07ce2d73b0d113b1338a8aa1bf5dbd7c287aae512b37ff9b707583aafea206a90fa19e6740c42a6354d6eef57a6b31d62a232fafcfc43e186451aed6290ec3a9997f5f5b815890024d6b43f181dd5acd587305d1bbde88ee5fa520278dc27028d41d768284ca0f8a708a5d0dcf4e54cdf45ed9d750a4bb27f00d894ce2c2b585a9eff69f4219af82635d625c73fb2d27c7c437751921eb017804fd5ef3badb17a521db31fc0e32299ee6af4ee799ae8c600f6e85d62dd759a2f4574bc097cec370fbfed2ebdd945b9ab02ae0130a9416f67e279e57819e8043fc94b23709e9811280cc2defd98f8b606aea4b404dbc7122fd64839fe39f97e00c67f066faddcb25b103385fa10593ac590974d8b1b0c02cab556bd8c26a4d87a28ffb057b14f178e6542b60741e9d18de7a3cd92edf0ad0b8ff7e97137775bb94624d0095be25cfa522530cee35e49769cf3815b80880453b08260cf87d93f2f08bcab0d3fd5fb9a618a6a912fd81022c0e3adc3eb990dbfc6219bff70594bd8e90c399c221f3b42b65cc74677f674f814532481cfa3745c79ffebca3d952c658eb8dbef1edbd194f6384d798e1eea00cfa71f584fb185d9fd0ae084c37a6e9b2f50cf2e54ef3798b015d0d2561dd2d928630291aaf1669f376b5f2f7b4d4c6f0a8d3d7a184218eb75283144106b962fa51bb06f291958ac54828a9df9b5a1399f799d9ea41bb687ed93b9c88ec4c4a667fb59248c8daf5d7271adcb4d736c1e906d1f4de867fa650950820545959c83dcc8466ec70a4f3469d7eebbcb2cf9b35561470ff43006d429ef1541953cb11c298f96a0ad7ac410630633eebec2a84f40a79e14f75f89ee3a5f4057059c127345a87add77254d1546114947a8ad9fd35b17606373fb12bec28c4b83cfa71069fce27464cfa6dcdb252951e5ea30ba7b03a9c01cbbf95e90063d850310f1871a618685fcb47c3f2247df806342308bc39528a7ece5eeb412d140cac5b344904a2325bd385a4a87a5c1223a763facb8e1b8e52b12a625adbc2f40b525565fbf9d4f51fbc4e3b386650ecbd553829025d63cfbd05fdeab7545fe6da13bb851a4a8383fd0dc4f90aecc2e2176136a3d26e2a366f27c32acf69dbd3dd7ca95d50fcbb8e73071bfb02895ebbebec5277d0f751ada009ab3ee9e7c836ce3f5f11e2cc2ec1e29d57ac056251331bb37759d3cc031d3a8fcd30bfbd481cb2dc850798eeec736d727bf49334dce328d8b4573d5daed1fc205eb750716231ae93bea7033d3154415777ba1451200284778b7aa90db86c35ad4c335199ebfca2761de3fe4bb8819cb653b9c64ffa00631e937be5d76ed5743f0ece68c1d27e388e791bb654e912e7552df1ad1c60d6c8137ef74e67cd0a07910dd82cf8dabbbfc04bb640dedbee32e0b5f3da05d771c7d0ebe797a99a61060a501faf83dceabc77187a99bdd4f887697ac3092cd01587f28b828c308ba6c478fcb039337c74da14403ef9284d6eff210d3ca5a5d24e27f8693ca228563c9b8df49fc3b47fbbc137e4a0c905d4c2aa1974d2f49d8d1d0351107e998f9e8209732437a47852344a988c7c85587076b598ba48b3a00f8bd8d7e2aead4d1b4c5deacb9dfece653e242e42be790e08de01195a71220e539ac39dfe528d9f3574a25f9119beb209de6734f403cd44a46ecb6e2312fbb30a82357bb0aaa47f4d3c0d53e083efd2f8bafc5acd02cf144fd1ad314b205550520a6ba622add41dcbf4b0d30f4a8c8ce720fdb271db42ea97da0aba56ae0e13a9196d6b8119a60b6ad61e24b5b12da2b1b808fa017c144d150cf1f1c0b093182ac9efa5194a682b38cf14e49ad6f6c00c62b0a368959df19428b23b700709cb54ca6799081f82a1bdd70d9d738f932f38fd3e95c765ee986ae823308ff4a736c507127ef14314db2c4ebdec6297c71be0b184b93a69f64da8ef6cbebc88c4c6d85ad4558cfb0495057cfaaaa3f6858549b09eae8e91fe47d000ff4839b8ed55958c4e3d69f3e8297d4954843b82e02388528b3452bf01b182536ca27ab54a81ab2fe71088d6c388c22f75790d3320cc98927a0989ad9c44298b5c860f9df4015dba1c1395f370fbfae1cebd09c9fc1596287e2a1eab33963d2fc55ac35a7f3f7f7b74fd1725cb348407e161e9350f13da573dc7a4dff8bbd2a025926ff02b7c725f4845b0695b18b4d9c42011d0e12f974c3e3bbf42ea7e50422b13640e83a49bf436abc2c53934bbc0cf64477d1d1216bd90ecc3513b5e2b0e9b0ee2843a9f4e043d66c4f9691143de81ff81d52ad985214017da741cb6e9758727c911d2611f900ad59b7f0d82cdd9e78e9867b3950d9230b81f76539dafc40b2430b90fec234162e4c576398e38db909b958870d706cef4cdfa50a6df6e38c81f82b61da0b800055b751a4a33a27379172a022477d3d04ad878e13b14bf99b443e5575be3fe189fbf2e6a7276cd8c44ff0918b797bc81c11452083057f39f144b85b748cbf35a35bb84c5fbbc9aaf6d6061b047c6dec19afd01bbb5a89cc3e812cf6dce0deaf886418108d87802f2513a8810d8d8adac2bdd82c62c51c387b007f226730a68a010f13198803e1f23ed60f0725773a8f6425441f052723e4177d142294f4d3f6eb3dfb19e825c90f2991052a3434fd89e6e63d6c103690a6cd32cb2b017ed2e1e1ce25df1a33b2961d31c214f2654bb75aac243992471476d09cc24bba8c11d1988eba21ca6aeca62d71c4bf3bf30d006432cdab53e18e6d6ea1de749ddd56bda62c2f7845e6993e61c952b108957d5d3f97ffbb7c3fed98319727a924f77a9f7b6c836186e9dd6d88aaf349f5bf44d1193c18d6d5930f06e87fbbb9f942247ab5b2e1e7614156514a4a791076b7533175fe9a4136f57532e07f5d2d56b49564dce957ca806950e5ff122f1c6dc10739d23486d5e8debb42dc84fc3ce3791a2c89dbd0643b85a58edfb051292117131413f55b61582f371a0342d4df4c6371784903039e63ff4d04aeb890ac3d4d7dafefc6ae3eca19b9793935cad785f929fd105327cee126e3f3ccd980003b6bf02729a55479b830b8ad82bb66e95347a7562a10185a2d6b8f6543d9ce297133823e25be5b959dc0e96ef9a47c3ad06a5fd62702ec911dda2016b81c826b892f8137d5439f5316681bf420dd9e71d563592efb432b9e6ceca71b5a3e944317d5179ab18f4c279d799e4df051776541b9a235e6949a81576126efddb030208a2023bb65a8341d41d358e78a1b5ddc8a6bb65f3eb8d062c378b9182790090c3c4ae34c3b967dcf3f53a9a4fbce31a8e09b0fbd622fea0015c42451216b896dbcf8c3f1d0007174636afff17aaed3e114c42d70afdde9cb87406c4cfb1b6bd85d9fa548f727bc551b4d7142f53a851db909828d6a9041ecb5590bbc37d9af5362ef0eb238980d9782eb615890c32c97682425f3cc695cee6ace28ddee4b9be23c34f44748190afa7175afc50ed4a86508e50d9a7ccca123b38853b3f43bbe60588cd9b8c1b62b15a630e8319c455996c723ad4ddaa59ca9c3225e2bf2ebd476f9c7c6b7afecaaefcfcd96658bf709a62c95b933ff040a8db85a9b91a5f97680b48051ea7e9918b5c3a5fd7fb322ee3c10b59018167c6966c8c69b70ad33895a74a4dd0fa1c52fb28233a28bbe44d5c6bb75dfca004af386faf4418bcd81c818b36e857d034242b6caa2c5c9364eb7a33900f75ea611a08bfbde68e50caff0a97a7023bee48e6c2d652b8aef5e7a71bf99788b3e6cde556721e3b052dfc2ac079b3e5610d4390616c7efd3d4f03fe6882706ba3c7161f47af3f9a27cccc0c0b5cce5fe3b9b8ae1ea5fa8b046574ee0e1bf9d789633af8f0a3533ffcd64834970e6fe9f85d75d380164a7e256c3f3af4a15004845ba24a651321b70a71bbc2eeddd796334b153649bce2ef8d44a3ce1f81cdbc65363b0d980ddf73f0a1700041e50c4714da6e6643c0b62f891314eb304a870ae2754484733e9dbbd6972227284b51c51ff902d9a0aa3a7b90f80a3e9bb74b7e30970bbbb15b2451a3b7b0aa011f84a004ce2f700b521c53d27659254a4c46836d2b0d2ede8a153be8488624fbaf7744a54240ec1655e07ed68dbc40df59da7cda1bc787072026acdd9a2b81a87d4c45c0bb97aa1b1ea9beeffddafecc8c84ee30aae18fd4f61cceaaeb721ac18c2c077e42d4588a205581cf6d3e43fa91e384d571a1db7a8783034a32a92dfc07814076a505a920826f0444e2526cf81767936679a0f07d47b1b9b177edabf6345b20858707e115d242a0501b5af90c4bc371028c4474e448ca55a11f6a07a1aaaa1aabe1cd4b7f4df77468a7251b62d35a60afca953f6629b0c62c1a9ed309c1d47e9a09c8eb461b3f49d04b88aae03a28cde6c1b657c1b9ce1b3418236f150620169d4f45f472f3428b9b423ab9943595996602affbcf94a1d4660842a5d9218527e36d9e72f9aa1adf1b1f4f5c9c1d5c4260e712f4cb4718268844be1a0b672526f179e022ab782452451665ad96c83d7361d5cbc7673561e8305e615bcee4300eca70d1703d258e11dc4a9274080c49f7ed85834a16cfb4561ce6c2ab2602e143b52c73c3bc6beec391e2dd7a8819339e09fdbc0a466c9520af772ea011f2b5e54963458cde4903eb856366786f15ed69798f145d36a449013933d15b825eec5e25d7dd1399bbea6abc5a269460874fe0cacdcaaa5d65f28b7c70a00c206e1f9d772975f41805a15db3b613e5da30582f3368ac6900f64d7ef1f985d2b73a17e667b293e08c5d46caf64d955ce7f703e4de2797f8d2607db38b3b7d4e8288db54aa57544e249fcf55183b9321cb4a65a3da7a2111f0cfc8a93abec1fb88a36b50dc9836436b902596917191380a9601f84e8d12fdeed54adaa744cd05c32362b1c93be0fc7732dd6abdd16258dbfb85ce4077921d60aff804a6abd78be0e0ebe6845d0baa65ca825eca30c71220e4c29fc84d4bb6f19829fa4862051fff6f66bef992108dcad5a682caa6c58667971ce3fc3913e5ee1f83e12d2da38cb9391ead7cdc3812f5bd8800c7c130ec12d7f2d37d9d75ff9a59dfd2507d5e14b388c2764b9417d761294935b5b98d8be8666cf8f1d995b11d173788d16b852453a76e8f0bbcffd14cdef3668369986fcffafe440ff5424217404d17d9ecf111cbfc5ab74ac4ac409491ffae96c64bf3eb63bf379fedc970b563389b50386590ccb0eb6dbe9777124a15378c3299e8ab07dc2b80f5054f1154882e12800e518e4fb08ff6bf6837c582b17cfd9d6077f0d18d88b6dd0898ef32013228064b4d72ea198993235da035043681f3748ebdbd340a26cd545bd218737ab9fc9fa15c1e367d47a950f2c4f80ce80aca706c33d476b8f29f7a030cfea1e9879b411f7b45873649634bdc9af53f52984d23884a63018a54caf8ef8ea49d228f747e4c5e3c576f17d477e49b31b2df7ce38e2d997cfd84cbafcb282d91a08a6e3bea8dc6de72fcbd76893aa0d52af0f7e5e29dec5c6076a873413921fc9ce017f0c8cc92776067324fe6749c8027c85a569bcf65dea3e91bb7300371c072ad1591c6d301f5000b1f1addb1914e913266b96751ffdac1846e278784a78baa9f820962bd3cdb7c18f7b259c18077397d047f3d6764c9dbcfee285b919b28b2ec903130fc8b2ce7f82b111c1a3b0a289d5aa480b759ac73e3bdb132588c581806cb44d35155d8e20674d3c15ed2d80e6649901c28de476fcdf71379a7a9b5dd8dd4387763844d2f03471d543608dd81ae626f92aef470f68bbad1bdc8aceefd54589f7ee376ac20b9ad25e936aa471cf9e7dcdf05ebcecbefebeba0935eb448777b0560e7daa46f5019296c334c13d6cc38851d3e9ea59a2483f090da0957cc56f13946c90e1e4adb2697aead2d0e183c20a36beb05c0bf0b55cb852edc7830709e7f8893e1bb0e6629511a69360c910d1754a4dd5228ed3090e125eef536db3ebd3582fc17d44006fcc3094a7f13d62169b77f7290b1aabbd9a2c24573cf73432c00d37dc8f6d46e59e5bc47d013668d34461aff1ef07bbaed3176fb9536644b49ad932367fcaf7a95e03698ee56aa01dbb05788af9131a164656b808905cad181e693fbc6c1e09a15f10683e65a595bd5a799cf8dbdb526974311964b8b5896baca50b2edb3cf3b32aa5c60aee53fa79d3e5c8692a760c4c85e0b430cfedf9c6a5bc562ce0e6493ef0bc4772dc6bd34ed94e45e28bd5c9a7862c2d884f9534bddf3b41cd947fe228576b97dcbe8c87f067b4d7477f9c873d604ed6a48338ac83c1f7393c397950d79342460151571aa2d7372dd1ca199c385876b281082ed8e9e044654acfb438b34defeca41d63c33a2dfc6c8bbe67b24f22fb16b4b8ac882778ec1d095a96abf981477fa5e024590ab301cc1fcd23ea17a6fb6a61a95e2f5a041fa8f734d445468ef34a9d333af8fe57ec1379c675a39574f649fa23250d8b27b09950d1922a169b6249737ab143d40cc228fce7a8680ad7de15fe37ed9fac45299490250f645c455e6f332aaeeccb7e27647b811aa59f78542a5b00f006d5818cb8f09fc9dbb64381afb2573f03cebc1cb8164183f4695e566bd5fa4d07adbdaf8331c2d02a79805fc3949920de58b77b958b9b28dac4fc4fef7d5810b5fae938182fc6654a9ba23b5bebd3afc51ae800da9366d57bdcff2114d76bc0c91999c582df589c332694f161fb4d9d9e4650e88a09d8fef9c43685e476fea24f4da5b0db61cbeb352aecad20f7f463b95f4f1bc036dcec545bf755edb932c99d9f8a63d6ad07089d0964a09d46b092bd7bf128abf733554959354d616b4f4add8bcad9ac9eea4f3feb0e0484bea31c070a3f6e866fecc77eb34c37a6ac59fec9ea3760611bc3a4d5d0d1eaf38d31c5aacc23f76abc063f06bbc56774d63e012724e015acf8d82393b609c7050c3b52c5299dae6f8cd1afca714075ac805f31235f245b7bfd279f020bc8401d94586da742d89184f364a637161d8aeab1238eb03e1c0ddec0eb2025778d4acb880e2b6d285e747e6b27f7e0eb0cf970823f55f3c33e8f484dcd2368030100c78b06410e944904e35d396778a73fc9eeb5e5faeebb3467a78eef1d235ddc62ea00e7ed54a9969d22055e18daa9b315aa34836a2e1f84649c4dfbd4850f42c3a64c1728db1d219ba50c2786e986893b7fcd05a4b91ea730e981412f27e8208444ace31101c2d908d6faa75a863c5eae51a36661497fe2293ce6b2809affb85ad2b3ea7ff83ac4f3dd1c09446220d3bd8095718a183f85c7942a5d7ab55ee114167e005ead99569c1a1bf2385c1dac60fc155b99c09a83587a70f90a40b0a27cc18bee0d7d2898f3816844c86905936ec68fc5f48302e90a599f9f4f30a3d1f127c5c927941cf724d32fa839ee0c5b6386ef02c34d078c3773a98fb0def6e442187be436603ff3c230a769aa90815b2c62d334db29cc6d4ce678dce381c872755f4b2c4cec76f1a529a7fe045f2bf6a4da3815756a955e465ced001e96ac4a4ff79e546ba37de9dd35b8f546362251fdbfb57d320112c946e18a0ecddfd350d4626ef9f3951705ae14be856cc05bbd39a4e5d850b3264f44463184f7f6df1467d33d07fd3f1ea5db0030f835a3ec7d982344e431afaa9b2a41a0e1a66525e33bee73195e2a2d445f06d164e790cc28699555aa6770dff03bb1d1d2e866d31f74ab1603f755f305a191265d3cacacbf5931a00de7fdc72837f0b8396766eb6e0ab445f61127d1757895f7f83282d00e2166aa3e214eece1cf4992afe59266d2eca16cd62c72f7e74b901471de01a05fb386f7cf864e3eaa82556f0506a0a948aea867e48e3c32450a179f71a473b12b2da13ad01022e05add570a4303cf3ecfb701096b9f8c7e0f3bf0cf38802578c8a280c9b22651702c1fc6aea6114e4d33de4a93fb7e7c18d47a28ba3ae3b124e8255b169fad3492078b9b8bb2008ae9f2c6092a608b57bb8552df05a484768a0c6b604a728571b3e56961975b6e93f69b63d4c6398d27bff90a72d285fb077ade7eed286abbba3e37b97c2d9a23b418230e8a17a8073cac95cc2dcc9b85c4a8b76224927962c99a8075577d4dae93ece98880ee2fbc4c169121c997751b28eae56e049fa1c64ef9b3d1e1a89dc0181482bc1b8c973a05c613aa8ed6ccb10016def78e4ab9475cddd43498d795a6861d96317b02c3cc71938c4cf28d84d4cf722e91f24f7e8dae3fca2739999bdbb62c6558686b766a088220d3dd97b45fc283d0ea9fae3c7178a545810078d7e546cda0b78e734574b774757dd82d21b9607a92bc115aff2a8b49ed8b8a8e21c4e509928cb6019759ec54c37a4270bfd228e66376508d981b23440c7758476d11ffe6ebb1ac469338d83eeef5c832e58275656f5967d7da0f69c8f9d02c1fb522c3c878878837069d67fa21ef4233b9bafe03b19afe1b700ed23b1542f21f7d181e7c91d8b86dd9e5d02411c24ae9e55d59af2a9ed664f49daaecc14713466caaec0630234c9171bd1f66b999aa0e8d6ad65770e19966096d959e9615a4866986fd10f67f64197bcabbd8e9f203e245933daaafa8f94858c16dd9c0a4acffcc5bc6d1566d9abeaeebad354e469566715fabd412e6df619f2b89da774425c7a21776fb1a8777dcd37115bbb5e1b610f69e98839a2c47185a4b88b25f1d1a6c90c34e0bba28d5ccdb99654f84272b37ed921661f6675935acfa9f15a2c6a08e79e714ba6c04b9f703ef4674bf00162003036784a435265044f1a0c6e6f084a9ab990cf58d40456aad8226c0563410f3bf47783b9bac72b662a5efb037090958e705c8197f3924c76559f352c93486724bc935b715ae0bef1f7dbdf17fa8d314da6eada3a1becfac0ea4c76b55809ddf3d9b04b0963bd7b88aad781d92778044dc8c049d10016d2748b0b48c0d083e17511fe877e58d0d60df2d024d1a02946fa152a8e37e37fda7de9a4cea0fc6c0411495e5f2aa46bd37309f1f0aab1c0f7aac5b9b7ed0b92ff8695b6285fccc3a1c82c24c69eea27db861cd0857093506bd1bc1b619a3f8f19b311ae12119ad42e8c7d514d7805c4a4cca15a96e16bd78d1d2f1a09401f6399d9ae8cdce13f7ea4031b316a94a932696a7393fc18fc8c26a530c76d8b5191d1d304e4f7e549122c3b8d9d46a25bb5c85a169484e5ca40c03b468cd3081e94b43b8948e79729d1d4a0390e75856b2e29fc97a2846ef39d9783e83a2ea7020c70693b69bd0584f2a8d2bfbc0ea96a6e19b814f80a62ab107ecc5bb60ad273213806d370eaaf61ce5449103385edbe0ffadda4bbaed5dbb7d63310642d188971e9e5604bde7710c4eefd0fb2fe45e6ef7466bdcee805fac0c4cf3151b89b8c23e0f3178642dca8fa2260dc53b20527352760fcc1196569da269c0d98e3423ef1225e46167e2bb4af527eaa979ab8142a7374b271305ea61be173b9157d80b3c22135b042473ca582398c2b465ad57f9703d86f46320884dc9d62c2c69b514496452b9f77bfb36036b4ee9e454cf2afacf9ad97e0b58ff4b5764f3c97a8ce3cff0ce3ddf92d777e96135647c9cf18fdfc8313e21670df4f99355c402c8be158812db7831118dc17bc4deace607171554622103c1c497df617512ff3bff80c89b083799dd0f1216db6e86a9ee26cfa91be5aff22bcc7710ab570b47b0d7dfb617baad20c4893046298dad10934912b261c53224b31e716b1939f3c212dae7eeb540771decc3904551adc294e04598c22573acaf2eb5c98ce13907d1ce07f242b4a800dfd1cf2561c29fd27e593a6906b792a84ee11cbde861c6952d0bf74befd4d6989b1b369bb0747f7f386ab0444ba35d55fdfb01da479379f806b13873dde3fb5ae39375d7e4499545b93a1c0a4f5e8ec50fd707f34b15f26728640430e28793730139e8420cd2bbc8776a64dd3499b3af93e444af5cd93ce4f8df060cfb687407ced67bbc6d539156068be58b019ec9bf90ee88649e057721137b05f7038f5d8f6a74a193e02cc257b08773dd452006abcb6a6c43a21dc72d50b3f3b38367abc6e6e5df8695f3116e9f40fb5c7a930e395df8a651b2cabce9f39fef640e5e9a5f98d5cfb88d84f5966dc42b6a578d5ff8569b7ec4effee857719dc85a1c6567eccedfd75bd09d768ba8e0ad1382361a5eb4cd0308a6ca3435886b37fdc33d5fd4518c110e7d224f03302a74b9e46415ea6791aac31f23aa2cfbdad9f9ed74385652a4a705f4511c1dffbe891dcc3a1dc10b1f0f817a12da2028d96674bf659201a7ebcb535e9daca6eb6a4a6c402a18375b8732513f35d5f4bbfc2c12eea3e647742bbcab2316806b0b782c2148a623666081293350db139c3d7d9e3101f2b80682fc97aaff75913491a12fe8b545e90253521044218526ba3856727986c5fdf848749b77d361ddf36f0c70baed6dc00930a7d6aa583938d42fd41cf914e991276b0be525acd3967253aad8e6a7e36edc85ea1122ac6701c12172e4c7da3591a490470da8c8243b4906532caced712e739b0407051cbc2e9bcf1ac07d8f0fd7e055338203f0e7a58d18e52b82e93340b2106824fb030fced55936c3ccb9c9f148159b13d714b75d60e2840603793b62b876770174ed2610d89553c15da1be623b65673c467eb218291bad6f69b429d0225e3bd24d1e72e2bc90f3f6a0a160ef340e8bcd08af83dac3e27f1289d02e3d0ca43d390d2bd9f9d41d323c8179bb9df63a50c861ee009b91e5c2392c2d5e6a008ab6c6ebc856543f6bf9ea0b845b38cac3147615a281eab238b545eab17531031bb4a7efa3f4173d03f8fa23be0fbd9a02365b43369e2a93b1ae776758479878419bd41da1270a418ebc6fb4e03bfb2d976917de72a6ac018c10c7acc13e0f2a6c625959525064c983dc8cdd4a130a861e0d22d8bcad0e1fafd795d4f00b3679a1d1d52670221de91d8e00047db15e46d1119f5f912a220dfde65c996fd2edd8a06736572957bf2b9f8b7e188ef2b2f2789f1bd2e68130b3202af5380c91acfef4f2c348f5639a882efef4c8fe99d83f9033bb3058c9ecdeb7eae0665237020e79b41a690706a1e479e41f3ec2cb6885a992dd3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>问题</title>
    <url>/posts/software-testing-points-question-bank/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e2df24c0c3dde7854f062d6deeb0cc866e69ca68620ef58c0878672820824f3e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试题库</category>
      </categories>
      <tags>
        <tag>题库</tag>
      </tags>
  </entry>
  <entry>
    <title>Session、Cookie和Token介绍</title>
    <url>/posts/network-cookies-session-and-token/</url>
    <content><![CDATA[<p>HTTP是一个无状态无连接的协议，无状态指服务器不知道客户端的状态，比如使用用户名密码认证成功后，在下一次的请求中，服务器不知道用户是谁，如果需要后续服务，需要进行重新认证。然而，在某些场景，我们需要保存某些状态，比如在购物网站进行商品购买时，在某个域名下浏览多个网页，选择多个商品，这种情况下需要保存已加入购物车的商品信息，在需要支付时，也要保存用户认证信息。为了实现保存用户登录状态，可以使用session或者token解决HTTP协议的无状态特性。</p>
<p>无连接指客户端与服务器之间的HTTP连接是一种一次性连接，每次连接只处理一个请求。服务器处理完客户端的请求后断开连接，下次请求再重新建立连接。如果网页内容比较复杂，需要请求大量资源的情况下使用无连接的方式会很低效。HTTP/1.0版本新增了 keep-alive 字段，可以让连接保持一段时间。</p>
<p>下面介绍解决HTTP无状态和无连接这两种特性的技术方法。</p>
<a id="more"></a>
<h1 id="session认证"><a href="#session认证" class="headerlink" title="session认证"></a>session认证</h1><h2 id="session认证过程"><a href="#session认证过程" class="headerlink" title="session认证过程"></a>session认证过程</h2><p>session用于记录服务器和客户端之间的会话状态，下面以用户认证为例介绍session连接过程：</p>
<p><img src="session-flow.png" width="50%" height="50%" /></p>
<ul>
<li>client发送post请求到server端</li>
<li>server端接收到请求并认证通过后建立一个session，HTTP响应中包含Set-Cookie头部（包括了一个sessionId）</li>
<li>client再次发送请求时请求头中携带了cookie</li>
<li>服务器根据cookie值来验证client信息（根据sessionId与保存的session进行比较来验证用户身份），并对client进行响应。</li>
</ul>
<h2 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h2><ul>
<li>cookie是实现session的其中一种方案，session可以基于 cookie，也可以基于 query参数。</li>
<li>cookie存储在客户端，客户端（浏览器）接受服务器的Set -Cookie指令，并把 cookie保存到电脑上。</li>
<li>session存储在服务端，只把关联数据的一个加密串放到 cookie中标记</li>
<li>根据他们的存储位置，session相对来说更加安全。</li>
</ul>
<h1 id="Token认证"><a href="#Token认证" class="headerlink" title="Token认证"></a>Token认证</h1><h2 id="Token认证过程"><a href="#Token认证过程" class="headerlink" title="Token认证过程"></a>Token认证过程</h2><p>Token认证是另外一种常用的身份认证方式，相比session更加安全，比较常用的Token认证方案是JSON Web Token（JWT），是一种基于 JSON 的开放标准（<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>），客户端和服务器之间使用JSON对象进行安全信息传输，信息进行数字签名，可以使用私钥（HMAC算法）或者公钥/私钥对（RSA算法）进行签名。Token认证过程可以简单描述如下：</p>
<p><img src="token-flow.png" width="50%" height="50%" /></p>
<ul>
<li>client发送post请求到server端</li>
<li>server端使用秘钥创建JWT并将JWT发送给client</li>
<li>client本地保存JWT，client在每次请求的请求头中携带JWT</li>
<li>server端验证JWT并响应</li>
</ul>
<p>在token认证中，可以凭借认证信息生成 token，也可以通过后台配置token，比如配置github的token：</p>
<p><img src="github-token.png" width="50%" height="50%" /></p>
<p>常用的token认证header使用Bearer 模式：<code>Authorization: Bearer &lt;token&gt;</code>，比如Github:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&quot;Authorization: Bearer TOKEN&quot;</span> https://api.github.com/user</span><br></pre></td></tr></table></figure></p>
<h2 id="session与token的区别"><a href="#session与token的区别" class="headerlink" title="session与token的区别"></a>session与token的区别</h2><ul>
<li>token是一个用户请求时附带的请求字段，用于验证身份与权限，不存储在服务器上。</li>
<li>token 安全性比 Session 要好，因为token每一个请求都有数字签名，Session 仅通过sessionId进行简单认证。</li>
<li>大多web应用和移动设备身份验证使用token进行身份认证，android原生系统不支持cookie。</li>
</ul>
<h1 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h1><p>现在已经大致了解了session和token这两种认证方式，那么HTML 页面加载流程是什么呢？在开头提到过，HTTP是一个无状态无连接的协议，无连接不代表不建立连接，也不是说使用UDP协议（无连接）。HTTP是应用层协议，传输层使用TCP协议，在进行认证之前需要进行TCP连接，也就是三次握手。</p>
<p>HTML 页面加载、解析流程大致如下：</p>
<ol>
<li>浏览器向服务器发起请求，浏览器先查询本地（浏览器或者本机）DNS缓存，如果没有，向DNS 服务器发起 域名解析请求</li>
<li>浏览器拿到域名对应的IP地址后，建立与服务器的 TCP/IP 连接（3次握手，断开连接进行4次挥手）</li>
<li>浏览器向服务器发送 HTTP / HTTPs 请求，服务器进行后台内部处理，进行HTTP响应，返回状态和浏览器请求的内容。session和token认证过程就在这一步完成。</li>
<li>浏览器接收到HTTP数据包后进行解析<ul>
<li>解析HTML页面代码，遇到静态资源（js、css、图片等）则向服务器发起请求。</li>
<li>从上到下进行加载、渲染，下载和渲染同时进行</li>
<li>js文件的加载会阻塞HTML内容的加载</li>
<li>CSS样式表下载完成之后会跟之前的样式表一起进行解析，会对之前的元素重新渲染</li>
</ul>
</li>
</ol>
<p>上面的步骤中提到了静态资源的请求，在HTTP/0.9版本中使用<strong>短连接</strong>，发送完 HTTP 的响应之后，服务器就会断开 TCP 连接，遇到需要请求资源时，浏览器会重新建立一个HTTP会话，也就是重复第一步，这就是HTTP的<strong>无连接</strong>特征。为了解决无连接问题，HTTP/1.0版本新增了 keep-alive 字段（长连接，不过默认还是短连接），HTTP/1.1默认开启长连接。</p>
<p>长连接表示在完成HTTP 请求之后，不断开TCP 连接，这样之后发送 HTTP 请求就不需要重新建立 TCP 连接了。在请求头中加入了<code>Connection: keep-alive</code> 字段，当然，实现长连接需要客户端和服务端都支持，如果不希望使用长连接，在请求头中加上<code>Connection: close</code>。长连接不会永久保持，一般会有一个超时时间，某些服务器还会设置一个最大请求次数，如果超过就断开连接。</p>
<p>短连接适用于网页浏览等数据刷新频度较低的场景。<strong>长连接</strong>多用于操作频繁，点对点的通讯，而且连接数不能太多情况。例如：聊天室，实时游戏等场景，即时通讯（QQ）般使用的都是长连接，但并不是永久连接。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>协议</tag>
        <tag>Session</tag>
        <tag>Cookie</tag>
        <tag>Token</tag>
        <tag>keep-alive</tag>
      </tags>
  </entry>
  <entry>
    <title>UI自动化测试：键盘输入之Android keycode</title>
    <url>/posts/selenium-appium-keycode/</url>
    <content><![CDATA[<p>列出UI自动化测试中用到的keycode</p>
<a id="more"></a>
<h1 id="Android-keycode"><a href="#Android-keycode" class="headerlink" title="Android keycode"></a>Android keycode</h1><p>appium模拟键盘事件表，参考：<a href="https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.keyevent()</span><br><span class="line">driver.press_keycode()</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">****************电话键****************</span><br><span class="line">KEYCODE_CALL 拨号键 5</span><br><span class="line">KEYCODE_ENDCALL 挂机键 6</span><br><span class="line">KEYCODE_HOME 按键Home 3</span><br><span class="line">KEYCODE_MENU 菜单键 82</span><br><span class="line">KEYCODE_BACK 返回键 4</span><br><span class="line">KEYCODE_SEARCH 搜索键 84</span><br><span class="line">KEYCODE_CAMERA 拍照键 27</span><br><span class="line">KEYCODE_FOCUS 拍照对焦键 80</span><br><span class="line">KEYCODE_POWER 电源键 26</span><br><span class="line">KEYCODE_NOTIFICATION 通知键 83</span><br><span class="line">KEYCODE_MUTE 话筒静音键 91</span><br><span class="line">KEYCODE_VOLUME_MUTE 扬声器静音键 164</span><br><span class="line">KEYCODE_VOLUME_UP 音量增加键 24</span><br><span class="line">KEYCODE_VOLUME_DOWN 音量减小键 25</span><br><span class="line"> </span><br><span class="line">****************控制键****************</span><br><span class="line">KEYCODE_ENTER 回车键 66</span><br><span class="line">KEYCODE_ESCAPE ESC键 111</span><br><span class="line">KEYCODE_DPAD_CENTER 导航键 确定键 23</span><br><span class="line">KEYCODE_DPAD_UP 导航键 向上 19</span><br><span class="line">KEYCODE_DPAD_DOWN 导航键 向下 20</span><br><span class="line">KEYCODE_DPAD_LEFT 导航键 向左 21</span><br><span class="line">KEYCODE_DPAD_RIGHT 导航键 向右 22</span><br><span class="line">KEYCODE_MOVE_HOME 光标移动到开始键 122</span><br><span class="line">KEYCODE_MOVE_END 光标移动到末尾键 123</span><br><span class="line">KEYCODE_PAGE_UP 向上翻页键 92</span><br><span class="line">KEYCODE_PAGE_DOWN 向下翻页键 93</span><br><span class="line">KEYCODE_DEL 退格键 67</span><br><span class="line">KEYCODE_FORWARD_DEL 删除键 112</span><br><span class="line">KEYCODE_INSERT 插入键 124</span><br><span class="line">KEYCODE_TAB Tab键 61</span><br><span class="line">KEYCODE_NUM_LOCK 小键盘锁 143</span><br><span class="line">KEYCODE_CAPS_LOCK 大写锁定键 115</span><br><span class="line">KEYCODE_BREAK Break/Pause键 121</span><br><span class="line">KEYCODE_SCROLL_LOCK 滚动锁定键 116</span><br><span class="line">KEYCODE_ZOOM_IN 放大键 168</span><br><span class="line">KEYCODE_ZOOM_OUT 缩小键 169</span><br><span class="line"> </span><br><span class="line">****************组合键****************</span><br><span class="line">KEYCODE_ALT_LEFT Alt+Left</span><br><span class="line">KEYCODE_ALT_RIGHT Alt+Right</span><br><span class="line">KEYCODE_CTRL_LEFT Control+Left</span><br><span class="line">KEYCODE_CTRL_RIGHT Control+Right</span><br><span class="line">KEYCODE_SHIFT_LEFT Shift+Left</span><br><span class="line">KEYCODE_SHIFT_RIGHT Shift+Right</span><br><span class="line"> </span><br><span class="line">****************基本****************</span><br><span class="line">KEYCODE_0 按键&#x27;0&#x27; 7</span><br><span class="line">KEYCODE_1 按键&#x27;1&#x27; 8</span><br><span class="line">KEYCODE_2 按键&#x27;2&#x27; 9</span><br><span class="line">KEYCODE_3 按键&#x27;3&#x27; 10</span><br><span class="line">KEYCODE_4 按键&#x27;4&#x27; 11</span><br><span class="line">KEYCODE_5 按键&#x27;5&#x27; 12</span><br><span class="line">KEYCODE_6 按键&#x27;6&#x27; 13</span><br><span class="line">KEYCODE_7 按键&#x27;7&#x27; 14</span><br><span class="line">KEYCODE_8 按键&#x27;8&#x27; 15</span><br><span class="line">KEYCODE_9 按键&#x27;9&#x27; 16</span><br><span class="line">KEYCODE_A 按键&#x27;A&#x27; 29</span><br><span class="line">KEYCODE_B 按键&#x27;B&#x27; 30</span><br><span class="line">KEYCODE_C 按键&#x27;C&#x27; 31</span><br><span class="line">KEYCODE_D 按键&#x27;D&#x27; 32</span><br><span class="line">KEYCODE_E 按键&#x27;E&#x27; 33</span><br><span class="line">KEYCODE_F 按键&#x27;F&#x27; 34</span><br><span class="line">KEYCODE_G 按键&#x27;G&#x27; 35</span><br><span class="line">KEYCODE_H 按键&#x27;H&#x27; 36</span><br><span class="line">KEYCODE_I 按键&#x27;I&#x27; 37</span><br><span class="line">KEYCODE_J 按键&#x27;J&#x27; 38</span><br><span class="line">KEYCODE_K 按键&#x27;K&#x27; 39</span><br><span class="line">KEYCODE_L 按键&#x27;L&#x27; 40</span><br><span class="line">KEYCODE_M 按键&#x27;M&#x27; 41</span><br><span class="line">KEYCODE_N 按键&#x27;N&#x27; 42</span><br><span class="line">KEYCODE_O 按键&#x27;O&#x27; 43</span><br><span class="line">KEYCODE_P 按键&#x27;P&#x27; 44</span><br><span class="line">KEYCODE_Q 按键&#x27;Q&#x27; 45</span><br><span class="line">KEYCODE_R 按键&#x27;R&#x27; 46</span><br><span class="line">KEYCODE_S 按键&#x27;S&#x27; 47</span><br><span class="line">KEYCODE_T 按键&#x27;T&#x27; 48</span><br><span class="line">KEYCODE_U 按键&#x27;U&#x27; 49</span><br><span class="line">KEYCODE_V 按键&#x27;V&#x27; 50</span><br><span class="line">KEYCODE_W 按键&#x27;W&#x27; 51</span><br><span class="line">KEYCODE_X 按键&#x27;X&#x27; 52</span><br><span class="line">KEYCODE_Y 按键&#x27;Y&#x27; 53</span><br><span class="line">KEYCODE_Z 按键&#x27;Z&#x27; 54</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="键盘-keycode"><a href="#键盘-keycode" class="headerlink" title="键盘 keycode"></a>键盘 keycode</h1><p>Web自动化测试模拟键盘输入<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">input_element=driver.find_element_by_id(<span class="string">&quot;id_name&quot;</span>)</span><br><span class="line">input_element.send_keys(Keys.NUMPAD3)</span><br><span class="line">input_element.send_keys(Keys.CONTROL, <span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p>selenium按键<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NULL = <span class="string">&#x27;\ue000&#x27;</span></span><br><span class="line">CANCEL = <span class="string">&#x27;\ue001&#x27;</span>  <span class="comment"># ^break</span></span><br><span class="line">HELP = <span class="string">&#x27;\ue002&#x27;</span></span><br><span class="line">BACKSPACE = <span class="string">&#x27;\ue003&#x27;</span></span><br><span class="line">BACK_SPACE = BACKSPACE</span><br><span class="line">TAB = <span class="string">&#x27;\ue004&#x27;</span></span><br><span class="line">CLEAR = <span class="string">&#x27;\ue005&#x27;</span></span><br><span class="line">RETURN = <span class="string">&#x27;\ue006&#x27;</span></span><br><span class="line">ENTER = <span class="string">&#x27;\ue007&#x27;</span></span><br><span class="line">SHIFT = <span class="string">&#x27;\ue008&#x27;</span></span><br><span class="line">LEFT_SHIFT = SHIFT</span><br><span class="line">CONTROL = <span class="string">&#x27;\ue009&#x27;</span></span><br><span class="line">LEFT_CONTROL = CONTROL</span><br><span class="line">ALT = <span class="string">&#x27;\ue00a&#x27;</span></span><br><span class="line">LEFT_ALT = ALT</span><br><span class="line">PAUSE = <span class="string">&#x27;\ue00b&#x27;</span></span><br><span class="line">ESCAPE = <span class="string">&#x27;\ue00c&#x27;</span></span><br><span class="line">SPACE = <span class="string">&#x27;\ue00d&#x27;</span></span><br><span class="line">PAGE_UP = <span class="string">&#x27;\ue00e&#x27;</span></span><br><span class="line">PAGE_DOWN = <span class="string">&#x27;\ue00f&#x27;</span></span><br><span class="line">END = <span class="string">&#x27;\ue010&#x27;</span></span><br><span class="line">HOME = <span class="string">&#x27;\ue011&#x27;</span></span><br><span class="line">LEFT = <span class="string">&#x27;\ue012&#x27;</span></span><br><span class="line">ARROW_LEFT = LEFT</span><br><span class="line">UP = <span class="string">&#x27;\ue013&#x27;</span></span><br><span class="line">ARROW_UP = UP</span><br><span class="line">RIGHT = <span class="string">&#x27;\ue014&#x27;</span></span><br><span class="line">ARROW_RIGHT = RIGHT</span><br><span class="line">DOWN = <span class="string">&#x27;\ue015&#x27;</span></span><br><span class="line">ARROW_DOWN = DOWN</span><br><span class="line">INSERT = <span class="string">&#x27;\ue016&#x27;</span></span><br><span class="line">DELETE = <span class="string">&#x27;\ue017&#x27;</span></span><br><span class="line">SEMICOLON = <span class="string">&#x27;\ue018&#x27;</span></span><br><span class="line">EQUALS = <span class="string">&#x27;\ue019&#x27;</span></span><br><span class="line"></span><br><span class="line">NUMPAD0 = <span class="string">&#x27;\ue01a&#x27;</span>  <span class="comment"># number pad keys</span></span><br><span class="line">NUMPAD1 = <span class="string">&#x27;\ue01b&#x27;</span></span><br><span class="line">NUMPAD2 = <span class="string">&#x27;\ue01c&#x27;</span></span><br><span class="line">NUMPAD3 = <span class="string">&#x27;\ue01d&#x27;</span></span><br><span class="line">NUMPAD4 = <span class="string">&#x27;\ue01e&#x27;</span></span><br><span class="line">NUMPAD5 = <span class="string">&#x27;\ue01f&#x27;</span></span><br><span class="line">NUMPAD6 = <span class="string">&#x27;\ue020&#x27;</span></span><br><span class="line">NUMPAD7 = <span class="string">&#x27;\ue021&#x27;</span></span><br><span class="line">NUMPAD8 = <span class="string">&#x27;\ue022&#x27;</span></span><br><span class="line">NUMPAD9 = <span class="string">&#x27;\ue023&#x27;</span></span><br><span class="line">MULTIPLY = <span class="string">&#x27;\ue024&#x27;</span></span><br><span class="line">ADD = <span class="string">&#x27;\ue025&#x27;</span></span><br><span class="line">SEPARATOR = <span class="string">&#x27;\ue026&#x27;</span></span><br><span class="line">SUBTRACT = <span class="string">&#x27;\ue027&#x27;</span></span><br><span class="line">DECIMAL = <span class="string">&#x27;\ue028&#x27;</span></span><br><span class="line">DIVIDE = <span class="string">&#x27;\ue029&#x27;</span></span><br><span class="line"></span><br><span class="line">F1 = <span class="string">&#x27;\ue031&#x27;</span>  <span class="comment"># function  keys</span></span><br><span class="line">F2 = <span class="string">&#x27;\ue032&#x27;</span></span><br><span class="line">F3 = <span class="string">&#x27;\ue033&#x27;</span></span><br><span class="line">F4 = <span class="string">&#x27;\ue034&#x27;</span></span><br><span class="line">F5 = <span class="string">&#x27;\ue035&#x27;</span></span><br><span class="line">F6 = <span class="string">&#x27;\ue036&#x27;</span></span><br><span class="line">F7 = <span class="string">&#x27;\ue037&#x27;</span></span><br><span class="line">F8 = <span class="string">&#x27;\ue038&#x27;</span></span><br><span class="line">F9 = <span class="string">&#x27;\ue039&#x27;</span></span><br><span class="line">F10 = <span class="string">&#x27;\ue03a&#x27;</span></span><br><span class="line">F11 = <span class="string">&#x27;\ue03b&#x27;</span></span><br><span class="line">F12 = <span class="string">&#x27;\ue03c&#x27;</span></span><br><span class="line"></span><br><span class="line">META = <span class="string">&#x27;\ue03d&#x27;</span></span><br><span class="line">COMMAND = <span class="string">&#x27;\ue03d&#x27;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vbKeyLButton 1 鼠标左键 </span><br><span class="line">vbKeyRButton 2 鼠标右键 </span><br><span class="line">vbKeyCancel 3 CANCEL 键 </span><br><span class="line">vbKeyMButton 4 鼠标中键 </span><br><span class="line">vbKeyBack 8 BACKSPACE 键 </span><br><span class="line">vbKeyTab 9 TAB 键 </span><br><span class="line">vbKeyClear 12 CLEAR 键 </span><br><span class="line">vbKeyReturn 13 ENTER 键 </span><br><span class="line">vbKeyShift 16 SHIFT 键 </span><br><span class="line">vbKeyControl 17 CTRL 键 </span><br><span class="line">vbKeyMenu 18 菜单键 </span><br><span class="line">vbKeyPause 19 PAUSE 键 </span><br><span class="line">vbKeyCapital 20 CAPS LOCK 键 </span><br><span class="line">vbKeyEscape 27 ESC 键 </span><br><span class="line">vbKeySpace 32 SPACEBAR 键 </span><br><span class="line">vbKeyPageUp 33 PAGEUP 键 </span><br><span class="line">vbKeyPageDown 34 PAGEDOWN 键 </span><br><span class="line">vbKeyEnd 35 END 键 </span><br><span class="line">vbKeyHome 36 HOME 键 </span><br><span class="line">vbKeyLeft 37 LEFT ARROW 键 </span><br><span class="line">vbKeyUp 38 UP ARROW 键 </span><br><span class="line">vbKeyRight 39 RIGHT ARROW 键 </span><br><span class="line">vbKeyDown 40 DOWN ARROW 键 </span><br><span class="line">vbKeySelect 41 SELECT 键 </span><br><span class="line">vbKeyPrint 42 PRINT SCREEN 键 </span><br><span class="line">vbKeyExecute 43 EXECUTE 键 </span><br><span class="line">vbKeySnapshot 44 SNAP SHOT 键 </span><br><span class="line">vbKeyInser 45 INS 键 </span><br><span class="line">vbKeyDelete 46 DEL 键 </span><br><span class="line">vbKeyHelp 47 HELP 键 </span><br><span class="line">vbKeyNumlock 144 NUM LOCK 键 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A 键到 Z 键与其 ASCII 码的相应值&#x27;A&#x27; 到 &#x27;Z&#x27; 是一致的</span><br><span class="line">常数 值 描述 </span><br><span class="line">vbKeyA 65 A 键 </span><br><span class="line">vbKeyB 66 B 键 </span><br><span class="line">vbKeyC 67 C 键 </span><br><span class="line">vbKeyD 68 D 键 </span><br><span class="line">vbKeyE 69 E 键 </span><br><span class="line">vbKeyF 70 F 键 </span><br><span class="line">vbKeyG 71 G 键 </span><br><span class="line">vbKeyH 72 H 键 </span><br><span class="line">vbKeyI 73 I 键 </span><br><span class="line">vbKeyJ 74 J 键 </span><br><span class="line">vbKeyK 75 K 键 </span><br><span class="line">vbKeyL 76 L 键 </span><br><span class="line">vbKeyM 77 M 键 </span><br><span class="line">vbKeyN 78 N 键 </span><br><span class="line">vbKeyO 79 O 键 </span><br><span class="line">vbKeyP 80 P 键 </span><br><span class="line">vbKeyQ 81 Q 键 </span><br><span class="line">vbKeyR 82 R 键 </span><br><span class="line">vbKeyS 83 S 键 </span><br><span class="line">vbKeyT 84 T 键 </span><br><span class="line">vbKeyU 85 U 键 </span><br><span class="line">vbKeyV 86 V 键 </span><br><span class="line">vbKeyW 87 W 键 </span><br><span class="line">vbKeyX 88 X 键 </span><br><span class="line">vbKeyY 89 Y 键 </span><br><span class="line">vbKeyZ 90 Z 键 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 键到 9 键与其 ASCII 码的相应值 &#x27;0&#x27; 到 &#x27;9&#x27; 是一致的</span><br><span class="line">常数 值 描述 </span><br><span class="line">vbKey0 48 0 键 </span><br><span class="line">vbKey1 49 1 键 </span><br><span class="line">vbKey2 50 2 键 </span><br><span class="line">vbKey3 51 3 键 </span><br><span class="line">vbKey4 52 4 键 </span><br><span class="line">vbKey5 53 5 键 </span><br><span class="line">vbKey6 54 6 键 </span><br><span class="line">vbKey7 55 7 键 </span><br><span class="line">vbKey8 56 8 键 </span><br><span class="line">vbKey9 57 9 键 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数字小键盘上的键</span><br><span class="line">常数 值 描述 </span><br><span class="line">vbKeyNumpad0 96 0 键 </span><br><span class="line">vbKeyNumpad1 97 1 键 </span><br><span class="line">vbKeyNumpad2 98 2 键 </span><br><span class="line">vbKeyNumpad3 99 3 键 </span><br><span class="line">vbKeyNumpad4 100 4 键 </span><br><span class="line">vbKeyNumpad5 101 5 键 </span><br><span class="line">vbKeyNumpad6 102 6 键 </span><br><span class="line">vbKeyNumpad7 103 7 键 </span><br><span class="line">vbKeyNumpad8 104 8 键 </span><br><span class="line">vbKeyNumpad9 105 9 键 </span><br><span class="line">vbKeyMultiply 106 乘号 (*) 键 </span><br><span class="line">vbKeyAdd 107 加号 (+) 键 </span><br><span class="line">vbKeySeparator 108 ENTER 键（在数字小键盘上） </span><br><span class="line">vbKeySubtract 109 减号 (-) 键 </span><br><span class="line">vbKeyDecimal 110 小数点 (.) 键 </span><br><span class="line">vbKeyDivide 111 除号 (/) 键 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">功能键</span><br><span class="line">常数 值 描述 </span><br><span class="line">vbKeyF1 112 F1 键 </span><br><span class="line">vbKeyF2 113 F2 键 </span><br><span class="line">vbKeyF3 114 F3 键 </span><br><span class="line">vbKeyF4 115 F4 键 </span><br><span class="line">vbKeyF5 116 F5 键 </span><br><span class="line">vbKeyF6 117 F6 键 </span><br><span class="line">vbKeyF7 118 F7 键 </span><br><span class="line">vbKeyF8 119 F8 键 </span><br><span class="line">vbKeyF9 120 F9 键 </span><br><span class="line">vbKeyF10 121 F10 键 </span><br><span class="line">vbKeyF11 122 F11 键 </span><br><span class="line">vbKeyF12 123 F12 键 </span><br><span class="line">vbKeyF13 124 F13 键 </span><br><span class="line">vbKeyF14 125 F14 键 </span><br><span class="line">vbKeyF15 126 F15 键 </span><br><span class="line">vbKeyF16 127 F16 键 </span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>selenium</tag>
        <tag>keycode</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium Grid：在多个主机上并行执行自动化脚本</title>
    <url>/posts/selenium-grid-for-parallel-execute-script/</url>
    <content><![CDATA[<p>Selenium Grid是selenium提供的一个分布式测试工具，将自动化脚本发布到多个物理机或者虚拟机（跨平台、跨浏览器）上执行，通过一个中心节点来控制多个设备，也就是在中心节点（hub）上运行测试，在其它节点（node）上执行，实现selenium的并行执行。除了可以在多个设备上运行测试脚本以外，也可以实现多浏览器兼容性测试。它本身不提供多线程并发执行，需要结合多进程技术实现并行执行用例。<br><a id="more"></a></p>
<h1 id="Selenium-Grid架构"><a href="#Selenium-Grid架构" class="headerlink" title="Selenium Grid架构"></a>Selenium Grid架构</h1><p>Selenium Grid由hub节点和若干个node代理节点组成<br><img src="selenium-grid.png" width="50%" height="50%" /></p>
<center><font size="2">https://www.selenium.dev/docs/site/en/grid/components_of_a_grid/</font></center>

<p>hub作为管理节点，用来管理各个代理节点的注册和状态信息，并且接收远程客户端代码请求调用，然后把请求的命令再转发给代理代点来执行。每个Selenium Grid仅包含一个hub，hub连接多个节点（node），node就是浏览器所在的位置，注册到hub，接收hub的请求并执行测试。</p>
<h1 id="Selenium-Grid使用"><a href="#Selenium-Grid使用" class="headerlink" title="Selenium Grid使用"></a>Selenium Grid使用</h1><p>注意hub主机和远程主机需要安装java环境和selenium框架。</p>
<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><p>下载Selenium Server，下载地址：<a href="https://www.selenium.dev/downloads/">https://www.selenium.dev/downloads/</a></p>
<h2 id="2-启动hub"><a href="#2-启动hub" class="headerlink" title="2. 启动hub"></a>2. 启动hub</h2><p>windows打开命令终端，输入如下命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ java -jar selenium-server-standalone-3.141.59.jar -role hub</span><br><span class="line">21:07:10.738 INFO [GridLauncherV3.parse] - Selenium server version: 3.141.59, revision: e82be7d358</span><br><span class="line">21:07:10.844 INFO [GridLauncherV3.lambda$buildLaunchers<span class="variable">$5</span>] - Launching Selenium Grid hub on port 4444</span><br><span class="line">2021-04-06 21:07:11.265:INFO::main: Logging initialized @987ms to org.seleniumhq.jetty9.util.log.StdErrLog</span><br><span class="line">21:07:12.104 INFO [Hub.start] - Selenium Grid hub is up and running</span><br><span class="line">21:07:12.108 INFO [Hub.start] - Nodes should register to http://192.168.2.103:4444/grid/register/</span><br><span class="line">21:07:12.108 INFO [Hub.start] - Clients should connect to http://192.168.2.103:4444/wd/hub</span><br></pre></td></tr></table></figure><br>默认情况下，启动4444端口，可以使用<code>-port</code>设置启动端口。</p>
<p>也可以浏览器打开<a href="http://localhost:4444/grid/console">http://localhost:4444/grid/console</a>， 查看hub是否启动成功:<br><img src="selenium-grid-console.png" width="50%" height="50%" /></p>
<p>根据打印的日志可以看到主机的IP地址为192.168.2.103，node需要注册到地址<a href="http://192.168.2.103:4444/grid/register/">http://192.168.2.103:4444/grid/register/</a></p>
<h2 id="3-启动node"><a href="#3-启动node" class="headerlink" title="3. 启动node"></a>3. 启动node</h2><p>先编写配置文件chrome_node.json，参考<a href="https://github.com/SeleniumHQ/selenium/blob/selenium-3.141.59/java/server/src/org/openqa/grid/common/defaults/DefaultNodeWebDriver.json">https://github.com/SeleniumHQ/selenium/blob/selenium-3.141.59/java/server/src/org/openqa/grid/common/defaults/DefaultNodeWebDriver.json</a><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;capabilities&quot;</span>:</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;browserName&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;maxInstances&quot;</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;seleniumProtocol&quot;</span>: <span class="string">&quot;WebDriver&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span>: <span class="string">&quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;maxSession&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">  <span class="attr">&quot;register&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;registerCycle&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;hub&quot;</span>: <span class="string">&quot;http://localhost:4444&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;nodeStatusCheckTimeout&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;nodePolling&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;unregisterIfStillDownAfter&quot;</span>: <span class="number">60000</span>,</span><br><span class="line">  <span class="attr">&quot;downPollingLimit&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;servlets&quot;</span> : [],</span><br><span class="line">  <span class="attr">&quot;withoutServlets&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;custom&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置文件firefox_node.json<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;capabilities&quot;</span>:</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;browserName&quot;</span>: <span class="string">&quot;firefox&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;maxInstances&quot;</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;seleniumProtocol&quot;</span>: <span class="string">&quot;WebDriver&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span>: <span class="string">&quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;maxSession&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">  <span class="attr">&quot;register&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;registerCycle&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;hub&quot;</span>: <span class="string">&quot;http://localhost:4444&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;nodeStatusCheckTimeout&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;nodePolling&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;unregisterIfStillDownAfter&quot;</span>: <span class="number">60000</span>,</span><br><span class="line">  <span class="attr">&quot;downPollingLimit&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;servlets&quot;</span> : [],</span><br><span class="line">  <span class="attr">&quot;withoutServlets&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;custom&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在本机启动一个node，将节点注册到<a href="http://192.168.2.103:4444/grid/register">http://192.168.2.103:4444/grid/register</a> ，新打开一个命令终端，启动chrome节点，输入如下命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ java -Dwebdriver.chrome.driver=D:\\testing_tools\\chromedriver89\\chromedriver.exe -jar selenium-server-standalone-3.141.59.jar -role node -nodeConfig chrome_node.json</span><br></pre></td></tr></table></figure></p>
<p>启动一个firefox节点：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ java -Dwebdriver.gecko.driver=D:\\testing_tools\\firefoxdriver\\geckodriver.exe -jar selenium-server-standalone-3.141.59.jar -role node -nodeConfig firefox_node.json</span><br></pre></td></tr></table></figure></p>
<p>也可以其它设备上（比如虚拟机，注意hub主机与远程node主机之间可以相互ping通）上启动一个node：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://192.168.2.103:4444/grid/register</span><br></pre></td></tr></table></figure><br>刷新浏览器：<a href="http://localhost:4444/grid/console">http://localhost:4444/grid/console</a><br><img src="selenium-grid-nodes.png" width="50%" height="50%" /></p>
<p>发现三个节点注册成功！</p>
<h2 id="4-示例脚本"><a href="#4-示例脚本" class="headerlink" title="4. 示例脚本"></a>4. 示例脚本</h2><h3 id="串行执行"><a href="#串行执行" class="headerlink" title="串行执行"></a>串行执行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Remote</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;node&quot;</span>, [<span class="string">&quot;firefox&quot;</span>,<span class="string">&quot;chrome&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_grid</span>(<span class="params">self,node</span>):</span></span><br><span class="line">    <span class="keyword">if</span> node == <span class="string">&quot;firefox&quot;</span>:</span><br><span class="line">        capability = DesiredCapabilities.FIREFOX.copy()</span><br><span class="line">    <span class="keyword">elif</span> node == <span class="string">&quot;chrome&quot;</span>:</span><br><span class="line">        capability = DesiredCapabilities.CHROME.copy()</span><br><span class="line"></span><br><span class="line">    self.driver = Remote(command_executor=<span class="string">&quot;http://localhost:4444/wd/hub&quot;</span>,</span><br><span class="line">                    desired_capabilities=capability)</span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>pytest执行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pytest test_grid.py::TestGrid::test_grid</span><br></pre></td></tr></table></figure></p>
<h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><p>采用多线程分布并行执行，以下示例脚本执行环境为在hub节点主机（windows）上启动了firefox和chrome两个节点。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Remote</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGrid</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">node_drivers</span>(<span class="params">self,node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="string">&quot;firefox&quot;</span>:</span><br><span class="line">            capability = DesiredCapabilities.FIREFOX.copy()</span><br><span class="line">            driver_firefox = Remote(command_executor=<span class="string">&quot;http://localhost:4444/wd/hub&quot;</span>, desired_capabilities=capability)</span><br><span class="line">            self.test_baidu(driver_firefox)</span><br><span class="line">        <span class="keyword">elif</span> node == <span class="string">&quot;chrome&quot;</span>:</span><br><span class="line">            capability = DesiredCapabilities.CHROME.copy()</span><br><span class="line">            driver_chrome = Remote(command_executor=<span class="string">&quot;http://localhost:4444/wd/hub&quot;</span>,</span><br><span class="line">                                         desired_capabilities=capability)</span><br><span class="line">            self.test_qq(driver_chrome)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_baidu</span>(<span class="params">self,driver</span>):</span></span><br><span class="line"></span><br><span class="line">        driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        ele = driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">        ele.send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_qq</span>(<span class="params">self,driver</span>):</span></span><br><span class="line"></span><br><span class="line">        driver.get(<span class="string">&quot;https://www.qq.com/&quot;</span>)</span><br><span class="line">        ele = driver.find_element(By.ID, <span class="string">&#x27;sougouTxt&#x27;</span>)</span><br><span class="line">        ele.send_keys(<span class="string">&quot;qq&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&#x27;searchBtn&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_parallel</span>(<span class="params">self</span>):</span></span><br><span class="line">        node_list = [<span class="string">&quot;firefox&quot;</span>,<span class="string">&quot;chrome&quot;</span>]</span><br><span class="line">        thread_list = []</span><br><span class="line">        <span class="keyword">for</span> browser <span class="keyword">in</span> node_list:</span><br><span class="line">            t = threading.Thread(target=self.node_drivers, args=(browser,))</span><br><span class="line">            thread_list.append(t)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">            t.join()</span><br></pre></td></tr></table></figure><br>pytest执行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pytest test_grid.py::TestGrid::test_parallel</span><br></pre></td></tr></table></figure><br>对于hub主机上的不同浏览器，command_executor可以直接设置hub的地址，grid会根据浏览器名称来找到节点。</p>
<p>另外，也可以在同一个主机上启动多个相同浏览器的节点，下面在hub节点主机（windows）上启动两个节点，都使用chrome浏览器。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Remote</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGrid</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.nodes = &#123;<span class="string">&quot;node1&quot;</span>:<span class="string">&quot;http://192.168.2.103:9984/wd/hub&quot;</span>,<span class="string">&quot;node2&quot;</span>:<span class="string">&quot;http://192.168.2.103:1537/wd/hub&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">node_drivers</span>(<span class="params">self,node</span>):</span></span><br><span class="line"></span><br><span class="line">        capability = DesiredCapabilities.CHROME.copy()</span><br><span class="line">        <span class="keyword">if</span> node == <span class="string">&quot;node1&quot;</span>:</span><br><span class="line">            driver_node1 = Remote(command_executor=self.nodes[node], desired_capabilities=capability)</span><br><span class="line">            self.test_baidu(driver_node1)</span><br><span class="line">        <span class="keyword">elif</span> node == <span class="string">&quot;node2&quot;</span>:</span><br><span class="line">            driver_node2 = Remote(command_executor=self.nodes[node],</span><br><span class="line">                                         desired_capabilities=capability)</span><br><span class="line">            self.test_qq(driver_node2)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_parallel</span>(<span class="params">self</span>):</span></span><br><span class="line">        node_list = [<span class="string">&quot;node1&quot;</span>,<span class="string">&quot;node2&quot;</span>]</span><br><span class="line">        thread_list = []</span><br><span class="line">        <span class="keyword">for</span> browser <span class="keyword">in</span> node_list:</span><br><span class="line">            t = threading.Thread(target=self.node_drivers, args=(browser,))</span><br><span class="line">            thread_list.append(t)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">            t.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>pytest执行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pytest test_grid.py::TestGrid::test_parallel</span><br></pre></td></tr></table></figure></p>
<p>由于节点都在同一台主机上，节点IP地址相同，启用的端口号不同。端口号可以在启动节点的时候使用<code>-port</code>参数指定，或者在节点的json配置文件中指定，如果不指定端口，需要在节点的json配置文件中设置<code>&quot;port&quot;: -1</code>，这样会随机指定端口，然后你可以在拉起节点的日志中查看端口号，或者在管理页面<a href="http://localhost:4444/grid/console">http://localhost:4444/grid/console</a> 中查看。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.selenium.dev/docs/site/en/grid/">https://www.selenium.dev/docs/site/en/grid/</a></li>
<li><a href="https://github.com/SeleniumHQ/selenium">https://github.com/SeleniumHQ/selenium</a></li>
<li><a href="https://github.com/SeleniumHQ/selenium/wiki/Grid2">https://github.com/SeleniumHQ/selenium/wiki/Grid2</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Netdiscover网络扫描工具</title>
    <url>/posts/api-test-security-testing-netdiscover-tool/</url>
    <content><![CDATA[<p>Netdiscover是一种网络扫描工具，通过ARP扫描发现活动主机，可以通过主动和被动两种模式进行ARP扫描。通过主动发送ARP请求检查网络ARP流量，通过自动扫描模式扫描网络地址。本文介绍Netdiscover的安装和使用方法。</p>
<a id="more"></a>
<h1 id="Netdiscover安装"><a href="#Netdiscover安装" class="headerlink" title="Netdiscover安装"></a>Netdiscover安装</h1><p>Kali Linux提供的网络扫描工具<br>github地址：<a href="https://github.com/alexxy/netdiscover">https://github.com/alexxy/netdiscover</a></p>
<p>ubuntu:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt install netdiscover</span><br></pre></td></tr></table></figure><br>安装完成后查看帮助信息：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netdiscover -h</span><br><span class="line">Netdiscover 0.5.1 [Active/passive ARP reconnaissance tool]</span><br><span class="line">Written by: Jaime Penalba &lt;jpenalbae@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">Usage: netdiscover [-i device] [-r range | -l file | -p] [-m file] [-F filter] [-s time] [-c count] [-n node] [-dfPLNS]</span><br><span class="line">  -i device: your network device</span><br><span class="line">  -r range: scan a given range instead of auto scan. 192.168.6.0/24,/16,/8</span><br><span class="line">  -l file: scan the list of ranges contained into the given file</span><br><span class="line">  -p passive mode: <span class="keyword">do</span> not send anything, only sniff</span><br><span class="line">  -m file: scan a list of known MACs and host names</span><br><span class="line">  -F filter: customize pcap filter expression (default: <span class="string">&quot;arp&quot;</span>)</span><br><span class="line">  -s time: time to sleep between each ARP request (milliseconds)</span><br><span class="line">  -c count: number of <span class="built_in">times</span> to send each ARP request (<span class="keyword">for</span> nets with packet loss)</span><br><span class="line">  -n node: last <span class="built_in">source</span> IP octet used <span class="keyword">for</span> scanning (from 2 to 253)</span><br><span class="line">  -d ignore home config files <span class="keyword">for</span> autoscan and fast mode</span><br><span class="line">  -f <span class="built_in">enable</span> fastmode scan, saves a lot of time, recommended <span class="keyword">for</span> auto</span><br><span class="line">  -P <span class="built_in">print</span> results <span class="keyword">in</span> a format suitable <span class="keyword">for</span> parsing by another program and stop after active scan</span><br><span class="line">  -L similar to -P but <span class="built_in">continue</span> listening after the active scan is completed</span><br><span class="line">  -N Do not <span class="built_in">print</span> header. Only valid when -P or -L is enabled.</span><br><span class="line">  -S <span class="built_in">enable</span> sleep time suppression between each request (hardcore mode)</span><br><span class="line"></span><br><span class="line">If -r, -l or -p are not enabled, netdiscover will scan <span class="keyword">for</span> common LAN addresses</span><br></pre></td></tr></table></figure></p>
<h1 id="Netdiscover选项"><a href="#Netdiscover选项" class="headerlink" title="Netdiscover选项"></a>Netdiscover选项</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-i device</td>
<td style="text-align:center">网络接口</td>
</tr>
<tr>
<td style="text-align:center">-r range</td>
<td style="text-align:center">扫描范围，例如192.168.0.0/24，仅支持/8, /16和/24</td>
</tr>
<tr>
<td style="text-align:center">-l file</td>
<td style="text-align:center">扫描范围列表文件，每行一个范围</td>
</tr>
<tr>
<td style="text-align:center">-p</td>
<td style="text-align:center">被动模式：不发生任何报文，仅嗅探</td>
</tr>
<tr>
<td style="text-align:center">-m file</td>
<td style="text-align:center">扫描已知Mac地址和主机名的列表文件</td>
</tr>
<tr>
<td style="text-align:center">-F filter</td>
<td style="text-align:center">自定义pcap filter表达式(默认“arp”)</td>
</tr>
<tr>
<td style="text-align:center">-s time</td>
<td style="text-align:center">每个ARP请求间的休眠时间(毫秒,默认1ms)</td>
</tr>
<tr>
<td style="text-align:center">-c count</td>
<td style="text-align:center">发送每个ARP请求的次数，用于丢失数据包的网络，默认1次</td>
</tr>
<tr>
<td style="text-align:center">-n node</td>
<td style="text-align:center">扫描最后的源IP，默认为67(x.x.x.67),允许范围为2-253</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:center">忽略自动扫描和快速模式的主配置文件,扫描默认的范围和IP</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td style="text-align:center">启用快速模式扫描,扫描每个网段的.1、.100 和 .254</td>
</tr>
<tr>
<td style="text-align:center">-P</td>
<td style="text-align:center">产生输出到文件或者其他解析程序，扫描完成后退出，例如：`netdiscover -P -r 192.168.20.0/16</td>
<td>grep 192.168.20.100`</td>
</tr>
<tr>
<td style="text-align:center">-L</td>
<td style="text-align:center">与-P类似，但在主动扫描后继续捕获ARP包</td>
</tr>
<tr>
<td style="text-align:center">-N</td>
<td style="text-align:center">不打印表头，仅在-P 或者-L启用时有效</td>
</tr>
<tr>
<td style="text-align:center">-S</td>
<td style="text-align:center">已弃用</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Netdiscover使用"><a href="#Netdiscover使用" class="headerlink" title="Netdiscover使用"></a>Netdiscover使用</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>如果未启用被动模式（-p）、扫描列表（-l）或扫描范围（-r）选项，netdiscover将扫描LAN地址（192.168.0.0/16、172.16.0.0/12和10.0.0.0/8）。</p>
<p>扫描结果控制键：<br>h：显示帮助信息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netdiscover -i ens38 -p</span><br></pre></td></tr></table></figure><br><img src="netdiscover-h.png" width="80%" height="80%" /></p>
<p>q：退出帮助信息界面，或者退出扫描（或者Ctrl+c退出）<br>j：向下滚动（或者使用下方向箭头）<br>k：向上滚动（或者使用上方向箭头）<br>.：向上翻页<br>,：向下翻页</p>
<p>扫描结果视图：<br>a：显示ARP响应列表<br><img src="netdiscover-arp-reply-list.png" width="80%" height="80%" /></p>
<p>r：显示ARP请求列表<br><img src="netdiscover-arp-requests-list.png" width="80%" height="80%" /></p>
<p>u：显示检测到的唯一主机<br><img src="netdiscover-unique-hosts.png" width="80%" height="80%" /></p>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>扫描指定接口：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netdiscover -i ens38</span><br></pre></td></tr></table></figure><br><img src="netdiscover-scan1.png" width="80%" height="80%" /></p>
<p>快速扫描：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netdiscover -i ens38 -f</span><br></pre></td></tr></table></figure><br>扫描指定范围：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netdiscover -i ens38 -r 192.168.0.0/16</span><br></pre></td></tr></table></figure><br><img src="netdiscover-r.png" width="80%" height="80%" /></p>
<p>被动扫描，仅嗅探：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ netdiscover -i ens38 -r 192.168.0.0/16 -p</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>计算机网络</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Netdiscover</tag>
        <tag>网络扫描</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest插件开发</title>
    <url>/posts/pytest-plugin/</url>
    <content><![CDATA[<p>Pytest测试框架功能非常多，它其实就是由一组插件组成的，具有大量的插件，可以通过插件来扩展、定制功能，能满足大部分的测试需求。本文介绍pytest插件的开发方法，帮助更好的理解pytest测试框架。</p>
<a id="more"></a>
<h1 id="pytest插件介绍"><a href="#pytest插件介绍" class="headerlink" title="pytest插件介绍"></a>pytest插件介绍</h1><h2 id="pytest的三种插件"><a href="#pytest的三种插件" class="headerlink" title="pytest的三种插件"></a>pytest的三种插件</h2><p>pytest插件通过hook函数来实现，pytest主要包括以下三种插件</p>
<ul>
<li>内置插件：pytest内部的_pytest目录中加载：<code>\Lib\site-packages\_pytest\hookspec.py</code></li>
<li>外部插件：pip install 插件，通过setuptools的Entry points机制来发现外部插件，可用插件列表：<a href="https://docs.pytest.org/en/latest/reference/plugin_list.html">https://docs.pytest.org/en/latest/reference/plugin_list.html</a></li>
<li>本地插件：conftest.py插件，pytest自动模块发现机制，在项目根目录下的conftest文件起到全局作用，在项目下的子目录中的conftest.py文件作用范围只能在该层级及以下目录生效。</li>
</ul>
<p>他们的加载顺序为：</p>
<ol>
<li>内置插件</li>
<li>外部插件</li>
<li>本地插件</li>
</ol>
<h2 id="pytest的hook函数"><a href="#pytest的hook函数" class="headerlink" title="pytest的hook函数"></a>pytest的hook函数</h2><p>hook函数(钩子函数)是程序中预留的函数（相当于暴露了一个钩子），如果我们需要在程序某个步骤执行某个操作，我们就直接重写特定的钩子函数（挂载到钩子上），这样就实现了我们要增加的功能。没有挂载或者注册钩子时，它就是空的，也就是没有执行任何操作。</p>
<p>Pytest 的hook函数可查看<code>\Lib\site-packages\_pytest\hookspec.py</code> 文件， Pytest hook函数的执行顺序如下(<a href="https://github.com/pytest-dev/pytest/issues/3261">https://github.com/pytest-dev/pytest/issues/3261</a>)：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">└── pytest_cmdline_main</span><br><span class="line">    ├── pytest_plugin_registered</span><br><span class="line">    ├── pytest_configure</span><br><span class="line">    │   └── pytest_plugin_registered</span><br><span class="line">    ├── pytest_sessionstart</span><br><span class="line">    │   ├── pytest_plugin_registered</span><br><span class="line">    │   └── pytest_report_header</span><br><span class="line">    ├── pytest_collection</span><br><span class="line">    │   ├── pytest_collectstart</span><br><span class="line">    │   ├── pytest_make_collect_report</span><br><span class="line">    │   │   ├── pytest_collect_file</span><br><span class="line">    │   │   │   └── pytest_pycollect_makemodule</span><br><span class="line">    │   │   └── pytest_pycollect_makeitem</span><br><span class="line">    │   │       └── pytest_generate_tests</span><br><span class="line">    │   │           └── pytest_make_parametrize_id</span><br><span class="line">    │   ├── pytest_collectreport</span><br><span class="line">    │   ├── pytest_itemcollected</span><br><span class="line">    │   ├── pytest_collection_modifyitems</span><br><span class="line">    │   └── pytest_collection_finish</span><br><span class="line">    │       └── pytest_report_collectionfinish</span><br><span class="line">    ├── pytest_runtestloop</span><br><span class="line">    │   └── pytest_runtest_protocol</span><br><span class="line">    │       ├── pytest_runtest_logstart</span><br><span class="line">    │       ├── pytest_runtest_setup</span><br><span class="line">    │       │   └── pytest_fixture_setup</span><br><span class="line">    │       ├── pytest_runtest_makereport</span><br><span class="line">    │       ├── pytest_runtest_logreport</span><br><span class="line">    │       │   └── pytest_report_teststatus</span><br><span class="line">    │       ├── pytest_runtest_call</span><br><span class="line">    │       │   └── pytest_pyfunc_call</span><br><span class="line">    │       ├── pytest_runtest_teardown</span><br><span class="line">    │       │   └── pytest_fixture_post_finalizer</span><br><span class="line">    │       └── pytest_runtest_logfinish</span><br><span class="line">    ├── pytest_sessionfinish</span><br><span class="line">    │   └── pytest_terminal_summary</span><br><span class="line">    └── pytest_unconfigure</span><br></pre></td></tr></table></figure></p>
<p>我们可以对上面的hook函数进行改写，实现某些功能。我在以前的pytest文章中（<a href="https://blog.csdn.net/u010698107/article/details/111416069">Pytest测试框架（三）：pytest fixture 用法</a>）介绍了fixture 插件的用法，fixture实现的功能其实也对pytest的hook函数进行了改写，比如pytest_generate_tests，pytest_sessionstart等hook函数，大家如果感兴趣可以查看源码：<code>\Lib\site-packages\_pytest\fixtures.py</code></p>
<h2 id="pluggy插件系统"><a href="#pluggy插件系统" class="headerlink" title="pluggy插件系统"></a>pluggy插件系统</h2><p>前面简要介绍了pytest插件，这些插件是怎么管理的呢？pytest的大量插件使用pluggy进行管理，pluggy是pytest使用的一个插件系统，用于pytest插件的管理和钩子调用。也就是说，pluggy使pytest具有了钩子功能，实现主机（主程序）与插件的连接。</p>
<h1 id="pytest插件：中文编码"><a href="#pytest插件：中文编码" class="headerlink" title="pytest插件：中文编码"></a>pytest插件：中文编码</h1><p>先写一个测试用例test_hook.py:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;name&quot;</span>,[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><br>执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pytest -vs test_hook.py::test_name</span><br></pre></td></tr></table></figure><br>结果（只截取部分）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">test_hook.py::test_name[\u5f20\u4e09] 张三</span><br><span class="line">PASSED</span><br><span class="line">test_hook.py::test_name[\u674e\u56db] 李四</span><br><span class="line">PASSED</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们发现用例名字编码格式为Unicode，无法显示中文。</p>
<p>怎么解决呢？我们可以对pytest hook函数pytest_collection_modifyitems()进行重写：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_collection_modifyitems</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    session: <span class="string">&quot;Session&quot;</span>, config: <span class="string">&quot;Config&quot;</span>, items: List[<span class="string">&quot;Item&quot;</span>]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; called after collection has been performed, may filter or re-order</span></span><br><span class="line"><span class="string">    the items in-place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param _pytest.main.Session session: the pytest session object</span></span><br><span class="line"><span class="string">    :param _pytest.config.Config config: pytest config object</span></span><br><span class="line"><span class="string">    :param List[_pytest.nodes.Item] items: list of item objects</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><br>根据注释我们知道这个hook函数在用例收集完成后进行调用，可对用例进行过滤或者重新排序（修改用例执行顺序的pytest-ordering插件就修改了这个hook函数）</p>
<p>接下来开始修改这个hook函数，对用例名进行解码并反转用例顺序，在测试用例同级目录下新建conftest.py函数，修改代码如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_collection_modifyitems</span>(<span class="params">session, config, items: List</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        item.name = item.name.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line">        item._nodeid = item.nodeid.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line">    items.reverse()</span><br></pre></td></tr></table></figure><br>items就是收集到的测试用例，可对它进行各种操作。</p>
<p>再次执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pytest -vs test_hook.py::test_name</span><br></pre></td></tr></table></figure><br>结果（只截取部分）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">test_hook.py::test_name[李四] 李四</span><br><span class="line">PASSED</span><br><span class="line">test_hook.py::test_name[张三] 张三</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure><br>解码成功，并且顺序反转了。</p>
<h1 id="添加命令行参数"><a href="#添加命令行参数" class="headerlink" title="添加命令行参数"></a>添加命令行参数</h1><p>通过改写hook函数pytest_addoption()可以实现添加自定义的命令行参数，几乎每个pytest 插件都会使用这个hook方法。下面在conftest.py中改写pytest_addoption()方法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一个命令行参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_addoption</span>(<span class="params">parser, pluginmanager</span>):</span></span><br><span class="line">    mygroup = parser.getgroup(<span class="string">&quot;testgroup&quot;</span>) <span class="comment">#group将下面所有的 optiongroup都展示在这个group下。</span></span><br><span class="line">    mygroup.addoption(<span class="string">&quot;--env&quot;</span>, <span class="comment">#注册一个命令行选项</span></span><br><span class="line">        default=<span class="string">&#x27;test&#x27;</span>,  <span class="comment"># 参数的默认值</span></span><br><span class="line">        dest = <span class="string">&#x27;env&#x27;</span>,  <span class="comment"># 存储的变量</span></span><br><span class="line">        <span class="built_in">help</span> = <span class="string">&#x27;set your run env&#x27;</span> <span class="comment">#帮助提示参数的描述信息</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p>
<p>然后我们在命令行中输入<code>pytest -h</code>，在打印的帮助信息中，我们可以看到添加的自定义参数：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">testgroup:</span><br><span class="line">  --env=ENV             set your run env</span><br></pre></td></tr></table></figure></p>
<p>接下来获取这个参数，在conftest.py中添加如下代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmdoption</span>(<span class="params">request</span>):</span></span><br><span class="line">    env = request.config.getoption(<span class="string">&quot;--env&quot;</span>, default=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> env == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;test环境&quot;</span>)</span><br><span class="line">        datapath = <span class="string">&quot;data/test/data.yml&quot;</span></span><br><span class="line">    <span class="keyword">if</span> env == <span class="string">&quot;develop&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;开发环境&quot;</span>)</span><br><span class="line">        datapath = <span class="string">&quot;data/develop/data.yml&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(datapath) <span class="keyword">as</span> f:</span><br><span class="line">        datas = yaml.safe_load(f)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env,datas</span><br></pre></td></tr></table></figure></p>
<p>测试数据：<br><img src="pytest-env.png" width="80%" height="80%" /></p>
<p>编写测试用例：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_env</span>(<span class="params">cmdoption</span>):</span></span><br><span class="line">    env,datas = cmdoption</span><br><span class="line">    host = datas[<span class="string">&#x27;env&#x27;</span>][<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">    port = datas[<span class="string">&#x27;env&#x27;</span>][<span class="string">&#x27;port&#x27;</span>]</span><br><span class="line">    url = <span class="built_in">str</span>(host) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(port)</span><br><span class="line">    print(url)</span><br></pre></td></tr></table></figure><br>执行测试用例：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pytest -vs test_hook.py::test_env</span><br></pre></td></tr></table></figure><br>结果（只截取部分）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">test_hook.py::test_env <span class="built_in">test</span>环境</span><br><span class="line">http://192.168.11.1:4567</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure><br>传递参数：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pytest -vs --env develop test_hook.py::test_env</span><br></pre></td></tr></table></figure><br>结果（只截取部分）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">test_hook.py::test_env 开发环境</span><br><span class="line">http://192.168.0.1:1234</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure><br>传递成功</p>
<h1 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h1><p>你的Python插件开发完成后，可以对它进行打包发布，方便给别人使用，打包后也可以发布代码到到PyPI上，可参考Python打包文档：<a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a> ，下面介绍Python打包过程。</p>
<h2 id="1、创建包文件"><a href="#1、创建包文件" class="headerlink" title="1、创建包文件"></a>1、创建包文件</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pytest-encode/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── setup.py</span><br><span class="line">├── pytest_encode/</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└──tests/</span><br><span class="line">    └── test_encode.py</span><br></pre></td></tr></table></figure>
<p>setup.py是一个构建脚本：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&quot;pytest-encode&quot;</span>, <span class="comment"># Replace with your own username</span></span><br><span class="line">    version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;hiyongz&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;zhiyo2016@163.com@example.com&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;set your encoding&quot;</span>,</span><br><span class="line">    long_description=<span class="string">&quot;show Chinese for your mark.parametrize().&quot;</span>,</span><br><span class="line">    url=<span class="string">&quot;https://github.com/pypa/sampleproject&quot;</span>,</span><br><span class="line">    project_urls=&#123;</span><br><span class="line">        <span class="string">&quot;Bug Tracker&quot;</span>: <span class="string">&quot;https://github.com/pypa/sampleproject/issues&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Framework :: Pytest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Topic :: Software Develoment :: Testing&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    license=<span class="string">&#x27;MIT License&#x27;</span>,</span><br><span class="line">    packages=[<span class="string">&#x27;pytest_encode&#x27;</span>],</span><br><span class="line">    keywords=[</span><br><span class="line">        <span class="string">&quot;pytest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;py.test&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pytest_encode&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&#x27;pytest&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=3.6&quot;</span>,</span><br><span class="line">    <span class="comment"># 入口模块或者入口函数</span></span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">&#x27;pytest11&#x27;</span>:[</span><br><span class="line">            <span class="string">&#x27;pytest-encode = pytest_encode&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">       </span><br><span class="line">    zip_safe=<span class="literal">False</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<ol>
<li>其中依赖包可以通过如下命令生成：<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure></li>
<li>entry_points为入口函数，使用pluggy插件中PluginManager类的load_setuptools_entrypoints方法加载，其中pytest11为入口点，这是官方定义的固定入口点，用于发现插件，参考<a href="https://docs.pytest.org/en/latest/how-to/writing_plugins.html">https://docs.pytest.org/en/latest/how-to/writing_plugins.html</a></li>
</ol>
<p>__init__.py：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="comment"># 日志格式</span></span><br><span class="line">                    <span class="comment"># 时间、代码所在文件名、代码行号、日志级别名字、日志信息</span></span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#x27;</span>,</span><br><span class="line">                    <span class="comment"># 打印日志的时间</span></span><br><span class="line">                    datefmt=<span class="string">&#x27;%a, %d %b %Y %H:%M:%S&#x27;</span>,</span><br><span class="line">                    <span class="comment"># 日志文件存放的目录（目录必须存在）及日志文件名</span></span><br><span class="line">                    filename=<span class="string">&#x27;report.log&#x27;</span>,</span><br><span class="line">                    <span class="comment"># 打开日志文件的方式</span></span><br><span class="line">                    filemode=<span class="string">&#x27;w&#x27;</span></span><br><span class="line">                    )</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_collection_modifyitems</span>(<span class="params">session, config, items: List</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        item.name = item.name.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line">        item._nodeid = item.nodeid.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加login标签</span></span><br><span class="line">        <span class="comment"># pytest -vs -m login test_hook.py</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;login&#x27;</span> <span class="keyword">in</span> item.nodeid:</span><br><span class="line">            item.add_marker(pytest.mark.login)</span><br><span class="line">    items.reverse()</span><br></pre></td></tr></table></figure></p>
<h2 id="2、打包"><a href="#2、打包" class="headerlink" title="2、打包"></a>2、打包</h2><p>打包需要安装两个库：</p>
<ul>
<li>wheel：<code>pip install wheel</code></li>
<li>setuptools：<code>pip install setuptools</code></li>
</ul>
<p>进入包目录（pytest-encode）下，执行目录：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure><br>命令执行完成后，新生成如下文件：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pytest-encode/</span><br><span class="line">├── build/</span><br><span class="line">	├── bdist.win-amd64</span><br><span class="line">    └── lib</span><br><span class="line">		└── pytest_encode</span><br><span class="line">			└── __init__.py</span><br><span class="line">├── dist/</span><br><span class="line">	├── pytest-encode-0.0.1.tar.gz</span><br><span class="line">    └── pytest_encode-0.0.1-py3-none-any.whl		</span><br><span class="line">└──pytest_encode.egg-info/</span><br><span class="line">	├── dependency_links.txt</span><br><span class="line">	├── entry_points.txt</span><br><span class="line">	├── not-zip-safe</span><br><span class="line">	├── PKG-INFO</span><br><span class="line">	├── requires.txt</span><br><span class="line">	├── SOURCES.txt	</span><br><span class="line">    └── test_encode.py</span><br></pre></td></tr></table></figure><br>pytest-encode-0.0.1.tar.gz为源码包，pytest_encode-0.0.1-py3-none-any.whl可以通过<code>pip install</code>命令安装</p>
<h2 id="3、测试打包文件"><a href="#3、测试打包文件" class="headerlink" title="3、测试打包文件"></a>3、测试打包文件</h2><p>我们新建一个Python虚拟环境，在新的虚拟环境下执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        21.0.1</span><br><span class="line">setuptools 54.2.0</span><br></pre></td></tr></table></figure><br>只安装了两个包，下面安装刚才生成的包文件：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install pytest_encode-0.0.1-py3-none-any.whl</span><br></pre></td></tr></table></figure><br>它会自动安装setup.py中定义的依赖包。</p>
<p>然后在新的虚拟环境中编写测试用例并执行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> pytest_encode <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;name&quot;</span>,[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    logger.info(<span class="string">&quot;测试编码&quot;</span>)</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pytest -vs test_encode.py::test_name</span><br></pre></td></tr></table></figure>
<p>结果（只截取部分）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">test_hook.py::test_name[李四] 李四</span><br><span class="line">PASSED</span><br><span class="line">test_hook.py::test_name[张三] 张三</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure><br>解码成功，并且生成了日志文件：<br>report.log：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Sat, 03 Apr 2021 20:21:45 test_encode.py[line:13] INFO 测试编码</span><br><span class="line">Sat, 03 Apr 2021 20:21:45 test_encode.py[line:13] INFO 测试编码</span><br></pre></td></tr></table></figure><br>表明安装的包生效了。</p>
<h2 id="4、发布包"><a href="#4、发布包" class="headerlink" title="4、发布包"></a>4、发布包</h2><p>使用Twine来上传包到PyPI，需要注册一个PyPI账号</p>
<p>然后安装twine:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install twine</span><br></pre></td></tr></table></figure><br>上传：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ twine upload --repository test-encode dist/*</span><br></pre></td></tr></table></figure><br>上传过程中会让你输入前面注册的用户名和密码，上传成功后就可以在PyPI上查看</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://docs.pytest.org/en/latest/how-to/writing_plugins.html">https://docs.pytest.org/en/latest/how-to/writing_plugins.html</a></li>
<li><a href="https://docs.pytest.org/en/stable/reference.html?#hooks">https://docs.pytest.org/en/stable/reference.html?#hooks</a></li>
<li><a href="https://docs.pytest.org/en/stable/_modules/_pytest/hookspec.html#pytest_cmdline_parse">https://docs.pytest.org/en/stable/_modules/_pytest/hookspec.html#pytest_cmdline_parse</a></li>
<li><a href="https://github.com/pytest-dev/pytest/issues/3261">https://github.com/pytest-dev/pytest/issues/3261</a></li>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>pytest-ordering：<a href="https://github.com/ftobia/pytest-ordering">https://github.com/ftobia/pytest-ordering</a></li>
<li>pluggy：<a href="https://pluggy.readthedocs.io/en/latest/">https://pluggy.readthedocs.io/en/latest/</a></li>
</ol>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试框架</category>
      </categories>
      <tags>
        <tag>pytest</tag>
        <tag>pytest插件</tag>
        <tag>hook函数</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记：递归、动态规划</title>
    <url>/posts/algorithm-notes-for-dynamic-programming/</url>
    <content><![CDATA[<p>动态规划是求解决策过程最优化的过程，可以高效求解那些可以分解为高度重复子问题的问题，应用非常广泛，比如解决最短路线、NLP等实际问题。</p>
<a id="more"></a>
<h1 id="递归、分治和动态规划"><a href="#递归、分治和动态规划" class="headerlink" title="递归、分治和动态规划"></a>递归、分治和动态规划</h1><h2 id="德罗斯特效应"><a href="#德罗斯特效应" class="headerlink" title="德罗斯特效应"></a>德罗斯特效应</h2><p>德罗斯特效应（Droste effect）是递归艺术中的一种表现形式，德罗斯特效应即在一幅图像中，某个局部图像与整体图像类似，而在这个局部中，又有更小的部分与这个局部类似，依次类推且可无限重复。<br><img src="droste-coco.jpg" width="30%" height="30%" /></p>
<center><font size="2">德罗斯特（Droste）可可粉的包装盒</font></center>

<p>德罗斯特是荷兰的一个著名巧克力品牌，创立于1863年，上面这张图片从1904年起开始使用，数十年间只进行了一些小幅的调整，后来成为一个家喻户晓的概念。诗人及专栏作家Nico Scheepmaker在七十年代起，开始使用“德罗斯特效应”此一词语。下面介绍动态规划算法。</p>
<h2 id="递归、分治和动态规划-1"><a href="#递归、分治和动态规划-1" class="headerlink" title="递归、分治和动态规划"></a>递归、分治和动态规划</h2><h3 id="迭代和递归的区别"><a href="#迭代和递归的区别" class="headerlink" title="迭代和递归的区别"></a>迭代和递归的区别</h3><ul>
<li>迭代是将输出作为输入，再次进行处理。</li>
<li>递归，自己调用自己，自己包含自己。</li>
</ul>
<h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><p> 分治（ Divide &amp;Conquer ）是将问题分解为若干个子问题（Divide），递归求解这些子问题（Conquer），然后合并子问题的解。</p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>动态规划（Dynamic Programming）和分治策略类似，也是将原问题分解为若干子问题，递归的求解这些子问题，然后合并子问题的解得到原问题的解。</p>
<blockquote>
<p>通常许多子问题非常相似，为此动态规划法试图<strong>仅仅解决每个子问题一次</strong>，从而减少计算量：一旦某个给定子问题的解已经算出，则将其<strong>记忆化存储</strong>，以便下次需要同一个子问题解之时直接<strong>查表</strong>。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。（维基百科：<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a>）</p>
</blockquote>
<p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量。动态规划、递归和分治没有根本上的区别，解法都是先找到重复的子问题，也就是将问题拆解成可重复解决的问题。</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>递归问题解法：</p>
<ol>
<li>找到重复子问题</li>
<li>确定递归终止条件</li>
</ol>
<p>对于动态规划问题，每个子问题只求解一次，注意将其结果保存起来，进行记忆化存储。</p>
<h1 id="斐波那契数"><a href="#斐波那契数" class="headerlink" title="斐波那契数"></a>斐波那契数</h1><p>斐波那契数列LeetCode地址：<a href="https://leetcode-cn.com/problems/fibonacci-number/">https://leetcode-cn.com/problems/fibonacci-number/</a></p>
<h2 id="解法1：暴力递归"><a href="#解法1：暴力递归" class="headerlink" title="解法1：暴力递归"></a>解法1：暴力递归</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fib(n - <span class="number">1</span>) + self.fib(n - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solu = Solution()</span><br><span class="line">    result = solu.fib(<span class="number">6</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure></p>
<p>时间复杂度：O(2^N)<br>空间复杂度：O(N)</p>
<p>如果数比较大，2^N的时间复杂度将会占用大量资源，计算非常慢。其实暴力递归计算过程中，进行了大量重复计算，我们来看一下Fib(6)的状态树：<br><img src="fibonacci-number.png" width="80%" height="80%" /></p>
<p>我们发现f(4)计算了2次，f(3)计算了3次，其实没必要重复计算，可以使用记忆化存储来保存计算值。</p>
<h2 id="解法2：记忆化存储"><a href="#解法2：记忆化存储" class="headerlink" title="解法2：记忆化存储"></a>解法2：记忆化存储</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        cash = &#123;<span class="number">0</span>:<span class="number">0</span>,<span class="number">1</span>:<span class="number">1</span>&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">memoize</span>(<span class="params">n</span>):</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> cash:</span><br><span class="line">                <span class="keyword">return</span> cash[n]</span><br><span class="line">            cash[n] = memoize(n - <span class="number">1</span>) + memoize(n - <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> cash[n]</span><br><span class="line">        <span class="keyword">return</span> memoize(n)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solu = Solution()</span><br><span class="line">    result = solu.fib(<span class="number">6</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>
<h2 id="解法3：动态规划"><a href="#解法3：动态规划" class="headerlink" title="解法3：动态规划"></a>解法3：动态规划</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">self, n</span>):</span> </span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">1</span>: <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">0</span>, <span class="number">1</span>] + [<span class="number">0</span>]*(n-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[i]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solu = Solution() </span><br><span class="line">    result = solu.fib(<span class="number">6</span>) </span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(N)<br>空间复杂度：O(N)</p>
<h2 id="解法4：自底向上迭代"><a href="#解法4：自底向上迭代" class="headerlink" title="解法4：自底向上迭代"></a>解法4：自底向上迭代</h2><p>可以进一步减少空间复杂度<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">self, n</span>):</span> </span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">1</span>: <span class="keyword">return</span> n</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            c = a + b</span><br><span class="line">            a, b = b, c</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">    solu = Solution() </span><br><span class="line">    result = solu.fib(<span class="number">6</span>) </span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><br>时间复杂度：O(N)<br>空间复杂度：O(1)</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>动态规划</tag>
        <tag>递归</tag>
        <tag>fibonacci</tag>
        <tag>斐波那契数</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra暴力破解工具</title>
    <url>/posts/api-test-security-testing-hydra-tool/</url>
    <content><![CDATA[<p>Hydra是一款暴力破解工具，进行并行登录破解，破解远程服务的用户名密码，由黑客组织<a href="https://www.thc.org/">THC</a>开发，它可以对超过50个协议进行快速字典攻击，包括telnet、ftp、http(s)、smb、MySQL、SMTP等。</p>
<a id="more"></a>
<h1 id="Hydra安装"><a href="#Hydra安装" class="headerlink" title="Hydra安装"></a>Hydra安装</h1><p>官方github地址：<a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a><br>Kali Linux中自带Hydra，下面介绍其它系统安装方法。</p>
<h2 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt-get install hydra</span><br></pre></td></tr></table></figure>
<h2 id="centos系统安装"><a href="#centos系统安装" class="headerlink" title="centos系统安装"></a>centos系统安装</h2><p><strong>1、下载</strong><br>地址：<a href="https://github.com/vanhauser-thc/thc-hydra/releases/tag/v9.2">https://github.com/vanhauser-thc/thc-hydra/releases/tag/v9.2</a></p>
<p><strong>2、安装依赖</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum install openssl-devel pcre-devel ncpfs-devel postgresql-devel libssh-devel subversion-devel libncurses-devel</span><br></pre></td></tr></table></figure>
<p><strong>3、编译安装</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tar zxf thc-hydra-9.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> thc-hydra-9.2</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<p>查看帮助信息：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hydra -h</span><br><span class="line">Hydra v9.2 (c) 2021 by van Hauser/THC &amp; David Maciejak - Please <span class="keyword">do</span> not use <span class="keyword">in</span> military or secret service organizations, or <span class="keyword">for</span> illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).</span><br><span class="line"></span><br><span class="line">Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-c TIME] [-ISOuvVd46] [-m MODULE_OPT] [service://server[:PORT][/OPT]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -R        restore a previous aborted/crashed session</span><br><span class="line">..............</span><br></pre></td></tr></table></figure></p>
<h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><p>GitHub地址：<a href="https://github.com/maaaaz/thc-hydra-windows">https://github.com/maaaaz/thc-hydra-windows</a><br>下载发布版本，解压就可以使用了</p>
<h1 id="Hydra参数说明"><a href="#Hydra参数说明" class="headerlink" title="Hydra参数说明"></a>Hydra参数说明</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-R</td>
<td style="text-align:center">继续上一次破解</td>
</tr>
<tr>
<td style="text-align:center">-I</td>
<td style="text-align:center">忽略现有还原文件（不等待10秒）</td>
</tr>
<tr>
<td style="text-align:center">-s PORT</td>
<td style="text-align:center">指定默认端口</td>
</tr>
<tr>
<td style="text-align:center">-l LOGIN</td>
<td style="text-align:center">指定破解登录用户名</td>
</tr>
<tr>
<td style="text-align:center">-L FILE</td>
<td style="text-align:center">使用文件指定多个用户名</td>
</tr>
<tr>
<td style="text-align:center">-p PASS</td>
<td style="text-align:center">指定密码</td>
</tr>
<tr>
<td style="text-align:center">-P FILE</td>
<td style="text-align:center">指定密码字典</td>
</tr>
<tr>
<td style="text-align:center">-x MIN:MAX:CHARSET</td>
<td style="text-align:center">密码暴力生成</td>
</tr>
<tr>
<td style="text-align:center">-y</td>
<td style="text-align:center">禁止在暴力破解中使用符号</td>
</tr>
<tr>
<td style="text-align:center">-r</td>
<td style="text-align:center">对选项-x使用非随机方法</td>
</tr>
<tr>
<td style="text-align:center">-e nsr</td>
<td style="text-align:center">n：空密码试探，s：使用指定用户和密码试探。</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td style="text-align:center">循环用户</td>
</tr>
<tr>
<td style="text-align:center">-C FILE</td>
<td style="text-align:center">冒号分隔用户名密码：”login:pass” 格式</td>
</tr>
<tr>
<td style="text-align:center">-M FILE</td>
<td style="text-align:center">要攻击的服务器列表，每行一个条目，’:’指定端口</td>
</tr>
<tr>
<td style="text-align:center">-o FILE</td>
<td style="text-align:center">将找到的登录/密码写入文件</td>
</tr>
<tr>
<td style="text-align:center">-b FORMAT</td>
<td style="text-align:center">指定-o输出格式，默认text,可选json, jsonv1</td>
</tr>
<tr>
<td style="text-align:center">-f / -F</td>
<td style="text-align:center">找到用户名/密码后中止破解，-f:每个主机，-F：所有</td>
</tr>
<tr>
<td style="text-align:center">-t TASKS</td>
<td style="text-align:center">每个主机并行线程数，默认16</td>
</tr>
<tr>
<td style="text-align:center">-T TASKS</td>
<td style="text-align:center">所有并行线程数，默认64</td>
</tr>
<tr>
<td style="text-align:center">-w / -W TIME</td>
<td style="text-align:center">最大等待响应时间</td>
</tr>
<tr>
<td style="text-align:center">-c TIME</td>
<td style="text-align:center">所有进程每次尝试登录等待时间</td>
</tr>
<tr>
<td style="text-align:center">-4 / -6</td>
<td style="text-align:center">IPv4(默认)/IPv6地址</td>
</tr>
<tr>
<td style="text-align:center">-v / -V / -d</td>
<td style="text-align:center">详细日志模式/每次尝试仅显示用户名密码/调试模式</td>
</tr>
<tr>
<td style="text-align:center">-k</td>
<td style="text-align:center">不重做失败的尝试（适用于-M批量扫描）</td>
</tr>
<tr>
<td style="text-align:center">-q</td>
<td style="text-align:center">不要打印错误连接消息</td>
</tr>
<tr>
<td style="text-align:center">-U</td>
<td style="text-align:center">服务模块详细使用信息</td>
</tr>
<tr>
<td style="text-align:center">server</td>
<td style="text-align:center">目标服务名称或IP地址(也可以使用-M参数)</td>
</tr>
<tr>
<td style="text-align:center">service</td>
<td style="text-align:center">要破解的服务</td>
</tr>
<tr>
<td style="text-align:center">OPT</td>
<td style="text-align:center">可选项</td>
</tr>
</tbody>
</table>
</div>
<p>支持的服务包括：adam6500, asterisk, cisco, cisco-enable, cvs, ftp, http-{head|get|post}, http-{get|post}-form, http-proxy, http-proxy-urlenum, icq, imap, irc, ldap2, ldap3[s], mssql, mysql(v4), nntp, pcanywhere, pcnfs, pop3, redis, rexec, rlogin, rpcap, rsh, rtsp, s7-300, smb, smtp, smtp-enum, snmp, socks5, teamspeak, telnet, vmauthd, vnc, xmpp</p>
<h1 id="Hydra使用实例"><a href="#Hydra使用实例" class="headerlink" title="Hydra使用实例"></a>Hydra使用实例</h1><p>手动创建用户名字典和密码字典<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat user.txt </span><br><span class="line">admin</span><br><span class="line">root</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">zhy</span><br><span class="line">haha</span><br><span class="line">$ cat pwd.txt </span><br><span class="line">admin</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">123456</span><br><span class="line">666666</span><br><span class="line">zhy</span><br><span class="line">12345678</span><br><span class="line">$ </span><br></pre></td></tr></table></figure></p>
<h2 id="破解ssh"><a href="#破解ssh" class="headerlink" title="破解ssh"></a>破解ssh</h2><p>使用单个用户名密码<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hydra 192.168.20.9 ssh -l root -p 12345678</span><br><span class="line">ydra v9.0 (c) 2019 by van Hauser/THC - Please <span class="keyword">do</span> not use <span class="keyword">in</span> military or secret service organizations, or <span class="keyword">for</span> illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-03-21 23:41:45</span><br><span class="line">[WARNING] Many SSH configurations <span class="built_in">limit</span> the number of parallel tasks, it is recommended to reduce the tasks: use -t 4</span><br><span class="line">[DATA] max 1 task per 1 server, overall 1 task, 1 login try (l:1/p:1), ~1 try per task</span><br><span class="line">[DATA] attacking ssh://192.168.20.9:22/</span><br><span class="line">[22][ssh] host: 192.168.20.9   login: root   password: 12345678</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-03-21 23:41:46</span><br></pre></td></tr></table></figure><br>上面的结果提示推荐使用<code>-t 4</code>，默认并发数为16</p>
<p>使用密码字典<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hydra 192.168.20.9 ssh -L user.txt -P pwd.txt -t 4 -e ns</span><br><span class="line">hydra ssh://192.168.20.9 -L user.txt -P pwd.txt -t 4 -e ns -f</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC - Please <span class="keyword">do</span> not use <span class="keyword">in</span> military or secret service organizations, or <span class="keyword">for</span> illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-03-21 23:50:05</span><br><span class="line">[DATA] max 4 tasks per 1 server, overall 4 tasks, 40 login tries (l:5/p:8), ~10 tries per task</span><br><span class="line">[DATA] attacking ssh://192.168.20.9:22/</span><br><span class="line">[22][ssh] host: 192.168.20.9   login: root   password: 12345678</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">[WARNING] Writing restore file because 1 final worker threads did not complete until end.</span><br><span class="line">[ERROR] 0 targets did not complete</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-03-21 23:50:23</span><br></pre></td></tr></table></figure><br><code>-e ns</code>参数：尝试空密码</p>
<h2 id="破解ftp-telnet"><a href="#破解ftp-telnet" class="headerlink" title="破解ftp/telnet"></a>破解ftp/telnet</h2><p>与ssh类似<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hydra 192.168.20.9 ftp -L user.txt -P pwd.txt -t 4</span><br><span class="line">$ hydra 192.168.20.9 telnet -L user.txt -P pwd.txt -t 4</span><br></pre></td></tr></table></figure></p>
<h2 id="破解MySQL数据库"><a href="#破解MySQL数据库" class="headerlink" title="破解MySQL数据库"></a>破解MySQL数据库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hydra -L user.txt -P pwd.txt -t 4 127.0.0.1 mysql</span><br><span class="line">$ hydra -L user.txt -P pwd.txt -t 4 mysql://127.0.0.1:3306</span><br><span class="line">Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please <span class="keyword">do</span> not use <span class="keyword">in</span> military or secret service organizations, or <span class="keyword">for</span> illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-03-22 15:55:50</span><br><span class="line">[DATA] max 4 tasks per 1 server, overall 4 tasks, 30 login tries (l:5/p:6), ~8 tries per task</span><br><span class="line">[DATA] attacking mysql://127.0.0.1:3306/</span><br><span class="line">[3306][mysql] host: 127.0.0.1   login: admin   password: admin</span><br><span class="line">[3306][mysql] host: 127.0.0.1   login: root   password: 123456</span><br><span class="line">1 of 1 target successfully completed, 2 valid passwords found</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-03-22 15:55:51</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ssh、ftp、telnet和mysql协议也可以使用nmap工具破解：<br>nmap暴力破解脚本：<a href="https://nmap.org/nsedoc/categories/brute.html">https://nmap.org/nsedoc/categories/brute.html</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap --script ftp-brute -p 21 &lt;host&gt;</span><br><span class="line">$ nmap --script ssh-brute -p 22 &lt;host&gt;</span><br><span class="line">$ nmap --script mysql-brute -p 3306 &lt;host&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="批量破解多个主机：-M参数"><a href="#批量破解多个主机：-M参数" class="headerlink" title="批量破解多个主机：-M参数"></a>批量破解多个主机：<code>-M</code>参数</h2><p>创建主机字典：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat host.txt</span><br><span class="line">192.168.20.8</span><br><span class="line">192.168.20.9</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hydra -L user.txt -P pwd.txt -t 4 -M host.txt -f ssh</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC - Please <span class="keyword">do</span> not use <span class="keyword">in</span> military or secret service organizations, or <span class="keyword">for</span> illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-03-21 23:59:03</span><br><span class="line">[DATA] max 4 tasks per 2 servers, overall 8 tasks, 30 login tries (l:5/p:6), ~8 tries per task</span><br><span class="line">[DATA] attacking ssh://(2 targets):22/</span><br><span class="line">[22][ssh] host: 192.168.20.9   login: root   password: 12345678</span><br><span class="line">[22][ssh] host: 192.168.20.8   login: root   password: 12345678</span><br><span class="line">2 of 2 targets successfully completed, 2 valid passwords found</span><br><span class="line">[WARNING] Writing restore file because 4 final worker threads did not complete until end.</span><br><span class="line">[ERROR] 4 targets did not resolve or could not be connected</span><br><span class="line">[ERROR] 0 targets did not complete</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-03-21 23:59:17</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将破解日志保存到文件中：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hydra -L user.txt -P pwd.txt -t 4 -vV -M host.txt -o results.log ssh</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>暴力破解</tag>
        <tag>hydra</tag>
      </tags>
  </entry>
  <entry>
    <title>系统性能监控：Prometheus + Grafana 监控服务器性能</title>
    <url>/posts/performance-monitoring-for-server-with-prometheus/</url>
    <content><![CDATA[<p>Prometheus 是一个开源的服务监控系统和时间序列数据库，是一款开源系统监控和警报工具，在测试领域中，我们可以使用Promethues来监控压力测试时服务端的性能。</p>
<a id="more"></a>
<h1 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h1><p><a href="https://prometheus.io/">Prometheus</a>使用Go语言开发，是最初在SoundCloud上构建的开源系统监控和警报工具，在2016年加入了Cloud Native Computing Foundation（CNCF）基金会，是继Kubernetes之后该基金会的第二个托管项目。</p>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul>
<li><p>多维数据模型，由指标名称和键值对标识的时间序列数据度量</p>
</li>
<li><p>PromQL查询语言</p>
</li>
<li><p>不依赖分布式存储；单个服务器节点是自治的</p>
</li>
<li><p>通过HTTP使用pull模式收集时间序列数据</p>
</li>
<li><p>支持通过中间网关推送时间序列数据</p>
</li>
<li><p>通过服务发现或静态配置发现目标对象</p>
</li>
<li><p>支持多种图形和仪表盘</p>
</li>
</ul>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>Prometheus由多个组件组成：</p>
<ul>
<li><strong>Prometheus主服务器</strong>：用于抓取并存储时间序列数据</li>
<li><strong>客户端库</strong>：用于检测应用程序代码</li>
<li><strong>推送网关</strong>：支持短生命周期</li>
<li><strong>各种exporter</strong>：HAProxy，StatsD，Graphite等服务收集服务器性能数据</li>
<li><strong>警告管理器</strong></li>
<li><strong>各种支持工具</strong></li>
</ul>
<p>架构<br><img src="prometheus-architecture.png" width="80%" height="80%" /></p>
<h1 id="Prometheus-Grafana-监控系统性能"><a href="#Prometheus-Grafana-监控系统性能" class="headerlink" title="Prometheus + Grafana 监控系统性能"></a>Prometheus + Grafana 监控系统性能</h1><p>主要用到了Prometheus，node exporter和Grafana，Prometheus和node exporter收集保存服务器性能数据，Grafana用于图形化展示数据。<br><img src="prometheus-grafna-exporter.png" width="80%" height="80%" /></p>
<center><font size="2">图片来源：https://www.ansible.com/blog/red-hat-ansible-tower-monitoring-using-prometheus-node-exporter-grafana</font></center>

<h2 id="docker安装Prometheus"><a href="#docker安装Prometheus" class="headerlink" title="docker安装Prometheus"></a>docker安装Prometheus</h2><p>docker hub地址：<a href="https://registry.hub.docker.com/r/prom/prometheus">https://registry.hub.docker.com/r/prom/prometheus</a></p>
<p>docker安装：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker pull prom/prometheus</span><br></pre></td></tr></table></figure></p>
<h2 id="配置prometheus-yml文件"><a href="#配置prometheus-yml文件" class="headerlink" title="配置prometheus.yml文件"></a>配置prometheus.yml文件</h2><p>参考：<a href="https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus.yml">https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus.yml</a></p>
<p>新建/root/prometheus/prometheus.yml文件：<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="启动prometheus"><a href="#启动prometheus" class="headerlink" title="启动prometheus"></a>启动prometheus</h2><p>我们要用Grafana展示prometheus监控数据，先启动Grafana，Grafana安装配置方法可参考：<a href="https://blog.csdn.net/u010698107/article/details/114295568">JMeter性能监控系统：Jmeter + InfluxDB + Grafana</a></p>
<p>启动命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 3000:3000 --name=grafana --network=grafana grafana/grafana:latest</span><br></pre></td></tr></table></figure></p>
<p>启动prometheus：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name prometheus --network grafana -p 9090:9090 -v /root/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest --config.file=/etc/prometheus/prometheus.yml</span><br></pre></td></tr></table></figure><br>启动后使用<code>docker ps</code>查看是否启动成功<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server prometheus]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">0587156618c5   prom/prometheus:latest   <span class="string">&quot;/bin/prometheus --c…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:9090-&gt;9090/tcp   prometheus</span><br><span class="line">[root@server prometheus]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>浏览器访问：<a href="http://192.168.30.8:9090/">http://192.168.30.8:9090/</a><br>其中192.168.30.8是我的服务器主机ip地址</p>
<p><img src="prometheus-targets.png" width="80%" height="80%" /><br>metrics为本地主机的数据，访问<a href="http://192.168.30.8:9090/metrics">http://192.168.30.8:9090/metrics</a> 可以查看采集的数据。</p>
<h2 id="安装启动node-exporter"><a href="#安装启动node-exporter" class="headerlink" title="安装启动node exporter"></a>安装启动node exporter</h2><p>node exporter用于收集系统数据，下面介绍它的使用方法。</p>
<p>node exporter github地址：<a href="https://github.com/prometheus/node_exporter">https://github.com/prometheus/node_exporter</a><br><img src="prometheus-node-exporter.png" width="80%" height="80%" /><br>下载node_exporter-1.1.2.linux-amd64.tar.gz，安装到另一台Linux系统上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server2 exporter]<span class="comment"># tar -xvzf node_exporter-1.1.2.linux-amd64.tar.gz</span></span><br><span class="line">node_exporter-1.1.2.linux-amd64/</span><br><span class="line">node_exporter-1.1.2.linux-amd64/LICENSE</span><br><span class="line">node_exporter-1.1.2.linux-amd64/NOTICE</span><br><span class="line">node_exporter-1.1.2.linux-amd64/node_exporter</span><br><span class="line">[root@Server2 exporter]<span class="comment"># cd node_exporter-1.1.2.linux-amd64/</span></span><br><span class="line">[root@Server2 node_exporter-1.1.2.linux-amd64]<span class="comment"># ls</span></span><br><span class="line">LICENSE  node_exporter  NOTICE</span><br><span class="line">[root@Server2 node_exporter-1.1.2.linux-amd64]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>运行node exporter，端口号为9100（默认）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server2 node_exporter-1.1.2.linux-amd64]<span class="comment"># nohup ./node_exporter --web.listen-address=&quot;:9100&quot; &amp;</span></span><br></pre></td></tr></table></figure></p>
<p>启动后，浏览器输入<a href="http://192.168.30.9:9100/">http://192.168.30.9:9100/</a> 访问Node Exporter采集的数据，192.168.30.9为安装node exporter服务器的IP地址。<br><img src="prometheus-node-exporter2.png" width="80%" height="80%" /></p>
<p>这时候在Prometheus是看不到这个节点的，因为没有建立连接，接下来配置prometheus.yml文件</p>
<h2 id="配置Prometheus"><a href="#配置Prometheus" class="headerlink" title="配置Prometheus"></a>配置Prometheus</h2><p>配置前面创建的prometheus.yml文件(启动prometheus的那个服务器)，在scrape_configs下添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;centos server2&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.30.9:9100&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启Prometheus：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker restart prometheus</span><br><span class="line">prometheus</span><br></pre></td></tr></table></figure><br>重启成功后，刷新Prometheus页面，发现上线成功<br><img src="prometheus-targets2.png" width="80%" height="80%" /></p>
<h2 id="配置Grafana"><a href="#配置Grafana" class="headerlink" title="配置Grafana"></a>配置Grafana</h2><p>点击Configuration -&gt; Data Sources -&gt; Add data source 选择Prometheus<br>然后配置URL：<a href="http://prometheus:9090">http://prometheus:9090</a><br>修改抓取时间，查询超时时间等参数，设置完成后点击Save &amp; Test<br><img src="prometheus-grafna-setting.png" width="80%" height="80%" /></p>
<p>接下来配置Dashboard，在<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a> 中搜索选择别人开发好的面板，推荐<a href="https://grafana.com/grafana/dashboards/8919">https://grafana.com/grafana/dashboards/8919</a></p>
<p>点击Dashboards -&gt; Manage -&gt; Import，输入选择的dashboard地址，点击load，选择prometheus数据源，配置完成后点击Import。<br><img src="prometheus-grafna-dashboard.png" width="80%" height="80%" /><br>监控界面显示：<br><img src="prometheus-grafna-dashboard2.png" width="80%" height="80%" /></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Prometheus提供了各种exporter，用于收集各种数据库、系统、中间件等性能数据，可参考<a href="https://prometheus.io/docs/instrumenting/exporters/">https://prometheus.io/docs/instrumenting/exporters/</a> 查看所有官方或者第三方提供的exporter。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>性能监控</tag>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap扫描工具介绍</title>
    <url>/posts/api-test-security-testing-nmap-tool/</url>
    <content><![CDATA[<p>Nmap (Network Mapper) 是在渗透测试中常用的扫描工具，可用于扫描网络中的 IP 地址和端口，并检测已安装的应用程序。无论是作为网络安全工具还是黑客工具，Nmap 是一个很强大的工具，在《黑客帝国2》电影中就有出现，用于入侵发电站的能源管理系统。本文将介绍 Nmap 的安装和常用命令。</p>
<a id="more"></a>
<h1 id="Nmap简介及安装"><a href="#Nmap简介及安装" class="headerlink" title="Nmap简介及安装"></a>Nmap简介及安装</h1><p>Nmap官网地址：<a href="https://nmap.org/">https://nmap.org/</a></p>
<h2 id="Nmap-特性"><a href="#Nmap-特性" class="headerlink" title="Nmap 特性"></a>Nmap 特性</h2><p>Nmap使用IP数据包来确定网络上有哪些主机可用、提供哪些服务（应用程序名称和版本）、它们运行的操作系统（操作系统版本信息）、使用的数据包过滤/防火墙类型等其它特性。Nmap可以运行在所有主流的操作系统上，比如Linux、Windows和Mac OS等。</p>
<ul>
<li>Nmap 支持检查主机是否启动，可用于监视主机或服务正常运行时间等</li>
<li>快速识别网络中的设备，包括服务器，路由器，交换机，移动设备等</li>
<li>帮助识别系统上运行的服务，包括 web 服务器、 DNS 服务器和其他常见应用程序。Nmap 还可以检测应用程序版本，帮助检测漏洞</li>
<li>查找在设备上运行的操作系统详细信息</li>
<li>漏洞扫描中，可以使用 Nmap 脚本攻击系统</li>
</ul>
<p>Nmap提供了以下工具：</p>
<ul>
<li>Zenmap 图形界面：可以绘制网络映射图</li>
<li>Ncat：数据传输、重定向和调试工具</li>
<li>Ndiff：比较扫描结果</li>
<li>Nping：数据包生成和响应分析工具</li>
</ul>
<h2 id="Nmap安装"><a href="#Nmap安装" class="headerlink" title="Nmap安装"></a>Nmap安装</h2><h3 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h3><p>Linux系统安装：<a href="https://nmap.org/book/inst-linux.html#inst-rpm">https://nmap.org/book/inst-linux.html#inst-rpm</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm -vhU https://nmap.org/dist/nmap-7.91-1.x86_64.rpm</span><br></pre></td></tr></table></figure><br>也可以先把rpm下载下来后，再安装<br><img src="nmap-rpm-pacakage.png" width="80%" height="80%" /></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm -vhU nmap-7.91-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>查看nmap版本<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># nmap -version</span></span><br><span class="line">Nmap version 7.91 ( https://nmap.org )</span><br><span class="line">Platform: x86_64-redhat-linux-gnu</span><br><span class="line">Compiled with: nmap-liblua-5.3.5 openssl-1.1.1h nmap-libssh2-1.9.0 nmap-libz-1.2.11 nmap-libpcre-7.6 nmap-libpcap-1.9.1 nmap-libdnet-1.12 ipv6</span><br><span class="line">Compiled without:</span><br><span class="line">Available nsock engines: epoll poll select</span><br><span class="line">[root@Client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol>
<li>下载exe可执行文件，双击安装，不勾选npcap，其它默认</li>
<li>安装npcap，下载地址：<a href="https://nmap.org/npcap/#download">https://nmap.org/npcap/#download</a></li>
</ol>
<p>安装完成后，npcap默认加入了环境变量，不需要手动添加<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\software\Nmap&gt;nmap --version</span><br><span class="line">Nmap version 7.91 ( https://nmap.org )</span><br><span class="line">Platform: i686-pc-windows-windows</span><br><span class="line">Compiled with: nmap-liblua-5.3.5 openssl-1.1.1h nmap-libssh2-1.9.0 nmap-libz-1.2.11 nmap-libpcre-7.6 Npcap-1.10 nmap-libdnet-1.12 ipv6</span><br><span class="line">Compiled without:</span><br><span class="line">Available nsock engines: iocp poll select</span><br><span class="line"></span><br><span class="line">D:\software\Nmap&gt;</span><br></pre></td></tr></table></figure></p>
<p>其它系统安装方法参考：<a href="https://nmap.org/download.html">https://nmap.org/download.html</a></p>
<h1 id="Nmap命令"><a href="#Nmap命令" class="headerlink" title="Nmap命令"></a>Nmap命令</h1><p>查看帮助命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -h</span><br></pre></td></tr></table></figure></p>
<h2 id="扫描单个主机"><a href="#扫描单个主机" class="headerlink" title="扫描单个主机"></a>扫描单个主机</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap 192.168.20.9</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-05 16:29 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.20.9</span><br><span class="line">Host is up (0.00010s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">22/tcp  open  ssh</span><br><span class="line">111/tcp open  rpcbind</span><br><span class="line">MAC Address: 00:0C:29:BB:0C:02 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 13.15 seconds</span><br></pre></td></tr></table></figure>
<h2 id="扫描多个主机"><a href="#扫描多个主机" class="headerlink" title="扫描多个主机"></a>扫描多个主机</h2><p>同时扫描多个主机，<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap 192.168.20.9 192.168.20.8</span><br><span class="line">$ nmap 192.168.20.*</span><br><span class="line">$ nmap 192.168.20.8,9,10</span><br><span class="line">$ nmap 192.168.20.8-255</span><br></pre></td></tr></table></figure></p>
<h2 id="隐秘扫描-Stealth-scan"><a href="#隐秘扫描-Stealth-scan" class="headerlink" title="隐秘扫描(Stealth scan)"></a>隐秘扫描(Stealth scan)</h2><p>通过发送 SYN 数据包并分析响应。如果收到 SYN/ACK，则表示端口已打开，可以进行 TCP 连接。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sS 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-05 17:15 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">22/tcp   open   ssh</span><br><span class="line">23/tcp   closed telnet</span><br><span class="line">3306/tcp open mysql</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">8080/tcp closed http-proxy</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 30.31 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="版本扫描"><a href="#版本扫描" class="headerlink" title="版本扫描"></a>版本扫描</h2><p>查找应用程序的版本，确认目标主机使用的应用版本后，可以在<a href="https://cve.mitre.org/">Common vulnerability and Exploits (CVE)</a>数据库中找到应用特定版本的现有漏洞。然后可以使用 Metasploit 类似的工具来攻击计算机。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sV 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-05 17:37 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.066s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE  SERVICE       VERSION</span><br><span class="line">22/tcp   open   ssh           OpenSSH 8.0 (protocol 2.0)</span><br><span class="line">23/tcp   closed telnet</span><br><span class="line">3306/tcp open   mysql         MySQL 5.7.29</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">8080/tcp closed http-proxy</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 13.26 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h2><p>Nmap 还可以使用 TCP/IP 指纹技术提供有关底层操作系统的信息。Nmap 还将尝试在操作系统扫描期间查找系统正常运行时间。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -O 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-05 17:49 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.061s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">22/tcp   open   ssh</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">Aggressive OS guesses: Linux 5.1 (94%), Linux 3.10 - 4.11 (92%), HP P2000 G3 NAS device (91%), Linux 3.2 - 4.9 (91%), Linux 3.16 - 4.6 (90%), Linux 2.6.32 (90%), Linux 5.0 (90%), Ubiquiti AirOS 5.5.9 (90%), Linux 4.4 (90%), Linux 5.0 - 5.4 (89%)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (<span class="built_in">test</span> conditions non-ideal).</span><br><span class="line"></span><br><span class="line">OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 40.84 seconds</span><br></pre></td></tr></table></figure>
<p>激烈扫描模式（-A参数）启用了操作系统检测(-O) 和版本扫描(-sV)，返回系统信息和版本信息。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -A 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-12 14:40 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.056s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE  SERVICE       VERSION</span><br><span class="line">22/tcp   open   ssh           OpenSSH 8.0 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   3072 06:56:59:1d:73:7d:8f:e0:e0:0c:65:fa:75:4b:61:0b (RSA)</span><br><span class="line">|   256 3b:2e:45:69:49:7a:b2:fa:06:42:d2:1f:4a:c8:e6:2a (ECDSA)</span><br><span class="line">|_  256 6b:a5:e5:b7:39:28:1b:03:e0:c1:6b:2b:fb:19:f0:7b (ED25519)</span><br><span class="line">23/tcp   closed telnet</span><br><span class="line">3306/tcp open   mysql         MySQL 5.7.29</span><br><span class="line">| mysql-info:</span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.7.29</span><br><span class="line">|   Thread ID: 35</span><br><span class="line">|   Capabilities flags: 65535</span><br><span class="line">|   Some Capabilities: Support41Auth, Speaks41ProtocolNew, Speaks41ProtocolOld, SwitchToSSLAfterHandshake, IgnoreSigpipes, InteractiveClient, DontAllowDatabaseTableColumn, FoundRows, LongPassword, SupportsTransactions, ODBCClient, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, LongColumnFlag, SupportsLoadDataLocal, SupportsCompression, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt: \x1E7aZ5\x07%|\x02+\x01_<span class="comment">#\x1B6FX~\x07</span></span><br><span class="line">|_  Auth Plugin Name: mysql_native_password</span><br><span class="line">| ssl-cert: Subject: commonName=MySQL_Server_5.7.29_Auto_Generated_Server_Certificate</span><br><span class="line">| Not valid before: 2020-06-17T09:36:07</span><br><span class="line">|_Not valid after:  2030-06-15T09:36:07</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">8080/tcp closed http-proxy</span><br><span class="line">Aggressive OS guesses: Linux 5.1 (94%), Linux 3.10 - 4.11 (92%), HP P2000 G3 NAS device (91%), Linux 3.2 - 4.9 (91%), Linux 3.16 - 4.6 (90%), Linux 2.6.32 (90%), Linux 2.6.32 - 3.1 (90%), Ubiquiti AirMax NanoStation WAP (Linux 2.6.32) (90%), Linux 3.7 (90%), Linux 4.4 (90%)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (<span class="built_in">test</span> conditions non-ideal).</span><br><span class="line">Network Distance: 16 hops</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 3389/tcp)</span><br><span class="line">HOP RTT      ADDRESS</span><br><span class="line">1   1.00 ms  192.168.101.1</span><br><span class="line">2   6.00 ms  120.237.96.81</span><br><span class="line">3   8.00 ms  183.233.126.85</span><br><span class="line">4   8.00 ms  211.136.248.81</span><br><span class="line">5   12.00 ms 221.183.39.157</span><br><span class="line">6   75.00 ms 221.183.37.137</span><br><span class="line">7   ...</span><br><span class="line">8   51.00 ms 111.13.0.173</span><br><span class="line">9   44.00 ms 39.156.0.37</span><br><span class="line">10  52.00 ms 39.156.7.249</span><br><span class="line">11  ... 12</span><br><span class="line">13  54.00 ms 116.251.124.194</span><br><span class="line">14  ... 15</span><br><span class="line">16  61.00 ms 39.99.181.194</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 23.85 seconds</span><br></pre></td></tr></table></figure>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>使用 <code>-p</code> 参数扫描单个端口<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -p 3306 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-16 17:35 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.049s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 0.99 seconds</span><br></pre></td></tr></table></figure></p>
<p>指定端口连接类型，比如TCP连接<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -p T:3306 39.99.181.194</span><br></pre></td></tr></table></figure><br>指定端口范围<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -p 22-8080 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-16 17:38 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.052s latency).</span><br><span class="line">Not shown: 8054 filtered ports</span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">22/tcp   open   ssh</span><br><span class="line">23/tcp   open   telnet</span><br><span class="line">3306/tcp open   mysql</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">8080/tcp closed http-proxy</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 22.10 seconds</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap --top-ports 10 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-16 17:41 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.15s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">21/tcp   filtered ftp</span><br><span class="line">22/tcp   open     ssh</span><br><span class="line">23/tcp   open     telnet</span><br><span class="line">25/tcp   filtered smtp</span><br><span class="line">80/tcp   filtered http</span><br><span class="line">110/tcp  filtered pop3</span><br><span class="line">139/tcp  filtered netbios-ssn</span><br><span class="line">443/tcp  filtered https</span><br><span class="line">445/tcp  filtered microsoft-ds</span><br><span class="line">3389/tcp filtered ms-wbt-server</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 5.29 seconds</span><br></pre></td></tr></table></figure>
<p>TCP扫描：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sT 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 16:47 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.049s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">23/tcp   open  telnet</span><br><span class="line">25/tcp   open  smtp</span><br><span class="line">110/tcp  open  pop3</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 49.29 seconds</span><br></pre></td></tr></table></figure><br>TCP SYN扫描（半开放扫描）：<br>SYN扫描执行快，每秒钟可以扫描数千个 端口，因为它不完成TCP连接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sS 39.99.181.194</span><br></pre></td></tr></table></figure>
<p>UDP扫描：<br>UDP扫描一般较慢，DNS，SNMP，和DHCP (端口53，161/162，和67/68)是最常见的三个UDP服务。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sU 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 16:49 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.052s latency).</span><br><span class="line">All 1000 scanned ports on 39.99.181.194 are open|filtered</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 59.64 seconds</span><br></pre></td></tr></table></figure>
<blockquote>
<p>open|filtered表示无法确定端口是开放还是被过滤的</p>
</blockquote>
<p>UDP扫描比TCP扫描慢的原因是UDP是无连接的，Nmap无法区分应用过滤数据包的开放端口、数据包被防火墙阻止丢弃的端口或者数据包由于网络拥塞而在传输过程中丢失。而且对于closed端口（ICMP端口无法访问），Nmap无法区分端口被防火墙过滤还是数据包丢失。除非端口返回数据或返回ICMP不可达报文，否则Nmap需要发送多个数据包来消除速率限制或丢失数据包的可能性。</p>
<p>可以通过如下方式提高扫描速度（牺牲扫描精度）</p>
<ul>
<li><code>--min-rate</code>参数：<code>--min-rate 5000</code>表示每秒发送5000个数据包</li>
<li><code>--max-rtt-timeout</code>参数：控制nmap等待响应时间，需大于5ms，具体时间可以通过ping命令查看。<code>--max-rtt-timeout 0.005</code>：5ms等待时间</li>
<li><code>--max-retries</code>参数：设置重试次数，<code>--max-retries 1</code>重试1次</li>
<li><code>--max-scan-delay</code>参数：设置扫描间隔，用在主机响应慢的情况下。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sU --min-rate 5000 39.99.181.194</span><br></pre></td></tr></table></figure>
<p>Null扫描 (-sN)：<br>不设置任何标志位(tcp标志头是0)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sN 39.99.181.194</span><br></pre></td></tr></table></figure>
<p>FIN扫描 (-sF)：<br>只设置TCP FIN标志位。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sF 39.99.181.194</span><br></pre></td></tr></table></figure>
<p>Xmas扫描 (-sX)：<br>设置FIN，PSH，和URG标志位</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sX 39.99.181.194</span><br></pre></td></tr></table></figure>
<p>TCP ACK扫描：<br>用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sA 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 17:07 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.053s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE      SERVICE</span><br><span class="line">22/tcp   unfiltered ssh</span><br><span class="line">23/tcp   unfiltered telnet</span><br><span class="line">3306/tcp unfiltered mysql</span><br><span class="line">3389/tcp unfiltered ms-wbt-server</span><br><span class="line">8080/tcp unfiltered http-proxy</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 11.24 seconds</span><br></pre></td></tr></table></figure>
<p>IP协议扫描：<br>确定目标机支持哪些IP协议 (TCP，ICMP，IGMP等)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sO 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 17:11 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.054s latency).</span><br><span class="line">Not shown: 255 open|filtered protocols</span><br><span class="line">PROTOCOL STATE SERVICE</span><br><span class="line">1        open  icmp</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 16.49 seconds</span><br></pre></td></tr></table></figure>
<p>PING扫描：检测目标主机是否在线<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sP 39.99.181.194</span><br></pre></td></tr></table></figure></p>
<h2 id="读取文件扫描"><a href="#读取文件扫描" class="headerlink" title="读取文件扫描"></a>读取文件扫描</h2><p>如果需要扫描的IP地址很多，可以存放在一个文件里面进行扫描</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -iL nmap_test.txt</span><br></pre></td></tr></table></figure>
<h2 id="扫描日志"><a href="#扫描日志" class="headerlink" title="扫描日志"></a>扫描日志</h2><p><code>-v</code>参数打印扫描日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -v -p 3306 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-16 17:51 CST</span><br><span class="line">Initiating Ping Scan at 17:51</span><br><span class="line">Scanning 39.99.181.194 [4 ports]</span><br><span class="line">Completed Ping Scan at 17:51, 0.23s elapsed (1 total hosts)</span><br><span class="line">Initiating Parallel DNS resolution of 1 host. at 17:51</span><br><span class="line">Completed Parallel DNS resolution of 1 host. at 17:51, 0.35s elapsed</span><br><span class="line">Initiating SYN Stealth Scan at 17:51</span><br><span class="line">Scanning 39.99.181.194 [1 port]</span><br><span class="line">Discovered open port 3306/tcp on 39.99.181.194</span><br><span class="line">Completed SYN Stealth Scan at 17:51, 0.05s elapsed (1 total ports)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.049s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line"></span><br><span class="line">Read data files from: D:\software\Nmap</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.06 seconds</span><br><span class="line">           Raw packets sent: 5 (196B) | Rcvd: 2 (72B)</span><br><span class="line"></span><br><span class="line">D:\software\Nmap&gt;</span><br></pre></td></tr></table></figure>
<p>保存到文件，保存格式支持text、xml</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -oN output.txt 39.99.181.194</span><br><span class="line">$ nmap -oX output.xml 39.99.181.194</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -oA output 39.99.181.194</span><br></pre></td></tr></table></figure><br>生成output,xml、output.nmap、output.gnmap文件</p>
<h1 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h1><p>NSE(Nmap Scripting Engine)是一个非常强大的渗透工具，它允许用户编写各种网络任务的自动化脚本。脚本基于Lua语言，可以自己编写满足需求的脚本或者修改已有的脚本。目前Nmap集成了600多个脚本，参考：<a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p>
<p>语法：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap --script &lt;filename&gt;</span><br><span class="line">$ nmap -sC <span class="comment"># 使用默认脚本集执行脚本扫描，等价于 --script=default</span></span><br></pre></td></tr></table></figure><br>多个脚本使用逗号分隔</p>
<h2 id="NSE脚本类别"><a href="#NSE脚本类别" class="headerlink" title="NSE脚本类别"></a>NSE脚本类别</h2><p>NSE 通过 <code>-sC</code> 选项（或<code>--script</code>）激活，主要包括以下功能：</p>
<ul>
<li>网络发现：扫描目标主机信息、服务等</li>
<li>版本检测：检测应用版本</li>
<li>漏洞检测：扫描系统漏洞</li>
<li>后门检测</li>
<li>攻击、利用漏洞</li>
</ul>
<p>NSE 脚本主要包括以下14类：</p>
<ul>
<li>auth：身份认证</li>
<li>broadcast：广播，通过在本地网络上广播来发现没有列出的主机</li>
<li>brute：使用暴力破解来猜测远程服务器的身份认证凭据</li>
<li>default：默认设置的脚本，使用 -sC 或 -A 选项时默认运行，比如identd-owners、http-auth、ftp-anon。</li>
<li>discovery：通过查询公共注册中心、支持 snmp 的设备、目录服务等来发现更多关于网络的信息</li>
<li>dos：测试拒绝服务的漏洞</li>
<li>exploit：主动利用某些漏洞</li>
<li>external：将数据发送到第三方数据库或其他网络资源，比如whois-ip通过连接到 whois 服务器获取目标地址</li>
<li>fuzzer：在每个数据包中发送随机字段，可用于发现软件的缺陷和漏洞</li>
<li>intrusive：可能会消耗目标主机大量资源，风险太高，可能会导致目标系统崩溃</li>
<li>malware：测试目标平台是否被恶意软件或后门感染</li>
<li>safe：安全脚本，不攻击，不使用大量网络带宽或其他资源</li>
<li>version：版本检测：</li>
<li>vuln：检查特定的已知漏洞，通常只报告发现的结果</li>
</ul>
<h2 id="NSE脚本示例"><a href="#NSE脚本示例" class="headerlink" title="NSE脚本示例"></a>NSE脚本示例</h2><h3 id="discovery"><a href="#discovery" class="headerlink" title="discovery"></a>discovery</h3><p>mysql-info：打印mysql服务器版本，协议，进程ID，密码盐度等信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -sV --script=mysql-info 39.99.181.194</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.064s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE  SERVICE       VERSION</span><br><span class="line">22/tcp   open   ssh           OpenSSH 8.0 (protocol 2.0)</span><br><span class="line">23/tcp   open   telnet        Linux telnetd</span><br><span class="line">3306/tcp open   mysql         MySQL 5.7.29</span><br><span class="line">| mysql-info:</span><br><span class="line">|   Protocol: 10</span><br><span class="line">|   Version: 5.7.29</span><br><span class="line">|   Thread ID: 33</span><br><span class="line">|   Capabilities flags: 65535</span><br><span class="line">|   Some Capabilities: LongColumnFlag, SupportsLoadDataLocal, Support41Auth, DontAllowDatabaseTableColumn, SupportsTransactions, IgnoreSigpipes, FoundRows, SwitchToSSLAfterHandshake, IgnoreSpaceBeforeParenthesis, ODBCClient, Speaks41ProtocolNew, ConnectWithDatabase, InteractiveClient, Speaks41ProtocolOld, LongPassword, SupportsCompression, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments</span><br><span class="line">|   Status: Autocommit</span><br><span class="line">|   Salt:</span><br><span class="line">| =\x06Dq\x17Z|W<span class="string">&#x27;\x1F:\x1C)\x07`Bx,D</span></span><br><span class="line"><span class="string">|_  Auth Plugin Name: mysql_native_password</span></span><br><span class="line"><span class="string">3389/tcp closed ms-wbt-server</span></span><br><span class="line"><span class="string">8080/tcp closed http-proxy</span></span><br><span class="line"><span class="string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></span><br></pre></td></tr></table></figure>
<h3 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h3><p>ssh-auth-methods：返回SSH服务器支持的认证方法<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap --script=ssh-auth-methods 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 16:03 ?D1ú±ê×?ê±??</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.069s latency).</span><br><span class="line">Not shown: 995 filtered ports</span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">22/tcp   open   ssh</span><br><span class="line">| ssh-auth-methods:</span><br><span class="line">|   Supported authentication methods:</span><br><span class="line">|     publickey</span><br><span class="line">|     gssapi-keyex</span><br><span class="line">|     gssapi-with-mic</span><br><span class="line">|_    password</span><br><span class="line">23/tcp   open   telnet</span><br><span class="line">3306/tcp open   mysql</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">8080/tcp closed http-proxy</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 60.76 seconds</span><br></pre></td></tr></table></figure></p>
<h3 id="brute"><a href="#brute" class="headerlink" title="brute"></a>brute</h3><p>暴力破解<br>对SSH服务进行暴力破解：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -p 22 --script ssh-brute --script-args userdb=users.lst,passdb=pass.lst --script-args ssh-brute.timeout=4s 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 16:11 CST</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: root:root</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: admin:admin</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: administrator:administrator</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: webadmin:webadmin</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: sysadmin:sysadmin</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: netadmin:netadmin</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: guest:guest</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: user:user</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: web:web</span><br><span class="line">NSE: [ssh-brute] Trying username/password pair: <span class="built_in">test</span>:<span class="built_in">test</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>ftp暴力破解<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap --script ftp-brute -p 21 &lt;host&gt;</span><br></pre></td></tr></table></figure></p>
<p>mysql-enum：获取mysql有效用户<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap -p 3306 --script=mysql-enum 39.99.181.194</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-18 16:19 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.99.181.194</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">| mysql-enum:</span><br><span class="line">|   Valid usernames:</span><br><span class="line">|     root:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     netadmin:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     guest:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     <span class="built_in">test</span>:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     web:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     sysadmin:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     administrator:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     webadmin:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     admin:&lt;empty&gt; - Valid credentials</span><br><span class="line">|     user:&lt;empty&gt; - Valid credentials</span><br><span class="line">|_  Statistics: Performed 10 guesses <span class="keyword">in</span> 1 seconds, average tps: 10.0</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 9.15 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>mysql-brute：密码破解<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nmap --script=mysql-brute  -p 3306 127.0.0.1</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-22 16:24 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> localhost (127.0.0.1)</span><br><span class="line">Host is up (0.0010s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">| mysql-brute:</span><br><span class="line">|   Accounts:</span><br><span class="line">|     admin:admin - Valid credentials</span><br><span class="line">|     root:123456 - Valid credentials</span><br><span class="line">|_  Statistics: Performed 40012 guesses <span class="keyword">in</span> 20 seconds, average tps: 2000.6</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 21.36 seconds</span><br></pre></td></tr></table></figure></p>
<h1 id="Zenmap可视化"><a href="#Zenmap可视化" class="headerlink" title="Zenmap可视化"></a>Zenmap可视化</h1><p>Zenmap是Nmap的图形化界面</p>
<p><img src="nmap-zenmap.png" width="80%" height="80%" /></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简要介绍了nmap工具的安装、一些常用扫描命令、NSE脚本以及可视化工具Zenmap的演示。nmap是一个强大的渗透测试工具，提供丰富的命令脚本，可以说是网络的“瑞士军刀”，更多用法可以参考Nmap官网网站：<a href="https://nmap.org/">https://nmap.org/</a> ，上面介绍了Nmap工具的详细信息和更高级的用法。中文文档参考：<a href="https://nmap.org/man/zh/">https://nmap.org/man/zh/</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>nmap</tag>
        <tag>NSE</tag>
        <tag>Zenmap</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成：Jenkins API简单使用</title>
    <url>/posts/continuous-integration-for-jenkins-api/</url>
    <content><![CDATA[<p>Jenkins具有丰富的API接口，可以通过调用API接口实现对Job的触发、删除、查看任务状态等操作，支持HTTP协议，支持用户名、密码认证，提供的这些接口可以实现对 Jenkins 的控制。下面介绍Jenkins API的使用实例。<br><a id="more"></a></p>
<p>先创建一个有Job任务运行和状态查询权限的用户，可使用admin用户；新建一个项目（可参考<a href="https://blog.csdn.net/u010698107/article/details/113823608">持续集成平台Jenkins介绍</a>）</p>
<h1 id="Jenkins-API调用示例"><a href="#Jenkins-API调用示例" class="headerlink" title="Jenkins API调用示例"></a>Jenkins API调用示例</h1><h2 id="远程调用-Jenkins-API返回最新任务编号"><a href="#远程调用-Jenkins-API返回最新任务编号" class="headerlink" title="远程调用 Jenkins API返回最新任务编号"></a>远程调用 Jenkins API返回最新任务编号</h2><p>GET请求<br>URL：<a href="http://username:password@hostname:port/job/任务名/lastBuild/buildNumber">http://username:password@hostname:port/job/任务名/lastBuild/buildNumber</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://admin:admin@192.168.30.8:8080/job/demo/lastBuild/buildNumber&quot;</span></span><br><span class="line">ret = requests.get(url)</span><br><span class="line">print(ret.text)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><br><img src="jenkins_api_lastbuild.png" width="80%" height="80%" /></p>
<h2 id="远程调用-Jenkins-API查询任务状态"><a href="#远程调用-Jenkins-API查询任务状态" class="headerlink" title="远程调用 Jenkins API查询任务状态"></a>远程调用 Jenkins API查询任务状态</h2><p>GET请求<br>URL：<a href="http://username:password@hostname:port/job/任务名/\">http://username:password@hostname:port/job/任务名/\</a><build number>/api/json</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://admin:admin@192.168.30.8:8080/job/demo/17/api/json&quot;</span></span><br><span class="line">ret = requests.get(url)</span><br><span class="line">print(json.dumps(ret.json(),indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>返回的日志<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_class&quot;</span>: <span class="string">&quot;hudson.model.FreeStyleBuild&quot;</span>,</span><br><span class="line">  <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;_class&quot;</span>: <span class="string">&quot;hudson.model.CauseAction&quot;</span>,</span><br><span class="line">      <span class="string">&quot;causes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;_class&quot;</span>: <span class="string">&quot;hudson.model.Cause$UserIdCause&quot;</span>,</span><br><span class="line">          <span class="string">&quot;shortDescription&quot;</span>: <span class="string">&quot;Started by user anonymous&quot;</span>,</span><br><span class="line">          <span class="string">&quot;userId&quot;</span>: null,</span><br><span class="line">          <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;_class&quot;</span>: <span class="string">&quot;org.jenkinsci.plugins.displayurlapi.actions.RunDisplayAction&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;artifacts&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;building&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;displayName&quot;</span>: <span class="string">&quot;#17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: <span class="number">109</span>,</span><br><span class="line">  <span class="string">&quot;estimatedDuration&quot;</span>: <span class="number">222</span>,</span><br><span class="line">  <span class="string">&quot;executor&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;fullDisplayName&quot;</span>: <span class="string">&quot;demo #17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;17&quot;</span>,</span><br><span class="line">  <span class="string">&quot;keepLog&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;number&quot;</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="string">&quot;queueId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>: <span class="string">&quot;SUCCESS&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: <span class="number">1615705287802</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://192.168.30.8:8080/job/demo/17/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;builtOn&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;changeSet&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;_class&quot;</span>: <span class="string">&quot;hudson.scm.EmptyChangeLogSet&quot;</span>,</span><br><span class="line">    <span class="string">&quot;items&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;kind&quot;</span>: null</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;culprits&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="远程调用-Jenkins-API启动任务"><a href="#远程调用-Jenkins-API启动任务" class="headerlink" title="远程调用 Jenkins API启动任务"></a>远程调用 Jenkins API启动任务</h2><p>使用POST请求方法：<br>URL：<a href="http://username:password@hostname:port/job/任务名/build">http://username:password@hostname:port/job/任务名/build</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://admin:admin@192.168.30.8:8080/job/demo/build&quot;</span></span><br><span class="line">ret = requests.post(url)</span><br><span class="line">print(ret.text)</span><br></pre></td></tr></table></figure>
<p><img src="jenkins_api_build.png" width="80%" height="80%" /><br>Jenkins 跨站请求伪造保护采取 Crumb（碎片生成器），可以使用jenkinsapi库来调用api</p>
<h1 id="Python-jenkinsapi库"><a href="#Python-jenkinsapi库" class="headerlink" title="Python jenkinsapi库"></a>Python jenkinsapi库</h1><p>jenkinsapi库封装了Jenkins api 的调用方法<br>安装：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install jenkinsapi</span><br></pre></td></tr></table></figure><br>下面代码实现启动job名为demo的任务<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jenkinsapi.jenkins <span class="keyword">import</span> Jenkins</span><br><span class="line"></span><br><span class="line">jk = Jenkins(<span class="string">&#x27;http://192.168.30.8:8080&#x27;</span>, username=<span class="string">&#x27;admin&#x27;</span>, password=<span class="string">&#x27;admin&#x27;</span>, useCrumb=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(jk.keys())</span></span><br><span class="line">job_name = <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"><span class="keyword">if</span> jk.has_job(job_name):</span><br><span class="line">    my_job = jk.get_job(job_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> my_job.is_queued_or_running():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            last_build = my_job.get_last_buildnumber()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            last_build = <span class="number">0</span></span><br><span class="line">        build_num = last_build + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 启动任务</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            jk.build_job(job_name)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> my_job.is_queued_or_running():</span><br><span class="line">                print(<span class="string">&quot;Finished&quot;</span>)</span><br><span class="line">                print(<span class="string">f&quot;build_num：<span class="subst">&#123;build_num&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Finished</span><br><span class="line">build_num：<span class="number">20</span></span><br></pre></td></tr></table></figure><br><img src="jenkins_api_build2.png" width="80%" height="80%" /></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试开发</category>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成：jenkins + pytest + selenium + Git + Allure自动化测试</title>
    <url>/posts/continuous-integration-for-jenkins-example/</url>
    <content><![CDATA[<p>本文介绍jenkins， pytest ，selenium，Git，Allure的自动化测试实现方法，使用jenkins实现web自动化测试，并生成报告，自动发送邮件。</p>
<a id="more"></a>
<h1 id="0-测试环境准备"><a href="#0-测试环境准备" class="headerlink" title="0-测试环境准备"></a>0-测试环境准备</h1><ul>
<li>Selenium Web自动化测试框架</li>
<li>自动化测试框架pytest编写测试用例</li>
<li>windows配置Git：可参考<a href="https://blog.csdn.net/u010698107/article/details/111414654">Git简易教程-安装及简单使用</a></li>
<li>linux虚拟机 (centos7) 运行jenkins，虚拟机和Windows可以互相ping通</li>
<li>配置jenkins-Windows节点：参考<a href="https://blog.csdn.net/u010698107/article/details/113823608">持续集成平台Jenkins详细介绍</a></li>
<li>用例Github地址：<a href="https://github.com/hiyongz/selenium_pytest_demo">https://github.com/hiyongz/selenium_pytest_demo</a></li>
</ul>
<h1 id="1-jenkins配置github项目"><a href="#1-jenkins配置github项目" class="headerlink" title="1-jenkins配置github项目"></a>1-jenkins配置github项目</h1><h2 id="1、新建项目"><a href="#1、新建项目" class="headerlink" title="1、新建项目"></a>1、新建项目</h2><p>新建一个item，名称：selenium_pytest_demo，选择freestyle project</p>
<h2 id="2、配置项目Git地址"><a href="#2、配置项目Git地址" class="headerlink" title="2、配置项目Git地址"></a>2、配置项目Git地址</h2><p>节点名为配置的windows节点名<br><img src="jenkins-github.png" width="80%" height="80%" /></p>
<h2 id="3、配置代码管理"><a href="#3、配置代码管理" class="headerlink" title="3、配置代码管理"></a>3、配置代码管理</h2><p>注意：分支和github代码分支名一致<br><img src="jenkins-source-code-management.png" width="80%" height="80%" /></p>
<h2 id="4、构建"><a href="#4、构建" class="headerlink" title="4、构建"></a>4、构建</h2><p>选择执行windows批处理命令<br><img src="jenkins-build.png" width="80%" height="80%" /></p>
<h2 id="5、配置构建后操作"><a href="#5、配置构建后操作" class="headerlink" title="5、配置构建后操作"></a>5、配置构建后操作</h2><p>1、选择Allure报告<br><img src="jenkins-post-allure-report.png" width="80%" height="80%" /><br><img src="jenkins-post-allure-report-path.png" width="80%" height="80%" /><br>注意要配置Allure Commandline：进入Global Tool Configuration进行配置<br><img src="jenkins-allure-commandline.png" width="80%" height="80%" /></p>
<p>2、配置邮件提醒<br>Jenkins邮件报警配置方法可参考：<a href="https://blog.csdn.net/u010698107/article/details/113823608">持续集成平台Jenkins详细介绍</a></p>
<p><img src="jenkins-email.png" width="80%" height="80%" /></p>
<h1 id="2-运行"><a href="#2-运行" class="headerlink" title="2-运行"></a>2-运行</h1><p>配置完成后保存，点击Build Now 运行<br><img src="jenkins-build-now.png" width="80%" height="80%" /></p>
<p>控制台输出日志：<br><img src="jenkins-console-output.png" width="80%" height="80%" /></p>
<p>jenkins查看Allure报告：<br><img src="jenkins-allure-report.png" width="80%" height="80%" /><br><img src="jenkins-allure-report2.png" width="80%" height="80%" /></p>
<p>邮件提醒：<br><img src="jenkins-email2.png" width="80%" height="80%" /></p>
<h1 id="3-jenkins执行本地项目"><a href="#3-jenkins执行本地项目" class="headerlink" title="3-jenkins执行本地项目"></a>3-jenkins执行本地项目</h1><p>如果不从GitHub上克隆项目，可以运行本地项目，不需要配置Git，只需要配置项目的本地路径<br><img src="jenkins-build-local.png" width="80%" height="80%" /></p>
<p>其它配置类似，配置完成后，点击构建<br><img src="jenkins-build-local-output.png" width="80%" height="80%" /></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试开发</category>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：日期时间获取与转换</title>
    <url>/posts/python-notes-for-datetime/</url>
    <content><![CDATA[<p>python 日期时间获取与转换<br><a id="more"></a></p>
<h1 id="世界时、原子时和世界协调时"><a href="#世界时、原子时和世界协调时" class="headerlink" title="世界时、原子时和世界协调时"></a>世界时、原子时和世界协调时</h1><h2 id="世界时"><a href="#世界时" class="headerlink" title="世界时"></a>世界时</h2><p>世界时（Universal Time, UT）是根据地球自转周期确定的时间，1s为全年内每日平均长度的1/86400，由于地球绕太阳公转的轨道不是圆的，地球与太阳之间的距离不是固定的，导致太阳相对绕地球的周期不等于地球自转周期，通过对产生的时差进行修正，称为“平均太阳时”。根据国际协定，将英国格林威治所在子午圈（又称本初子午线）的平太阳时，定义为零类世界时（UT0）。由于地球的旋转轴会有微小移动（每年有几厘米的移动），对极移效应进行修正后的时间称为为一类世界时UT1。一类世界时UT1也有原因不明的季节性周期变化，对此进行修正，便得到更加均匀的二类世界时UT2。</p>
<h2 id="原子时"><a href="#原子时" class="headerlink" title="原子时"></a>原子时</h2><p>原子时钟是利用铯原子振荡周期极为规律的特性研制而出，原子时(international atomic time,TAI)的秒长定义为铯 -133 原子能级跃迁辐射9192631770周所持续的时间。原子钟的精度可以达到每100万年误差才1秒。在要求更高时间精度的天文、航海、航天等领域发挥了巨大的作用。</p>
<h2 id="世界协调时"><a href="#世界协调时" class="headerlink" title="世界协调时"></a>世界协调时</h2><p>世界协调时(Coordinatde Universal Time, UTC)基于国际原子时，以原子时秒长为基础，在时刻上尽量接近于格林威治标准时间(GMT)，通过不规则的加入闰秒来抵消地球自转变慢的影响，保证UTC与世界时（UT1）相差不超过0.9秒。</p>
<h1 id="epoch-time"><a href="#epoch-time" class="headerlink" title="epoch time"></a>epoch time</h1><p>Unix epoch (Unix time, POSIX time, Unix timestamp)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix系统中，也在许多其他操作系统中被广泛采用。</p>
<h2 id="2038问题"><a href="#2038问题" class="headerlink" title="2038问题"></a>2038问题</h2><p>32位操作系统将epoch日期存储为有符号的32位整数，此类系统的Unix时间戳最多可以使用到格林威治时间2038年01月19日03时14分07秒（二进制：01111111 11111111 11111111 11111111）。其后一秒，二进制数字会变为10000000 00000000 00000000 00000000，发生溢出错误，造成系统将时间误解为1901年12月13日20时45分52秒。这很可能会引起软件故障，甚至是系统瘫痪(称为2038年问题或者Y2038)。</p>
<p>使用64位二进制数字表示时间的系统（最多可以使用到格林威治时间292,277,026,596年12月04日15时30分08秒）则基本不会遇到这类溢出问题。</p>
<h1 id="python-time"><a href="#python-time" class="headerlink" title="python time"></a>python time</h1><p>时间格式在线转换：<a href="https://www.epochconverter.com/">https://www.epochconverter.com/</a><br>时区转换</p>
<ul>
<li><a href="http://www.99cankao.com/date/timezone.php">国际时区转换在线计算器</a></li>
<li><a href="http://www.beijing-time.org/shiqu/">世界时区划分时差查询</a></li>
</ul>
<p>Python time文档：<a href="https://docs.python.org/zh-cn/3/library/time.html">https://docs.python.org/zh-cn/3/library/time.html</a></p>
<h2 id="python获取当前时间"><a href="#python获取当前时间" class="headerlink" title="python获取当前时间"></a>python获取当前时间</h2><ul>
<li>time.time()：获取当前的epoch时间（时间戳）</li>
<li>time.localtime()：获取本地时间</li>
<li>time.gmtime()：获取GMT时间<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> time; </span><br><span class="line">&gt;&gt; time.time()</span><br><span class="line"><span class="number">1612661504.1785676</span></span><br><span class="line">&gt;&gt; time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">2</span>, tm_mday=<span class="number">7</span>, tm_hour=<span class="number">11</span>, tm_min=<span class="number">23</span>, tm_sec=<span class="number">20</span>, tm_wday=<span class="number">6</span>, tm_yday=<span class="number">38</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="标准时间转换为epoch时间"><a href="#标准时间转换为epoch时间" class="headerlink" title="标准时间转换为epoch时间"></a>标准时间转换为epoch时间</h2>本文将标准时间定义为ISO 8601格式时间：YYYY-MM-DD hh:mm:ss.mil</li>
</ul>
<p>两种方法转换为 Unix timestamp：</p>
<ul>
<li>calendar.timegm：转换的时间格式为格林威治标准时间</li>
<li>time.mktime：转换的时间为本地时间（考虑了时区）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> calendar, time</span><br><span class="line">&gt;&gt; date_time = time.strptime(<span class="string">&#x27;2000-01-01 12:34:00&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">&gt;&gt; calendar.timegm(date_time)</span><br><span class="line"><span class="number">946730040</span></span><br><span class="line">&gt;&gt; time.mktime(date_time)</span><br><span class="line"><span class="number">946701240.0</span></span><br></pre></td></tr></table></figure>
<h2 id="epoch时间转换为标准时间"><a href="#epoch时间转换为标准时间" class="headerlink" title="epoch时间转换为标准时间"></a>epoch时间转换为标准时间</h2><ul>
<li>time.localtime(epoch_time)：转换为本地时间，或者获取本地时间</li>
<li>time.gmtime(epoch_time)：转换为GMT时间，或者获取GMT时间</li>
<li>datetime.datetime.utcfromtimestamp(epoch_time)：UTC时间</li>
<li>datetime.datetime.fromtimestamp(epoch_time)：本地时间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> time</span><br><span class="line">&gt;&gt; epoch_time = <span class="number">946730040</span></span><br><span class="line">&gt;&gt; time.strftime(<span class="string">&quot;%a, %d %b %Y %H:%M:%S&quot;</span>, time.localtime(epoch_time)) </span><br><span class="line"><span class="string">&#x27;Sat, 01 Jan 2000 20:34:00&#x27;</span></span><br><span class="line">&gt;&gt; time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(epoch_time)) </span><br><span class="line"><span class="string">&#x27;2000-01-01 20:34:00&#x27;</span></span><br><span class="line">&gt;&gt; time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.gmtime(epoch_time)) </span><br><span class="line"><span class="string">&#x27;2000-01-01 12:34:00&#x27;</span></span><br><span class="line">&gt;&gt; <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.fromtimestamp(epoch_time)</span><br><span class="line">datetime.datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">34</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.utcfromtimestamp(epoch_time)</span><br><span class="line">datetime.datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">34</span>)</span><br></pre></td></tr></table></figure>
<h1 id="python-datetime"><a href="#python-datetime" class="headerlink" title="python datetime"></a>python datetime</h1><h2 id="获取当前时间（本地时间）"><a href="#获取当前时间（本地时间）" class="headerlink" title="获取当前时间（本地时间）"></a>获取当前时间（本地时间）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now_time = datetime.datetime.now()</span><br><span class="line">print(now_time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line">print(now_time.strftime(<span class="string">&quot;%A&quot;</span>)）</span><br><span class="line">print(now_time.strftime(<span class="string">&quot;%w&quot;</span>)）</span><br></pre></td></tr></table></figure>
<p>out：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-28 14:15:24</span><br><span class="line">Monday</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">timestr = <span class="string">&quot;2020-10-01 18:30:00&quot;</span></span><br><span class="line">print(datetime.datetime.strptime(timestr, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>out：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-10-01 18:30:00</span><br></pre></td></tr></table></figure></p>
<h2 id="timedelta"><a href="#timedelta" class="headerlink" title="timedelta"></a>timedelta</h2><p>timedelta表示一个时间段，可用于时间计算。<br>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">datetime.timedelta(days&#x3D;0, seconds&#x3D;0, microseconds&#x3D;0, milliseconds&#x3D;0, minutes&#x3D;0, hours&#x3D;0, weeks&#x3D;0)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now_time = datetime.datetime.now()</span><br><span class="line"><span class="comment"># 当前时间加一天</span></span><br><span class="line">now_time + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 当前时间减一周</span></span><br><span class="line">now_time + datetime.timedelta(weeks=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>容器技术介绍：Dockerfile语法指令及Docker镜像构建</title>
    <url>/posts/container-docker-dockerfile/</url>
    <content><![CDATA[<p>在工作中，通常会根据项目需要制作镜像，Docker可以通过读取Dockerfile文件中的指令来自动构建镜像，Dockerfile文本文件包含镜像构建的命令，通过 <code>docker build</code> 执行 Dockerfile中的一系列指令来自动构建镜像。除了Dockerfile的方式外，也可以使用Docker commit来制作镜像，本文将介绍Dockerfile语法Docker镜像的构建方法。</p>
<a id="more"></a>
<h1 id="常用Dockerfile指令"><a href="#常用Dockerfile指令" class="headerlink" title="常用Dockerfile指令"></a>常用Dockerfile指令</h1><p>Dockerfile官方文档：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
<p>Docker 顺序执行Dockerfile文件中的指令，指令不区分大小写，为了区分，建议都大写。Dockerfile以 <code>FROM</code> 指令开始，FROM指令指定了构建的父镜像（基础镜像），Dockerfile使用 <code>#</code> 注释行，下面列出其它常用指令：</p>
<ul>
<li>COPY：从本地复制文件，复制文件或者目录到容器里指定路径</li>
<li>ADD：可以从网络或者本地复制，将主机构建环境（上下文）目录中的文件和目录、以及一个URL标记的文件拷贝到镜像中，tar类型文件会自动解压。当需要从远程复制文件时，最好使用 curl 或 wget 命令来代替 ADD 命令。</li>
<li>LABEL：为镜像生成元数据标签信息</li>
<li>WORKDIR：指定工作目录，为后续的RUN、CMD、 ENTRYPOINT、ADD指令配置工作目录。</li>
<li>USER：指定运行容器时的用户名或UID，后续命令执行也会使用指定用户。</li>
<li>RUN：Dockerfile RUN命令是执行命令的核心部分，在<code>docker build</code>时执行。它接受命令作为参数并用于创建镜像。每条RUN命令在当前基础镜像上执行，并且会提交一个新镜像层：<code>RUN pip install flask</code></li>
<li>CMD：容器运行 <code>docker run</code> 时执行的默认命令。</li>
<li>ENV：容器启动的环境变量。</li>
<li>ARG：构建环境的环境变量。</li>
<li>ENTRYPOINT：指定容器的“入口”。</li>
<li>HEALTHCHECK：用于指定某个程序或者指令来监控 docker 容器服务的运行状态</li>
</ul>
<h1 id="Dockerfile构建容器"><a href="#Dockerfile构建容器" class="headerlink" title="Dockerfile构建容器"></a>Dockerfile构建容器</h1><p>常用文件、命令：</p>
<ul>
<li>.dockerignore：设置希望构建时需要忽略的文件，过滤指定文件</li>
<li><code>docker build -f Dockerfile文件名</code>：指定Dockerfile文件</li>
<li><code>docker build -t 标签</code>：添加标签</li>
<li><code>docker build --no-cache</code>：不使用缓存，也就是每次构建时，不管有没有安装过都进行重新构建</li>
<li><code>docker build --build-arg</code>：传递ARG指令变量</li>
</ul>
<h2 id="1-创建Dockerfile文件"><a href="#1-创建Dockerfile文件" class="headerlink" title="1. 创建Dockerfile文件"></a>1. 创建Dockerfile文件</h2><p>构建一个dockerfile文件，定制一个Nginx镜像，添加容器健康检查。<br>Dockerfile：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基于 nginx:latest 镜像构建</span></span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定信息</span></span><br><span class="line">LABEL maintainer=&quot;test_dockerfile&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line">ENV NGINX_VERSION latest</span><br><span class="line">ARG workpath=/data/html/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换root用户</span></span><br><span class="line">USER root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令，安装cur软件，设置软链接把ngin服务的日志显示到终端</span></span><br><span class="line">RUN apt-get -yq update &amp;&amp; apt-get install -y curl &amp;&amp; \</span><br><span class="line">ln -sf /dev/stdout /var/log/nginx/access.log &amp;&amp; \</span><br><span class="line">ln -sf /dev/stderr /var/log/nginx/error.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载卷</span></span><br><span class="line">VOLUME [&quot;/data&quot;]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置工作目录</span></span><br><span class="line">WORKDIR $workpath</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制 index.html 文件到nginx的html目录下</span></span><br><span class="line">COPY index.html /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 映射80端口</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此处CMD作为 ENTRYPOINT的参数。</span></span><br><span class="line">CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD [<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD nginx -g daemon off</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置容器启动的命令</span></span><br><span class="line">ENTRYPOINT [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br><span class="line"></span><br><span class="line">STOPSIGNAL SIGRTMAX</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查容器健康，通过访问 Nginx服务80端口，来判断容器服务是否健康</span></span><br><span class="line">HEALTHCHECK --interval=5s --timeout=3s \</span><br><span class="line">  CMD curl -fs http://localhost/ || exit 1</span><br></pre></td></tr></table></figure></p>
<p>index.html文件内容：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World !<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-构建镜像：docker-build"><a href="#2-构建镜像：docker-build" class="headerlink" title="2. 构建镜像：docker build"></a>2. 构建镜像：docker build</h2><p>在Dockerfile 文件目录下执行构建：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker build -t nginx:testv1 -f Dockerfile .</span><br></pre></td></tr></table></figure></p>
<ul>
<li>nginx:testv1：镜像名称:镜像标签</li>
<li>Dockerfile：Dockerfile 文件名，默认文件名为Dockerfile</li>
<li><code>.</code> 表示当前目录，代表本次执行的上下文路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server test_dockerfile]<span class="comment"># pwd</span></span><br><span class="line">/root/docker/test_dockerfile</span><br><span class="line">[root@server test_dockerfile]<span class="comment"># ls</span></span><br><span class="line">Dockerfile  index.html</span><br><span class="line">[root@server test_dockerfile]<span class="comment"># docker build -t nginx_demo:v1 .</span></span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/13 : FROM nginx:latest</span><br><span class="line"> ---&gt; f6d0b4767a6c</span><br><span class="line">Step 2/13 : LABEL maintainer=<span class="string">&quot;test_dockerfile&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 6c4b611a19e9</span><br><span class="line">Removing intermediate container 6c4b611a19e9</span><br><span class="line"> ---&gt; 6a6f12ed39ad</span><br><span class="line">Step 3/13 : ENV NGINX_VERSION latest</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> e9cfc405af5a</span><br><span class="line">Removing intermediate container e9cfc405af5a</span><br><span class="line"> ---&gt; 6608a514dc4a</span><br><span class="line">Step 4/13 : ARG workpath=/data/html/</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 31ec17310301</span><br><span class="line">Removing intermediate container 31ec17310301</span><br><span class="line"> ---&gt; 04b7f5b51c63</span><br><span class="line">Step 5/13 : USER root</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 1d6aaf7f9d13</span><br><span class="line">Removing intermediate container 1d6aaf7f9d13</span><br><span class="line"> ---&gt; 3568d2cf3a36</span><br><span class="line">Step 6/13 : RUN apt-get install -y curl &amp;&amp; ln -sf /dev/stdout /var/<span class="built_in">log</span>/nginx/access.log &amp;&amp; ln -sf /dev/stderr /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> fcf7a55bbb4a</span><br><span class="line">Reading package lists...</span><br><span class="line">Building dependency tree...</span><br><span class="line">Reading state information...</span><br><span class="line">curl is already the newest version (7.64.0-4+deb10u1).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Removing intermediate container fcf7a55bbb4a</span><br><span class="line"> ---&gt; 20cb644a11c3</span><br><span class="line">Step 7/13 : VOLUME [<span class="string">&quot;/data&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> ebaa3b7e6dbf</span><br><span class="line">Removing intermediate container ebaa3b7e6dbf</span><br><span class="line"> ---&gt; 246093dbcc45</span><br><span class="line">Step 8/13 : WORKDIR <span class="variable">$workpath</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 494a62d4166b</span><br><span class="line">Removing intermediate container 494a62d4166b</span><br><span class="line"> ---&gt; 2afb818a2a35</span><br><span class="line">Step 9/13 : COPY index.html /usr/share/nginx/html</span><br><span class="line"> ---&gt; 1fee5e32c1fc</span><br><span class="line">Step 10/13 : EXPOSE 80</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 2a80075b76f3</span><br><span class="line">Removing intermediate container 2a80075b76f3</span><br><span class="line"> ---&gt; 3ef9846b592e</span><br><span class="line">Step 11/13 : CMD [<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> db5ab895a85b</span><br><span class="line">Removing intermediate container db5ab895a85b</span><br><span class="line"> ---&gt; 4e70e4e4ef95</span><br><span class="line">Step 12/13 : STOPSIGNAL SIGRTMAX</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d7ceb8fdbd59</span><br><span class="line">Removing intermediate container d7ceb8fdbd59</span><br><span class="line"> ---&gt; 68c8bb3b43f9</span><br><span class="line">Step 13/13 : HEALTHCHECK --interval=5s --timeout=3s   CMD curl -fs http://localhost/ || <span class="built_in">exit</span> 1</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 3cb2690c7c13</span><br><span class="line">Removing intermediate container 3cb2690c7c13</span><br><span class="line"> ---&gt; e20cc62ae3e5</span><br><span class="line">Successfully built e20cc62ae3e5</span><br><span class="line">Successfully tagged nginx_demo:v1</span><br></pre></td></tr></table></figure>
<p>查看镜像：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server test_dockerfile]<span class="comment"># docker images | grep nginx_demo</span></span><br><span class="line">nginx_demo                   v1                adfe6b7f7297   5 minutes ago   133MB</span><br></pre></td></tr></table></figure></p>
<h2 id="3-运行镜像：docker-run"><a href="#3-运行镜像：docker-run" class="headerlink" title="3. 运行镜像：docker run"></a>3. 运行镜像：docker run</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server test_dockerfile]<span class="comment"># docker run -d --name=nginx-test -p 8080:80 nginx_demo:v1</span></span><br><span class="line">b0bd21087663   nginx_demo:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   6 minutes ago    Up 6 minutes (unhealthy)   80/tcp                   admiring_swanson</span><br><span class="line">[root@server test_dockerfile]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>docker ps 查看容器<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server test_dockerfile]<span class="comment"># docker ps | grep nginx_demo</span></span><br><span class="line">710628d0ad55   nginx_demo:v1   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 minutes ago       Up 2 minutes (unhealthy)   0.0.0.0:8080-&gt;80/tcp     nginx-test</span><br><span class="line">[root@server test_dockerfile]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>浏览器输入：192.168.30.8:8080<br><img src="dockerfile-nginx-test.png" width="80%" height="80%" /></p>
<p>可以进入容器查看设置的环境变量<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server test_dockerfile]<span class="comment"># docker exec -it 710628d0ad55 bash</span></span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># </span></span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># </span></span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># pwd</span></span><br><span class="line">/data/html</span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># ls</span></span><br><span class="line">index.html</span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># env</span></span><br><span class="line">HOSTNAME=b0bd21087663</span><br><span class="line">PWD=/data/html</span><br><span class="line">PKG_RELEASE=1~buster</span><br><span class="line">HOME=/root</span><br><span class="line">NJS_VERSION=0.5.0</span><br><span class="line">TERM=xterm</span><br><span class="line">SHLVL=1</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">NGINX_VERSION=latest</span><br><span class="line">_=/usr/bin/env</span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># df -h</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">overlay                   45G   22G   24G  48% /</span><br><span class="line">tmpfs                     64M     0   64M   0% /dev</span><br><span class="line">tmpfs                    910M     0  910M   0% /sys/fs/cgroup</span><br><span class="line">shm                       64M     0   64M   0% /dev/shm</span><br><span class="line">/dev/mapper/centos-root   45G   22G   24G  48% /data</span><br><span class="line">tmpfs                    910M     0  910M   0% /proc/asound</span><br><span class="line">tmpfs                    910M     0  910M   0% /proc/acpi</span><br><span class="line">tmpfs                    910M     0  910M   0% /proc/scsi</span><br><span class="line">tmpfs                    910M     0  910M   0% /sys/firmware</span><br><span class="line">root@b0bd21087663:/data/html<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h1 id="Docker-commit"><a href="#Docker-commit" class="headerlink" title="Docker commit"></a>Docker commit</h1><p>Docker commit一般用做从一个运行状态的容器来创建一个新的镜像，对外不可解释，不知道容器有什么应用，不方便排查问题，可维护性差。Dockerfile的方式更容易排查问题。</p>
<p>Docker commit构建命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker commit 容器名 新镜像名:tag</span><br></pre></td></tr></table></figure><br>对于上面构建的镜像，如果对index.html文件内容修改后重新打包一个镜像，我们可以使用Docker commit来构建：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker commit nginx-test nginx_demo:v2</span></span><br></pre></td></tr></table></figure><br>启动：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker run -d --name=nginx-test2 -p 8080:80 nginx_demo:v2</span></span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>测试开发</category>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基础入门</title>
    <url>/posts/database-for-mysql-operate/</url>
    <content><![CDATA[<p>本文介绍MySQL数据库基础操作方法</p>
<a id="more"></a>
<h1 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h1><h2 id="shell连接"><a href="#shell连接" class="headerlink" title="shell连接"></a>shell连接</h2><p>命令行连接mysql服务器：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -p</span><br></pre></td></tr></table></figure></p>
<ul>
<li>-h：指定要登录的MySQL主机名，登录本机可以省略</li>
<li>-u：用户名</li>
<li>-p：登录密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;mysql -u root -p</span><br><span class="line">Enter password: *********</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.16 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>可使用exit 命令退出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">C:\Users\10287&gt;</span><br></pre></td></tr></table></figure></p>
<p>非交互模式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;mysql -uroot -Dtestdb -e &quot;show tables;&quot; -p123456 -B</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Tables_in_testdb</span><br><span class="line">score</span><br><span class="line">student</span><br><span class="line"></span><br><span class="line">C:\Users\10287&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="管理工具连接"><a href="#管理工具连接" class="headerlink" title="管理工具连接"></a>管理工具连接</h2><p>可以使用MySQL Workbench、Navicat等数据库管理工具连接MySQL数据库，MySQL Workbench连接方法可参考<a href="https://blog.csdn.net/u010698107/article/details/113824326">MySQL数据库安装配置详细教程</a>。</p>
<h3 id="phpMyAdmin-连接"><a href="#phpMyAdmin-连接" class="headerlink" title="phpMyAdmin 连接"></a>phpMyAdmin 连接</h3><p>phpMyAdmin是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口 MyS管理数据库。方便实现远程管理 MySQL数据库。下面介绍Linux中phpMyAdmin安装方法。</p>
<p>使用docker安装phpmyadmin镜像：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull phpmyadmin/phpmyadmin</span><br></pre></td></tr></table></figure><br>安装完成后启动phpmyadmin容器：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name myadmin \</span><br><span class="line">-e PMA_ARBITRARY=1 \</span><br><span class="line">-p 3080:80 \</span><br><span class="line">phpmyadmin/phpmyadmin</span><br></pre></td></tr></table></figure><br>启动MySQL服务器，我这里的MySQL服务也是使用docker启动的，安装和使用方法参考：<a href="https://blog.csdn.net/u010698107/article/details/113824326">MySQL数据库安装配置详细教程</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker start mysql-test</span><br></pre></td></tr></table></figure><br>浏览器访问：<a href="http://192.168.30.8:3080/，">http://192.168.30.8:3080/，</a> 192.168.30.8为主机IP地址，3080为映射的端口号。<br>输入主机名，MySQL数据库的用户名，密码<br><img src="mysql-phpmyadmin.png" width="60%" height="60%" /></p>
<p>登录进去后可以对数据库进行管理<br><img src="mysql-phpmyadmin.png" width="60%" height="60%" /></p>
<h1 id="SQL-语言"><a href="#SQL-语言" class="headerlink" title="SQL 语言"></a>SQL 语言</h1><p>SQL语言包括四种语句：</p>
<ul>
<li><p>数据定义语言(data definition language，DDL)</p>
</li>
<li><p>数据操作语言(data manipulation language，DML)</p>
</li>
<li><p>数据控制语言(Data Control Language，DCL)</p>
</li>
<li><p>事务控制语言（Transaction Control Language，TCL）</p>
</li>
</ul>
<p><img src="sql-command.png" width="60%" height="60%" /></p>
<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database testdb;</span><br><span class="line">Query OK, 1 row affected (0.13 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| sys                |</span><br><span class="line">| testdb             |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.37</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database testdb;</span><br><span class="line">Query OK, 0 rows affected (0.35 sec)</span><br><span class="line">mysql&gt; create database testdb;</span><br><span class="line">Query OK, 1 row affected (0.13 sec)</span><br></pre></td></tr></table></figure>
<h1 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h1><p>MySQL数据库操作可以下载测试数据库进行练习：<a href="https://github.com/datacharmer/test_db">https://github.com/datacharmer/test_db</a>， 本文在本地进行创建。</p>
<h2 id="mysql数据类型"><a href="#mysql数据类型" class="headerlink" title="mysql数据类型"></a>mysql数据类型</h2><p>常见的数据类型</p>
<ul>
<li>varchar：可变长度的字符串，最长255，根据实际的数据长度动态分配空间。</li>
<li>char：定长字符串，最长255，分配固定长度的空间</li>
<li>int：整型，最长11</li>
<li>bigint：长整型</li>
<li>float：单精度浮点型数据</li>
<li>double：双精度浮点型数据</li>
<li>date：短日期类型，包括年月日信息</li>
<li>datetime：长日期类型，包括年月日时分秒信息</li>
<li>clob：字符大对象，最多可以存储4G的字符串。超过255个字符的都要采用CLOB字符大对象来存储。</li>
<li>blob：二进制大对象，专门用来存储图片、声音、视频等流媒体数据。</li>
</ul>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>在创建表的时候，可以给表中的字段加上一些约束，来保证这个表中数据的完整性、有效性。</p>
<p>约束包括：</p>
<ul>
<li>not null：非空约束，约束的字段不能为NULL</li>
<li>unique：唯一性约束，约束字段不能重复，但可以为NULL</li>
<li>primary key：主键约束</li>
<li>foreign key：外键约束</li>
<li>check：检查约束，mysql不支持，oracle支持</li>
</ul>
<h3 id="非空约束not-null"><a href="#非空约束not-null" class="headerlink" title="非空约束not null"></a>非空约束not null</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="唯一性约束unique"><a href="#唯一性约束unique" class="headerlink" title="唯一性约束unique"></a>唯一性约束unique</h3><p>需要给多个字段联合起来添加某一个约束的时候，需要使用表级约束。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">unique(name,email) </span><br></pre></td></tr></table></figure></p>
<h3 id="主键约束primary-key"><a href="#主键约束primary-key" class="headerlink" title="主键约束primary key"></a>主键约束primary key</h3><ul>
<li>任何一张表都应该有主键，主键值是每一行记录的唯一标识，主键字段中的每一个值都叫做：主键值。</li>
<li>主键的特征：not null + unique（主键值不能是NULL，同时也不能重复！）</li>
<li>一张表，主键约束只能添加1个</li>
<li>主键值一般都是数字，一般都是定长的<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,  //列级约束,单一主键</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) //表级约束,复合主键&lt;在实际开发中建议使用单一主键！</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="外键约束foreign-key"><a href="#外键约束foreign-key" class="headerlink" title="外键约束foreign key"></a>外键约束foreign key</h3></li>
<li><p>外键和主键一样也是索引的一种。不同的是MySQL会自动为所有表的主键进行索引，但是外键字段必须由用户进行明确的索引.</p>
</li>
<li><p>对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表（父表），外键所在的表就是从表（子表）</p>
</li>
<li><p>外键用来建立主表与从表的关联关系，为两个表的数据建立连接，约束两个表中数据的一致性和完整性。</p>
</li>
<li><p>主键不能包含空值，但允许在外键中出现空值</p>
</li>
</ul>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>主键：表中记录的<strong>唯一标识符</strong>，不重复，非空<br>外键：字段中的值来自于其他表的主键<br>索引：加速表的查询</p>
<p>首先选择一个数据库<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use testdb;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><br>进入testdb数据库后，创建一个名称为student的表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    sex <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    age <span class="built_in">tinyint</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    dept <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;专业&#x27;</span>) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> </span><br><span class="line">    <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC</span><br><span class="line">    <span class="keyword">comment</span> = <span class="string">&#x27;学生&#x27;</span>;    </span><br></pre></td></tr></table></figure></p>
<h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+<span class="comment">-------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10)  | NO   |     | NULL    |                |</span><br><span class="line">| sex   | char(10)     | NO   |     | NULL    |                |</span><br><span class="line">| age   | tinyint(100) | NO   |     | NULL    |                |</span><br><span class="line">| dept  | char(4)      | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">-------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<p>使用以下命令是一样的效果：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">describe</span> student;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><br>查看详细表结构<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> <span class="keyword">fields</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><br><img src="mysql-show-full-fields.png" width="80%" height="80%" /></p>
<h2 id="表结构修改"><a href="#表结构修改" class="headerlink" title="表结构修改"></a>表结构修改</h2><p>常用语法格式:<br><code>ALTER TABLE &lt;表名&gt; [修改选项]</code><br>修改选项的语法格式如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ADD COLUMN &lt;列名&gt; &lt;类型&gt; [after 插入位置]/*添加字段，或者在某列后插入列*/</span><br><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt; <span class="comment">/*改变字段名*/</span></span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> &lt;列名&gt; &lt;类型&gt; <span class="comment">/*修改字段类型*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> &lt;列名&gt; <span class="comment">/*删除字段*/</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TO</span> &lt;新表名&gt; <span class="comment">/*修改表名*/</span></span><br></pre></td></tr></table></figure>
<p>修改字段长度<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 字段名 <span class="built_in">char</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 auto_increment = <span class="number">201215121</span>;</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>包括字符串、日期、数字相关系统自定义函数，官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/functions.html">https://dev.mysql.com/doc/refman/8.0/en/functions.html</a></p>
<h2 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h2><p>数据处理函数又被称为单行处理函数，一个输入对应一个输出。<br>常见单行处理函数<br>lower 转换小写<br>upper 转换大写<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">upper</span>(<span class="keyword">name</span>) <span class="keyword">as</span> <span class="keyword">name</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><br>substr：取子串，<code>substr( 被截取的字符串, 起始下标,截取的长度)</code><br>concat：字符串的拼接<br>length：取长度<br>trim：去空格<br>str_to_date：将字符串转换成日期<br>date_format：格式化日期<br>format：设置千分位<br>round：四舍五入<br>rand()：生成随机数</p>
<h2 id="多行处理函数"><a href="#多行处理函数" class="headerlink" title="多行处理函数"></a>多行处理函数</h2><p>分组函数，多个输入，对应1个输出。</p>
<ul>
<li>count：计数</li>
<li>sum：求和</li>
<li>avg：平均值</li>
<li>max：最大值</li>
<li>min：最小值</li>
</ul>
<p>注意：</p>
<ul>
<li>分组函数自动忽略NULL，你不需要提前对NULL进行处理。</li>
<li>分组函数不能够直接使用在where子句中</li>
<li>所有的分组函数可以组合起来一起用。</li>
<li>分组函数不能直接使用在where后面，因为分组函数在使用的时候必须先分组之后才能使用。where执行的时候，还没有分组。所以where后面不能出现分组函数。<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2>语法：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>,字段<span class="number">2</span>) <span class="keyword">values</span>(字段值<span class="number">1</span>,字段值<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
插入数据<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into Student (name, sex, age, dept) values (&#x27;张三&#x27;, &#x27;男&#x27;, 20, &#x27;通信&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.45 sec)</span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">| id | name | sex | age | dept |</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">|  1 | 张三 | 男  |  20 | 通信 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>语法：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span>= 字段值<span class="number">1</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="comment">/*删除表里所有数据*/</span></span><br></pre></td></tr></table></figure><br>删除<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from student;</span><br><span class="line">Query OK, 1 row affected (0.09 sec)</span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">insert</span> <span class="keyword">into</span> Student (<span class="keyword">name</span>, sex, age, dept) <span class="keyword">values</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;通信&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into Student (name, sex, age, dept) values (&#x27;李四&#x27;, &#x27;男&#x27;, 22, &#x27;通信&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from student where name=&#x27;张三&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.17 sec)</span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">| id | name | sex | age | dept |</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">|  3 | 李四 | 男  |  22 | 通信 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>语法：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span>=字段值<span class="number">1</span> <span class="keyword">where</span> 字段名<span class="number">2</span>=字段值<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span>=字段值<span class="number">1</span> <span class="comment">/*修改表里所有数据*/</span></span><br></pre></td></tr></table></figure><br>更新数据<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; update student set age=20 where name=&#x27;李四&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">| id | name | sex | age | dept |</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">|  3 | 李四 | 男  |  20 | 通信 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">update</span> student <span class="keyword">set</span> age=age+<span class="number">1</span>;</span><br><span class="line">Query OK, 4 rows affected (0.79 sec)</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  1 | 李四 | 男  |  21 | 通信   |</span><br><span class="line">|  2 | 张三 | 男  |  21 | 通信   |</span><br><span class="line">|  3 | 王二 | 男  |  23 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  23 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>再创建一个名称为score的表，记录成绩<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;score ID&#x27;</span>,</span><br><span class="line">    student_id <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    course <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;课程&#x27;</span>,</span><br><span class="line">    grade <span class="built_in">tinyint</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;分数&#x27;</span>) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> </span><br><span class="line">    <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC</span><br><span class="line">    <span class="keyword">comment</span> = <span class="string">&#x27;成绩&#x27;</span>;</span><br></pre></td></tr></table></figure></p>
<p>student和score两个表显示如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  1 | 李四 | 男  |  20 | 通信   |</span><br><span class="line">|  2 | 张三 | 男  |  20 | 通信   |</span><br><span class="line">|  3 | 王二 | 男  |  22 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  22 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> score;</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">| sid | student_id | name | course     | grade |</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">|   1 |          1 | 李四 | 高数       |    90 |</span><br><span class="line">|   2 |          1 | 李四 | 英语       |    92 |</span><br><span class="line">|   3 |          1 | 李四 | 经济学基础 |    88 |</span><br><span class="line">|   4 |          2 | 张三 | 高数       |    80 |</span><br><span class="line">|   5 |          2 | 张三 | 英语       |    85 |</span><br><span class="line">|   6 |          2 | 张三 | 经济学基础 |    93 |</span><br><span class="line">|   7 |          3 | 王二 | 高数       |    82 |</span><br><span class="line">|   8 |          3 | 王二 | 英语       |    98 |</span><br><span class="line">|   9 |          3 | 王二 | 经济学基础 |    80 |</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>查询语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  1 | 李四 | 男  |  20 | 通信   |</span><br><span class="line">|  2 | 张三 | 男  |  20 | 通信   |</span><br><span class="line">|  3 | 王二 | 男  |  22 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  22 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h3 id="where-条件查询"><a href="#where-条件查询" class="headerlink" title="where 条件查询"></a>where 条件查询</h3><p>where 关键词查询：<code>select 列名称 from 表名称 where 条件;</code></p>
<p>where关键词支持如下运算： </p>
<ul>
<li>比较：=、&gt;、&lt;、&gt;=、&lt;>、!= </li>
<li>is [not] null、in、like </li>
<li>支持not查询， or 和 and 组合查询</li>
<li>范围限定：where age between 10 and 20;</li>
<li>子集限定：where course in (‘高数’,’英语’);</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student where age &gt; 20;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  3 | 王二 | 男  |  22 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  22 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.71</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age &gt; <span class="number">20</span> <span class="keyword">and</span> sex = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  4 | 小花 | 女  |  22 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> dept <span class="keyword">like</span> <span class="string">&#x27;计算%&#x27;</span>;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  3 | 王二 | 男  |  22 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  22 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> dept <span class="keyword">like</span> <span class="string">&#x27;计算_&#x27;</span>;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  3 | 王二 | 男  |  22 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  22 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">21</span> <span class="keyword">and</span> <span class="number">23</span>;</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">| id | name | sex | age | dept   |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">|  1 | 李四 | 男  |  21 | 通信   |</span><br><span class="line">|  2 | 张三 | 男  |  21 | 通信   |</span><br><span class="line">|  3 | 王二 | 男  |  23 | 计算机 |</span><br><span class="line">|  4 | 小花 | 女  |  23 | 计算机 |</span><br><span class="line">+<span class="comment">----+------+-----+-----+--------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> score <span class="keyword">where</span> course <span class="keyword">in</span> (<span class="string">&#x27;高数&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>);</span><br><span class="line">+<span class="comment">-----+------------+------+--------+-------+</span></span><br><span class="line">| sid | student_id | name | course | grade |</span><br><span class="line">+<span class="comment">-----+------------+------+--------+-------+</span></span><br><span class="line">|   1 |          1 | 李四 | 高数   |    90 |</span><br><span class="line">|   2 |          1 | 李四 | 英语   |    92 |</span><br><span class="line">|   4 |          2 | 张三 | 高数   |    80 |</span><br><span class="line">|   5 |          2 | 张三 | 英语   |    85 |</span><br><span class="line">|   7 |          3 | 王二 | 高数   |    82 |</span><br><span class="line">|   8 |          3 | 王二 | 英语   |    98 |</span><br><span class="line">+<span class="comment">-----+------------+------+--------+-------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li>desc 降序</li>
<li>asc 升序<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from score order by grade desc;</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">| sid | student_id | name | course     | grade |</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">|   8 |          3 | 王二 | 英语       |    98 |</span><br><span class="line">|   6 |          2 | 张三 | 经济学基础 |    93 |</span><br><span class="line">|   2 |          1 | 李四 | 英语       |    92 |</span><br><span class="line">|   1 |          1 | 李四 | 高数       |    90 |</span><br><span class="line">|   3 |          1 | 李四 | 经济学基础 |    88 |</span><br><span class="line">|   5 |          2 | 张三 | 英语       |    85 |</span><br><span class="line">|   7 |          3 | 王二 | 高数       |    82 |</span><br><span class="line">|   4 |          2 | 张三 | 高数       |    80 |</span><br><span class="line">|   9 |          3 | 王二 | 经济学基础 |    80 |</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>语句执行顺序为from -&gt; where -&gt; select -&gt; order by</p>
<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select distinct name from score;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| name |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| 李四 |</span><br><span class="line">| 张三 |</span><br><span class="line">| 王二 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>从0开始查询5个<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from score order by grade desc limit 5 offset 0;</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">| sid | student_id | name | course     | grade |</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">|   8 |          3 | 王二 | 英语       |    98 |</span><br><span class="line">|   6 |          2 | 张三 | 经济学基础 |    93 |</span><br><span class="line">|   2 |          1 | 李四 | 英语       |    92 |</span><br><span class="line">|   1 |          1 | 李四 | 高数       |    90 |</span><br><span class="line">|   3 |          1 | 李四 | 经济学基础 |    88 |</span><br><span class="line">+<span class="comment">-----+------------+------+------------+-------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="聚合查询-分组查询"><a href="#聚合查询-分组查询" class="headerlink" title="聚合查询-分组查询"></a>聚合查询-分组查询</h3><p>基本语法：<code>group by 字段 having 条件;</code></p>
<p>having必须和group by联合使用。常用函数：count、max、min、sum、avg</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) from student where age&gt;22;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| count(*) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|        2 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> sex,<span class="keyword">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line">+<span class="comment">-----+----------+</span></span><br><span class="line">| sex | avg(age) |</span><br><span class="line">+<span class="comment">-----+----------+</span></span><br><span class="line">| 男  |  21.6667 |</span><br><span class="line">| 女  |  23.0000 |</span><br><span class="line">+<span class="comment">-----+----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p><strong>嵌套查询</strong>：查询李四同学的高数成绩（注意可能存在同名的，所以可以添加学号来组合查询）<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select student_id, name, course, grade from score where student_id in (select id from student where name=&#x27;李四&#x27;) and course=&#x27;高数&#x27;;</span><br><span class="line">+<span class="comment">------------+------+--------+-------+</span></span><br><span class="line">| student_id | name | course | grade |</span><br><span class="line">+<span class="comment">------------+------+--------+-------+</span></span><br><span class="line">|          1 | 李四 | 高数   |    90 |</span><br><span class="line">+<span class="comment">------------+------+--------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p><img src="mysql-join-query.png" width="60%" height="60%" /></p>
<h3 id="右连接-right-join"><a href="#右连接-right-join" class="headerlink" title="右连接 right join"></a>右连接 right join</h3><p>right join 是 right outer join的简写，全称右外连接，是外连接中的一种。<br>语句:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student a <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> b <span class="keyword">on</span> a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><br>连接student和score：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM student a right outer join score b on a.name = b.name;</span><br><span class="line">+<span class="comment">------+------+------+------+--------+-----+------------+------+------------+-------+</span></span><br><span class="line">| id   | name | sex  | age  | dept   | sid | student_id | name | course     | grade |</span><br><span class="line">+<span class="comment">------+------+------+------+--------+-----+------------+------+------------+-------+</span></span><br><span class="line">|    1 | 李四 | 男   |   21 | 通信   |   1 |          1 | 李四 | 高数       |    90 |</span><br><span class="line">|    1 | 李四 | 男   |   21 | 通信   |   2 |          1 | 李四 | 英语       |    92 |</span><br><span class="line">|    1 | 李四 | 男   |   21 | 通信   |   3 |          1 | 李四 | 经济学基础 |    88 |</span><br><span class="line">|    2 | 张三 | 男   |   21 | 通信   |   4 |          2 | 张三 | 高数       |    80 |</span><br><span class="line">|    2 | 张三 | 男   |   21 | 通信   |   5 |          2 | 张三 | 英语       |    85 |</span><br><span class="line">|    2 | 张三 | 男   |   21 | 通信   |   6 |          2 | 张三 | 经济学基础 |    93 |</span><br><span class="line">|    3 | 王二 | 男   |   23 | 计算机 |   7 |          3 | 王二 | 高数       |    82 |</span><br><span class="line">|    3 | 王二 | 男   |   23 | 计算机 |   8 |          3 | 王二 | 英语       |    98 |</span><br><span class="line">|    3 | 王二 | 男   |   23 | 计算机 |   9 |          3 | 王二 | 经济学基础 |    80 |</span><br><span class="line">+<span class="comment">------+------+------+------+--------+-----+------------+------+------------+-------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.09</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>注意：与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL</p>
<p>示例sql:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT student.id, student.name, score.course, score.grade FROM student RIGHT JOIN score ON student.id = score.sid;</span><br><span class="line">+<span class="comment">------+------+------------+-------+</span></span><br><span class="line">| id   | name | course     | grade |</span><br><span class="line">+<span class="comment">------+------+------------+-------+</span></span><br><span class="line">|    1 | 李四 | 高数       |    90 |</span><br><span class="line">|    2 | 张三 | 英语       |    92 |</span><br><span class="line">|    3 | 王二 | 经济学基础 |    88 |</span><br><span class="line">|    4 | 小花 | 高数       |    80 |</span><br><span class="line">| NULL | NULL | 英语       |    85 |</span><br><span class="line">| NULL | NULL | 经济学基础 |    93 |</span><br><span class="line">| NULL | NULL | 高数       |    82 |</span><br><span class="line">| NULL | NULL | 英语       |    98 |</span><br><span class="line">| NULL | NULL | 经济学基础 |    80 |</span><br><span class="line">+<span class="comment">------+------+------------+-------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="内连接查询-inner-join"><a href="#内连接查询-inner-join" class="headerlink" title="内连接查询 inner join"></a>内连接查询 inner join</h3><p>语句:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a_table a <span class="keyword">inner</span> <span class="keyword">join</span> b_table b <span class="keyword">on</span> a.a_id=b.b_id;</span><br></pre></td></tr></table></figure><br>说明：组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集部分；inner可以省略。</p>
<p>内连接查询，示例sql:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT student.id, student.name, score.course, score.grade FROM student INNER JOIN score ON student.id = score.sid;</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">| id | name | course     | grade |</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">|  1 | 李四 | 高数       |    90 |</span><br><span class="line">|  2 | 张三 | 英语       |    92 |</span><br><span class="line">|  3 | 王二 | 经济学基础 |    88 |</span><br><span class="line">|  4 | 小花 | 高数       |    80 |</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="左连接查询-left-join"><a href="#左连接查询-left-join" class="headerlink" title="左连接查询 left join"></a>左连接查询 left join</h3><p>left join是 left outer join的简写,它的全称是左外连接，是外连接中的一种。<br>语句:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> a_table a <span class="keyword">left</span> <span class="keyword">join</span> b_table b <span class="keyword">ON</span> a.a_id = b.b_id</span><br></pre></td></tr></table></figure></p>
<p>说明：左(外)连接，左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</p>
<p>示例sql:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT student.id, student.name, score.course, score.grade FROM student LEFT JOIN score ON student.id = score.sid;</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">| id | name | course     | grade |</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">|  1 | 李四 | 高数       |    90 |</span><br><span class="line">|  2 | 张三 | 英语       |    92 |</span><br><span class="line">|  3 | 王二 | 经济学基础 |    88 |</span><br><span class="line">|  4 | 小花 | 高数       |    80 |</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> student.id, student.name, score.course, score.grade <span class="keyword">FROM</span> student <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score <span class="keyword">ON</span> student.name = score.name;</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">| id | name | course     | grade |</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">|  1 | 李四 | 高数       |    90 |</span><br><span class="line">|  1 | 李四 | 英语       |    92 |</span><br><span class="line">|  1 | 李四 | 经济学基础 |    88 |</span><br><span class="line">|  2 | 张三 | 高数       |    80 |</span><br><span class="line">|  2 | 张三 | 英语       |    85 |</span><br><span class="line">|  2 | 张三 | 经济学基础 |    93 |</span><br><span class="line">|  3 | 王二 | 高数       |    82 |</span><br><span class="line">|  3 | 王二 | 英语       |    98 |</span><br><span class="line">|  3 | 王二 | 经济学基础 |    80 |</span><br><span class="line">|  4 | 小花 | NULL       |  NULL |</span><br><span class="line">+<span class="comment">----+------+------------+-------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="删除语句：DROP、TRUNCATE、-DELETE-的区别"><a href="#删除语句：DROP、TRUNCATE、-DELETE-的区别" class="headerlink" title="删除语句：DROP、TRUNCATE、 DELETE 的区别"></a>删除语句：DROP、TRUNCATE、 DELETE 的区别</h1><p>前面提到了DROP、TRUNCATE、 DELETE这三个删除语句，它们有什么区别呢？</p>
<ul>
<li><strong>DELETE</strong>属于DML命令，用于删除指定数据 ，执行后要进行事务提交，可以进行回滚操作。</li>
<li>DROP和TRUNCATE都是DDL命令，执行后会自动提交，不能回滚</li>
<li>DROP删除表记录，并释放空间；TRUNCATE删除表，并释放空间，但不删除表的定义，表的结构还在；DELETE删除整个表时，仅删除表的内容，保留表的定义，不释放空间。</li>
<li>执行速度：drop &gt; truncate &gt; delete</li>
</ul>
<center><b>--THE END--<b></center>















]]></content>
      <categories>
        <category>测试开发</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：Python装饰器</title>
    <url>/posts/python-notes-for-decorator/</url>
    <content><![CDATA[<p>装饰器是通过装饰器函数修改原函数的一些功能而不需要修改原函数，在很多场景可以用到它，比如① 执行某个测试用例之前，判断是否需要登录或者执行某些特定操作；② 统计某个函数的执行时间；③ 判断输入合法性等。合理使用装饰器可以极大地提高程序的可读性以及运行效率。本文将介绍Python装饰器的使用方法。</p>
<a id="more"></a>
<h1 id="python简单装饰器"><a href="#python简单装饰器" class="headerlink" title="python简单装饰器"></a>python简单装饰器</h1><p>python装饰器可以定义如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;this is wrapper&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;bye&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>(<span class="params">message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">decorator = my_decorator(test_decorator)</span><br><span class="line">decorator(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">this <span class="keyword">is</span> wrapper</span><br><span class="line">hello world</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><br>python解释器将test_decorator函数作为参数传递给my_decorator函数，并指向了内部函数 wrapper()，内部函数 wrapper() 又会调用原函数 test_decorator()，所以decorator()的执行会先打印’this is wrapper’，然后打印’hello world’， test_decorator()执行完成后，打印 ‘bye’ ，*args和**kwargs，表示接受任意数量和类型的参数。</p>
<p>装饰器 my_decorator() 把真正需要执行的函数 test_decorator() 包裹在其中，并且改变了它的行为，但是原函数 test_decorator() 不变。</p>
<p>一般使用如下形式使用装饰器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>(<span class="params">message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">test_decorator(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>@my_decorator就相当于 <code>decorator = my_decorator(test_decorator)</code> 语句。</p>
<h2 id="functools"><a href="#functools" class="headerlink" title="functools()"></a>functools()</h2><p>内置装饰器@functools.wrap可用于保留原函数的元信息（将原函数的元信息，拷贝到对应的装饰器函数里）。先来看看没有使用functools的情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;this is wrapper&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>(<span class="params">message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">test_decorator(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">print(test_decorator.__name__)</span><br><span class="line">print(<span class="string">&quot;######&quot;</span>)</span><br><span class="line"><span class="built_in">help</span>(test_decorator)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">this <span class="keyword">is</span> wrapper</span><br><span class="line">hello world</span><br><span class="line">wrapper</span><br><span class="line"><span class="comment">######</span></span><br><span class="line">Help on function wrapper <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">wrapper(*args, **kwargs)</span><br></pre></td></tr></table></figure></p>
<p>从上面的输出可以看出test_decorator() 函数被装饰以后元信息被wrapper() 函数取代了，可以使用@functools.wrap装饰器保留原函数的元信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;this is wrapper&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>(<span class="params">message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">test_decorator(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">print(test_decorator.__name__)</span><br><span class="line">print(<span class="string">&quot;######&quot;</span>)</span><br><span class="line"><span class="built_in">help</span>(test_decorator)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">this <span class="keyword">is</span> wrapper</span><br><span class="line">hello world</span><br><span class="line">test_decorator</span><br><span class="line"><span class="comment">######</span></span><br><span class="line">Help on function test_decorator <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">test_decorator(message)</span><br></pre></td></tr></table></figure></p>
<h1 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h1><p>装饰器可以接受自定义参数。比如定义一个参数来设置装饰器内部函数的执行次数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">                print(<span class="string">f&#x27;counter: <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> my_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(<span class="params"><span class="number">4</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>(<span class="params">message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">test_decorator(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter: <span class="number">0</span></span><br><span class="line">counter: <span class="number">1</span></span><br><span class="line">counter: <span class="number">2</span></span><br><span class="line">counter: <span class="number">3</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p>
<h1 id="装饰器的嵌套"><a href="#装饰器的嵌套" class="headerlink" title="装饰器的嵌套"></a>装饰器的嵌套</h1><p>Python 支持多个装饰器嵌套：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator1</span></span><br><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="meta">@decorator3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="嵌套示例"><a href="#嵌套示例" class="headerlink" title="嵌套示例"></a>嵌套示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator1</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;decorator1&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator2</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;decorator2&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator3</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;decorator3&#x27;</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator1</span></span><br><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="meta">@decorator3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>(<span class="params">message</span>):</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">test_decorator(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>装饰的过程：</p>
<ul>
<li>wrapper3 = decorator3(test_decorator)</li>
<li>wrapper2 = decorator2(wrapper3)</li>
<li>wrapper1 = decorator1(wrapper2)</li>
<li>test_decorator = wrapper1</li>
</ul>
<p>顺序从里到外：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">decorator1(decorator2(decorator3(func)))</span><br></pre></td></tr></table></figure><br>test_decorator(‘hello world’) 执行顺序和装饰的过程相反。</p>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">decorator1</span><br><span class="line">decorator2</span><br><span class="line">decorator3</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p>
<h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><p>类也可以作为装饰器，类装饰器主要依赖__call__()方法，是python中所有能被调用的对象具有的内置方法（python魔术方法），每当调用一个类的实例时，__call__()就会被执行一次。</p>
<p>下面的类装饰器实现统计函数执行次数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.num_calls = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self.num_calls += <span class="number">1</span></span><br><span class="line">        print(<span class="string">f&#x27;num of calls is: <span class="subst">&#123;self.num_calls&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Count</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_decorator</span>():</span></span><br><span class="line">    print(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line">test_decorator()</span><br><span class="line">test_decorator()</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num of calls <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">hello world</span><br><span class="line">num of calls <span class="keyword">is</span>: <span class="number">2</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p>
<h1 id="装饰器使用实例"><a href="#装饰器使用实例" class="headerlink" title="装饰器使用实例"></a>装饰器使用实例</h1><p>下面介绍两种装饰器使用场景</p>
<h2 id="统计函数执行时间"><a href="#统计函数执行时间" class="headerlink" title="统计函数执行时间"></a>统计函数执行时间</h2><p>统计函数执行所花费的时间<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 统计函数执行时间</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_timer</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.perf_counter()    </span><br><span class="line">        value = func(*args, **kwargs)</span><br><span class="line">        end_time = time.perf_counter()      </span><br><span class="line">        run_time = end_time - start_time    </span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;func.__name__&#125;</span> 执行时间为：<span class="subst">&#123;run_time:<span class="number">.4</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> wrapper_timer</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line">    print(<span class="built_in">sum</span>)</span><br><span class="line">    </span><br><span class="line">test_sum(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5000050000</span></span><br><span class="line">test_sum 执行时间为：<span class="number">0.0046</span> 秒</span><br></pre></td></tr></table></figure></p>
<h2 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h2><p>在使用某些web服务时，需要先判断用户是否登录，如果没有登录就跳转到登录页面或者提示用户登录：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_login</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        request = args[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> check_user_logged_in(request): <span class="comment"># 判断用户是否处于登录状态</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs) <span class="comment"># 执行函数secret() </span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>, <span class="built_in">next</span>=request.url)) <span class="comment"># 跳转登录页面</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_login</span><br><span class="line">    </span><br><span class="line"><span class="meta">@authenticate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret</span>()</span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function"> </span></span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium自动化测试框架介绍</title>
    <url>/posts/selenium-architecture-introduce/</url>
    <content><![CDATA[<p>本文简要介绍Selenium 的Webdriver 架构，我对selenium的相关知识点进行了整理，大家可免费下载：<a href="https://download.csdn.net/download/u010698107/15690045">Selenium自动化测试框架详细介绍ppt及示例脚本.rar</a><br><a id="more"></a></p>
<h1 id="Selenium简介"><a href="#Selenium简介" class="headerlink" title="Selenium简介"></a>Selenium简介</h1><p>Selenium是浏览器的自动化测试工具，与浏览器进行交互，实现对web应用的自动化测试，Selenium包括Selenium IDE, Selenium Webdriver 和 Selenium Grid三个工具。<br><img src="selenium.png" width="80%" height="80%" /></p>
<p>Selenium IDE (Integrated Development Environment)是一个浏览器插件，提供脚本录制、脚本生成和回放功能，初次使用selenium的新手可以用它来做一些简单的测试，</p>
<p>Selenium Webdriver 是一个浏览器自动化框架，接受脚本命令并发送到浏览器（通过浏览器驱动来实现），支持多种语言（包括Java, Ruby, Python, PHP, JavaScript, C#等）和多种浏览器，并且支持windows，Linux，macOS等操作系统。</p>
<p>Selenium Grid实现在多个机器上并行运行 selenium，也就是同时在多个机器上执行测试，并且可以是不同的浏览器和操作系统（跨平台）。<br><img src="selenium-grid.png" width="80%" height="80%" /></p>
<p>下面详细介绍一下Selenium Webdriver 架构。</p>
<h1 id="Selenium-Webdriver-架构"><a href="#Selenium-Webdriver-架构" class="headerlink" title="Selenium Webdriver 架构"></a>Selenium Webdriver 架构</h1><p>Selenium Webdriver API实现脚本语言与浏览器之间的通信，Selenium Webdriver 架构包括四个基本组件:</p>
<ul>
<li>Selenium Language Bindings/Selenium Client Library：Selenium语言绑定/客户端库</li>
<li>JSON Wire Protocol：JSON有线协议</li>
<li>Browser Driver：浏览器驱动</li>
<li>Browser：浏览器</li>
</ul>
<p><img src="selenium-architecture.png" width="80%" height="80%" /></p>
<p>Selenium支持多种语言，包括Ruby、Java、Python、C#、JavaScript、GO、Haskell、JavaScript、Perl、PHP、R和Dart。可参考网站：<a href="https://www.selenium.dev/downloads/#client-drivers">https://www.selenium.dev/downloads/#client-drivers</a> 。执行测试用例时，selenium 代码将被转换为JSON格式，发送给浏览器驱动。</p>
<p>JSON(JavaScript Object Notation)是一种用于在Web上交换数据的开放标准。JSON有线协议是一种REST API ，基于HTTP协议实现selenium客户端与remote server（浏览器驱动的HTTP服务器）的交互，浏览器驱动（HTTP server）接收到命令（HTTP requests）后，将请求发送到对应的浏览器上执行，并返回HTTP响应。如果是POST请求，将在浏览器上执行相应的操作；如果发送的是GET请求，浏览器将发送HTTP响应，发送到浏览器驱动，然后浏览器驱动使用JSON有线协议将响应发送到客户端。</p>
<p>不同的浏览器对应各自的驱动程序，驱动下载和使用方法可参考官方文档：<a href="https://www.selenium.dev/documentation/en/webdriver/driver_requirements/">https://www.selenium.dev/documentation/en/webdriver/driver_requirements/</a> ，或者参考文章<a href="https://blog.csdn.net/u010698107/article/details/111415829">Selenium多浏览器测试</a>。</p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库安装配置详细教程</title>
    <url>/posts/database-for-mysql-install-on-linux-and-windows/</url>
    <content><![CDATA[<p>本文介绍MySQL 在 Windows系统和Linux系统安装方法。</p>
<a id="more"></a>
<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>SQL(Structured Query Language)是结构化查询语言，NoSQL数据库也在一定程度上支持SQL。</p>
<p>SQL分类：<br><img src="mysql.png" width="80%" height="80%" /></p>
<h1 id="Windows系统安装MySQL"><a href="#Windows系统安装MySQL" class="headerlink" title="Windows系统安装MySQL"></a>Windows系统安装MySQL</h1><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a><br>选择要下载的MySQL版本<br><img src="mysql-download.png" width="80%" height="80%" /></p>
<h2 id="2、解压zip包"><a href="#2、解压zip包" class="headerlink" title="2、解压zip包"></a>2、解压zip包</h2><p>解压下载的zip压缩包</p>
<h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><p>在Path下添加D:\tools\mysql-8.0.16-winx64\bin<br><img src="mysql-environment-variable.png" width="80%" height="80%" /></p>
<h2 id="4、编写配置文件"><a href="#4、编写配置文件" class="headerlink" title="4、编写配置文件"></a>4、编写配置文件</h2><p>在安装根目录下添加my-default.ini文件：D:\tools\mysql-8.0.16-winx64\my-default.ini<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\tools\mysql-<span class="number">8.0</span>.<span class="number">16</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\tools\mysql-<span class="number">8.0</span>.<span class="number">16</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数，防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure></p>
<h2 id="5、MySQL服务安装"><a href="#5、MySQL服务安装" class="headerlink" title="5、MySQL服务安装"></a>5、MySQL服务安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL</span><br><span class="line">mysqld install</span><br></pre></td></tr></table></figure>
<p><strong>报错1：</strong><br>信息如下：<br>Install/Remove of the Service Denied<br>解决办法：<br>打开cmd.exe程序的时候选择“用管理员身份打开”。</p>
<p><strong>报错2：</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;mysqld --install MySQL</span><br><span class="line">The service already exists!</span><br><span class="line">The current server installed: D:\xampp\mysql\bin\mysqld MySQL</span><br></pre></td></tr></table></figure><br>解决办法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld -remove MySQL</span><br></pre></td></tr></table></figure></p>
<h2 id="6、MySQL初始化"><a href="#6、MySQL初始化" class="headerlink" title="6、MySQL初始化"></a>6、MySQL初始化</h2><p>在MySQL安装目录的 bin 目录下执行命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure><br>执行完成后，会打印 root 用户的初始默认密码：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;mysqld --initialize --console</span><br><span class="line">2019-05-15T09:27:48.338369Z 0 [System] [MY-013169] [Server] D:\tools\mysql-8.0.16-winx64\bin\mysqld.exe (mysqld 8.0.16) initializing of server <span class="keyword">in</span> progress as process 15308</span><br><span class="line">2019-05-15T09:28:50.242794Z 5 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: u<span class="comment">#vTkx6L:dg,</span></span><br><span class="line">2019-05-15T09:29:42.201421Z 0 [System] [MY-013170] [Server] D:\tools\mysql-8.0.16-winx64\bin\mysqld.exe (mysqld 8.0.16) initializing of server has completed</span><br></pre></td></tr></table></figure><br>启动MySQL服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></p>
<h2 id="7、更改密码和密码认证插件"><a href="#7、更改密码和密码认证插件" class="headerlink" title="7、更改密码和密码认证插件"></a>7、更改密码和密码认证插件</h2><p>进入D:\tools\mysql-8.0.16-winx64\bin路径下，执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><br>然后输入第6步的密码：<code>u#vTkx6L:dg</code></p>
<p>然后修改用户密码，在MySQL中执行命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure></p>
<h2 id="8、查看默认数据库mysql"><a href="#8、查看默认数据库mysql" class="headerlink" title="8、查看默认数据库mysql"></a>8、查看默认数据库mysql</h2><p>初始化完成后，初始化了名为mysql数据库，其中user表里面存储MySQL用户信息。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; show tables;</span><br></pre></td></tr></table></figure><br><img src="mysql-tables.png" width="80%" height="80%" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示user表结构</span><br><span class="line">mysql&gt; desc user;</span><br><span class="line">mysql&gt; select user,host,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure>
<p><img src="mysql-user.png" width="80%" height="80%" /></p>
<h1 id="添加新的用户"><a href="#添加新的用户" class="headerlink" title="添加新的用户"></a>添加新的用户</h1><p>除了管理员root用户，也可以添加其他用户。</p>
<h2 id="允许本地-IP访问localhost的Mysql数据库"><a href="#允许本地-IP访问localhost的Mysql数据库" class="headerlink" title="允许本地 IP访问localhost的Mysql数据库"></a>允许本地 IP访问localhost的Mysql数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &#39;admin&#39;@&#39;localhost&#39; identified by &#39;admin&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.22 sec)</span><br></pre></td></tr></table></figure>
<h2 id="允许外网IP访问数据库"><a href="#允许外网IP访问数据库" class="headerlink" title="允许外网IP访问数据库"></a>允许外网IP访问数据库</h2><p>允许开放其他ip登录，添加权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &#39;admin&#39;@&#39;%&#39; identified by &#39;admin&#39;; </span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON e_menu.* TO &#39;admin&#39;@&#39;%&#39; WITH GRANT OPTION; &#x2F;&#x2F;将数据库e_menu授权给admin用户 </span><br><span class="line">Query OK, 0 rows affected (0.15 sec)</span><br><span class="line">mysql&gt; flush privileges; &#x2F;&#x2F;刷新授权</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure><br><img src="mysql-grant-all-privileges.png" width="80%" height="80%" /></p>
<p>注意：上面的授权命令适用于MySQL8.0及之后的版本，MySQL8.0之前的版本使用如下命令授权<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on 库名.表名 to &#39;用户名&#39;@&#39;IP地址&#39; identified by &#39;密码&#39; with grant option;</span><br></pre></td></tr></table></figure><br>授权基本的查询修改权限：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 库名.表名 TO &#39;用户名&#39;@&#39;IP地址&#39;;</span><br></pre></td></tr></table></figure></p>
<p>撤销用户权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke all privileges on *.* from &#39;用户名&#39;@&#39;IP地址&#39;; </span><br></pre></td></tr></table></figure></p>
<p>查看用户权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &#39;用户名&#39;@&#39;IP地址&#39;;</span><br></pre></td></tr></table></figure></p>
<p>查看MYSQL数据库中所有用户<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DISTINCT CONCAT(&#39;User: &#39;&#39;&#39;,user,&#39;&#39;&#39;@&#39;&#39;&#39;,host,&#39;&#39;&#39;;&#39;) AS query FROM mysql.user;</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| query                                 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| User: &#39;admin&#39;@&#39;%&#39;;                    |</span><br><span class="line">| User: &#39;admin&#39;@&#39;localhost&#39;;            |</span><br><span class="line">| User: &#39;mysql.infoschema&#39;@&#39;localhost&#39;; |</span><br><span class="line">| User: &#39;mysql.session&#39;@&#39;localhost&#39;;    |</span><br><span class="line">| User: &#39;mysql.sys&#39;@&#39;localhost&#39;;        |</span><br><span class="line">| User: &#39;root&#39;@&#39;localhost&#39;;             |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">6 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="Linux系统安装MySQL：Docker安装"><a href="#Linux系统安装MySQL：Docker安装" class="headerlink" title="Linux系统安装MySQL：Docker安装"></a>Linux系统安装MySQL：Docker安装</h1><p>Linux系统推荐使用docker安装，简单方便。<br>如果没有安装docker，需要先安装一下，可参考 <a href="https://blog.csdn.net/u010698107/article/details/113820115">容器技术介绍：Docker简介及安装</a></p>
<h2 id="1、查看可用的-MySQL-版本"><a href="#1、查看可用的-MySQL-版本" class="headerlink" title="1、查看可用的 MySQL 版本"></a>1、查看可用的 MySQL 版本</h2><p>先查看一下可以安装的 MySQL 版本，MySQL镜像的可用版本可在<a href="https://hub.docker.com/">docker hub</a>中搜索查看：<a href="https://hub.docker.com/_/mysql?tab=tags">https://hub.docker.com/_/mysql?tab=tags</a></p>
<p><img src="docker-mysql-tags.png" width="80%" height="80%" /></p>
<h2 id="2、拉取-MySQL-镜像"><a href="#2、拉取-MySQL-镜像" class="headerlink" title="2、拉取 MySQL 镜像"></a>2、拉取 MySQL 镜像</h2><p>拉取指定版本的MySQL<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure><br>查看是否安装MySQL镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">[root@server ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                   TAG               IMAGE ID       CREATED         SIZE</span><br><span class="line">jenkins/jenkins              latest            10fafa8484ea   4 weeks ago     721MB</span><br><span class="line">nginx                        latest            f6d0b4767a6c   4 weeks ago     133MB</span><br><span class="line">mysql                        5.7               9cfcce23593a   8 months ago    448MB</span><br></pre></td></tr></table></figure></p>
<h2 id="3、运行容器"><a href="#3、运行容器" class="headerlink" title="3、运行容器"></a>3、运行容器</h2><p>运行 mysql 容器：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name mysql-test -v <span class="variable">$PWD</span>/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure></p>
<ul>
<li>—name mysql-test：设置容器名</li>
<li>-v：<code>$PWD/mysql</code>为挂载路径，<code>/var/lib/mysql</code>为容器内数据库数据默认存储地址</li>
<li>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口。</li>
<li>MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。</li>
</ul>
<p>查看MySQL镜像是否启动成功：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">[root@server ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED        STATUS          PORTS                               NAMES</span><br><span class="line">2c5ae10a7543   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 months ago   Up 23 minutes   0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql-test</span><br></pre></td></tr></table></figure></p>
<h2 id="4、进入mysql容器"><a href="#4、进入mysql容器" class="headerlink" title="4、进入mysql容器"></a>4、进入mysql容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it 容器ID或者容器名 /bin/bash</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker exec -it mysql-test /bin/bash</span></span><br><span class="line">root@2c5ae10a7543:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@server ~]<span class="comment"># docker exec -it 2c5ae10a7543 /bin/bash</span></span><br><span class="line">root@2c5ae10a7543:/<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>通过 root 和密码 123456 访问 MySQL 服务<br><img src="docker-mysql-connect.png" width="80%" height="80%" /></p>
<h2 id="5、查看mysql镜像的ip地址"><a href="#5、查看mysql镜像的ip地址" class="headerlink" title="5、查看mysql镜像的ip地址"></a>5、查看mysql镜像的ip地址</h2><p><strong>方法一</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker inspect mysql-test</span><br></pre></td></tr></table></figure><br><img src="docker-inspect-mysql.png" width="80%" height="80%" /><br><strong>方法二</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server <span class="built_in">local</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                              NAMES</span><br><span class="line">3bab7ac2a2af        jenkins/jenkins:lts   <span class="string">&quot;/sbin/tini -- /usr/…&quot;</span>   9 hours ago         Up 9 hours          0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:50000-&gt;50000/tcp   jenkins</span><br><span class="line">2c5ae10a7543        mysql:5.7             <span class="string">&quot;docker-entrypoint.s…&quot;</span>   6 days ago          Up 8 hours          0.0.0.0:3306-&gt;3306/tcp, 33060/tcp                  mysql-test</span><br><span class="line">[root@server <span class="built_in">local</span>]<span class="comment"># docker exec -it mysql-test bash</span></span><br><span class="line">root@2c5ae10a7543:/<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1    localhost</span><br><span class="line">::1    localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0    ip6-localnet</span><br><span class="line">ff00::0    ip6-mcastprefix</span><br><span class="line">ff02::1    ip6-allnodes</span><br><span class="line">ff02::2    ip6-allrouters</span><br><span class="line">172.17.0.3    2c5ae10a7543</span><br><span class="line">root@2c5ae10a7543:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><br>命令行连接mysql<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@2c5ae10a7543:&#x2F;# mysql -h 172.17.0.3 -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="6、增加远程访问docker-MySQL权限"><a href="#6、增加远程访问docker-MySQL权限" class="headerlink" title="6、增加远程访问docker MySQL权限"></a>6、增加远程访问docker MySQL权限</h2><p>在步骤4中，可以进入mysql容器后连接mysql数据库，那么怎么在外面（我的docker mysql安装在centos虚拟机中，想在宿主机上连接docker安装的mysql）也可以连接mysql容器呢？</p>
<p>前面已经讲过授权其他IP访问mysql，这里类似。先进入docker mysql容器内，连接mysql数据库，然后对root账户进行授权并刷新设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@2c5ae10a7543:&#x2F;# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.66 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure>
<p>授权成功后，在宿主机上连接虚拟机上docker安装的mysql：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;mysql -h 192.168.30.8 -P 3306 -u root -p</span><br><span class="line">Enter password: ******</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host,authentication_string from mysql.user;</span><br><span class="line">+---------------+-----------+-------------------------------------------+</span><br><span class="line">| user          | host      | authentication_string                     |</span><br><span class="line">+---------------+-----------+-------------------------------------------+</span><br><span class="line">| root          | localhost | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| mysql.session | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| mysql.sys     | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| root          | %         | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+---------------+-----------+-------------------------------------------+</span><br><span class="line">4 rows in set (0.11 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>连接成功！</p>
<h1 id="数据库管理工具连接MySQL"><a href="#数据库管理工具连接MySQL" class="headerlink" title="数据库管理工具连接MySQL"></a>数据库管理工具连接MySQL</h1><p>除了通过命令行连接管理数据库，为了更加方便管理mysql数据库，有很多数据库管理工具可以通过GUI界面管理数据库，下面介绍数据库管理工具MySQL Workbench连接数据库方法。</p>
<p>MySQL Workbench是MySQL官方自带的免费管理工具，下载地址：<a href="https://dev.mysql.com/downloads/workbench/">https://dev.mysql.com/downloads/workbench/</a></p>
<p><strong>1. 连接宿主机安装的mysql</strong><br>安装成功后打开Workbench，添加连接，设置连接名，配置主机名，用户名。<br><img src="mysql-workbench-connect.png" width="80%" height="80%" /><br>输入密码，连接成功，可以看到数据库<br><img src="mysql-workbench-windows.png" width="80%" height="80%" /></p>
<p><strong>2. 连接虚拟机安装的docker mysql</strong><br>添加连接，设置连接名，配置主机名，用户名<br><img src="mysql-workbench-docker-mysql-connect.png" width="80%" height="80%" /><br>输入密码，连接成功<br><img src="mysql-workbench-docker.png" width="80%" height="80%" /></p>
<p>也可以使用Navicat工具连接数据库，连接方法类似</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>测试开发</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成平台Jenkins介绍</title>
    <url>/posts/continuous-integration-for-jenkins/</url>
    <content><![CDATA[<p>持续集成（Continuous integration，CI）是软件开发和发布流程中最重要的组成部分，有利于加快开发进度。Jenkins是常用的持续集成管理工具，本文将简要介绍Jenkins持续集成工具。</p>
<a id="more"></a>
<h1 id="持续集成简介"><a href="#持续集成简介" class="headerlink" title="持续集成简介"></a>持续集成简介</h1><p>持续集成（Continuous integration，CI）概念由Martin Fowler 于2006年提出：<a href="https://martinfowler.com/">https://martinfowler.com/</a>， 频繁地（一天多次）将代码集成到主干。</p>
<p><img src="continuous-integration.png" width="80%" height="80%" /></p>
<blockquote>
<p>Continuous Integration doesn’t get rid of bugs, but it does make them dramatically easier to find and remove.<br><strong>Martin Fowler, Chief Scientist, ThoughtWorks</strong></p>
</blockquote>
<p>持续集成好处：</p>
<ul>
<li>快速发现错误：持续自动化测试，可以快速发现和定位错误，节约时间。</li>
<li>易于定位项目进度，使项目更加透明。</li>
<li>导致更快的发布</li>
</ul>
<h1 id="Jenkins介绍"><a href="#Jenkins介绍" class="headerlink" title="Jenkins介绍"></a>Jenkins介绍</h1><p>Jenkins官网：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a><br>Jenkins官网文档：<a href="https://www.jenkins.io/doc/">https://www.jenkins.io/doc/</a></p>
<p>Jenkins是免费开源的持续集成管理工具，基于Java开发，可以跨平台运行，提供持续集成和持续交付服务 ( continuous integration or continuous delivery，CI/CD)，自动化软件开发流程中的构建、测试和部署工作。Jenkins插件丰富，有超过1000个插件来支持构建、部署自动化，满足任何项目的需要。</p>
<p>持续集成工具比较：<a href="https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software">https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software</a></p>
<p><img src="CI-software-compare.png" width="80%" height="80%" /></p>
<p>Docker Jenkins安装和启动方法参考：<a href="https://blog.csdn.net/u010698107/article/details/113819992">Docker搭建持续集成平台Jenkins</a></p>
<h1 id="Jenkins更新"><a href="#Jenkins更新" class="headerlink" title="Jenkins更新"></a>Jenkins更新</h1><p>进入Manage Jenkins，提示新版本，点击下载 jenkins.war 包。<br><img src="jenkins-download.png" width="80%" height="80%" /></p>
<h2 id="1-jenkins-war-位置查看"><a href="#1-jenkins-war-位置查看" class="headerlink" title="1. jenkins.war 位置查看"></a>1. jenkins.war 位置查看</h2><p><strong>方法1：Manage Jenkins中查看</strong><br>点击进入Manage Jenkins，找到Status Information，点击System Information，可以查看war包位置<br><img src="jenkins-system-information.png" width="80%" height="80%" /><br><strong> 方法2：find命令查找 </strong><br>使用root账号进入容器中后使用find命令查找<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker exec -it -u root jenkins bash</span></span><br><span class="line">root@ed883da9faab:/<span class="comment"># find / -name jenkins.war</span></span><br><span class="line">find: ‘/proc/1/map_files’: Operation not permitted</span><br><span class="line">find: ‘/proc/7/map_files’: Operation not permitted</span><br><span class="line">find: ‘/proc/138/map_files’: Operation not permitted</span><br><span class="line">find: ‘/proc/155/map_files’: Operation not permitted</span><br><span class="line">/usr/share/jenkins/jenkins.war</span><br><span class="line">root@ed883da9faab:/<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-更新容器中的war包"><a href="#2-更新容器中的war包" class="headerlink" title="2. 更新容器中的war包"></a>2. 更新容器中的war包</h2><p>使用root账号进入容器中，备份原来的war包<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker exec -it -u root jenkins bash</span></span><br><span class="line">root@ed883da9faab:/<span class="comment"># cd /usr/share/jenkins</span></span><br><span class="line">root@ed883da9faab:/usr/share/jenkins<span class="comment"># mv jenkins.war jenkins.war.bak</span></span><br></pre></td></tr></table></figure><br>将下载的war包复制到容器目录 /usr/share/jenkins 下（注意是在宿主机上操作）<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker cp jenkins.war jenkins:/usr/share/jenkins/</span></span><br><span class="line">[root@server ~]<span class="comment"># docker exec -it -u root jenkins bash</span></span><br><span class="line">root@ed883da9faab:/usr/share/jenkins<span class="comment"># ls</span></span><br><span class="line">jenkins.war  jenkins.war.bak  ref</span><br></pre></td></tr></table></figure></p>
<h2 id="3-重启Jenkins"><a href="#3-重启Jenkins" class="headerlink" title="3. 重启Jenkins"></a>3. 重启Jenkins</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker restart jenkins</span><br></pre></td></tr></table></figure>
<p>刷新页面，登陆，进入Manage Jenkins，可以看到版本更新成功，可以降回原来的版本。<br><img src="jenkins-download-update.png" width="80%" height="80%" /></p>
<h1 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h1><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>进入Manage Jenkins -&gt; System Configuration -&gt; Configure System进行系统配置，有很多配置参数可以配置，比如：</p>
<ul>
<li>Jenkins URL：服务器域名</li>
<li>管理员邮箱</li>
<li>Github配置</li>
<li>默认 Shell：bash</li>
<li>等</li>
</ul>
<h3 id="配置-Shell"><a href="#配置-Shell" class="headerlink" title="配置 Shell"></a>配置 Shell</h3><p>比如在windows代理节点中，默认命令行使用cmd，如果你想使用Git Bash，可以在系统配置中进行配置。进入Manage Jenkins -&gt; System Configuration -&gt; Configure System，下拉到shell，配置Shell executable为你的命令行文件路径，比如我的git bash路径为：<code>D:/tools/Git/bin/sh.exe</code><br><img src="jenkins-shell-executable.png" width="80%" height="80%" /></p>
<h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><p>Jenkins插件众多，扩展了很多功能。进入Manage Jenkins -&gt; System Configuration -&gt; Manage Plugins进行插件的管理。</p>
<p>可以先点击Advanced 设置更新网址URL：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a><br><img src="jenkins-manage-plugin.png" width="80%" height="80%" /></p>
<p>然后进行插件的安装更新操作， 插件的安装方法，在Available中的输入框输入要安装的插件名称关键字进行搜索，选择要安装的插件，点击“Download now and install after  restart”进行下载安装。</p>
<p>Jenkins推荐插件：</p>
<ul>
<li>Multiple SCMs plugin</li>
<li>Rebuilder</li>
<li>Safe Restart Plugin</li>
<li>Pipeline</li>
<li>Text Finder</li>
<li>Blue Ocean</li>
<li>Allure</li>
</ul>
<h2 id="用户权限控制"><a href="#用户权限控制" class="headerlink" title="用户权限控制"></a>用户权限控制</h2><p>在Jenkins的初始化安装过程中会先注册一个管理员用户，管理员用户可以创建一般用户，管理员用户具有最高权限。</p>
<p>进入Manage Jenkins -&gt; Security -&gt; Configure Global Security进行安全配置<br>可以勾选允许用户注册，团队人数较少时，一般建议不勾选，由管理员创建<br><img src="jenkins-security.png" width="80%" height="80%" /></p>
<p>进入Manage Jenkins -&gt; Security -&gt; Manage Users进行用户管理，可以进行用户删除、修改和添加操作<br><img src="jenkins-security-manage-user.png" width="80%" height="80%" /></p>
<p>权限控制在Manage Jenkins -&gt; Security -&gt; Configure Global Security -&gt; Authorization下<br>可以选择【安全矩阵】（个人权限）或者【项目矩阵】（项目权限）进行权限管理<br><img src="jenkins-security-matrix.png" width="80%" height="80%" /></p>
<h2 id="关闭跨站请求伪造保护（CSRF）"><a href="#关闭跨站请求伪造保护（CSRF）" class="headerlink" title="关闭跨站请求伪造保护（CSRF）"></a>关闭跨站请求伪造保护（CSRF）</h2><p>Jenkins高版本不能再web页面关闭CSRF。</p>
<p>一种方法是在Jenkins启动时加入取消保护的参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>第二种方法是修改Jenkins容器中的/usr/local/bin/jenkins.sh文件：</p>
<p>将<code>Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true</code> 添加到<code>exec java</code> 开头的那行命令中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> java -Duser.home=<span class="string">&quot;<span class="variable">$JENKINS_HOME</span>&quot;</span> -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class="literal">true</span> <span class="string">&quot;<span class="variable">$&#123;java_opts_array[@]&#125;</span>&quot;</span> -jar <span class="variable">$&#123;JENKINS_WAR&#125;</span> <span class="string">&quot;<span class="variable">$&#123;jenkins_opts_array[@]&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果Jenkins容器没有vi或者vim命令，可以将文件复制出来修改后，再复制回去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp db10006f12ad:/usr/<span class="built_in">local</span>/bin/jenkins.sh .   <span class="comment">#复制到当前目录</span></span><br><span class="line">$ vi jenkins.sh <span class="comment"># 修改jenkins.sh文件</span></span><br><span class="line">$ docker cp jenkins.sh db10006f12ad:/usr/<span class="built_in">local</span>/bin/jenkins.sh <span class="comment"># 复制到容器中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改完成后重启jenkins容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart jenkins </span><br></pre></td></tr></table></figure>
<p>然后在【全局安全配置】中可以看到 跨站请求伪造保护 已经关闭</p>
<p><img src="csrf-disabled.png" width="80%" height="80%" /></p>
<h1 id="slave节点管理"><a href="#slave节点管理" class="headerlink" title="slave节点管理"></a>slave节点管理</h1><p>在实际工作中，考虑到宿主机资源限制，可以采用多节点的方式，将任务分配到其他节点执行。通过添加多个Jenkins slave节点来执行Jenkins任务， Jenkins运行的主机称为 master节点：</p>
<ul>
<li>节点上需要配置Java运行环境, Java_Version&gt;1.5</li>
<li>节点支持Windows, Linux，Mac系统</li>
</ul>
<h2 id="节点添加方式"><a href="#节点添加方式" class="headerlink" title="节点添加方式"></a>节点添加方式</h2><p>先查看是否配置了Java运行环境：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server /]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_252&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_252-b09)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)</span><br><span class="line">[root@server /]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>进入Manage Jenkins -&gt; System Configuration -&gt; Manage Nodes and Clouds</p>
<p><strong>1、添加Linux节点</strong><br>配置节点（注意我配置的slave节点为宿主机）：<br><img src="jenkins-slave-node-configure.png" width="80%" height="80%" /><br>发现节点连接不成功<br><img src="jenkins-manage-node.png" width="80%" height="80%" /></p>
<p>查看日志，发现没有known_hosts<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/var/jenkins_home/.ssh/known_hosts [SSH] No Known Hosts file was found at /var/jenkins_home/.ssh/known_hosts. Please ensure one is created at this path and that Jenkins can <span class="built_in">read</span> it.</span><br></pre></td></tr></table></figure><br>一种解决方法是，设置认证策略为手动信任<br><img src="jenkins-slave-node-verfication-strategy.png" width="80%" height="80%" /></p>
<p>上线成功<br><img src="jenkins-slave-status.png" width="80%" height="80%" /></p>
<p><strong>2、添加Windows节点</strong><br>windows节点配置<br><img src="jenkins-windows-node-configure.png" width="80%" height="80%" /></p>
<p>节点连接方式<br><img src="jenkins-windows-node-connect.png" width="80%" height="80%" /><br>第一种方式：点击Launch图标下载，双击运行下载的文件jenkins-agent.jnlp<br><img src="jenkins-windows-node-run.png" width="80%" height="80%" /><br>刷新，上线成功<br><img src="jenkins-windows-slave-status.png" width="80%" height="80%" /></p>
<p>第二种方式：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar agent.jar -jnlpUrl http://192.168.30.8:8080/computer/slave2/jenkins-agent.jnlp -secret 626402e3eee37788fa41ffa7353a2cc14f269028672a0af206b0f92e6578f364 -workDir <span class="string">&quot;D:\ProgramWorkspace\TestingDemo\jenkins&quot;</span></span><br><span class="line"><span class="comment"># Run from agent command line, with the secret stored in a file:</span></span><br><span class="line"><span class="built_in">echo</span> 626402e3eee37788fa41ffa7353a2cc14f269028672a0af206b0f92e6578f364 &gt; secret-file</span><br><span class="line">java -jar agent.jar -jnlpUrl http://192.168.30.8:8080/computer/slave2/jenkins-agent.jnlp -secret @secret-file -workDir <span class="string">&quot;D:\ProgramWorkspace\TestingDemo\jenkins&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>启动jenkins时，开启了8080和50000端口（<a href="https://blog.csdn.net/u010698107/article/details/113819992">Docker搭建持续集成平台Jenkins</a>），8080端口是jenkins服务器对外URL地址，50000端口为slave节点与jenkins的通讯端口，在默认情况下，基于JNLP的Jenkins代理通过TCP端口50000与Jenkins主站进行通信。</p>
<p>Windows查看50000端口占用：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;netstat -aon | findstr <span class="string">&quot;50000&quot;</span></span><br><span class="line">  TCP    127.0.0.1:50000        0.0.0.0:0              LISTENING       8644</span><br><span class="line">  TCP    192.168.30.100:52297   192.168.30.8:50000     ESTABLISHED     10028</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>Linux查看端口占用情况：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server /]<span class="comment"># lsof -i:8080</span></span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">docker-pr 2787 root    4u  IPv4  51423      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">[root@server /]<span class="comment"># lsof -i:50000</span></span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">docker-pr 2775 root    4u  IPv4  50675      0t0  TCP *:50000 (LISTEN)</span><br><span class="line">[root@server /]<span class="comment"># netstat -aptn | grep 50000</span></span><br><span class="line">tcp        0      0 0.0.0.0:50000           0.0.0.0:*               LISTEN      2775/docker-proxy   </span><br><span class="line">[root@haiyong jenkins_home]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h1 id="Jenkins创建项目"><a href="#Jenkins创建项目" class="headerlink" title="Jenkins创建项目"></a>Jenkins创建项目</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="jenkins-create-new-item.png" width="80%" height="80%" /></p>
<h2 id="选择Freestyle-project"><a href="#选择Freestyle-project" class="headerlink" title="选择Freestyle project"></a>选择Freestyle project</h2><p><img src="jenkins-freestyle-project.png" width="80%" height="80%" /></p>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p><img src="jenkins-edit-new-item.png" width="80%" height="80%" /><br>可以发现一个job的组成部分包括：</p>
<ul>
<li>General：项目通用配置</li>
<li>Source Code Management：源代码控制，比如Git配置</li>
<li>Build Triggers：触发，构建时间配置（定期构建，代码变更构建）</li>
<li>Build Environment</li>
<li>Build：执行命令，比如执行shell</li>
<li>Post-build Actions：执行完成后进行分析，生成报告，发送邮件等</li>
</ul>
<h2 id="构建完成"><a href="#构建完成" class="headerlink" title="构建完成"></a>构建完成</h2><p><img src="jenkins-build-now.png" width="80%" height="80%" /></p>
<h2 id="查看控制台输出"><a href="#查看控制台输出" class="headerlink" title="查看控制台输出"></a>查看控制台输出</h2><p><img src="jenkins-console-output.png" width="80%" height="80%" /></p>
<h1 id="Jenkins父子多任务运行"><a href="#Jenkins父子多任务运行" class="headerlink" title="Jenkins父子多任务运行"></a>Jenkins父子多任务运行</h1><p>任务启动的触发条件：其他任务的运行结果</p>
<ul>
<li>前驱任务成功的条件下被触发</li>
<li>前驱任务失败的条件下被触发</li>
<li>前驱任务不稳定的条件下被触发</li>
</ul>
<p>适用于有先后次序关系的任务，比如 部署环境任务，验收测试任务</p>
<h2 id="Jenkins配置成功任务关联"><a href="#Jenkins配置成功任务关联" class="headerlink" title="Jenkins配置成功任务关联"></a>Jenkins配置成功任务关联</h2><p><strong>1、新建第一个任务first_test</strong><br><img src="jenkins-father-child-job.png" width="80%" height="80%" /></p>
<p><strong>2、构建</strong><br><img src="jenkins-first-job-build.png" width="80%" height="80%" /></p>
<p><strong>3、新建第二个任务second_test</strong><br><img src="jenkins-second-job-build.png" width="80%" height="80%" /></p>
<p><strong>4、构建，设置触发方式</strong><br>设置为前驱任务稳定成功的条件下被触发<br><img src="jenkins-second-job-build-triggers.png" width="80%" height="80%" /><br><img src="jenkins-second-job-build2.png" width="80%" height="80%" /></p>
<p><strong>5、启动第一个任务first_test</strong><br><img src="jenkins-first-job-run.png" width="80%" height="80%" /></p>
<p>控制台输出<br><img src="jenkins-first-job-console-output.png" width="80%" height="80%" /></p>
<p>可以看到second_test也成功了<br><img src="jenkins-second-test-status.png" width="80%" height="80%" /></p>
<p>前驱任务不稳定的条件下也被触发，可以使用Text Finder插件来构建不稳定条件</p>
<h2 id="Jenkins配置失败任务关联"><a href="#Jenkins配置失败任务关联" class="headerlink" title="Jenkins配置失败任务关联"></a>Jenkins配置失败任务关联</h2><p>前驱任务稳定成功的条件下被触发<br><img src="jenkins-job-failure.png" width="80%" height="80%" /></p>
<h1 id="Jenkins邮件报警"><a href="#Jenkins邮件报警" class="headerlink" title="Jenkins邮件报警"></a>Jenkins邮件报警</h1><p>Jenkins可以配置邮件通知，比如在Jenkins构建任务之后发送邮件通知，错误报警等</p>
<p>安装插件：Email Extension和Email Extension Template<br><img src="jenkins-email-extension.png" width="80%" height="80%" /></p>
<h2 id="Jenkins配置-Email"><a href="#Jenkins配置-Email" class="headerlink" title="Jenkins配置 Email"></a>Jenkins配置 Email</h2><p>进入Manage Jenkins -&gt; System Configuration -&gt; Configure System 配置系统管理员e-mail地址<br><img src="jenkins-email-address.png" width="80%" height="80%" /></p>
<p>配置Extended E-mail Notification，注意SMTP Password不是邮箱密码，为你的邮箱授权码<br><img src="jenkins-extend-email-notification.png" width="80%" height="80%" /><br>拉到最下面，配置邮件通知，配置完成后，可以发一个测试邮件，查看是否配置成功<br><img src="jenkins-email-notification.png" width="80%" height="80%" /></p>
<p><img src="jenkins-test-email.png" width="80%" height="80%" /></p>
<h2 id="Jenkins邮件模板配置"><a href="#Jenkins邮件模板配置" class="headerlink" title="Jenkins邮件模板配置"></a>Jenkins邮件模板配置</h2><p>Jenkins可以根据你配置的邮件模板格式来发送结果邮件，通过Jenkins的参数定制自己的Email模板，常用的参数key值如下:</p>
<ul>
<li>$BUILD_STATUS ：构建结果</li>
<li>$PROJECT_NAME ：构建脚本名称</li>
<li>$BUILD_NUMBER ：构建脚本编号</li>
<li>$JOB_DESCRIPTION ：构建项目描述</li>
<li>$CAUSE ：脚本启动原因</li>
<li>$BUILD_URL ：脚本构建详情URL地址</li>
</ul>
<p>Default Subject<br><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Jenkins构建提醒：$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!</span><br></pre></td></tr></table></figure></p>
<p>Default Content<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span>(自动化构建邮件，无需回复！)<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">项目名称：$PROJECT_NAME<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">项目描述：$JOB_DESCRIPTION<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">运行编号：$BUILD_NUMBER<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">运行结果：$BUILD_STATUS<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">触发原因：$&#123;CAUSE&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">构建日志地址：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">构建地址：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$BUILD_URL&quot;</span>&gt;</span>$BUILD_URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">详情：$&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure><br><img src="jenkins-email-content.png" width="80%" height="80%" /></p>
<h2 id="Jenkins报警规则"><a href="#Jenkins报警规则" class="headerlink" title="Jenkins报警规则"></a>Jenkins报警规则</h2><p>在模板设置的下方有个 Default Triggers 按钮，点击后，设定报警规则</p>
<p><img src="jenkins-email-default-triggers.png" width="80%" height="80%" /></p>
<p>在job的<strong>构建后操作</strong>步骤选择” Editable Email Notification “<br><img src="jenkins-job-email-notification.png" width="80%" height="80%" /></p>
<p><img src="jenkins-job-email-notification2.png" width="80%" height="80%" /></p>
<p>配置完成后，构建项目，查看控制台输出<br><img src="jenkins-email-build.png" width="80%" height="80%" /></p>
<p>查看邮箱，发送成功！<br><img src="jenkins-email.png" width="80%" height="80%" /></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试开发</category>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter性能监控系统：Jmeter + InfluxDB + Grafana</title>
    <url>/posts/performance-testing-for-performance-monitoring-system/</url>
    <content><![CDATA[<p>JMeter性能测试完成后，可以查看性能报告（参考<a href="https://blog.csdn.net/u010698107/article/details/113824731">JMeter性能测试：JMeter多用户并发模拟及压测结果分析</a>），如果想查看实时的性能，可以搭建一个性能监控平台。本文介绍如何搭建JMeter性能测试的性能监控系统。</p>
<a id="more"></a>
<h1 id="性能监控系统"><a href="#性能监控系统" class="headerlink" title="性能监控系统"></a>性能监控系统</h1><p>JMeter性能测试报告呈现的数据是某个时间段内的平均值，而性能监控平台可以<strong>实时</strong>的查看性能数据，而且有非常友好的图形界面。</p>
<h2 id="JMeter性能监控平台组成"><a href="#JMeter性能监控平台组成" class="headerlink" title="JMeter性能监控平台组成"></a>JMeter性能监控平台组成</h2><ul>
<li>JMeter：性能测试工具，产生压测数据。官网地址：<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a></li>
<li>InfluxDB：一种开源分布式时序数据库，使用Go语言开发，广泛应用于处理和分析资源监控数据，用于存储压测数据。官网地址：<a href="https://grafana.com/">https://grafana.com/</a></li>
<li>Grafana：开源的度量分析与可视化工具，有非常漂亮的图表展示功能、齐全的度量仪表盘和图形编辑器，支持不用种类的数据源（比如InfluxDB和Prometheus），用于将存储于 InfluxDB中的数据以图表的形式展示出来。官网地址：<a href="https://grafana.com/">https://grafana.com/</a></li>
</ul>
<h2 id="JMeter安装"><a href="#JMeter安装" class="headerlink" title="JMeter安装"></a>JMeter安装</h2><p>参考：<a href="https://blog.csdn.net/u010698107/article/details/113824981">JMeter性能测试：JMeter安装及脚本录制回放</a></p>
<h2 id="InfluxDB安装"><a href="#InfluxDB安装" class="headerlink" title="InfluxDB安装"></a>InfluxDB安装</h2><p>GitHub仓库地址：<a href="https://github.com/influxdata/influxdb">https://github.com/influxdata/influxdb</a><br>下载地址：<a href="https://portal.influxdata.com/downloads/">https://portal.influxdata.com/downloads/</a><br>参考文档：<a href="https://docs.influxdata.com/influxdb/v2.0/get-started/">https://docs.influxdata.com/influxdb/v2.0/get-started/</a></p>
<p>docker安装：<a href="https://hub.docker.com/_/influxdb">https://hub.docker.com/_/influxdb</a><br>拉取influxDB镜像：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker pull influxdb</span><br></pre></td></tr></table></figure></p>
<h2 id="Grafana安装"><a href="#Grafana安装" class="headerlink" title="Grafana安装"></a>Grafana安装</h2><p>官方文档：<a href="https://grafana.com/docs/grafana/latest/">https://grafana.com/docs/grafana/latest/</a><br><img src="grafana-install.png" width="80%" height="80%" /><br>Grafana dockerhub地址：<a href="https://hub.docker.com/r/grafana/grafana">https://hub.docker.com/r/grafana/grafana</a><br>拉取镜像：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker pull grafana/grafana</span><br></pre></td></tr></table></figure><br>查看镜像是否安装成功：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker images | egrep &#x27;grafana|influxdb&#x27; </span></span><br><span class="line">grafana/grafana              latest            13afb861111c   6 weeks ago     187MB</span><br><span class="line">influxdb                     latest            0454d5d215cc   6 weeks ago     307MB</span><br><span class="line">[root@server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h1 id="性能监控平台部署"><a href="#性能监控平台部署" class="headerlink" title="性能监控平台部署"></a>性能监控平台部署</h1><h2 id="部署-InfluxDB"><a href="#部署-InfluxDB" class="headerlink" title="部署 InfluxDB"></a>部署 InfluxDB</h2><p><strong>1. 新建容器网络</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker network create grafana</span><br></pre></td></tr></table></figure><br><strong>2. 运行容器</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker run -d -p 8086:8086 --name=influxdb --network=grafana -v $&#123;PWD&#125;/influxdb/:/var/lib/influxdb/ influxdb:latest</span></span><br><span class="line">aa079b4c24cfc95735613dc642c7d60064cf6c6e6c37ab561721de5825368c90</span><br></pre></td></tr></table></figure><br><strong>3. 创建数据库</strong><br>第一种方式 : HTTP请求方式<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -i -XPOST http://localhost:8086/query --data-urlencode <span class="string">&quot;q=CREATE DATABASE jmeter&quot;</span></span><br></pre></td></tr></table></figure><br>第二种方式：进入 influxdb容器终端创建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker exec -it influxdb influx</span></span><br><span class="line">Connected to http://localhost:8086 version 1.8.3</span><br><span class="line">InfluxDB shell version: 1.8.3</span><br><span class="line">&gt; show databases;</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">&gt; create database jmeter;</span><br><span class="line">&gt; </span><br><span class="line">&gt; show databases;</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">jmeter</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line">[root@server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<h2 id="部署-Grafana"><a href="#部署-Grafana" class="headerlink" title="部署 Grafana"></a>部署 Grafana</h2><p><strong>1. 运行容器</strong><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker run -d -p 3000:3000 --name=grafana --network=grafana grafana/grafana:latest</span></span><br><span class="line">4a329f916f3182a5a742d921d1ed438ba837f57ab3955a45ff34c8e45ce236c5</span><br><span class="line">[root@server ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS          PORTS                    NAMES</span><br><span class="line">4a329f916f31   grafana/grafana:latest   <span class="string">&quot;/run.sh&quot;</span>                37 seconds ago   Up 32 seconds   0.0.0.0:3000-&gt;3000/tcp   grafana</span><br><span class="line">aa079b4c24cf   influxdb:latest          <span class="string">&quot;/entrypoint.sh infl…&quot;</span>   19 minutes ago   Up 19 minutes   0.0.0.0:8086-&gt;8086/tcp   influxdb</span><br></pre></td></tr></table></figure></p>
<p><strong>2. 登录Grafana</strong><br>浏览器输入URL：<a href="http://192.168.30.8:3000/">http://192.168.30.8:3000/</a><br>其中192.168.30.8为我的服务器地址（部署Grafana的地址），用户名和密码为admin<br><img src="grafana-login.png" width="80%" height="80%" /><br>进入首页<br><img src="grafana-home.png" width="80%" height="80%" /></p>
<p><strong>3. 配置数据源</strong><br>点击Configuration -&gt; Data Sources -&gt; Add data source 选择InfluxDB<br><img src="grafana-data-sources.png" width="80%" height="80%" /></p>
<p>配置数据源：<br>1）URL设置为: <a href="http://influxdb:8086">http://influxdb:8086</a> ：容器名为influxdb，也可以使用容器的IP地址，查看IP地址方法：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@haiyong ~]<span class="comment"># docker exec -it influxdb sh</span></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.18.0.2      aa079b4c24cf</span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">[root@haiyong ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><br>或者使用 <code>docker inspect influxdb</code> 命令查看</p>
<p>2）Database为 jmeter<br>3）Min time interval: 5</p>
<p>设置完成后，点击Save&amp;Test，提示数据源设置成功<br><img src="grafana-data-sources-configure.png" width="80%" height="80%" /></p>
<p><strong>4. 选择显示面板</strong><br>显示面板可以自己开发，也可以使用其他开发好的面板，在<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a> 中搜索选择。我使用的是：<a href="https://grafana.com/grafana/dashboards/5496">https://grafana.com/grafana/dashboards/5496</a><br><img src="grafana-dashboards-jmeter.png" width="80%" height="80%" /></p>
<p>点击Dashboards -&gt; Manage -&gt; Import<br><img src="grafana-dashboards.png" width="80%" height="80%" /><br>输入jmeter dashboard url，点击load，配置DB name、Measurement name和Backend send interval<br><img src="grafana-dashboards-jmeter-import.png" width="80%" height="80%" /></p>
<p>点击Import<br><img src="grafana-jmeter-dashdoard.png" width="80%" height="80%" /></p>
<p>好了，InfluxDB和Grafana都配置成功了，下面配置JMeter进行压测</p>
<h1 id="JMeter性能监控"><a href="#JMeter性能监控" class="headerlink" title="JMeter性能监控"></a>JMeter性能监控</h1><p>在JMeter创建压测任务，创建方法可参考：<a href="https://blog.csdn.net/u010698107/article/details/113824731">JMeter性能测试：JMeter多用户并发模拟及压测结果分析</a></p>
<h2 id="JMeter配置监听器"><a href="#JMeter配置监听器" class="headerlink" title="JMeter配置监听器"></a>JMeter配置监听器</h2><p>添加Backend Listener，Backend Listener的作用是将压测数据传到 InfluxDB中，JMeter支持 InfluxDB和Graphite数据库<br>Thread Group -&gt; Add -&gt; Listenter -&gt; Backend Listener<br>Backend Listener应用选择InfluxDB<br><img src="jmeter-backend-listener.png" width="80%" height="80%" /></p>
<ul>
<li>配置influxdbUrl：<a href="http://192.168.30.8:8086/write?db=jmeter">http://192.168.30.8:8086/write?db=jmeter</a></li>
<li>application名设置为test666</li>
<li>measurement名设置为jmeter</li>
<li>summaryOnly：如果设置为false，在Grafana面板里面的Errors会显示错误的请求信息</li>
</ul>
<h2 id="配置Grafana"><a href="#配置Grafana" class="headerlink" title="配置Grafana"></a>配置Grafana</h2><p>application名和JMeter上设置相同的名称，设置刷新时间为5s<br><img src="jmeter-grafana.png" width="80%" height="80%" /></p>
<p>JMeter运行压测<br><img src="jmeter-grafana2.png" width="80%" height="80%" /></p>
<h2 id="查看InfluxDB数据库"><a href="#查看InfluxDB数据库" class="headerlink" title="查看InfluxDB数据库"></a>查看InfluxDB数据库</h2><p>压测数据存到了InfluxDB数据库里面，Grafana显示的就是这里面的数据。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># docker exec -it influxdb influx</span></span><br><span class="line"></span><br><span class="line">Connected to http://localhost:8086 version 1.8.3</span><br><span class="line">InfluxDB shell version: 1.8.3</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; use jmeter;</span><br><span class="line">Using database jmeter</span><br><span class="line">&gt; select * from jmeter <span class="built_in">limit</span> 3;</span><br><span class="line">name: jmeter</span><br><span class="line">time                application avg count countError endedT hit max maxAT meanAT min minAT pct90.0 pct95.0 pct99.0 rb responseCode responseMessage sb startedT statut transaction</span><br><span class="line">----                ----------- --- ----- ---------- ------ --- --- ----- ------ --- ----- ------- ------- ------- -- ------------ --------------- -- -------- ------ -----------</span><br><span class="line">1614435482883000000 test666                            0              0     0          0                                                                0               internal</span><br><span class="line">1614435483240000000 test666                            0              0     0          0                                                                1               internal</span><br><span class="line">1614435485281000000 test666                            0              0     0          0                                                                1               internal</span><br><span class="line">&gt; </span><br><span class="line">&gt; select * from events;</span><br><span class="line">name: events</span><br><span class="line">time                application text               title</span><br><span class="line">----                ----------- ----               -----</span><br><span class="line">1614437117192000000 test666     <span class="built_in">test</span> started       ApacheJMeter</span><br><span class="line">1614437488496000000 test666     <span class="built_in">test</span> ended         ApacheJMeter</span><br><span class="line">1614437552834000000 test666     <span class="built_in">test</span> started       ApacheJMeter</span><br><span class="line">1614437566732000000 test666     <span class="built_in">test</span> ended         ApacheJMeter</span><br><span class="line">1614437586119000000 test666     <span class="built_in">test</span> started       ApacheJMeter</span><br><span class="line">1614437722290000000 test666     <span class="built_in">test</span> ended         ApacheJMeter</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Grafana</tag>
        <tag>Jmeter</tag>
        <tag>InfluxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建持续集成平台Jenkins</title>
    <url>/posts/container-docker-for-jenkins-install/</url>
    <content><![CDATA[<p>本文介绍使用docker来安装Jenkins服务的步骤。</p>
<a id="more"></a>
<h1 id="Docker搭建Jenkins"><a href="#Docker搭建Jenkins" class="headerlink" title="Docker搭建Jenkins"></a>Docker搭建Jenkins</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>Jenkins docker hub地址: <a href="https://hub.docker.com/r/jenkins/jenkins">https://hub.docker.com/r/jenkins/jenkins</a><br><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server /]<span class="comment"># docker pull jenkins/jenkins</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from jenkins/jenkins</span><br><span class="line">3192219afd04: Already exists </span><br><span class="line">17c160265e75: Already exists </span><br><span class="line">cc4fe40d0e61: Already exists </span><br><span class="line">9d647f502a07: Already exists </span><br><span class="line">d108b8c498aa: Already exists </span><br><span class="line">1bfe918b8aa5: Already exists </span><br><span class="line">dafa1a7c0751: Already exists </span><br><span class="line">c69d355c63ac: Pull complete </span><br><span class="line">b15898bb1800: Pull complete </span><br><span class="line">a51ccfc981f7: Pull complete </span><br><span class="line">49f46bd4bf74: Pull complete </span><br><span class="line">efa670fd97de: Pull complete </span><br><span class="line">1565294bcba3: Pull complete </span><br><span class="line">4c51bcfbed1e: Pull complete </span><br><span class="line">49f4fafbfbf2: Pull complete </span><br><span class="line">28a75541fa5f: Pull complete </span><br><span class="line">c3c03c2d5564: Pull complete </span><br><span class="line">ace64d1af7cf: Pull complete </span><br><span class="line">f1960af3b8ab: Pull complete </span><br><span class="line">6fd1a5a6d017: Pull complete </span><br><span class="line">Digest: sha256:e4630b9084110ad05b4b51f5131d62161881216d60433d1f2074d522c3dcd6dc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> jenkins/jenkins:latest</span><br><span class="line">docker.io/jenkins/jenkins:latest</span><br></pre></td></tr></table></figure></p>
<h2 id="2-创建docker的文件影射卷"><a href="#2-创建docker的文件影射卷" class="headerlink" title="2. 创建docker的文件影射卷"></a>2. 创建docker的文件影射卷</h2><p>创建docker的文件影射卷，用于存储数据<br><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">[root@server tmp]<span class="comment"># docker volume create jenkins_test</span></span><br><span class="line">[root@server tmp]<span class="comment"># docker volume inspect jenkins_test</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2020-07-18T10:49:17+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/jenkins_test/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jenkins_test&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@server tmp]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-运行-创建实例"><a href="#3-运行-创建实例" class="headerlink" title="3. 运行: 创建实例"></a>3. 运行: 创建实例</h2><p>创建一个挂载目录jenkins，添加可执行权限：<code>chmod 777 jenkins</code></p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name=jenkins -d -p 8080:8080 -p 50000:50000 -v jenkins_test:/var/jenkins_home jenkins/jenkins</span></span><br></pre></td></tr></table></figure>
<p>运行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server /]<span class="comment"># docker run --name=jenkins -d -p 8080:8080 -p 50000:50000 -v jenkins_test:/var/jenkins_home jenkins/jenkins</span></span><br><span class="line">c7fb87aec99402febd95edddda5cf1dc7ad15437f674bf71a09692d93369ccb9</span><br><span class="line">[root@server /]<span class="comment"># </span></span><br><span class="line">[root@server /]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                                              NAMES</span><br><span class="line">c7fb87aec994   jenkins/jenkins   <span class="string">&quot;/sbin/tini -- /usr/…&quot;</span>   9 minutes ago   Up 9 minutes   0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:50000-&gt;50000/tcp   jenkins</span><br></pre></td></tr></table></figure><br>浏览器输入电脑IP地址+端口号：<a href="http://192.168.0.103:8080/">http://192.168.0.103:8080/</a></p>
<p><img src="jenkins-8080.png" width="80%" height="80%" /></p>
<p><code>docker logs -f jenkins</code>  查看输出日志<br><img src="jenkins-init-pwd.png" width="80%" height="80%" /></p>
<p>注意：jenkins默认启动后的时区为美国，通过以下命令启动中国时区：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先删除已经构建的jenkins实例</span></span><br><span class="line">docker rm -f jenkins</span><br><span class="line"><span class="comment"># 重新创建实例并设置时区</span></span><br><span class="line">docker run --name=jenkins -d -p 8080:8080 -p 50000:50000 -v jenkins_test:/var/jenkins_home -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai jenkins/jenkins</span><br></pre></td></tr></table></figure></p>
<h2 id="4-查看默认密码："><a href="#4-查看默认密码：" class="headerlink" title="4. 查看默认密码："></a>4. 查看默认密码：</h2><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<p><img src="jenkins-default-pwd.png" width="80%" height="80%" /></p>
<h2 id="5-输入密码"><a href="#5-输入密码" class="headerlink" title="5. 输入密码"></a>5. 输入密码</h2><p>等待初始化完成后，输入密码<br><img src="jenkins-input-pwd.png" width="80%" height="80%" /></p>
<h2 id="6-安装推荐的插件"><a href="#6-安装推荐的插件" class="headerlink" title="6. 安装推荐的插件"></a>6. 安装推荐的插件</h2><p><img src="jenkins-plugins1.png" width="80%" height="80%" /></p>
<h2 id="7-设置用户名密码"><a href="#7-设置用户名密码" class="headerlink" title="7. 设置用户名密码"></a>7. 设置用户名密码</h2><p><img src="jenkins-username-pwd.png" width="80%" height="80%" /></p>
<h2 id="8-Jenkins-URL配置"><a href="#8-Jenkins-URL配置" class="headerlink" title="8. Jenkins URL配置"></a>8. Jenkins URL配置</h2><p><img src="jenkins-url.png" width="80%" height="80%" /></p>
<p>配置成功后，进入欢迎界面<br><img src="jenkins-home-page.png" width="80%" height="80%" /></p>
<h1 id="Windows安装Jenkins"><a href="#Windows安装Jenkins" class="headerlink" title="Windows安装Jenkins"></a>Windows安装Jenkins</h1><p>war文件启动方法</p>
<p>下载地址：<a href="https://www.jenkins.io/download/">https://www.jenkins.io/download/</a><br><img src="jenkins-war.png" width="80%" height="80%" /></p>
<p>进入war包所在路径执行命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar jenkins.war --httpPort=8081</span><br></pre></td></tr></table></figure></p>
<p>可以直接下载jenkins.msi文件安装<br><img src="jenkins-windows.png" width="80%" height="80%" /></p>
<p>配置方法和Linux类似</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试开发</category>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>容器技术介绍：Docker常用命令</title>
    <url>/posts/container-docker-command/</url>
    <content><![CDATA[<p>本文介绍常用Docker命令，以搭建Web服务器Nginx为例介绍docker相关命令。</p>
<a id="more"></a>
<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p>查看Docker版本信息:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br></pre></td></tr></table></figure><br>查看Docker系统信息:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure><br>从Docker Hub查找镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker search 镜像名</span><br><span class="line"><span class="comment"># 搜索nginx镜像</span></span><br><span class="line">$ docker search nginx</span><br></pre></td></tr></table></figure></p>
<p>拉取镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a076a628af6f: Pull complete </span><br><span class="line">0732ab25fa22: Pull complete </span><br><span class="line">d7f36f6fe38f: Pull complete </span><br><span class="line">f72584a26f32: Pull complete </span><br><span class="line">7125e4df9063: Pull complete </span><br><span class="line">Digest: sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@server server]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<p>下载指定版本的镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker pull nginx:1.19.6</span><br></pre></td></tr></table></figure><br>镜像的可用版本可在docker hub中查看：<a href="https://hub.docker.com/">https://hub.docker.com/</a> ：<br><img src="docker-nginx-tag.png" width="80%" height="80%" /></p>
<h1 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h1><p>查看所有已下载镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment">#  docker images</span></span><br><span class="line">REPOSITORY                   TAG               IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx                        latest            f6d0b4767a6c   3 weeks ago     133MB</span><br><span class="line">app                          v1                db282454f6b3   7 months ago    83.1MB</span><br><span class="line">&lt;none&gt;                       &lt;none&gt;            1acc89e1a291   7 months ago    152MB</span><br><span class="line">bitnami/mariadb              latest            08498502c6b7   7 months ago    319MB</span><br><span class="line">bitnami/testlink             latest            41feee91d195   7 months ago    826MB</span><br><span class="line">prom/prometheus              latest            39d1866a438a   7 months ago    142MB</span><br><span class="line">mysql                        5.7               9cfcce23593a   7 months ago    448MB</span><br><span class="line">python                       3.7-alpine        6a5ca85ed89b   8 months ago    72.5MB</span><br><span class="line">jenkins/jenkins              lts               5d1103b93f92   8 months ago    656MB</span><br><span class="line">[root@server server]<span class="comment">#  </span></span><br></pre></td></tr></table></figure></p>
<p>删除镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker rmi nginx:latest</span><br><span class="line"><span class="comment"># 或者使用IMAGE ID</span></span><br><span class="line">$ docker rmi f6d0b4767a6c</span><br><span class="line"><span class="comment"># 强制删除镜像</span></span><br><span class="line">$ docker rmi -f f6d0b4767a6c</span><br></pre></td></tr></table></figure></p>
<p>标记本地镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker tag nginx:latest nginx:<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 修改镜像名称</span></span><br><span class="line">$ docker tag nginx:latest nginx_test</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                   TAG               IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx                        latest            f6d0b4767a6c   3 weeks ago     133MB</span><br><span class="line">nginx                        <span class="built_in">test</span>              f6d0b4767a6c   3 weeks ago     133MB</span><br><span class="line">[root@server server]<span class="comment"># docker tag nginx:latest nginx_test</span></span><br><span class="line">REPOSITORY                   TAG               IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx                        latest            f6d0b4767a6c   3 weeks ago     133MB</span><br><span class="line">nginx                        <span class="built_in">test</span>              f6d0b4767a6c   3 weeks ago     133MB</span><br><span class="line">nginx_test                   latest            f6d0b4767a6c   3 weeks ago     133MB</span><br><span class="line">[root@server server]<span class="comment"># docker rmi nginx:test</span></span><br><span class="line">Untagged: nginx:<span class="built_in">test</span></span><br><span class="line">[root@server server]<span class="comment"># docker rmi nginx_test:latest</span></span><br><span class="line">Untagged: nginx_test:latest</span><br></pre></td></tr></table></figure></p>
<p>将指定镜像打包成 tar 归档文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker save nginx &gt; nginx_test.tar</span><br><span class="line">$ docker save nginx -o nginx_test.tar</span><br></pre></td></tr></table></figure><br>导入打包的镜像<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker load &lt; nginx_test.tar</span><br></pre></td></tr></table></figure></p>
<p>查看镜像创建历史<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> nginx</span><br></pre></td></tr></table></figure></p>
<h1 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h1><p>运行容器<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启nginx服务</span></span><br><span class="line">$ docker run -p 80:80 -d --name=nginx nginx:latest </span><br></pre></td></tr></table></figure><br><strong>-d:</strong> 后台运行容器，并返回容器ID<br><strong>—name:</strong> 为容器指定一个名称<br><strong>-p:</strong> 指定端口映射：主机(宿主)端口:容器端口<br><strong>-v：</strong>挂载目录，将主机的目录映射到容器目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker run -p 80:80 -d --name=nginx nginx:latest</span></span><br><span class="line">651ce76dd80fa58e3cdf2abeb9c08662bfcf68176738bb3881d0bcb851aa1a11</span><br><span class="line">[root@server server]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>浏览器输入服务器IP地址<br><img src="docker-nginx-welcome.png" width="80%" height="80%" /></p>
<p>挂载目录<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将主机目录/home/server/nginx/html映射到容器目录/usr/share/nginx/html</span></span><br><span class="line">$ docker run -p 80:80 -d --name=nginx -v /home/server/nginx/html:/usr/share/nginx/html nginx:latest </span><br></pre></td></tr></table></figure><br>在主机目录/home/server/nginx/html下新建一个index.html文件，输入内容：<code>&lt;h1&gt;Hello World !&lt;/h1&gt;</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># cd /home/haiyong/nginx/html</span></span><br><span class="line">[root@server html]<span class="comment"># vim index.html</span></span><br><span class="line">[root@server html]<span class="comment"># cat index.html </span></span><br><span class="line">&lt;h1&gt;Hello World !&lt;/h1&gt;</span><br><span class="line">[root@server html]<span class="comment"># </span></span><br></pre></td></tr></table></figure><br>浏览器刷新<br><img src="docker-nginx-index.png" width="80%" height="80%" /></p>
<p>查看运行的容器:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                NAMES</span><br><span class="line">651ce76dd80f   nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   6 minutes ago   Up 6 minutes   0.0.0.0:80-&gt;80/tcp   nginx</span><br><span class="line">[root@server server]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS                    PORTS                                              NAMES</span><br><span class="line">651ce76dd80f   nginx:latest          <span class="string">&quot;/docker-entrypoint.…&quot;</span>   8 minutes ago   Up 7 minutes              0.0.0.0:80-&gt;80/tcp                                 nginx</span><br><span class="line">3bab7ac2a2af   jenkins/jenkins:lts   <span class="string">&quot;/sbin/tini -- /usr/…&quot;</span>   6 months ago    Exited (255) 8 days ago   0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:50000-&gt;50000/tcp   jenkins</span><br><span class="line">2c5ae10a7543   mysql:5.7             <span class="string">&quot;docker-entrypoint.s…&quot;</span>   6 months ago    Exited (255) 8 days ago   0.0.0.0:3306-&gt;3306/tcp, 33060/tcp                  mysql-test</span><br><span class="line">[root@server server]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>查看容器中运行的进程<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker top nginx</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker top nginx</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                118225              118205              0                   22:58               ?                   00:00:00            nginx: master process nginx -g daemon off;</span><br><span class="line">101                 118284              118225              0                   22:58               ?                   00:00:00            nginx: worker process</span><br></pre></td></tr></table></figure></p>
<p>实时监控容器资源消耗<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker stats nginx</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker stats nginx</span></span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS</span><br><span class="line">651ce76dd80f   nginx     0.00%     1.492MiB / 1.777GiB   0.08%     3.97kB / 3.66kB   73.7kB / 24.6kB   2</span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS</span><br><span class="line">651ce76dd80f   nginx     0.00%     1.492MiB / 1.777GiB   0.08%     3.97kB / 3.66kB   73.7kB / 24.6kB   2</span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS</span><br><span class="line">651ce76dd80f   nginx     0.00%     1.492MiB / 1.777GiB   0.08%     3.97kB / 3.66kB   73.7kB / 24.6kB   2</span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS</span><br></pre></td></tr></table></figure></p>
<p>查看容器日志<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker logs -f nginx</span><br></pre></td></tr></table></figure><br>获取容器/镜像的元信息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker inspect nginx</span><br><span class="line">$ docker inspect -f <span class="string">&#x27;&#123;&#123;.Id&#125;&#125;&#x27;</span> nginx</span><br></pre></td></tr></table></figure><br><strong>-f ：</strong> 格式化字符串，输出格式使用Go语言模板。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker inspect nginx</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;651ce76dd80fa58e3cdf2abeb9c08662bfcf68176738bb3881d0bcb851aa1a11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-02-02T14:58:47.047835997Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;/docker-entrypoint.sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">            <span class="string">&quot;daemon off;&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 118225,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2021-02-02T14:58:48.290043299Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">............................</span><br><span class="line">[root@server server]<span class="comment"># docker inspect -f &#x27;&#123;&#123;.Id&#125;&#125;&#x27; nginx</span></span><br><span class="line">651ce76dd80fa58e3cdf2abeb9c08662bfcf68176738bb3881d0bcb851aa1a11</span><br><span class="line"></span><br><span class="line">[root@server server]<span class="comment"># docker inspect -f &#x27;&#123;&#123;.State.StartedAt&#125;&#125;&#x27; nginx</span></span><br><span class="line">2021-02-02T14:58:48.290043299Z</span><br></pre></td></tr></table></figure></p>
<p><code>docker inspect</code>返回的容器信息中记录了容器的磁盘挂载目录，可以使用grep命令筛选出<code>Mounts</code>字段内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker inspect nginx | grep Mounts -A 10</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/server/nginx/html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/usr/share/nginx/html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br></pre></td></tr></table></figure>
<p>查看容器内文件结构及更改</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker diff nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker diff webserver</span></span><br><span class="line">C /etc</span><br><span class="line">C /etc/nginx</span><br><span class="line">C /etc/nginx/conf.d</span><br><span class="line">C /etc/nginx/conf.d/default.conf</span><br><span class="line">C /root</span><br><span class="line">A /root/.bash_history</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">C /run</span><br><span class="line">A /run/nginx.pid</span><br></pre></td></tr></table></figure>
<p><strong>A：</strong>添加了文件或目录<br><strong>B：</strong>文件或目录被删除<br><strong>C：</strong>文件或目录被修改</p>
<p>启动，停止容器<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动已经被停止的容器</span></span><br><span class="line">$ docker start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">$ docker restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停容器中所有的进程</span></span><br><span class="line">$ docker pause nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复容器中所有的进程</span></span><br><span class="line">$ docker unpause nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉一个运行中的容器</span></span><br><span class="line">$ docker <span class="built_in">kill</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止一个运行中的容器</span></span><br><span class="line">$ docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">$ docker rm nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除容器</span></span><br><span class="line">$ docker rm -f nginx</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS        PORTS                NAMES</span><br><span class="line">651ce76dd80f   nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   21 hours ago   Up 21 hours   0.0.0.0:80-&gt;80/tcp   nginx</span><br><span class="line">[root@server server]<span class="comment"># docker stop nginx</span></span><br><span class="line">nginx</span><br><span class="line">[root@server server]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@server server]<span class="comment"># docker start nginx</span></span><br><span class="line">nginx</span><br><span class="line">[root@server server]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS        PORTS                NAMES</span><br><span class="line">651ce76dd80f   nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   21 hours ago   Up 1 second   0.0.0.0:80-&gt;80/tcp   nginx</span><br><span class="line">[root@server server]<span class="comment"># docker rm nginx</span></span><br><span class="line">Error response from daemon: You cannot remove a running container 651ce76dd80fa58e3cdf2abeb9c08662bfcf68176738bb3881d0bcb851aa1a11. Stop the container before attempting removal or force remove</span><br><span class="line">[root@server server]<span class="comment"># docker stop nginx</span></span><br><span class="line">nginx</span><br><span class="line">[root@server server]<span class="comment"># docker rm nginx  </span></span><br><span class="line">nginx</span><br><span class="line">[root@server server]<span class="comment"># docker start nginx</span></span><br><span class="line">Error response from daemon: No such container: nginx</span><br><span class="line">Error: failed to start containers: nginx</span><br><span class="line">[root@server server]<span class="comment"># docker run -p 80:80 -d --name=nginx nginx:latest </span></span><br><span class="line">e0abbac7464794b5f2fbd328b841aaa83ffeff6c2072324b584cbbee4c68c36f</span><br></pre></td></tr></table></figure>
<h1 id="容器交互"><a href="#容器交互" class="headerlink" title="容器交互"></a>容器交互</h1><p>在容器中执行命令<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it nginx ls</span><br><span class="line"><span class="comment"># 开启一个交互模式的终端，exit退出</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it nginx bash</span><br><span class="line"><span class="comment"># 使用root账号进入容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it -u root nginx bash</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server server]<span class="comment"># docker exec -it nginx ls     </span></span><br><span class="line">bin   docker-entrypoint.d   home   media  proc  sbin  tmp</span><br><span class="line">boot  docker-entrypoint.sh  lib    mnt    root  srv   usr</span><br><span class="line">dev   etc                   lib64  opt    run   sys   var</span><br><span class="line">[root@server server]<span class="comment"># docker exec -it nginx echo &quot;test&quot;</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@server server]<span class="comment"># docker exec -it nginx bash</span></span><br><span class="line">root@ad4c10c7cec2:/<span class="comment"># ls</span></span><br><span class="line">bin   dev                  docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  docker-entrypoint.d  etc                   lib   media  opt  root  sbin  sys  usr</span><br><span class="line">root@ad4c10c7cec2:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@haiyong haiyong]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>复制文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容器文件拷贝到主机</span></span><br><span class="line">$ docker cp nginx:/etc/hosts hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将主机文件拷贝到容器中</span></span><br><span class="line">$ docker cp hosts nginx:/etc/hosts</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>测试开发</category>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter性能测试：JMeter多用户并发模拟及压测结果分析</title>
    <url>/posts/performance-testing-jmeter-concurrency/</url>
    <content><![CDATA[<p>JMeter多用户并发模拟</p>
<a id="more"></a>
<h1 id="JMeter设置"><a href="#JMeter设置" class="headerlink" title="JMeter设置"></a>JMeter设置</h1><p>多用户并发数的多少与计算机内存有关，设置 jmeter.bat (Windows) 或者 jmeter.sh (Linux)：<br>Windows设置：编辑jmeter.bat文件，设置HEAP<br><img src="jmeter-heap-windows.png" width="80%" height="80%" /></p>
<p>Linux设置：编辑jmeter.sh文件，设置变量，<code>JVM_ARGS=&quot;-Xms1g-Xmx2g&quot;</code></p>
<p>以Windows为例，设置<code>set HEAP=-Xms1g -Xmx2g -XX:MaxMetaspaceSize=256m</code> ，重新开启JMeter，打开Java监控工具Jconsole：<br><img src="jmeter-jconsole.png" width="80%" height="80%" /><br><img src="jmeter-jconsole-vm.png" width="80%" height="80%" /><br>参数设置生效。</p>
<h1 id="JMeter线程组"><a href="#JMeter线程组" class="headerlink" title="JMeter线程组"></a>JMeter线程组</h1><p>JMeter性能测试任务都是基于线程组的，是性能测试的资源调度池，控制性能测试的运行调度、虚拟用户数(并发数)、执行策略。JMeter线程组主要有三类：</p>
<ul>
<li>setUp Thread Group：普通线程组执行之前执行，相当于pytest测试框架的setup方法。</li>
<li>Thread Group：普通线程</li>
<li>tearDown Thread Group：普通线程组之后执行。</li>
</ul>
<p><img src="jmeter-threadgroup.png" width="80%" height="80%" /></p>
<h1 id="JMeter压测实例"><a href="#JMeter压测实例" class="headerlink" title="JMeter压测实例"></a>JMeter压测实例</h1><p>首先使用python开启一个http服务:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(base) C:\Users\10287&gt;python -m http.server 80</span><br><span class="line">Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>新建线程组，设置线程数，点击运行<br><img src="jmeter-threadgroup-http.png" width="80%" height="80%" /></p>
<h2 id="View-Results-Tree"><a href="#View-Results-Tree" class="headerlink" title="View Results Tree"></a>View Results Tree</h2><p>Thread Group -&gt; Add -&gt; Listenter -&gt; View Results Tree<br><img src="jmeter-view-tree.png" width="80%" height="80%" /><br>支持各种测试器：正则表达式、CSS选择器、XPath测试、JSON Tester等</p>
<h2 id="Aggregate-Report"><a href="#Aggregate-Report" class="headerlink" title="Aggregate Report"></a>Aggregate Report</h2><p>查看Aggregate Report，聚合报告<br>Thread Group -&gt; Add -&gt; Listenter -&gt; Aggregate Report<br><img src="jmeter-aggregate-report.png" width="80%" height="80%" /></p>
<p>参数:</p>
<ul>
<li>Average：平均响应时间，所有请求的平均响应时间。</li>
<li>Median：中位数，50%的用户响应时间不超过这个值。</li>
<li>99%line：99%的用户响应时间不超过这个值。</li>
<li>Error%：异常百分比。(错误请求的数量/请求的总数)</li>
<li>Throughput：吞吐量，默认情况下每秒完成的请求数。</li>
<li>Received KB/sec：接收数据。</li>
</ul>
<h1 id="命令行方式执行压测"><a href="#命令行方式执行压测" class="headerlink" title="命令行方式执行压测"></a>命令行方式执行压测</h1><p>使用图形界面会消耗部分内存，可以直接使用命令行方式运行。</p>
<p>先保存压测脚本为test_http.jmx，执行如下命令：<br><code>jmeter.bat -n -t test_http.jmx -l test_result.jtl</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\testing_tools\apache-jmeter-5.3\bin&gt;jmeter.bat -n -t D:/ProgramWorkspace/TestingDemo/test_jmeter/test_http.jmx -l result.jtl</span><br><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using D:/ProgramWorkspace/TestingDemo/test_jmeter/test_http.jmx</span><br><span class="line">Starting standalone <span class="built_in">test</span> @ Sun Jan 24 17:48:59 CST 2021 (1611481739136)</span><br><span class="line">Waiting <span class="keyword">for</span> possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">summary +     23 <span class="keyword">in</span> 00:00:01 =   43.6/s Avg:    35 Min:    11 Max:    91 Err:     0 (0.00%) Active: 3 Started: 25 Finished: 22</span><br><span class="line">summary +     27 <span class="keyword">in</span> 00:00:01 =   52.7/s Avg:    68 Min:     9 Max:   612 Err:     0 (0.00%) Active: 0 Started: 50 Finished: 50</span><br><span class="line">summary =     50 <span class="keyword">in</span> 00:00:01 =   47.9/s Avg:    53 Min:     9 Max:   612 Err:     0 (0.00%)</span><br><span class="line">Tidying up ...    @ Sun Jan 24 17:49:00 CST 2021 (1611481740529)</span><br><span class="line">... end of run</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="jtl文件解析"><a href="#jtl文件解析" class="headerlink" title="jtl文件解析"></a>jtl文件解析</h2><p>解析命令行方式运行脚本生成的 jtl文件：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jmeter.bat -g result.jtl -e -o D:/resultReport</span><br></pre></td></tr></table></figure><br><img src="jmeter-jtl-report.png" width="80%" height="80%" /></p>
<p>打开index.html文件，可以查看性能报告：<br><img src="jmeter-jtl-report2.png" width="80%" height="80%" /></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium/appium 等待方式介绍</title>
    <url>/posts/selenium-appium-webdriver-wait/</url>
    <content><![CDATA[<p>UI自动化测试过程中，执行某个动作后，页面元素的加载（ajax动态加载）需要一定的时间，selenium WebDriver提供了几种等待方式，Appium也继承了WebDriver API，所以selenium和appium 等待的实现方式相同。下面介绍WebDriver的等待方式。<br><a id="more"></a></p>
<h1 id="HTML-页面加载"><a href="#HTML-页面加载" class="headerlink" title="HTML 页面加载"></a>HTML 页面加载</h1><p>HTML 页面加载、解析过程：</p>
<ol>
<li>浏览器向服务器发起请求，浏览器先查询本地（浏览器或者本机）DNS缓存，如果没有，向DNS 服务器发起 域名解析请求</li>
<li>浏览器拿到域名对应的IP地址后，建立与服务器的 TCP/IP 连接（3次握手，断开连接进行4次挥手）</li>
<li>向服务器发送 http / https 请求，服务器进行后台内部处理，进行HTTP响应，返回状态和浏览器请求的内容</li>
<li>浏览器接收到http数据包后进行解析<ul>
<li>解析HTML页面代码，遇到静态资源（js、css、图片等）则发起请求，过程和前面的步骤一样。</li>
<li>顺序是从上到下进行加载、渲染，下载和渲染同时进行</li>
<li>js文件的加载会<strong>阻塞</strong>HTML内容的加载</li>
<li>CSS样式表下载完成之后会跟之前的样式表一起进行解析，会对之前的元素重新渲染</li>
</ul>
</li>
</ol>
<p>渲染过程主要包括以下步骤：</p>
<ul>
<li>解析HTML，生成 DOM Tree</li>
<li>同时解析CSS，生成CSS规则树CSSOM</li>
<li>合并 DOM 和 CSSOM，生成 Render Tree</li>
<li>根据Render Tree进行渲染和展示</li>
<li>如果遇到Javascript代码会阻塞渲染，JS执行完成后，浏览器重新渲染</li>
<li>遇到<code>&lt;/html&gt;</code>后结束渲染。</li>
</ul>
<h1 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h1><p>强制等待，线程休眠一定时间，一般不推荐：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h1><p>在服务端等待，设置一个等待时间，轮询查找(默认0.5秒)元素是否出现，如果达到设置的等待时间还没出现就抛出异常。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.implicitly_wait(TIMEOUT) <span class="comment"># TIMEOUT单位为秒</span></span><br></pre></td></tr></table></figure></p>
<h1 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h1><p>在客户端等待，在代码中自定义等待条件，可针对于某个特定的元素或者条件设置等待时间，满足条件时继续执行代码。使用WebDriverWait类和expected_conditions类来实现，WebDriverWait类包括了until()和 until_not两种方法，通过判断条件是否为真进行等待，每隔一段时间(默认为0.5秒)进行条件判断，如果条件成立，则执行下一步,否则继续等待，直到超过设置的最长时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WebDriverWait(self.driver, timeout, poll_frequency=<span class="number">0.5</span>, ignored_exceptions=<span class="literal">None</span>).until(expected_conditions. visibility_of_element_located(LOCATOR))</span><br></pre></td></tr></table></figure>
<ul>
<li>timeout：超时时间，单位为秒</li>
<li>poll_frequency：检测的间隔步长，默认为0.5s</li>
<li>ignored_exceptions：超时后的抛出的异常信息，默认抛出NoSuchElementExeception异常。</li>
<li>until：当某元素出现或什么条件成立则继续执行。</li>
<li>until_not：与until相反, 当某元素消失或什么条件不成立则继续执行。</li>
</ul>
<p>expected_conditions类提供了很多期望条件：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title_is</span><br><span class="line">title_contains</span><br><span class="line">presence_of_element_located</span><br><span class="line">visibility_of_element_located</span><br><span class="line">visibility_of</span><br><span class="line">presence_of_all_elements_located</span><br><span class="line">text_to_be_present_in_element</span><br><span class="line">text_to_be_present_in_element_value</span><br><span class="line">frame_to_be_available_and_switch_to_it</span><br><span class="line">invisibility_of_element_located</span><br><span class="line">element_to_be_clickable</span><br><span class="line">staleness_of</span><br><span class="line">element_to_be_selected</span><br><span class="line">element_located_to_be_selected</span><br><span class="line">element_selection_state_to_be</span><br><span class="line">element_located_selection_state_to_be</span><br><span class="line">alert_is_present</span><br></pre></td></tr></table></figure></p>
<p>也可以使用lambda表达式<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver, timeout).until(<span class="keyword">lambda</span> x:x.find_element_by_id(<span class="string">&quot;someld&quot;</span>) </span><br></pre></td></tr></table></figure><br>示例代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_wait</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.find_element(By.XPATH,<span class="string">&#x27;the_xpath_path1&#x27;</span>).click()</span><br><span class="line">    <span class="comment">## 方法1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># 定义等待条件</span></span><br><span class="line">    	<span class="keyword">return</span> self.driver.find_elements(By.XPATH,<span class="string">&#x27;the_xpath_path2&#x27;</span>)</span><br><span class="line">    WebDriverWait(self.driver, <span class="number">10</span>).until(wait)</span><br><span class="line">    WebDriverWait(self.driver, <span class="number">10</span>).until_not(wait)    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 方法2</span></span><br><span class="line">    WebDriverWait(self.driver, <span class="number">10</span>).until(expected_conditions.presence_of_element_located(By.XPATH, <span class="string">&#x27;the_xpath_path2&#x27;</span>))</span><br><span class="line">    <span class="comment">##  方法3</span></span><br><span class="line">    WebDriverWait(self.driver, <span class="number">10</span>).until(<span class="keyword">lambda</span> x:x.find_element_by_id(<span class="string">&quot;someld&quot;</span>)	</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>WebDriver隐式等待和显式等待可参考官方文档：<a href="https://selenium-python.readthedocs.io/waits.html">https://selenium-python.readthedocs.io/waits.html</a>， 本文介绍了三种等待方式：</p>
<ul>
<li>强制等待：一般不推荐</li>
<li>隐式等待：尽量默认都加上，时间限定在3-6s，不要太长。</li>
<li>显式等待：用来处理隐式等待无法解决的一些问题，显式等待时间可以设置长一点</li>
</ul>
<p>除了上面介绍的三种等待方式，WebDriver还有两个等待方法：set_script_timeout和set_page_load_timeout。<br>set_script_timeout设置等待execute_async_script（Javascript / AJAX 调用 ）执行完成，set_page_load_timeout设置等待页面加载完成。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.set_script_timeout(<span class="number">5</span>)</span><br><span class="line">driver.set_page_load_timeout(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>selenium</tag>
        <tag>WebDriverWait</tag>
        <tag>UI自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter性能测试：JMeter安装及脚本录制回放</title>
    <url>/posts/performance-testing-using-jmeter/</url>
    <content><![CDATA[<p>除了功能测试以外，服务端的性能测试也非常重要，比如产品功能测试通过，那么在大负载的情况下，可能会导致服务器崩溃，影响用户体验。虽然不同服务对负载要求不同，但性能测试还是很有必要的。本文简要介绍性能测试相关知识，然后介绍如何使用JMeter来进行性能测试。<br><a id="more"></a></p>
<h1 id="性能测试基本概念"><a href="#性能测试基本概念" class="headerlink" title="性能测试基本概念"></a>性能测试基本概念</h1><h2 id="为什么要做性能测试"><a href="#为什么要做性能测试" class="headerlink" title="为什么要做性能测试?"></a>为什么要做性能测试?</h2><ul>
<li>模拟真实的用户场景，提前发现并修复问题。</li>
<li>最小化成本：新服务上线不知道部署多少台服务器。</li>
<li>评估应用系统性能，给运维做系统容量规划提供依据、给开发提供应用调优参考。</li>
</ul>
<h2 id="什么是性能测试"><a href="#什么是性能测试" class="headerlink" title="什么是性能测试?"></a>什么是性能测试?</h2><p>性能测试模拟多个用户的操作对服务器硬件性能的影响，用于检查软件和硬件的响应速度、稳定性、可靠性和资源使用等情况。常见性能指标包括：</p>
<ul>
<li>TPS(Transaction per Second)：每秒事物处理能力</li>
<li>RT(Response Time)：响应时间</li>
<li>延迟</li>
<li>吞吐量</li>
<li>并发用户数</li>
<li>……</li>
</ul>
<p>负载测试是一种性能测试，检查系统在固定时间段内为大量并发虚拟用户提供服务下的运行情况。压力测试通过在极端负载下测试系统的上限。</p>
<h1 id="常见性能测试工具"><a href="#常见性能测试工具" class="headerlink" title="常见性能测试工具"></a>常见性能测试工具</h1><p>常见的性能测试工具如下，其中JMeter 是应用最广泛的。</p>
<ul>
<li>Apache JMeter：开源免费，使用Java语言开发，有很多第三方插件，具有脚本录制功能，<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a></li>
<li>apache bench: ab工具是apache HTTP服务器性能测试工具，<a href="http://httpd.apache.org/docs/2.4/programs/ab.html">http://httpd.apache.org/docs/2.4/programs/ab.html</a></li>
<li>LoadRunner：收费，使用C语言开发。</li>
<li>Locust：开源免费，使用Python语言开发。<a href="https://www.locust.io/">https://www.locust.io/</a></li>
<li>nGrinder：Naver公司基于 Grinder开发的性能测试平台。 Grinder是一个能运行 jython(在JVM上运行的 Python)、 groovy编写测试脚本的应用程序。免费软件，使用Java语言开发。</li>
</ul>
<h1 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h1><p>Apache JMeter开源免费，使用Java开发，可用于测试Web性能，也可以测试数据库性能（通过JDBC）。 支持插件开发扩展功能，可以二次开发定制协议，支持录制、回放方式获取测试脚本，下面介绍JMeter压测脚本的录制与编写。</p>
<h2 id="JMeter安装-windows"><a href="#JMeter安装-windows" class="headerlink" title="JMeter安装-windows"></a>JMeter安装-windows</h2><ol>
<li><p>安装Java jdk<br>下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><br>加入环境变量，具体安装过程参考：<strong>App自动化测试 | Appium 介绍及环境安装</strong><br><img src="java-sdk.png" alt="png"></p>
</li>
<li><p>JMeter下载安装<br>下载地址：<a href="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi</a><br>下载后解压缩，双击打开jmeter.bat批处理文件打开JMeter<br><img src="jmeter.png" alt="png"></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\testing_tools\apache-jmeter-5.3\bin&gt;jmeter -v</span><br><span class="line">    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____</span><br><span class="line">   / \  |  _ \ / \  / ___| | | | ____|     | |  \/  | ____|_   _| ____|  _ \</span><br><span class="line">  / _ \ | |_) / _ \| |   | |_| |  _|    _  | | |\/| |  _|   | | |  _| | |_) |</span><br><span class="line"> / ___ \|  __/ ___ \ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ &lt;</span><br><span class="line">/_/   \_\_| /_/   \_\____|_| |_|_____|  \___/|_|  |_|_____| |_| |_____|_| \_\ 5.3</span><br><span class="line"></span><br><span class="line">Copyright (c) 1999-2020 The Apache Software Foundation</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="JMeter插件安装"><a href="#JMeter插件安装" class="headerlink" title="JMeter插件安装"></a>JMeter插件安装</h2><p>下载 jmeter-plugins.org：<a href="https://jmeter-plugins.org/install/Install/">https://jmeter-plugins.org/install/Install/</a><br><img src="jmeter-plugin.png" width="80%" height="80%" /></p>
<p>将jmeter-plugins-manager-1.6.jar 文件放到JMeter lib/ext目录下，重新打开JMeter，在Options中可以看到Plugins Manager选项。<br><img src="jmeter-plugins-manager.png" width="80%" height="80%" /><br>安装可用插件<br><img src="jmeter-plugin-install.png" width="80%" height="80%" /></p>
<h2 id="JMeter脚本录制"><a href="#JMeter脚本录制" class="headerlink" title="JMeter脚本录制"></a>JMeter脚本录制</h2><p>添加线程组<br><img src="jmeter-thread-group.png" alt="img"><br>添加Recording Controller<br>Test Plan -&gt; Thread Group -&gt; Add -&gt; Logic Controller -&gt; Recording Controller<br><img src="jmeter-logic-controller.png" alt="img"><br>添加HTTp(s) Test Script Recorder （代理服务）<br>Test Plan -&gt; Add -&gt; Non-Test Elements -&gt; HTTp(s) Test Script Recorder<br><img src="jmeter-test-script-recorder.png" alt="img"></p>
<p>浏览器配置代理<br>使用SwitchyOmega插件添加JMeter代理<br><img src="jmeter-switchyomega.png" alt="img"></p>
<p>配置HTTp(s) Test Script Recorder，点击Start<br><img src="jmeter-test-script-recorder2.png" alt="img"><br>弹出提示框，需要安装证书（HTTPs请求抓取需要证书）<br><img src="jmeter-ca.png" alt="img"><br>在JMeter目录下会生成两个证书文件，点击证书安装<br><img src="jmeter-ca2.png" alt="img"><br>证书安装成功后，浏览器就可以访问百度了。<br>浏览器刷新百度页面，在JMeter页面可以看到抓取到的请求<br><img src="jmeter-baidu.png" alt="img"><br>可以看到有各种请求数据，我们可以对这些进行过滤，比如过滤gif、png等文件<br>选择HTTp(s) Test Script Recorder，点击Requests Filtering，添加过滤条件（包含或者排除），过滤条件使用正则表达式。<br><img src="jmeter-filter.png" alt="img"></p>
<p>录制完成后，点击停止录制<br><img src="jmeter-stop.png" alt="img"></p>
<p>Thread Group -&gt; Add -&gt; Listenter -&gt; View Results Tree<br><img src="jmeter-listener.png" alt="img"><br>选择View Results Tree，点击运行，可以看到每一步请求的响应结果。<br><img src="jmeter-listener-tree.png" alt="img"></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>容器技术介绍：Docker简介及安装</title>
    <url>/posts/container-docker-guide/</url>
    <content><![CDATA[<p>容器技术（Linux Container，LXC）是一种轻量级的虚拟化技术，容器镜像运行在一个隔离环境中，像集装箱一样，把应用封装起来，应用之间互不干扰，实现进程的隔离。Docker 是常用的一种容器技术，本文将简要介绍Docker及Docker安装方法。</p>
<a id="more"></a>
<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>Docker基于Go语言开发，在2013年正式发布，是一个是用于构建、部署和管理容器化应用程序的开源平台，Docker 允许开发人员将应用程序打包到容器中，容器将应用程序源代码、操作系统库以及所需的依赖结合在一起，可以发布到任何流行的系统中。Docker具有以下优点：</p>
<ul>
<li>使开发人员能够使用简单命令自动化构建、部署、运行、更新容器，缩短开发及运行代码之间的周期，快速交付应用。</li>
<li>应用隔离：不同软件运行环境兼容依赖问题，每个容器都可以看作是一个不同的微服务，容器之间互不影响。</li>
<li>轻量级，比创建虚拟机快得多</li>
<li>运行环境可移植，容器镜像将应用运行环境，包括代码、依赖、资源文件等打包。</li>
</ul>
<p><img src="docker.png" width="80%" height="80%" /></p>
<h2 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h2><p>虚拟机（Virtual machine, VM)是对计算机系统的仿真，操作系统(OS)及其应用程序共享单个主机服务器的硬件资源，硬件是虚拟化的，每个虚拟机都有自己的底层操作系统。管理程序(hypervisor)位于硬件和虚拟机之间，负责创建和运行 VM 的软件、固件或硬件。</p>
<p>前面讲过，Docker也是一种虚拟化技术，它只虚拟化操作系统，而不像虚拟机那样虚拟化操作系统和硬件资源。主要区别如下：</p>
<ul>
<li>容器与容器之间只是进程的隔离，通过名称空间隔离，而虚拟机是完全的资源隔离，可能更安全。</li>
<li>虚拟机的启动可能需要几分钟，Docker启动只需几秒钟甚至更短。</li>
<li>容器共享宿主操作系统的内核，而虚拟机使用完全独立的内核，需虚拟化内核。</li>
<li>虚拟机是操作系统和硬件的虚拟化，Docker是操作系统的虚拟化</li>
</ul>
<p><img src="docker-vs-vm.png" width="80%" height="80%" /></p>
<h2 id="Docker-Engine"><a href="#Docker-Engine" class="headerlink" title="Docker Engine"></a>Docker Engine</h2><p>Docker Engine 是一个客户机/服务器 (C/S架构) 应用，主要包括三个部分：</p>
<ul>
<li>server：守护进程(dockerd 命令)，Docker Daemon</li>
<li>REST API：客户端与守护进程间的通信接口</li>
<li>CLI：command line interface (CLI) ，命令行接口客户端（docker 命令）</li>
</ul>
<p><img src="docker-engine.png" width="80%" height="80%" /></p>
<p>CLI 使用 REST API 与 Docker Daemon 进行通信，实现对Docker Daemon的控制和交互。也可以使用 UNIX 套接字、网络接口进行通信。守护进程构建、运行和管理 Docker 对象（镜像、容器、网络和volumes）。Docker 客户机和守护进程可以在同一个系统上运行，也可以将 Docker 客户机连接到远程 Docker 守护进程。</p>
<p><img src="docker-architecture.png" width="80%" height="80%" /></p>
<center><font size="2">https://docs.docker.com/get-started/overview/</font></center>

<h3 id="Docker-daemon"><a href="#Docker-daemon" class="headerlink" title="Docker daemon"></a>Docker daemon</h3><p>Docker 守护进程(dockerd)是后台服务进程，是生存期较长的进程，负责监听 Docker API 请求，管理 Docker 对象。守护进程还可以与其他守护进程通信来管理 Docker 服务。</p>
<h3 id="Docker-client"><a href="#Docker-client" class="headerlink" title="Docker client"></a>Docker client</h3><p>Docker 客户端(docker)是 Docker 用户与 Docker 交互的主要方式，客户端将命令发送给守护进程，然后守护进程执行这些命令，Docker 客户端可以与多个守护进程进行通信。</p>
<h3 id="Docker-Images"><a href="#Docker-Images" class="headerlink" title="Docker Images"></a>Docker Images</h3><p>Docker镜像是一个只读模板，其中包含创建 Docker 容器的说明。通常，一个镜像都可能依赖一个或多个下层的镜像组成的另一个镜像。Docker镜像可以从Docker仓库中下载，也可以自己创建（Dockerfile）。</p>
<h3 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h3><p>Docker仓库是集中存放Docker镜像的地方，默认公共仓库为 Docker Hub，也可以自己配置私人仓库。当使用 <code>docker pull</code>  或  <code>docker run</code> 命令时，将从配置的仓库中提取所需的镜像。使用 <code>docker push</code> 命令时，镜像将被推送到配置的仓库中。</p>
<h3 id="Docker-Containers"><a href="#Docker-Containers" class="headerlink" title="Docker Containers"></a>Docker Containers</h3><p>Docker容器是镜像运行后的进程，是镜像的可运行实例，默认情况下，容器之间是隔离的。</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>Docker安装可参考官方文档：<a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p>
<h2 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h2><p>下载地址 : <a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>安装方法有两种，一种是设置docker源进行安装（推荐方法），另一种是是下载安装包（CentOS和Ubuntu对应RPM、DEB包）进行手动安装，一般在安装主机没有网络的情况下使用这种方法。（RPM、DEB包介绍及安装方法可参考<strong>Linux系统介绍</strong>）</p>
<p>下面介绍一下CentOS下的docker安装方法（也可参考官方文档：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a>），Ubuntu系统下docker的安装参考官方文档：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<p>要求CentOS 7 或者 CentOS 8</p>
<h3 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1. 卸载旧版本"></a>1. 卸载旧版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure>
<h3 id="2-安装依赖、添加源"><a href="#2-安装依赖、添加源" class="headerlink" title="2. 安装依赖、添加源"></a>2. 安装依赖、添加源</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils包</span></span><br><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 设置yum源</span></span><br><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h3 id="3-安装Docker-Engine"><a href="#3-安装Docker-Engine" class="headerlink" title="3. 安装Docker Engine"></a>3. 安装Docker Engine</h3><p>安装最新版本的Docker Engine 和 containerd<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><br>或者安装指定版本：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出可用版本</span></span><br><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">docker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:20.10.2-3.el7                    @docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.1-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:20.10.0-3.el7                    docker-ce-stable </span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">$ sudo yum install docker-ce-20.10.2 docker-ce-cli-20.10.2 containerd.io</span><br></pre></td></tr></table></figure></p>
<h3 id="4-启动Docker"><a href="#4-启动Docker" class="headerlink" title="4. 启动Docker"></a>4. 启动Docker</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<h3 id="5-检验Docker-Engine是否安装成功"><a href="#5-检验Docker-Engine是否安装成功" class="headerlink" title="5. 检验Docker Engine是否安装成功"></a>5. 检验Docker Engine是否安装成功</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行hello-world镜像</span></span><br><span class="line">$ sudo docker run hello-world</span><br><span class="line"><span class="comment"># 或者 查看docker版本</span></span><br><span class="line">$ docker version</span><br></pre></td></tr></table></figure>
<h2 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h2><p>默认是从Docker Hub下载镜像，为了更快的下载docker镜像，可以配置国内的镜像服务器，下面介绍阿里云镜像配置方法。</p>
<p>阿里云控制台地址：<a href="https://homenew.console.aliyun.com/">https://homenew.console.aliyun.com/</a></p>
<ol>
<li><p>进入容器镜像服务<br> <img src="aliyun-mirrors.png" width="80%" height="80%" /></p>
</li>
<li><p>设置登陆密码<br> 首次使用需要设置密码：<br> <img src="aliyun-mirrors-pwd.png" width="80%" height="80%" /></p>
</li>
<li><p>设置镜像加速<br> 点击进入镜像加速器：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a><br> <img src="aliyun-mirrors2.png" width="80%" height="80%" /><br> 选择对应的操作系统，按照操作步骤进行操作。</p>
</li>
</ol>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>报错信息：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed to Setup IP tables: Unable to <span class="built_in">enable</span> SKIP DNAT rule:  (iptables failed: iptables --<span class="built_in">wait</span> -t nat -I DOCKER -i br-48bc3090b33e -j RETURN: iptables: No chain/target/match by that name.</span><br></pre></td></tr></table></figure><br>原因是关闭防火墙之后docker需要重启：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure></p>
<p>参考：</p>
<blockquote>
<ol>
<li><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></li>
</ol>
</blockquote>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试开发</category>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Scapy 报文构造和解析</title>
    <url>/posts/python-scapy-for-packet-build-and-parser/</url>
    <content><![CDATA[<p>Scapy是一款强大的交互式数据包处理工具、数据包生成器、网络扫描器、网络发现、攻击工具和包嗅探工具。能灵活地构造各种数据包、发送数据包、包嗅探、应答和反馈匹配等功能。它可以实现Nmap扫描工具、tcpdump抓包工具 、 tshark工具、Netdiscover网络扫描工具的功能。</p>
<p>Nmap、Netdiscover、tcpdump和tshark介绍可参考：</p>
<ul>
<li>Nmap：<a href="https://blog.csdn.net/u010698107/article/details/115256618">Nmap扫描工具介绍</a></li>
<li>tcpdump和tshark：<a href="https://blog.csdn.net/u010698107/article/details/112727035">tcpdump抓包及tshark解包方法介绍</a></li>
<li>Netdiscover：<a href="https://blog.csdn.net/u010698107/article/details/115288643">Netdiscover网络扫描工具</a></li>
</ul>
<p>本文主要介绍Scapy进行报文构造，报文发送和报文解析。<br><a id="more"></a></p>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>官网：<a href="https://scapy.net/">https://scapy.net/</a><br>github地址：<a href="https://github.com/secdev/scapy">https://github.com/secdev/scapy</a><br>官方文档：<a href="https://scapy.readthedocs.io/en/latest/">https://scapy.readthedocs.io/en/latest/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install scapy</span><br></pre></td></tr></table></figure>
<p><img src="scapy.png" alt="png"></p>
<h1 id="Scapy-的使用"><a href="#Scapy-的使用" class="headerlink" title="Scapy 的使用"></a>Scapy 的使用</h1><p>lsc() 命令：列出scapy通用的操作方法，常用的函数包括：</p>
<ul>
<li>arpcachepoison（用于arp毒化攻击，也叫arp欺骗攻击）</li>
<li>arping（用于构造一个ARP的who-has包）</li>
<li>send：发送3层报文（ 如TCP/UDP 协议），不接收数据包</li>
<li>sendp：发送2层报文(通过mac地址转发)，不接收</li>
<li>sniff：用于网络嗅探，类似Wireshark和tcpdump抓包</li>
<li>sr：发送，接收3层报文，返回有回应的数据包和没有回应的数据包。</li>
<li>sr1：发送，只接收1个响应包</li>
<li>srp：发送，接收2层报文</li>
<li>srp1：发送，只接收1个响应包</li>
<li>rdpcap：读取报文</li>
<li>wrpcap：保存报文</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lsc()</span><br><span class="line">arpcachepoison      : Poison target<span class="string">&#x27;s cache with (your MAC,victim&#x27;</span>s IP) couple</span><br><span class="line">arping              : Send ARP who-has requests to determine <span class="built_in">which</span> hosts are up</span><br><span class="line">chexdump            : Build a per byte hexadecimal representation</span><br><span class="line">ls                  : List  available layers, or infos on a given layer class or name.</span><br><span class="line">send                : </span><br><span class="line">sendp               : </span><br><span class="line">sendpfast           : Send packets at layer 2 using tcpreplay <span class="keyword">for</span> performance</span><br><span class="line">sniff               : </span><br><span class="line">split_layers        : Split 2 layers previously bound.</span><br><span class="line">sr                  : </span><br><span class="line">sr1                 : </span><br><span class="line">sr1flood            : Flood and receive packets at layer 3 and <span class="built_in">return</span> only the first answer</span><br><span class="line">srp                 : </span><br><span class="line">srp1                : </span><br></pre></td></tr></table></figure>
<p>ls()：查看支持的协议<br><img src="scapy-ls.png" alt="png"></p>
<p>ls(IP)：查看IP包的默认参数<br><img src="scapy-ls-ip.png" alt="png"></p>
<h1 id="报文嗅探"><a href="#报文嗅探" class="headerlink" title="报文嗅探"></a>报文嗅探</h1><h2 id="sniff-函数参数"><a href="#sniff-函数参数" class="headerlink" title="sniff() 函数参数"></a>sniff() 函数参数</h2><p>Scapy使用 sniff() 函数进行报文嗅探， sniff() 方法有以下参数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="function"><span class="params">            count=<span class="number">0</span>, store=<span class="literal">True</span>, offline=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            quiet=<span class="literal">False</span>, prn=<span class="literal">None</span>, <span class="built_in">filter</span>=<span class="literal">None</span>, lfilter=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            L2socket=<span class="literal">None</span>, timeout=<span class="literal">None</span>, opened_socket=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            stop_filter=<span class="literal">None</span>, iface=<span class="literal">None</span>, started_callback=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            session=<span class="literal">None</span>, session_args=[], session_kwargs=&#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">            *arg, **karg</span>):</span></span><br></pre></td></tr></table></figure><br>部分参数定义：</p>
<ul>
<li>count：抓包数量，默认为0，表示无限制</li>
<li>store：是否保存抓取的数据包</li>
<li>offline：读取 pcap 文件</li>
<li>quiet：设置为True时，会丢弃stderr进程</li>
<li>prn：对对每个数据包进行某个操作的函数。例如：prn = lambda x: x.summary()；</li>
<li>filter：BPF(Berkeley Packet Filter)过滤规则，wireshark过滤也使用的是BPF过滤器。</li>
<li>timeout：指定嗅探时间</li>
<li>stop_filter：定义一个函数，在抓到指定数据包后停止抓包</li>
<li>iface：抓包的接口 </li>
</ul>
<p>filter参数的BPF语法可参考</p>
<ol>
<li><a href="https://biot.com/capstats/bpf.html">https://biot.com/capstats/bpf.html</a> </li>
<li><a href="https://www.tcpdump.org/manpages/pcap-filter.7.html">https://www.tcpdump.org/manpages/pcap-filter.7.html</a></li>
</ol>
<p>BPF语法示例：</p>
<ul>
<li><code>dst host 192.168.0.1</code>：目的IP为192.168.0.1的报文</li>
<li><code>host 192.168.0.1</code>：IP地址为192.168.0.1的报文</li>
<li><code>tcp port 80</code>：TCP端口号为80的报文（HTTP报文）</li>
<li><code>tcp and not port 80</code>：除了80端口的TCP报文</li>
<li><code>tcp portrange 1-25</code>：TCP端口范围1-25的报文</li>
<li><code>not broadcast</code>：排除广播报文</li>
<li><code>!arp</code>：排除arp报文</li>
</ul>
<h2 id="sniff-抓包"><a href="#sniff-抓包" class="headerlink" title="sniff() 抓包"></a>sniff() 抓包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">package = sniff(iface=<span class="string">&#x27;WLAN&#x27;</span>, timeout=<span class="number">10</span>)</span><br><span class="line">wrpcap(<span class="string">&quot;test.pcap&quot;</span>, package)  <span class="comment"># 将抓取的包保存为test.pcap文件</span></span><br></pre></td></tr></table></figure>
<p>查看保存的报文：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pkts = sniff(offline=<span class="string">&#x27;test.pcap&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pkts[<span class="number">17</span>].show()</span><br><span class="line"><span class="comment">###[ Ethernet ]###</span></span><br><span class="line">  dst= ff:ff:ff:ff:ff:ff</span><br><span class="line">  src= fc:4d:d4:f8:<span class="number">84</span>:f8</span><br><span class="line">  <span class="built_in">type</span>= ARP</span><br><span class="line"><span class="comment">###[ ARP ]###</span></span><br><span class="line">     hwtype= <span class="number">0x1</span></span><br><span class="line">     ptype= IPv4</span><br><span class="line">     hwlen= <span class="number">6</span></span><br><span class="line">     plen= <span class="number">4</span></span><br><span class="line">     op= who-has</span><br><span class="line">     hwsrc= fc:4d:d4:f8:<span class="number">84</span>:f8</span><br><span class="line">     psrc= <span class="number">192.168</span><span class="number">.101</span><span class="number">.156</span></span><br><span class="line">     hwdst= <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">     pdst= <span class="number">192.168</span><span class="number">.101</span><span class="number">.1</span></span><br><span class="line"><span class="comment">###[ Padding ]###</span></span><br><span class="line">        load= <span class="string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>过滤报文：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sniff(iface=<span class="string">&#x27;WLAN&#x27;</span>, timeout=<span class="number">10</span>, <span class="built_in">filter</span>=<span class="string">&quot;tcp port 80&quot;</span>, prn=<span class="keyword">lambda</span> x:x.sprintf(<span class="string">&quot;&#123;IP:%IP.src% -&gt; %IP.dst%&#125;&quot;</span>))</span><br><span class="line">183.232.231.174 -&gt; 192.168.0.167</span><br><span class="line">192.168.0.167 -&gt; 183.232.231.174</span><br><span class="line">&lt;Sniffed: TCP:<span class="number">2</span> UDP:<span class="number">0</span> ICMP:<span class="number">0</span> Other:<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>除了使用scapy抓包外，也可以使用tcpdump（Linux）和tshark（Windows）进行抓包。</p>
<h1 id="DHCPv6报文构造"><a href="#DHCPv6报文构造" class="headerlink" title="DHCPv6报文构造"></a>DHCPv6报文构造</h1><p>我们首先用Scapy打开一个真实抓到的DHCPv6 Request报文，查看一下报文结构：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">pkts = rdpcap(<span class="string">&#x27;packet.pcap&#x27;</span>)</span><br><span class="line">pkts[<span class="number">1021</span>].show() <span class="comment"># 序号为1022的报文为DHCPv6 Request报文（通过wireshark查看）</span></span><br></pre></td></tr></table></figure><br>报文打印如下：<br><img src="scapy-dhcpv6-1.png" alt="png"><br><img src="scapy-dhcpv6-2.png" alt="png"></p>
<p>下面开始构造每一层报文：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">ethernet = Ether(dst=<span class="string">&#x27;00:0c:29:47:f3:2f&#x27;</span>,src=<span class="string">&#x27;c8:3a:35:09:ef:a1&#x27;</span>,<span class="built_in">type</span>=<span class="number">0x86dd</span>)</span><br><span class="line">ip = IPv6(src =<span class="string">&#x27;2001:db8:3333::16&#x27;</span>,dst=<span class="string">&#x27;ff02::2&#x27;</span>)</span><br><span class="line">udp =UDP(sport=<span class="number">546</span>,dport=<span class="number">547</span>)</span><br><span class="line"><span class="comment"># dhcpv6 = DHCP6(msgtype = 1)</span></span><br><span class="line">dhcpv6 = DHCP6_Solicit()</span><br><span class="line">cid = DHCP6OptClientId()</span><br><span class="line">iana = DHCP6OptIA_NA()</span><br><span class="line">iapd_p = DHCP6OptIAPrefix()</span><br><span class="line">iapd = DHCP6OptIA_PD(iapdopt=[iapd_p])</span><br><span class="line">packet = ethernet/ip/udp/dhcpv6/cid/iana/iapd</span><br><span class="line">packet.show()</span><br></pre></td></tr></table></figure><br>注意DHCP6 Option - IA Prefix option 的构造方法， IA Prefix选项是包含在IAPD选项内的，所以要赋值给iapdopt，多个option字段用逗号隔开。</p>
<p>其中，字段名称通过 <code>ls()</code> 命令查看：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls(DHCP6OptIA_PD)</span><br><span class="line">ls(DHCP6OptIA_NA)</span><br></pre></td></tr></table></figure><br><img src="scapy-ls-opts.png" alt="png"></p>
<p>运行上面程序，打印构造的报文：<br><img src="scapy-packet.png" alt="png"><br>构造成功！</p>
<h1 id="发送报文"><a href="#发送报文" class="headerlink" title="发送报文"></a>发送报文</h1><h2 id="1-只发不收"><a href="#1-只发不收" class="headerlink" title="1. 只发不收"></a>1. 只发不收</h2><ul>
<li>send：发送3层报文（ 如TCP/UDP 协议），不接收数据包</li>
<li>sendp：发送2层报文(通过mac地址转发)，不接收<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">send(packet, iface=<span class="string">&#x27;eth1&#x27;</span>, count=<span class="number">2</span>) </span><br><span class="line">sendp(packet, iface=<span class="string">&#x27;eth0&#x27;</span>)</span><br></pre></td></tr></table></figure>
count，发送报文数，默认发送一个报文<br>iface，指定接口</li>
</ul>
<h2 id="2-发且收"><a href="#2-发且收" class="headerlink" title="2. 发且收"></a>2. 发且收</h2><ul>
<li>sr：发送，接收3层报文，返回有回应的数据包和没有回应的数据包。</li>
<li>sr1：发送，只接收1个响应包</li>
<li>srp：发送，接收2层报文</li>
<li>srloop()：循环发送</li>
<li>srp1：发送，只接收1个响应包</li>
<li>srploop：循环发送<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sr(packet, iface=<span class="string">&#x27;eth1&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="报文过滤"><a href="#报文过滤" class="headerlink" title="报文过滤"></a>报文过滤</h1><p>在网络协议的测试中，我们需要检测某个报文字段是否存在，对抓取到的报文进行解析，可以使用tshark命令解析报文解析(参考文章<a href="https://blog.csdn.net/u010698107/article/details/112727035">tcpdump抓包及tshark解包方法介绍</a>)。</p>
<p>当然，Scapy也可以解析数据包，下面查找DHCPv6 Solicit报文，且目的MAC为00:0c:29:d9:98:c7<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">package = <span class="string">&quot;package.pcap&quot;</span></span><br><span class="line">field = <span class="string">&#x27;dst=00:0c:29:d9:98:c7&#x27;</span></span><br><span class="line">pkts = rdpcap(package)</span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> pkts:    </span><br><span class="line">    <span class="keyword">if</span> packet.haslayer(<span class="string">&#x27;DHCP6_Solicit&#x27;</span>):        </span><br><span class="line">        packet_text = <span class="built_in">repr</span>(packet)        </span><br><span class="line">        <span class="keyword">if</span> re.search(field, packet_text, re.IGNORECASE):</span><br><span class="line">            print(<span class="string">&quot;666&quot;</span>)</span><br></pre></td></tr></table></figure><br>其中，repr内置函数用于返回对象的 string 格式。除了rdpcap()方法读取报文文件外，也可以使用嗅探函数sniff()：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pkts = sniff(offline=<span class="string">&#x27;packet_solicit.pcap&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>如果不知道目标字段写法，可以先打印一下：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from scapy.all import *</span><br><span class="line">&gt;&gt;&gt; pkts = rdpcap(<span class="string">&#x27;packet_solicit.pcap&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; pkts[3]</span><br><span class="line">&lt;Ether  dst=ff:ff:ff:ff:ff:ff src=00:0c:29:d9:98:c7 <span class="built_in">type</span>=IPv6 |&lt;IPv6  version=6 tc=0 fl=0 plen=46 nh=UDP hlim=64 src=fe80::20c:29ff:fed9:98c7 dst=ff02::1:2 |&lt;UDP  sport=dhcpv6_client dport=dhcpv6_server len=46 chksum=0x764d |&lt;DHCP6_Solicit  msgtype=SOLICIT trid=0x0 |&lt;DHCP6OptClientId  optcode=CLIENTID optlen=14 duid=&lt;DUID_LLT  <span class="built_in">type</span>=Link-layer address plus time hwtype=Ethernet (10Mb) timeval=Sat, 01 Jan 2000 00:00:00 +0000 (946684800) lladdr=00:0c:29:d9:98:c7 |&gt; |&lt;DHCP6OptIA_NA  optcode=IA_NA optlen=12 iaid=0x0 T1=0 T2=0 |&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>计算机网络</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>tcpdump</tag>
        <tag>wireshark</tag>
        <tag>scapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：属性值设置和判断变量是否存在</title>
    <url>/posts/python-notes-for-variable-and-attribute/</url>
    <content><![CDATA[<p>介绍Python设置属性值方法setattr()和判断变量是否存在的方法<br><a id="more"></a></p>
<h1 id="以属性名为变量的方式给一个对象添加属性"><a href="#以属性名为变量的方式给一个对象添加属性" class="headerlink" title="以属性名为变量的方式给一个对象添加属性"></a>以属性名为变量的方式给一个对象添加属性</h1><p>使用 setattr 方法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj = SomeClass()</span><br><span class="line">key = <span class="string">&#x27;key_name&#x27;</span></span><br><span class="line">val = <span class="string">&#x27;key_value&#x27;</span></span><br><span class="line"><span class="built_in">setattr</span>(obj, key, val)</span><br><span class="line">print(obj.key_name) </span><br></pre></td></tr></table></figure><br>示例：给报文字段赋值<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">layer = &#123;<span class="string">&quot;ether&quot;</span>:<span class="string">&quot;dst=&#x27;33:33:00:01:00:02&#x27;,src=&#x27;00:0c:29:d9:98:c7&#x27;&quot;</span>&#125;</span><br><span class="line">Ethernet_field = layer.setdefault(<span class="string">&#x27;ether&#x27;</span>)</span><br><span class="line">ethernet = Ether(<span class="built_in">type</span>=<span class="number">0x86dd</span>)</span><br><span class="line">fields = <span class="built_in">dict</span>(((<span class="keyword">lambda</span> a:(a[<span class="number">0</span>].strip(<span class="string">&quot;&#x27;&quot;</span>),a[<span class="number">1</span>].strip(<span class="string">&quot;&#x27;&quot;</span>))) (field.split(<span class="string">&#x27;=&#x27;</span>)) <span class="keyword">for</span> field <span class="keyword">in</span> Ethernet_field.split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> fields.items():</span><br><span class="line">    <span class="built_in">setattr</span>(ethernet, key, val) </span><br><span class="line">ethernet.show()</span><br></pre></td></tr></table></figure><br>out:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ethernet.show()</span><br><span class="line"><span class="comment">###[ Ethernet ]###</span></span><br><span class="line">  dst       = <span class="number">33</span>:<span class="number">33</span>:<span class="number">00</span>:01:<span class="number">00</span>:02</span><br><span class="line">  src       = <span class="number">00</span>:0c:<span class="number">29</span>:d9:<span class="number">98</span>:c7</span><br><span class="line">  <span class="built_in">type</span>      = IPv6</span><br></pre></td></tr></table></figure></p>
<h1 id="判断变量是否存在"><a href="#判断变量是否存在" class="headerlink" title="判断变量是否存在"></a>判断变量是否存在</h1><p>三种方法：</p>
<ul>
<li>locals().keys()</li>
<li>dir()</li>
<li>vars()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ethernet = <span class="string">&#x27;Ether&#x27;</span></span><br><span class="line">dhcpv6 = <span class="string">&#x27;dhcpv6_solicit&#x27;</span></span><br><span class="line">message = [<span class="string">&#x27;ethernet&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;udp&#x27;</span>,<span class="string">&#x27;dhcpv6&#x27;</span>]</span><br><span class="line">del_message = []</span><br><span class="line"><span class="keyword">for</span> layer_i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(message):             </span><br><span class="line">    <span class="keyword">if</span> message[layer_i] <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">locals</span>().keys():</span><br><span class="line">        del_message.append(value)</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> del_message:</span><br><span class="line">    message.remove(m)</span><br><span class="line">print(<span class="string">f&#x27;message:<span class="subst">&#123;message&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;python3 test_locals.py</span><br><span class="line">message:[<span class="string">&#x27;ethernet&#x27;</span>, <span class="string">&#x27;dhcpv6&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>setattr</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：字符串操作</title>
    <url>/posts/python-notes-for-string/</url>
    <content><![CDATA[<p>字符串相关操作<br><a id="more"></a></p>
<h1 id="统计字符串中某个单词的出现的次数"><a href="#统计字符串中某个单词的出现的次数" class="headerlink" title="统计字符串中某个单词的出现的次数"></a>统计字符串中某个单词的出现的次数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;test 123 dfg test&#x27;</span></span><br><span class="line"><span class="comment">## 方法1</span></span><br><span class="line"><span class="built_in">len</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> a.split(<span class="string">&#x27; &#x27;</span>) <span class="keyword">if</span> i == test])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法2</span></span><br><span class="line"><span class="built_in">len</span>(a.split(<span class="string">&#x27;test&#x27;</span>))-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="Python提取两个字符串之间的内容"><a href="#Python提取两个字符串之间的内容" class="headerlink" title="Python提取两个字符串之间的内容"></a>Python提取两个字符串之间的内容</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;&#x27;/begin MEASUREMENT</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">LINK</span></span><br><span class="line"><span class="string">DISPLAY</span></span><br><span class="line"><span class="string">SYMBOL</span></span><br><span class="line"><span class="string">/end MEASUREMENT&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">regex = <span class="string">r&#x27;/begin MEASUREMENT([\s\S]*)/end MEASUREMENT&#x27;</span></span><br><span class="line">matches = re.findall(regex, <span class="built_in">str</span>)</span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> matches:</span><br><span class="line">    print(match)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;test:100      end&#x27;</span> </span><br><span class="line">regex = <span class="string">r&#x27;test:([\s\S]*)/end&#x27;</span></span><br><span class="line">matches = re.findall(regex, <span class="built_in">str</span>)</span><br><span class="line">test = matches[<span class="number">0</span>].strip()</span><br></pre></td></tr></table></figure>
<h1 id="字符删除、替换"><a href="#字符删除、替换" class="headerlink" title="字符删除、替换"></a>字符删除、替换</h1><h2 id="删除空格"><a href="#删除空格" class="headerlink" title="删除空格"></a>删除空格</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27; 123abcd456  &#x27;</span></span><br><span class="line"><span class="comment"># 删除两边的空格</span></span><br><span class="line">print(s.strip())</span><br><span class="line"><span class="comment"># 删除右边空格</span></span><br><span class="line">print(s.rstrip()) </span><br><span class="line"><span class="comment"># 删除左边空格</span></span><br><span class="line">print(s.lstrip())</span><br><span class="line"><span class="comment"># 删除两边的数字</span></span><br><span class="line">print(s.strip(<span class="string">&#x27; &#x27;</span>).strip(<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"><span class="comment"># 删除两边的引号</span></span><br><span class="line">s = <span class="string">&quot;&#x27;123abcd456&#x27;&quot;</span></span><br><span class="line">print(s.strip(<span class="string">&quot;&#x27;&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>分割并去除空格<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot; hello , world !&quot;</span></span><br><span class="line">string = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> string.split(<span class="string">&#x27;,&#x27;</span>)]</span><br></pre></td></tr></table></figure></p>
<h2 id="将格式化字符转换为字典"><a href="#将格式化字符转换为字典" class="headerlink" title="将格式化字符转换为字典"></a>将格式化字符转换为字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;dst=&#x27;192.168.0.1&#x27;,src=&#x27;192.168.1.2&#x27;&quot;</span></span><br><span class="line">fields = <span class="built_in">dict</span>((field.split(<span class="string">&#x27;=&#x27;</span>) <span class="keyword">for</span> field <span class="keyword">in</span> string.split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line">fields = <span class="built_in">dict</span>(((<span class="keyword">lambda</span> a:(a[<span class="number">0</span>].strip(<span class="string">&quot;&#x27;&quot;</span>),a[<span class="number">1</span>].strip(<span class="string">&quot;&#x27;&quot;</span>))) (field.split(<span class="string">&#x27;=&#x27;</span>)) <span class="keyword">for</span> field <span class="keyword">in</span> string.split(<span class="string">&#x27;,&#x27;</span>)))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fields</span><br><span class="line">&#123;<span class="string">&#x27;dst&#x27;</span>: <span class="string">&quot;&#x27;192.168.0.1&#x27;&quot;</span>, <span class="string">&#x27;src&#x27;</span>: <span class="string">&quot;&#x27;192.168.1.2&#x27;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除-替换-任意位置字符"><a href="#删除-替换-任意位置字符" class="headerlink" title="删除(替换)任意位置字符"></a>删除(替换)任意位置字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;11233aabcdd41556&#x27;</span></span><br><span class="line"><span class="comment"># 删除某个特定字符</span></span><br><span class="line">print(ss.replace(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment"># 同时删除不同字符</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">print(re.sub(<span class="string">&#x27;[1a]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, s))</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记：List相关操作</title>
    <url>/posts/python-notes-for-list/</url>
    <content><![CDATA[<p>List相关操作小例子<br><a id="more"></a></p>
<h1 id="获取list的下标和值"><a href="#获取list的下标和值" class="headerlink" title="获取list的下标和值"></a>获取list的下标和值</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(mylist):</span><br><span class="line"><span class="meta">... </span>        print(index, value)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> a</span><br><span class="line"><span class="number">1</span> b</span><br><span class="line"><span class="number">2</span> c</span><br><span class="line"><span class="number">3</span> d</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1 id="删除list中的空字符"><a href="#删除list中的空字符" class="headerlink" title="删除list中的空字符"></a>删除list中的空字符</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; 4  &#x27;</span>, <span class="string">&#x27;  5&#x27;</span>, <span class="string">&#x27;    &#x27;</span>,<span class="string">&#x27;6 &#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;     &#x27;</span>,<span class="literal">None</span>, <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line">print(list1)</span><br><span class="line">list2 = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, list1)) </span><br><span class="line">print(list2) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;  &#x27;, &#x27; 4  &#x27;, &#x27;  5&#x27;, &#x27;    &#x27;, &#x27;6 &#x27;, &#x27;     &#x27;, &#x27;7&#x27;]</span></span><br><span class="line">list3 = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> list2]</span><br><span class="line">print(list3) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;&#x27;, &#x27;6&#x27;, &#x27;&#x27;, &#x27;7&#x27;]</span></span><br><span class="line">list4 = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, list3))  </span><br><span class="line">print(list4) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;]</span></span><br></pre></td></tr></table></figure>
<h1 id="删除list元素"><a href="#删除list元素" class="headerlink" title="删除list元素"></a>删除list元素</h1><p>使用remove、pop和del方法参删除list中的某个元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.pop(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> mylist[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line">[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> mylist[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line">[<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> mylist</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;mylist&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="计算中位数"><a href="#计算中位数" class="headerlink" title="计算中位数"></a>计算中位数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_median</span>(<span class="params">data</span>):</span></span><br><span class="line">     data.sort()</span><br><span class="line">     half = <span class="built_in">len</span>(data) // <span class="number">2</span></span><br><span class="line">     <span class="keyword">return</span> (data[half] + data[~half]) / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h1 id="将字符串list转换为int"><a href="#将字符串list转换为int" class="headerlink" title="将字符串list转换为int"></a>将字符串list转换为int</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_list = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, test_list))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1 id="合并、连接字符串list"><a href="#合并、连接字符串list" class="headerlink" title="合并、连接字符串list"></a>合并、连接字符串list</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_list = [<span class="string">&#x27;192&#x27;</span>, <span class="string">&#x27;168&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_list = <span class="string">&#x27;.&#x27;</span>.join(test_list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_list</span><br><span class="line"><span class="string">&#x27;192.168.0.1&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1 id="取多个字符串-list交集"><a href="#取多个字符串-list交集" class="headerlink" title="取多个字符串/list交集"></a>取多个字符串/list交集</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;234&#x27;</span>,<span class="string">&#x27;1253&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(reduce(<span class="keyword">lambda</span> x,y : <span class="built_in">set</span>(x) &amp; <span class="built_in">set</span>(y), a))</span><br><span class="line">[<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(reduce(<span class="keyword">lambda</span> x,y : <span class="built_in">set</span>(x) &amp; <span class="built_in">set</span>(y), b))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h1 id="合并字典value值"><a href="#合并字典value值" class="headerlink" title="合并字典value值"></a>合并字典value值</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">0</span>:<span class="string">&quot;hello &quot;</span>, <span class="number">1</span>:<span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist =reduce(<span class="keyword">lambda</span> x, y : x + y, mydict.values())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="number">0</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">1</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = <span class="built_in">list</span>(reduce(<span class="keyword">lambda</span> x, y : x + y, mydict.values()))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>field_counters = <span class="built_in">dict</span>(Counter(mylist))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>field_counters</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>注意在python3中reduce需要导入：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>mitmproxy 代理工具介绍：rewrite和map local实现</title>
    <url>/posts/api-test-mitmproxy-guide/</url>
    <content><![CDATA[<p>在接口测试中，会用到抓包工具或者代理工具，常用代理工具包括charles、 burpsuite、 fiddler、mitmproxy等，<code>ssh -D参数</code> 可实现socks5代理。网络嗅探工具可以使用tcpdump 和 wireshark。Charles工具可以实现mock测试（参考<a href="https://blog.csdn.net/u010698107/article/details/112728913">接口测试代理工具charles mock测试</a>），如果要自动化实现这些功能，mitmproxy工具是个不错的选择，本文主要内容包括简要介绍mitmproxy代理工具、mitmproxy安装、SSL 证书安装以及实现和charles一样的功能：rewrite和map local。</p>
<a id="more"></a>
<h1 id="mitmproxy简介"><a href="#mitmproxy简介" class="headerlink" title="mitmproxy简介"></a>mitmproxy简介</h1><p>mitm(man-in-the-middle) 即中间人攻击，mitmproxy是主要基于Python平台开发的代理工具，功能强大，可满足高度定制化需求。它是一个用于跟踪流量的中间代理工具，具有截获、篡改、重放等功能。</p>
<p>插件是mitmproxy非常强大的一部分，提供了一系列API，mitmproxy扩展：<a href="https://docs.mitmproxy.org/stable/addons-overview/">https://docs.mitmproxy.org/stable/addons-overview/</a><br>插件例子：<a href="https://docs.mitmproxy.org/stable/addons-examples/">https://docs.mitmproxy.org/stable/addons-examples/</a></p>
<p>mitmproxy支持5种代理模式：</p>
<ol>
<li>正向代理（regular proxy）</li>
<li>反向代理（reverse proxy）</li>
<li>上行代理（upstream proxy）</li>
<li>透明代理（transparent proxy）</li>
<li>socks5代理（socks Proxy）</li>
</ol>
<p><img src="mitmproxy.png" width="80%" height="80%" /><br>本文主要介绍mitmproxy的正向代理使用过程<br>mitmproxy套装包括3个工具：</p>
<ul>
<li>mitmproxy：命令行交互工具</li>
<li>mitmdump：命令行非交互工具，提供类似 tcpdump的功能</li>
<li>mitmweb：基于Web的用户界面</li>
</ul>
<p>mitmproxy的代理流程：<br><img src="mitmproxy-explicit-https.png" width="80%" height="80%" /></p>
<center><font size="2">图片来源：https://docs.mitmproxy.org/stable/concepts-howmitmproxyworks/</font></center>

<h1 id="mitmproxy安装"><a href="#mitmproxy安装" class="headerlink" title="mitmproxy安装"></a>mitmproxy安装</h1><p>mitmproxy官网：<a href="https://mitmproxy.org/">https://mitmproxy.org/</a><br>mitmproxy安装方法参考：<a href="https://docs.mitmproxy.org/stable/overview-installation/">https://docs.mitmproxy.org/stable/overview-installation/</a></p>
<p>macOS：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mitmproxy</span><br></pre></td></tr></table></figure><br>Linux和Windows：在官网<a href="https://mitmproxy.org/">mitmproxy.org</a>下载安装<br><img src="mitmproxy-install.png" width="80%" height="80%" /></p>
<p>检查是否安装成功<br><code>mitmdump --version</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;mitmdump --version</span><br><span class="line">Mitmproxy: 5.1.1 binary</span><br><span class="line">Python:    3.7.6</span><br><span class="line">OpenSSL:   OpenSSL 1.1.1f  31 Mar 2020</span><br><span class="line">Platform:  Windows-10-10.0.18362-SP0</span><br><span class="line">C:\Users\10287&gt;</span><br></pre></td></tr></table></figure><br>python包安装：<br>注意python版本 &gt;= 3.6<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --user pipx</span><br><span class="line">python3 -m pipx ensurepath</span><br><span class="line">pipx install mitmproxy</span><br></pre></td></tr></table></figure><br>docker 安装方法：<br><a href="https://hub.docker.com/r/mitmproxy/mitmproxy/">https://hub.docker.com/r/mitmproxy/mitmproxy/</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mitmproxy/mitmproxy</span><br></pre></td></tr></table></figure></p>
<h1 id="SSL-证书安装"><a href="#SSL-证书安装" class="headerlink" title="SSL 证书安装"></a>SSL 证书安装</h1><p>和charles代理工具一样，如果要抓取HTTPs报文，客户端（APP 或浏览器）需要安装SSL证书。</p>
<ol>
<li><p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;mitmdump -p 8999</span><br><span class="line">Proxy server listening at http://*:8999</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器设置代理<br>使用SwitchyOmega插件添加mitmproxy代理，代理服务器地址设置为主机IP地址，代理端口8999<br>SwitchyOmega插件下载地址：<a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a><br><img src="mitmproxy-chrome.png" width="80%" height="80%" /></p>
</li>
</ol>
<ol>
<li><p>浏览器输入 mitm.it<br>选择对应系统的证书安装<br><img src="mitmproxy-install2.png" width="80%" height="80%" /></p>
</li>
<li><p>手机证书安装方法同charles（地址为mitm.it）<br>参考  <a href="https://blog.csdn.net/u010698107/article/details/112728397">charles SSL证书安装</a><br><img src="mitmproxy-ssl-android.png" width="80%" height="80%" /><br><img src="mitmproxy-ssl-android2.png" width="80%" height="80%" /><br>手机浏览器访问百度，命令行窗口显示https报文解析成功<br><img src="mitmproxy-ssl-android3.png" width="80%" height="80%" /></p>
</li>
</ol>
<h1 id="mitmproxy录制回放"><a href="#mitmproxy录制回放" class="headerlink" title="mitmproxy录制回放"></a>mitmproxy录制回放</h1><p>录制回放参考：<a href="https://docs.mitmproxy.org/stable/tute-clientreplay/">https://docs.mitmproxy.org/stable/tute-clientreplay/</a></p>
<ol>
<li>开始录制，保存到文件baidusearch中<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\ProgramWorkspace\TestingDemo\test_mitmproxy&gt;mitmdump -p 8999 -w baidusearch</span><br></pre></td></tr></table></figure></li>
<li>手机浏览baidu，进行百度搜索</li>
<li>停止录制：<code>Ctrl+c</code> 停止</li>
<li>回放<br>cmd命令行输入如下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmweb -p 8999</span><br></pre></td></tr></table></figure>
打开生成的baidusearch文档，可以查看报文交互过程<br><img src="mitmproxy-playback.png" width="80%" height="80%" /></li>
</ol>
<h1 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h1><p>要求：和charles一样，修改招商银行名称及股票价格。见<a href="https://blog.csdn.net/u010698107/article/details/112728913">接口测试代理工具charles mock测试</a><br><img src="xueqiu-stock.png" width="80%" height="80%" /></p>
<ol>
<li><p>启动 mitmproxy 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;mitmdump -p 8999 </span><br><span class="line">Proxy server listening at http://*:8999 </span><br></pre></td></tr></table></figure>
</li>
<li><p>手机（或者模拟器）安装ssl证书，设置代理<br>见 <a href="https://blog.csdn.net/u010698107/article/details/112728397">charles SSL证书安装</a></p>
</li>
<li><p>抓取雪球APP行情页面数据包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;mitmweb -p 8999</span><br><span class="line">Web server listening at http://127.0.0.1:8081/</span><br><span class="line">Proxy server listening at http://*:8999</span><br></pre></td></tr></table></figure>
<p>开启抓包后，刷新雪球APP行情页面，找到行情页面报文，查看URL特征，用于下一步写脚本来找到它。<br><img src="mitmweb-xueqiu.png" width="80%" height="80%" /></p>
</li>
<li><p>写一个脚本处理响应数据：<br><img src="charles-xueqiu-response.png" width="80%" height="80%" /><br>test_mitmproxy_response.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span>(<span class="params">flow</span>):</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	1. 找到行情页面相关URL</span></span><br><span class="line"><span class="string">	2. 修改第一条记录（招商银行）的名称和股票价格</span></span><br><span class="line"><span class="string">	3. 将数据写入响应数据中</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;quote.json&quot;</span> <span class="keyword">in</span> flow.request.pretty_url <span class="keyword">and</span> <span class="string">&quot;x=&quot;</span> <span class="keyword">in</span> flow.request.pretty_url:</span><br><span class="line">        data = json.loads(flow.response.content)</span><br><span class="line">        data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;items&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;quote&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;items&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;quote&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] + <span class="string">&quot;test&quot;</span></span><br><span class="line">        data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;items&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;quote&#x27;</span>][<span class="string">&#x27;current&#x27;</span>] = <span class="string">&#x27;50&#x27;</span></span><br><span class="line">        flow.response.text = json.dumps(data)</span><br></pre></td></tr></table></figure></li>
<li><p>运行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\ProgramWorkspace\TestingDemo\test_mitmproxy&gt;mitmdump -p 8999 -s test_mitmproxy_response.py</span><br></pre></td></tr></table></figure>
<p><img src="mitmproxy-mitmdump.png" width="80%" height="80%" /></p>
</li>
<li><p>刷新雪球APP行情页面<br><img src="xueqiu-stock2.png" width="80%" height="80%" /><br>修改成功</p>
</li>
</ol>
<h1 id="Map-Local"><a href="#Map-Local" class="headerlink" title="Map Local"></a>Map Local</h1><p>要求和<a href="https://blog.csdn.net/u010698107/article/details/112728913">接口测试代理工具charles mock测试</a>一样，我们直接使用数据倍增后的数据stock2.json，如果要实现自动化，可以使用python脚本对响应数据进行处理。</p>
<p>股票数据可以在上一节Rewrite 第3步中直接保存，或者通过charles获取数据。</p>
<p>参考官方文档提供的mitmproxy插件http-reply-from-proxy.py：<a href="https://docs.mitmproxy.org/stable/addons-examples/#http-reply-from-proxy">https://docs.mitmproxy.org/stable/addons-examples/#http-reply-from-proxy</a> ，</p>
<ol>
<li><p>编写响应数据处理脚本test_request.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Send a reply from the proxy without sending any data to the remote server.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">flow: http.HTTPFlow</span>) -&gt; <span class="keyword">None</span>:</span> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;quote.json&quot;</span> <span class="keyword">in</span> flow.request.pretty_url <span class="keyword">and</span> <span class="string">&quot;x=&quot;</span> <span class="keyword">in</span> flow.request.pretty_url:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:/ProgramWorkspace/TestingDemo/test_mitmproxy/stock2.json&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            flow.response = http.HTTPResponse.make(</span><br><span class="line">                <span class="number">200</span>,  <span class="comment"># (optional) status code</span></span><br><span class="line">                f.read(),  <span class="comment"># (optional) content</span></span><br><span class="line">                &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;  <span class="comment"># (optional) headers</span></span><br><span class="line">            )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>开启服务，运行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\ProgramWorkspace\TestingDemo\test_mitmproxy&gt;mitmdump -p 8999 -s test_request.py</span><br><span class="line">Loading script test_request.py</span><br><span class="line">Proxy server listening at http://*:8999</span><br></pre></td></tr></table></figure></li>
<li>刷新雪球APP行情页面<br><img src="xueqiu-stock3.png" width="80%" height="80%" /><br>修改成功</li>
</ol>
<p>开启服务后，可以直接修改stock2.json内容，不需要重新拉起</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>mitmproxy</tag>
        <tag>mock</tag>
        <tag>接口测试</tag>
        <tag>代理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试代理工具charles mock测试</title>
    <url>/posts/api-test-charles-guide/</url>
    <content><![CDATA[<p>charles代理工具支持分析http/https协议，其中https包需要安装SSL证书。charles可用于mock测试，拦截请求与响应，支持对请求和响应进行动态修改，还可用于模拟慢速网络。本文介绍charles 的mock测试方法。</p>
<a id="more"></a>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol>
<li>首先需要安装Charles 的 CA 证书，安装方法参考<a href="https://blog.csdn.net/u010698107/article/details/112728397">charles SSL证书安装</a>。</li>
<li>手机（或者模拟器）配置charles代理</li>
<li>手机安装雪球APP</li>
<li>确认charles可以抓取雪球APPhttps报文<br><img src="charles_xueqiu.png" width="80%" height="80%" /></li>
</ol>
<h1 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h1><p>要求：修改招商银行名称及股票价格<br><img src="charles_xueqiu_zhaoshan.png" width="80%" height="80%" /></p>
<ol>
<li>选择【Tools】&gt; 【Rewrite】<br><img src="charles_xueqiu_rewrite.png" width="80%" height="80%" /></li>
<li>勾选【Enable Rewrite】，添加一条规则雪球xueqiu，Location配置为所有报文<br><img src="charles_xueqiu_rewrite2.png" width="80%" height="80%" /></li>
<li>添加重写规则：“招商银行”改为“招商银行test”，股票价格改为”50“，添加完成后点击确认<br><img src="charles_xueqiu_rewrite3.png" width="80%" height="80%" /></li>
<li>刷新雪球APP行情页面，发现重写成功<br><img src="charles_xueqiu_rewrite4.png" width="80%" height="80%" /></li>
</ol>
<h1 id="Map-Local"><a href="#Map-Local" class="headerlink" title="Map Local"></a>Map Local</h1><p>要求：</p>
<ul>
<li>修改股票名 “招商银行” 为 “招商银行test”</li>
<li>数据倍增</li>
</ul>
<ol>
<li><p>选择【Tools】&gt; 【Mirror】保存数据<br><img src="charles_xueqiu_mirror.png" width="80%" height="80%" /><br><img src="charles_xueqiu_stock2.png" width="80%" height="80%" /><br>或者直接保存响应数据<br><img src="charles_xueqiu_stock.png" width="80%" height="80%" /></p>
</li>
<li><p>修改文件股票名 “招商银行” 为 “招商银行test”</p>
</li>
<li>jq命令数据倍增<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stockdata=$(cat stock.json)</span><br><span class="line">stockdata=$(<span class="built_in">echo</span> <span class="variable">$stockdata</span> | jq <span class="string">&#x27;.data.items+=.data.items&#x27;</span> | jq <span class="string">&#x27;.data.items_size+=.data.items_size&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$stockdata</span> &gt; stock2.json</span><br></pre></td></tr></table></figure></li>
<li>设置maplocal<br>选择刷新股票信息的报文，右键 &gt; 选择Map Local<br><img src="charles_xueqiu_stock_maplocal.png" width="80%" height="80%" /><br>配置参数，导入生成的文件stock2.json<br><img src="charles_xueqiu_stock_maping.png" width="80%" height="80%" /></li>
<li>刷新雪球APP行情页面<br><img src="charles_xueqiu_stock_maplocal2.png" width="80%" height="80%" /></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>mock</tag>
        <tag>接口测试</tag>
        <tag>代理工具</tag>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github/Gitee 搭建个人博客</title>
    <url>/posts/personal-blog-hexo-construction-guide/</url>
    <content><![CDATA[<p>如果你有总结整理的习惯，可以考虑搭建一个个人博客，把文章发布在上面，相比于其它平台，个人博客的好处是你可以随便折腾，没有太多限制。搭建个人博客的框架有很多，比如wordpress、Hexo、Vuepress、Jekyll、Django等，Hexo博客简洁高效，配置简单，文章可以使用markdown语法编写，下面介绍 hexo博客搭建步骤。</p>
<a id="more"></a>
<h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><p>为了节约成本，选择GitHub Pages或者Gitee Pages服务来部署博客，GitHub Pages 是GitHub提供的静态网站部署服务，Gitee Pages是gitee提供的服务，考虑到有时候GitHub有时候无法访问，我的博客是搭建在gitee上的。</p>
<p>如果没有账号，注册一个github或者gitee账号，注册完成后安装git客户端，推荐安装Git for Windows，安装方法可以参考：<a href="https://blog.csdn.net/u010698107/article/details/113485131">Git简易教程-安装及简单使用</a></p>
<h2 id="1-配置Git-SSH公钥"><a href="#1-配置Git-SSH公钥" class="headerlink" title="1. 配置Git SSH公钥"></a>1. 配置Git SSH公钥</h2><p>通过ssh keys将本地的项目与Github/gitee关联起来，配置方法参考：<a href="https://blog.csdn.net/u010698107/article/details/113485131">同一台电脑配置Gitee、Github 的 Git SSH公钥</a></p>
<h2 id="2-GitHub-Pages"><a href="#2-GitHub-Pages" class="headerlink" title="2. GitHub Pages"></a>2. GitHub Pages</h2><p>在 GitHub 新建一个名称为 {username}.github.io的仓库，username是你的github用户名<br><img src="gitHub-pages-repository.png" width="80%" height="80%" /></p>
<h2 id="3-Gitee-Pages"><a href="#3-Gitee-Pages" class="headerlink" title="3. Gitee Pages"></a>3. Gitee Pages</h2><p>GitHub Pages 和Gitee Pages选一个就好，Gitee和GitHub有点不一样，建一个和你的博客项目名一样仓库：<br><img src="gitee-pages-repository.png" width="80%" height="80%" /></p>
<h2 id="4-安装-Node-js"><a href="#4-安装-Node-js" class="headerlink" title="4. 安装 Node.js"></a>4. 安装 Node.js</h2><p>Node.js安装方法参考<a href="https://blog.csdn.net/u010698107/article/details/111416347">Appium 介绍及环境安装</a>，命令行窗口中运行<code>node -v</code>查看是否安装成功。使用如下命令更新：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install npm@latest -g</span><br></pre></td></tr></table></figure><br>准备工作做好后，下面开始Hexo博客的搭建和部署。</p>
<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>首先安装 Hexo 的命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客。<br>命令如下：<br><code>npm install -g hexo-cli</code><br>安装完成后，查看hexo版本：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.19041 win32 x64</span><br><span class="line">node: 12.19.0</span><br><span class="line">v8: 7.8.279.23-node.44</span><br><span class="line">uv: 1.39.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 7</span><br><span class="line">llhttp: 2.1.2</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure><br>安装成功！</p>
<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>先cd 进入你要创建博客项目的目录下：<code>hexo init &#123;name&#125;</code><br>name为博客项目名，注意如果使用Gitee Pages部署服务，创建的仓库名和这里初始化的博客项目名相同。<br><img src="hexo-init.png" width="80%" height="80%" /></p>
<h2 id="Hexo-编译"><a href="#Hexo-编译" class="headerlink" title="Hexo 编译"></a>Hexo 编译</h2><p>进入新生成的博客目录下，调用 Hexo 的 generate 命令，将 Hexo 博客（Markdown文件，在source\_posts目录下，后面会详细介绍）编译生成 HTML 代码：<br><code>hexo generate</code><br>生成的public 文件夹里面包含了 js、css、font 等内容，博客文章在public /posts文件夹下<br><img src="hexo-generate.png" width="80%" height="80%" /></p>
<h2 id="本地运行博客"><a href="#本地运行博客" class="headerlink" title="本地运行博客"></a>本地运行博客</h2><p>利用 Hexo 提供的 serve 命令在本地运行博客：<code>hexo serve</code></p>
<p>浏览器访问<a href="http://localhost:4000，就可以打开博客了，有一篇默认文章：">http://localhost:4000，就可以打开博客了，有一篇默认文章：</a><br><img src="hexo-serve.png" width="80%" height="80%" /></p>
<p>这是博客的默认配置，可以修改配置文件来修改样式，我们先部署到GitHub Pages 上，看看效果。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将编译好的博客发布到github，需要配置github的项目仓库地址。</p>
<p>打开根目录下的 _config.yml 文件，找到 Deployment ，修改如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: git@github.com:ZHHAYO&#x2F;ZHHAYO.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><br>仓库地址为你在<a href="#准备条件">准备条件</a>中新建的仓库地址，查看方式如下：<br><img src="github-url.png" width="80%" height="80%" /></p>
<p>gitee类似：<br><img src="gitee-url.png" width="80%" height="80%" /></p>
<p>HTTPs或者SSH地址都可以。</p>
<p><strong>注意冒号后面要加空格</strong></p>
<h2 id="安装hexo-deployer-git插件"><a href="#安装hexo-deployer-git插件" class="headerlink" title="安装hexo-deployer-git插件"></a>安装hexo-deployer-git插件</h2><p>支持 Git 的部署插件，用于将blog部署到 GitHub 上面<br>安装命令：<br><code>npm install hexo-deployer-git --save</code><br><img src="hexo-deployer-git.png" width="80%" height="80%" /></p>
<h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><p>部署命令：<code>hexo deploy</code></p>
<p>在 blog 目录下，分别输入如下三条命令：</p>
<ul>
<li>hexo clean //清除缓存</li>
<li>hexo g //生成静态文件</li>
<li>hexo d //部署</li>
</ul>
<p>其中 clean 用于清除缓存，g 是 generate 生成网站资源，d 就是 deploy 部署网站。<br><img src="hexo-deploy.png" width="80%" height="80%" /></p>
<h2 id="启动GitHub-Pages"><a href="#启动GitHub-Pages" class="headerlink" title="启动GitHub Pages"></a>启动GitHub Pages</h2><p>进入GitHub仓库可以看到public里面的内容传到了仓库里面：<br><img src="github-hexo-public.png" width="80%" height="80%" /></p>
<p>在博客仓库的Settings界面，下拉找到GitHub Pages，生成博客网址<br><img src="github-pages.png" width="80%" height="80%" /></p>
<p>部署成功后就可以通过<a href="https://{github用户名}.github.io/">https://{github用户名}.github.io/</a> 访问个人博客了</p>
<h2 id="启动Gitee-Pages"><a href="#启动Gitee-Pages" class="headerlink" title="启动Gitee Pages"></a>启动Gitee Pages</h2><p>如果部署到Gitee，也可以在博客仓库下看到上传的资源：<br><img src="gitee-hexo-public.png" width="80%" height="80%" /></p>
<p>Gitee的启动方式类似：<br><img src="gitee-pages.png" width="80%" height="80%" /><br>目前就完成了博客的初始构建，下面就进行博客的基本配置，设置主题等</p>
<p>部署完成后，通过<a href="https://{gitee用户名}.gitee.io/">https://{gitee用户名}.gitee.io/</a> 访问个人博客</p>
<p>Hexo的初步部署就完成了，下一篇文章介绍博客文章创建方法和博客主题的简单配置。</p>
<p><strong>注意：</strong>博客更新到GitHub后，GitHub Pages会自动部署更新后的博客，而Gitee需要手动更新一下。</p>
<h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><p>添加标签页命令：<code>hexo new page tags</code></p>
<p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件：<br><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date:2019-09-2616:44:17</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure></p>
<h1 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h1><p>添加分类页命令：<code>hexo new page categories</code></p>
<p>同样地，会生成一个 source/categories/index.md 文件。</p>
<p>在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure></p>
<h1 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h1><p>博客最核心部分还是你输出的的文章，Hexo博客文章可以使用Markdown语法编写，下面介绍文章创建方法。参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html">https://hexo.io/zh-cn/docs/writing.html</a></p>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>在博客根目录命令行输入<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><br>layout指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p>
<p>新建一篇名为「HelloWorld」的文章，在博客目录下打开命令行：<code>hexo new hello-world</code><br><img src="hexo-new-hello-world.png" width="80%" height="80%" /></p>
<p>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式：HelloWorld.md。<br>使用 MarkDown 编辑HelloWorld.md文件就可以了，markdown 语法参考<a href="http://www.markdown.cn/#inline-html">http://www.markdown.cn/#inline-html</a>， 文章编辑好后，执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean //清除缓存</span><br><span class="line">hexo g //生成静态文件</span><br><span class="line">hexo s //本地查看效果 访问 http://localhost:4000</span><br><span class="line">hexo d //部署</span><br></pre></td></tr></table></figure><br>创建的文章HelloWorld.md会编译到 \public\posts\HelloWorld目录下，编译为html文件。</p>
<h2 id="草稿箱"><a href="#草稿箱" class="headerlink" title="草稿箱"></a>草稿箱</h2><p>也可以新建draft page，顾名思义就是草稿，在博客执行编译操作时，草稿文章不会编译。</p>
<p>创建方法：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo new draft HelloWorld</span><br></pre></td></tr></table></figure><br>创建的草稿文章会出现在 source/_drafts 文件夹下，可以通过如下命令在本地查看草稿文章：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo server --draft</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ hexo s --draft</span><br></pre></td></tr></table></figure><br>完成草稿文章后，可以通过如下命令发布：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo publish HelloWorld</span><br></pre></td></tr></table></figure><br>草稿HelloWorld会移到_posts目录里面去。</p>
<p>当然，新建文章和草稿可以采用手动的方式，最对应的目录下新建Markdown文件即可。</p>
<h2 id="文章标签、分类"><a href="#文章标签、分类" class="headerlink" title="文章标签、分类"></a>文章标签、分类</h2><p>在新建的文章开头编辑文章的题目，作者，日期，标签等。<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2020-10-17 17:24:36</span><br><span class="line">author: hiyo</span><br><span class="line">copyright: true</span><br><span class="line">tags:</span><br><span class="line">  - 标签1    </span><br><span class="line">  - 标签2</span><br><span class="line">categories: 分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h3 id="子分类"><a href="#子分类" class="headerlink" title="子分类"></a>子分类</h3><p>将该文章放到 Sports/Baseball 这个分类下。<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">categories:	</span><br><span class="line">	- Sports</span><br><span class="line">	- Baseball </span><br></pre></td></tr></table></figure><br>或者：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">	- [Sports,Baseball]</span><br></pre></td></tr></table></figure></p>
<h3 id="多个分类"><a href="#多个分类" class="headerlink" title="多个分类"></a>多个分类</h3><p>将文章同时分到两个或者多个不同的类目下<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">categories:  </span><br><span class="line">  - [Sports]  </span><br><span class="line">  - [Play]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">categories:  </span><br><span class="line">  - [Sports,Baseball]</span><br><span class="line">  - [Play]</span><br></pre></td></tr></table></figure>
<h2 id="博客插入图片"><a href="#博客插入图片" class="headerlink" title="博客插入图片"></a>博客插入图片</h2><p>介绍三种方法</p>
<h3 id="src-链接"><a href="#src-链接" class="headerlink" title="src 链接"></a>src 链接</h3><p>外部的 src 链接地址，存放在 CDN 上，或某图床上</p>
<h3 id="本地绝对路径"><a href="#本地绝对路径" class="headerlink" title="本地绝对路径"></a>本地绝对路径</h3><p>将图片统一放在 source/images 文件夹中，在博客中使用如下方式引用图片：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![img](/images/test.jpg)</span><br></pre></td></tr></table></figure></p>
<h3 id="本地相对路径"><a href="#本地相对路径" class="headerlink" title="本地相对路径"></a>本地相对路径</h3><p>将放在文章自己的目录中，配置项目配置文件 _config.yml ：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><br>执行命令 <code>$ hexo new post_name</code>，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name 。将图片资源放在 post_name 中，文章就可以使用相对路径引用图片资源了。<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![img](test.jpg)</span><br></pre></td></tr></table></figure><br>也可以手动创建博客文件和同名文件夹。</p>
<h1 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h1><p>先安装一个插件 hexo-generator-searchdb：<code>npm install hexo-generator-searchdb --save</code><br><img src="hexo-generator-searchdb.png" width="80%" height="80%" /></p>
<p>修改<strong>项目</strong>的 _config.yml 配置文件：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span> </span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> </span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span> </span><br><span class="line">  <span class="string">limit:10000</span></span><br></pre></td></tr></table></figure></p>
<p>修改<strong>主题</strong>的 _config.yml 配置文件：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Gitee Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客主题配置</title>
    <url>/posts/personal-blog-hexo-construction-guide2/</url>
    <content><![CDATA[<p>本文介绍Hexo博客Next主题配置，博客配置效果：<a href="https://hiyong.gitee.io/">https://hiyong.gitee.io/</a>。<br><a id="more"></a></p>
<h1 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h1><p>修改根目录下的 _config.yml 文件，找到 Site 区域，配置站点标题 title、副标题 subtitle 、关键字 keywords，语言等内容：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">\#</span> <span class="string">Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">HiYong</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">XXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">“技术分享，计算机网络，自动化测试，python，Java，机器学习”</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">HiYo</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p>
<h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>Hexo有各种炫酷的主题，可以去 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 查看，选择自己喜欢的主题，个人比较喜欢简洁的，比如Next主题，下面介绍Next主题配置方法。</p>
<p>Next 主题GitHub地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<p>命令行进入到项目的根目录，执行如下命令，下载到themes/next 文件夹下：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><br>或者直接下载</p>
<p>修改<strong>项目</strong>根目录下的_config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></p>
<p>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo serve</span><br></pre></td></tr></table></figure></p>
<h1 id="Next主题配置"><a href="#Next主题配置" class="headerlink" title="Next主题配置"></a>Next主题配置</h1><p><strong>主题设置可以参考官方文档</strong>：<a href="https://theme-next.org/docs/">https://theme-next.org/docs/</a>， 修改 themes/next/_config.yml 文件</p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>Next 主题提供了多种样式，选择Pisces 样式，其它样式<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="comment"># scheme: Gemini</span></span><br></pre></td></tr></table></figure><br>直接刷新页面<br><img src="hexo-next-pisces.png" width="80%" height="80%" /></p>
<h2 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h2><p>Favicon(favorites icon)，是与某个网站或网页相关联的图标，也被称为 website icon（网页图标）、page icon（页面图标）或 url icon（URL 图标）。</p>
<p>favicon 就是站点标签栏的小图标，默认使用的 Hexo 图标，可以自己定制小图标。可以使用<a href="https://realfavicongenerator.net">https://realfavicongenerator.net</a> 生成各种尺寸的图标，上传你制作好的图片，打包下载各种尺寸和适配不同设备的小图标。</p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/logo_favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/logo_favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/logo_apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br></pre></td></tr></table></figure><br>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p>
<h2 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h2><p>avatar 为站点的头像，显示在作者信息旁边</p>
<ul>
<li>将头像放置到 themes/next/source/images/avatar.png 路径</li>
<li>然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># url: #/images/avatar.gif</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/logo_android-chrome-192x192-wechat.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>rounded：是否显示圆形<br>rotated：是否带有旋转效果</p>
<h2 id="rss"><a href="#rss" class="headerlink" title="rss"></a>rss</h2><blockquote>
<p>简易信息聚合 (Really Simple Syndication或Richsite summary)是站点用来和其他站点之间共享内容的一种简易方式。</p>
</blockquote>
<p><strong>1. 安装插件hexo-generator-feed</strong><br>在项目根目录下运行命令：<code>npm install hexo-generator-feed --save</code></p>
<p>安装完成之后，站点会自动生成 RSS Feed 文件</p>
<p><strong>2. 编辑项目配置文件</strong><br>在项目根目录下的 _config.yml 文件中添加以下代码<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br></pre></td></tr></table></figure><br>将 url 修改为自己博客的域名<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://hiyong.gitee.io</span></span><br></pre></td></tr></table></figure></p>
<p><strong>3. 修改 Next 主题配置文件</strong><br>修改Next 主题配置文件_config.yml：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/hiyongz/||</span> <span class="string">fa</span> <span class="string">fa-github</span>  </span><br><span class="line">  <span class="comment"># E-Mail: zhiyo2016@163.com/|| envelope</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure></p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>修改Next 主题配置文件 _config.yml ，设置代码块样式，比如设置为类似 Mac 的样式：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure></p>
<h2 id="回到页面顶部"><a href="#回到页面顶部" class="headerlink" title="回到页面顶部"></a>回到页面顶部</h2><p>修改Next 主题配置文件 _config.yml 的 back2top 字段：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="阅读进度条"><a href="#阅读进度条" class="headerlink" title="阅读进度条"></a>阅读进度条</h2><p>在文章上侧显示阅读进度条，修改Next 主题配置文件 _config.yml：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure></p>
<h2 id="GitHub-图标"><a href="#GitHub-图标" class="headerlink" title="GitHub 图标"></a>GitHub 图标</h2><p>右上角 GitHub 图标<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/hiyongz</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure></p>
<h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>渲染公式，配置如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>mathjax 需要安装插件 hexo-renderer-kramed，也可以安装 hexo-renderer-pandoc，命令如下：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>
<h1 id="添加自定义-Page"><a href="#添加自定义-Page" class="headerlink" title="添加自定义 Page"></a>添加自定义 Page</h1><p>博客根目录运行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page name //name为新增Page名称</span><br></pre></td></tr></table></figure></p>
<p>执行成功后，在  source 目录会生成了一个 name目录，编辑目录下index.md 文件：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: books</span><br><span class="line">date: 2020-11-22 22:05:40</span><br><span class="line">type: books</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line">正文：。。。。。</span><br></pre></td></tr></table></figure>
<p>编辑主题配置文件 themes/next/_config.yml：<br><img src="hexo-next-book.png" width="80%" height="80%" /></p>
<p>图标名book可以在 <a href="https://fontawesome.dashgame.com/">https://fontawesome.dashgame.com/</a> 中查找，home、tags、th等图标都是在这个网站上获取的。</p>
<p>编辑 themes/next/languages/zh-CN.yml 文件<br><img src="hexo-next-book-languages.png" width="80%" height="80%" /></p>
<p>重新编译部署后，刷新页面，配置成功：<br><img src="hexo-book2.png" width="80%" height="80%" /></p>
<h1 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h1><ul>
<li>Valine 评论系统不需要登录便可以评论</li>
<li>支持 MarkDown 语法</li>
<li>无后端实现，快速高效</li>
</ul>
<h2 id="1-注册-LeanCloud"><a href="#1-注册-LeanCloud" class="headerlink" title="1. 注册 LeanCloud"></a>1. 注册 LeanCloud</h2><p><a href="https://leancloud.cn/dashboard/login.html#/signin">https://leancloud.cn/dashboard/login.html#/signin</a></p>
<h2 id="2-创建应用"><a href="#2-创建应用" class="headerlink" title="2. 创建应用"></a>2. 创建应用</h2><p>访问控制台，创建应用，选择开发版，创建好之后就生成了 App ID 和 App Key</p>
<p><img src="valine-leancloud.png" width="80%" height="80%" /></p>
<p>创建完成后，打开应用，点击存储，创建 Counter 和 Comment 两个 Classes：</p>
<p><img src="valine-counter-comment.png" width="80%" height="80%" /></p>
<p>点击设置 -&gt; 安全中心 -&gt; 在服务开关，打开数据存储，在 Web 安全域名输入框填写博客的域名地址：</p>
<p><img src="valine-db.png" width="80%" height="80%" /></p>
<h2 id="3-设置-Next-主题配置文件"><a href="#3-设置-Next-主题配置文件" class="headerlink" title="3. 设置 Next 主题配置文件"></a>3. 设置 Next 主题配置文件</h2><p>在主题的配置文件中，修改 valine 配置<br><img src="valine-next-config.png" width="80%" height="80%" /></p>
<p>修改 valine.min.js 的 cdn 文件地址，到 <a href="https://www.jsdelivr.com/package/npm/valine">https://www.jsdelivr.com/package/npm/valine</a> 这个地址查看最新版本的Valine，</p>
<p><img src="valine-min-js.png" width="80%" height="80%" /></p>
<p>复制最新cdn地址，修改主题配置文件_config.yml 。<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span> <span class="string">https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure></p>
<h1 id="文章末尾添加公众号订阅"><a href="#文章末尾添加公众号订阅" class="headerlink" title="文章末尾添加公众号订阅"></a>文章末尾添加公众号订阅</h1><h2 id="1-准备公众号二维码图片"><a href="#1-准备公众号二维码图片" class="headerlink" title="1. 准备公众号二维码图片"></a>1. 准备公众号二维码图片</h2><p>将二维码图片放到\source\uploads目录下</p>
<h2 id="2-修改主题文件"><a href="#2-修改主题文件" class="headerlink" title="2. 修改主题文件"></a>2. 修改主题文件</h2><p>找到 themes\next\layout_macro\post.swig 文件，在 footer前面添加以下代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wechat_subscriber&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: block; padding: 10px 0; margin: 20px auto; width: 100%; text-align: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;wechat_subscriber_qcode&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/uploads/wechat.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; max-width: 100%;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>关注微信公众号，及时接收最新技术文章！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="hexo-post-wechat.png" width="80%" height="80%" /></p>
<p>修改主题配置文件_config.yml ，添加如下代码：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span> </span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">qcode:</span> <span class="string">/uploads/wechat.jpg</span></span><br><span class="line"> <span class="attr">description:</span> <span class="string">&quot;欢迎您扫一扫上面的微信公众号，订阅我的博客！&quot;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="文章底部版权声明"><a href="#文章底部版权声明" class="headerlink" title="文章底部版权声明"></a>文章底部版权声明</h1><h2 id="1-my-copyright-swig"><a href="#1-my-copyright-swig" class="headerlink" title="1. my-copyright.swig"></a>1. my-copyright.swig</h2><p>在目录 themes/next/layout/_macro/ 下添加 my-copyright.swig ，内容如下：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-post-copyright&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; page.title &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;copy-path&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;点击复制文章链接&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clipboard&quot;</span> <span class="attr">data-clipboard-text</span>=<span class="string">&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</span>  <span class="attr">aria-label</span>=<span class="string">&quot;复制成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>本博客文章除特别声明外，均采用<span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;license&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;</span>&gt;</span>CC BY-NC-ND 4.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 许可协议。转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;.fa-clipboard&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    clipboard.on(<span class="string">&#x27;success&#x27;</span>, $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;.fa-clipboard&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        swal(&#123;   </span><br><span class="line"><span class="javascript">          title: <span class="string">&quot;&quot;</span>,   </span></span><br><span class="line"><span class="javascript">          text: <span class="string">&#x27;复制成功&#x27;</span>,   </span></span><br><span class="line"><span class="javascript">          html: <span class="literal">false</span>,</span></span><br><span class="line">          timer: 500,   </span><br><span class="line"><span class="javascript">          showConfirmButton: <span class="literal">false</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-my-post-copyright-styl"><a href="#2-my-post-copyright-styl" class="headerlink" title="2. my-post-copyright.styl"></a>2. my-post-copyright.styl</h2><p>在目录 themes/next/source/css/_common/components/post/ 下添加 my-post-copyright.styl，内容如下:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.my-post-copyright &#123;</span><br><span class="line">  //width: 85%;</span><br><span class="line">  //max-width: 45em;</span><br><span class="line">  //margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  border-left: 3px solid #ff1700;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright p&#123;margin:0;&#125;</span><br><span class="line">.my-post-copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #333333; // title color</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright a:hover &#123;</span><br><span class="line">  color: #0593d3; // link color</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my-post-copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-post-swig"><a href="#3-post-swig" class="headerlink" title="3. post.swig"></a>3. post.swig</h2><p>修改 themes/next/layout/_macro/post.swig，在前面添加公众号的位置上面添加：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">    	&#123;% include &#x27;my-copyright.swig&#x27; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-post-styl-文件"><a href="#4-post-styl-文件" class="headerlink" title="4. post.styl 文件"></a>4. post.styl 文件</h2><p>打开 themes/next/source/css/_common/components/post/post.styl 文件，在最后一行增加代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@import &#x27;my-post-copyright&#x27;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-修改主题配置文件"><a href="#5-修改主题配置文件" class="headerlink" title="5. 修改主题配置文件"></a>5. 修改主题配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-ND</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh</span></span><br></pre></td></tr></table></figure>
<h1 id="字数统计、阅读时间统计"><a href="#字数统计、阅读时间统计" class="headerlink" title="字数统计、阅读时间统计"></a>字数统计、阅读时间统计</h1><p>安装 hexo-wordcount 插件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i hexo-wordcount --save</span><br><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><br>在主题配置文件 _config.yml 中打开 wordcount 统计功能<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span> <span class="comment"># 单篇 字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span> <span class="comment"># 单篇 阅读时长</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">false</span> <span class="comment"># 网站 字数统计</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                   <span class="comment"># Average Word Length</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                 <span class="comment"># Words Per Minute（每分钟阅读词数）</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure></p>
<h1 id="博客加密"><a href="#博客加密" class="headerlink" title="博客加密"></a>博客加密</h1><p>安装hexo-blog-encrypt插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>
<p>github地址：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p>
<h1 id="hexo-d-部署失败问题"><a href="#hexo-d-部署失败问题" class="headerlink" title="hexo d 部署失败问题"></a>hexo d 部署失败问题</h1><p>hexo d 部署失败问题：<br><img src="hexo-d-error.png" width="80%" height="80%" /><br>原因是没有配置git仓库同户名和邮箱地址，因为我电脑上配置了github和gitee，所以删除了全局的同户名和邮箱地址。</p>
<p>解决方案是添加本地用户名和邮箱：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;github或者gitee用户名&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;github或者gitee采用的邮箱&quot;</span></span><br></pre></td></tr></table></figure><br>注意前提是已经配置了SSH公钥，如果没有配置可参考<a href="https://blog.csdn.net/u010698107/article/details/113485131">同一台电脑配置Gitee、Github 的 Git SSH公钥</a></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Gitee Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试框架Requests</title>
    <url>/posts/api-test-requests/</url>
    <content><![CDATA[<p>python内置了HTTP库 urllib，可以用于发送http请求。基于Python的第三方库Requests是对urllib的再次封装，相比urllib更加简洁易用。Requests库不仅用于接口测试，还用在Python爬虫、量化交易等。本文介绍Requests库的使用方法。<br><a id="more"></a></p>
<h1 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h1><p>HTTP接口测试涉及到以下几个方面：</p>
<ul>
<li>构造请求方法：get、post、put、 delete、head ……</li>
<li>构造请求体：form、json、xml、 binary</li>
<li>分析响应结果：status code、 response body、 json path、 xpath</li>
</ul>
<p>下面介绍使用Requests怎么实现这些步骤。</p>
<h2 id="Requests安装"><a href="#Requests安装" class="headerlink" title="Requests安装"></a>Requests安装</h2><p>Github地址：<a href="https://github.com/psf/requests">Python HTTP Requests for Humans</a><br>requests官方文档: <a href="https://requests.readthedocs.io/zh_CN/latest/index.html">https://requests.readthedocs.io/zh_CN/latest/index.html</a></p>
<p><img src="requests.png" alt="png"></p>
<p>安装：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></p>
<p>http请求响应测试接口：<a href="https://httpbin.testing-studio.com/">https://httpbin.testing-studio.com/</a><br>也可以自己本地搭建，GitHub地址：<a href="https://github.com/postmanlabs/httpbin">https://github.com/postmanlabs/httpbin</a></p>
<h1 id="Requests常见接口请求方法构造"><a href="#Requests常见接口请求方法构造" class="headerlink" title="Requests常见接口请求方法构造"></a>Requests常见接口请求方法构造</h1><p>常见接口请求方法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>) <span class="comment">#get请求</span></span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;) <span class="comment">#post请求</span></span><br><span class="line">r = requests.put(<span class="string">&#x27;http://httpbin.org/put&#x27;</span>, data = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">r = requests.delete(<span class="string">&#x27;http://httpbin.org/delete&#x27;</span>)</span><br><span class="line">r = requests.head(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">r = requests.options(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="请求目标构造"><a href="#请求目标构造" class="headerlink" title="请求目标构造"></a>请求目标构造</h2><p>请求URL<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>) <span class="comment">#get请求</span></span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure></p>
<h2 id="header构造"><a href="#header构造" class="headerlink" title="header构造"></a>header构造</h2><p>普通的 header<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">headers =&#123;user-agent<span class="string">&#x27;: &#x27;</span>my-app/<span class="number">0.0</span><span class="number">.1</span><span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">r= requests.get(url, headers=headers)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">cookies = <span class="built_in">dict</span>(cookies_are=<span class="string">&#x27;working&#x27;</span>)</span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br></pre></td></tr></table></figure>
<h1 id="构造请求体"><a href="#构造请求体" class="headerlink" title="构造请求体"></a>构造请求体</h1><p>请求体通过键值对的形式编码，有多种形式的请求体，比如query参数、form请求、binary请求（上传文件）以及结构化请求：json、xml、 json rpc等。</p>
<h2 id="Get-Query请求"><a href="#Get-Query请求" class="headerlink" title="Get Query请求"></a>Get Query请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload= &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;valuel&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>, params=payload)</span><br></pre></td></tr></table></figure>
<h2 id="Form请求参数"><a href="#Form请求参数" class="headerlink" title="Form请求参数"></a>Form请求参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;valuel&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&quot;https://httpbin.org/post&quot;</span>, data=payload)</span><br></pre></td></tr></table></figure>
<h2 id="JSON请求体构造"><a href="#JSON请求体构造" class="headerlink" title="JSON请求体构造"></a>JSON请求体构造</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, json=payload)</span><br></pre></td></tr></table></figure>
<h2 id="xml请求"><a href="#xml请求" class="headerlink" title="xml请求"></a>xml请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">xml =<span class="string">&quot;&quot;&quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;&lt;a&gt;6&lt;/a&gt;&quot;&quot;&quot;</span> </span><br><span class="line">headers=&#123;<span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;application/xml&#x27;</span>&#125; </span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=xml, headers=headers).text</span><br></pre></td></tr></table></figure>
<h2 id="binary请求"><a href="#binary请求" class="headerlink" title="binary请求"></a>binary请求</h2><p>上传文件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=files)</span><br></pre></td></tr></table></figure></p>
<h1 id="接口测试断言"><a href="#接口测试断言" class="headerlink" title="接口测试断言"></a>接口测试断言</h1><p>接口测试中需要通过检查响应是否符合预期来测试接口有效性，也就是对接口响应进行断言。</p>
<h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><ul>
<li>r.url：</li>
<li>r.status_code</li>
<li>r.headers</li>
<li>r.cookies</li>
<li>r.encoding</li>
<li>r.content</li>
<li>r.text</li>
<li>r.json()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRequest</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_get</span>(<span class="params">self</span>):</span></span><br><span class="line">        r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>) <span class="comment">#get请求</span></span><br><span class="line">        <span class="keyword">assert</span> r.status_code == <span class="number">200</span>        </span><br></pre></td></tr></table></figure>
<h2 id="结构化响应断言"><a href="#结构化响应断言" class="headerlink" title="结构化响应断言"></a>结构化响应断言</h2><p>下面是请求Github项目仓库API，GitHub API可参考：<a href="https://docs.github.com/cn/rest/overview">https://docs.github.com/cn/rest/overview</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/repos/hiyongz/DjangoDemo&#x27;</span>)</span><br><span class="line">json_data = r.json()</span><br><span class="line">print(json.dumps(json_data, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>响应的部分json数据如下：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">272401302</span>,</span><br><span class="line">    <span class="attr">&quot;node_id&quot;</span>: <span class="string">&quot;MDEwOlJlcG9zaXRvcnkyNzI0MDEzMDI=&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;DjangoDemo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;full_name&quot;</span>: <span class="string">&quot;hiyongz/DjangoDemo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;login&quot;</span>: <span class="string">&quot;hiyongz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">20513021</span>,</span><br><span class="line">        <span class="attr">&quot;node_id&quot;</span>: <span class="string">&quot;MDQ6VXNlcjIwNTEzMDIx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;avatar_url&quot;</span>: <span class="string">&quot;https://avatars0.githubusercontent.com/u/20513021?v=4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gravatar_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        ...................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来介绍不同方法对这个json响应进行断言。</p>
<h3 id="json断言"><a href="#json断言" class="headerlink" title="json断言"></a>json断言</h3><p>json断言<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_json</span>(<span class="params">self</span>):</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;https://api.github.com/repos/hiyongz/DjangoDemo&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> r.json()[<span class="string">&#x27;owner&#x27;</span>][<span class="string">&#x27;login&#x27;</span>] == <span class="string">&quot;hiyongz&quot;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="JSONPath断言"><a href="#JSONPath断言" class="headerlink" title="JSONPath断言"></a>JSONPath断言</h3><p>JSONPath文档：<a href="https://goessner.net/articles/JsonPath/">https://goessner.net/articles/JsonPath/</a><br>JSONPath表达式与XPath类似，是XPath在json中的应用，全称XPath for JSON，用于从JSON文档中提取数据。</p>
<p>JSONPath表达式和XPath语法对比如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>XPath</strong></th>
<th><strong>JSONPath</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>$</td>
<td>跟节点</td>
</tr>
<tr>
<td>.</td>
<td>@</td>
<td>当前节点</td>
</tr>
<tr>
<td>/</td>
<td>. or []</td>
<td>儿子节点</td>
</tr>
<tr>
<td>..</td>
<td>N/A</td>
<td>父节点</td>
</tr>
<tr>
<td>//</td>
<td>..</td>
<td>子孙节点</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>匹配所有节点</td>
</tr>
<tr>
<td>@</td>
<td>N/A</td>
<td>属性</td>
</tr>
<tr>
<td>[]</td>
<td>[]</td>
<td>下标操作符</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>[,]</td>
<td>多选</td>
</tr>
<tr>
<td>N/A</td>
<td>[start​ : end : ​step]</td>
<td>切片</td>
</tr>
<tr>
<td>[]</td>
<td>?()</td>
<td>过滤表达式</td>
</tr>
<tr>
<td>N/A</td>
<td>()</td>
<td>script 表达式</td>
</tr>
<tr>
<td>()</td>
<td>N/A</td>
<td>分组</td>
</tr>
</tbody>
</table>
</div>
<p>Python中有个jsonpath库可用于处理json数据：<a href="https://pypi.org/project/jsonpath/">https://pypi.org/project/jsonpath/</a><br>安装：<br><code>pip install jsonpath</code></p>
<p>和前面一样，断言登录名：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> jsonpath <span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_json</span>(<span class="params">self</span>):</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;https://api.github.com/repos/hiyongz/DjangoDemo&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> jsonpath(r.json(), <span class="string">&#x27;$..login&#x27;</span>)[<span class="number">0</span>] == <span class="string">&quot;hiyongz&quot;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="schema断言"><a href="#schema断言" class="headerlink" title="schema断言"></a>schema断言</h2><p>JSON Schema可以用来注释和验证 JSON 文档，官网：<a href="http://json-schema.org/">http://json-schema.org/</a>。</p>
<p>JSON Schema可用来添加自定义规则，可以自定义数据类型：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">schema = &#123;</span><br><span class="line">    &quot;type&quot; : &quot;object&quot;,</span><br><span class="line">    &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;price&quot; : &#123;&quot;type&quot; : &quot;number&quot;&#125;,</span><br><span class="line">        &quot;name&quot; : &#123;&quot;type&quot; : &quot;string&quot;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到，除了字段值断言外，可以使用JSON Schema来断言接口返回值的类型。</p>
<p>把json格式转成schema，在线生成schema网址：<a href="https://jsonschema.net/">https://jsonschema.net/</a></p>
<p>jsonschema是使用JSON Schema的Python库，通过 <code>pip install jsonschema</code> 命令安装。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> jsonschema <span class="keyword">import</span> validate</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_login_jsonschema</span>(<span class="params">self</span>):</span></span><br><span class="line">    url = <span class="string">&quot;https://api.github.com/repos/hiyongz/DjangoDemo&quot;</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    data = r.json()</span><br><span class="line">    schema = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;DjangoDemo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;owner&quot;</span> : &#123;</span><br><span class="line">        	<span class="string">&quot;login&quot;</span> : <span class="string">&quot;hiyongz&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    validate(data, schema=schema)</span><br></pre></td></tr></table></figure></p>
<p>JSON Schema可以用来进行自动校验：在接口测试中，每次运行的时候自动保存当前的 schema，下次运行对比上次的 schema，如果发现变更就报错</p>
<h3 id="xml解析断言"><a href="#xml解析断言" class="headerlink" title="xml解析断言"></a>xml解析断言</h3><p>xml文件解析可以使用requests_xml，参考：<a href="https://github.com/erinxocon/requests-xml">https://github.com/erinxocon/requests-xml</a></p>
<p>也可以使用Python xml.etree.ElementTree模块解析xml数据，可以使用Xpath定位，使用方法参考：<a href="https://blog.csdn.net/u010698107/article/details/111415888">Web自动化测试：xpath &amp; CSS Selector定位</a></p>
<p>xml.etree.ElementTree模块xml解析举例：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">root = ET.fromstring(countrydata)</span><br><span class="line">root.findall(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">root.findall(<span class="string">&quot;./country/neighbor&quot;</span>)</span><br><span class="line">root.findall(<span class="string">&quot;.//year/..[@name=&#x27;Singapore&#x27;]&quot;</span>)</span><br><span class="line">root.findall(<span class="string">&quot;.//*[@name=&#x27;Singapore&#x27;]/year&quot;</span>)</span><br><span class="line">root.findall(<span class="string">&quot;.//neighbor[2]&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p>和JSON Schema一样，也有一个XML Schema，用于解析xml文档，文档参考：<a href="https://www.w3.org/2001/XMLSchema">https://www.w3.org/2001/XMLSchema</a></p>
<p>Python库安装： <code>pip install xmlschema</code></p>
<h2 id="hamcrest断言"><a href="#hamcrest断言" class="headerlink" title="hamcrest断言"></a>hamcrest断言</h2><p>除了常用的Assert断言以外，有一个功能更加强大的断言方法叫Hamcrest 断言，具有丰富的断言匹配器，支持多种语言，官网地址：<a href="http://hamcrest.org/">http://hamcrest.org/</a></p>
<p>下面简单介绍一下Python中的hamcrest断言使用方法</p>
<p>PyHamcrest GitHub仓库地址：<a href="https://github.com/hamcrest/PyHamcrest">https://github.com/hamcrest/PyHamcrest</a><br>文档：<a href="https://pyhamcrest.readthedocs.io/en/v2.0.2/tutorial/">https://pyhamcrest.readthedocs.io/en/v2.0.2/tutorial/</a></p>
<p>安装PyHamcrest：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install PyHamcrest</span><br></pre></td></tr></table></figure><br>断言登录名：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hamcrest <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_hamcrest</span>(<span class="params">self</span>):</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;https://api.github.com/repos/hiyongz/DjangoDemo&#x27;</span>)</span><br><span class="line">    data = r.json()</span><br><span class="line">    assert_that(data[<span class="string">&#x27;owner&#x27;</span>][<span class="string">&#x27;login&#x27;</span>], equal_to(<span class="string">&quot;hiyongz&quot;</span>))</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>Requests</tag>
      </tags>
  </entry>
  <entry>
    <title>Python PEP—Python增强提案</title>
    <url>/posts/Python-Enhancement-Proposals/</url>
    <content><![CDATA[<p>PEP的全称是Python Enhancement Proposals，Python增强提案。描述了Python的语言特性、功能、编程规范等，包括了技术规范和功能的基本原理说明，是了解Python语言的详细指南。<br><a id="more"></a><br>PEP官网：<a href="https://www.python.org/dev/peps/">https://www.python.org/dev/peps/</a></p>
<p>PEP创建于2000年，到目前已经有上千个提案了，下面介绍几个值得仔细阅读了解的提案。</p>
<h3 id="1-PEP-8-编码规范"><a href="#1-PEP-8-编码规范" class="headerlink" title="1. PEP 8 - 编码规范"></a>1. PEP 8 - 编码规范</h3><p><a href="https://www.python.org/dev/peps/pep-0008/">PEP 8 — Style Guide for Python Code</a>：定义了编写 Python 代码的规范和编码原则</p>
<h3 id="2-PEP-257-文档注释"><a href="#2-PEP-257-文档注释" class="headerlink" title="2. PEP 257 - 文档注释"></a>2. PEP 257 - 文档注释</h3><p><a href="https://www.python.org/dev/peps/pep-0257/">PEP 257 — Docstring Conventions</a><br>文档注释规范</p>
<h3 id="3-PEP-20-Python之禅"><a href="#3-PEP-20-Python之禅" class="headerlink" title="3. PEP 20 - Python之禅"></a>3. PEP 20 - Python之禅</h3><p><a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 — The Zen of Python</a><br>Python之禅，在Python终端导入this模块查看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than <span class="built_in">complex</span>.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">&#x27;t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">&#x27;s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!</span><br></pre></td></tr></table></figure>
<h3 id="4-PEP-202-列表"><a href="#4-PEP-202-列表" class="headerlink" title="4. PEP 202 - 列表"></a>4. PEP 202 - 列表</h3><p><a href="https://www.python.org/dev/peps/pep-0202/">PEP 202 — List Comprehensions</a><br>列表生成式</p>
<h3 id="5-PEP-274-字典"><a href="#5-PEP-274-字典" class="headerlink" title="5. PEP 274 - 字典"></a>5. PEP 274 - 字典</h3><p><a href="https://www.python.org/dev/peps/pep-0274/">PEP 274 — Dict Comprehensions</a><br>字典生成式</p>
<h3 id="6-PEP-234-迭代器"><a href="#6-PEP-234-迭代器" class="headerlink" title="6. PEP 234 - 迭代器"></a>6. PEP 234 - 迭代器</h3><p><a href="https://www.python.org/dev/peps/pep-0234/">PEP 234 — Iterators</a><br>迭代器</p>
<h3 id="7-PEP-279-enumerate"><a href="#7-PEP-279-enumerate" class="headerlink" title="7. PEP 279 - enumerate"></a>7. PEP 279 - enumerate</h3><p><a href="https://www.python.org/dev/peps/pep-0279/">PEP 279 — The enumerate() built-in function</a><br>enumerate枚举函数</p>
<h3 id="8-PEP-282-日志"><a href="#8-PEP-282-日志" class="headerlink" title="8. PEP 282 - 日志"></a>8. PEP 282 - 日志</h3><p><a href="https://www.python.org/dev/peps/pep-0282/">PEP 282 — A Logging System</a><br>日志模块</p>
<h3 id="9-PEP-289-生成器"><a href="#9-PEP-289-生成器" class="headerlink" title="9. PEP 289 - 生成器"></a>9. PEP 289 - 生成器</h3><p><a href="https://www.python.org/dev/peps/pep-0289/">PEP 289 — Generator Expressions</a><br>生成器表达式</p>
<h3 id="10-PEP-318-装饰器"><a href="#10-PEP-318-装饰器" class="headerlink" title="10. PEP 318 - 装饰器"></a>10. PEP 318 - 装饰器</h3><p><a href="https://www.python.org/dev/peps/pep-0318/">PEP 318 — Decorators for Functions and Methods</a><br>装饰器</p>
<h3 id="11-PEP-309-偏函数"><a href="#11-PEP-309-偏函数" class="headerlink" title="11. PEP 309 - 偏函数"></a>11. PEP 309 - 偏函数</h3><p><a href="https://www.python.org/dev/peps/pep-0309/">PEP 309 — Partial Function Application</a>：Python 偏函数</p>
<h3 id="12-PEP-333-web-服务"><a href="#12-PEP-333-web-服务" class="headerlink" title="12. PEP 333 - web 服务"></a>12. PEP 333 - web 服务</h3><p><a href="https://www.python.org/dev/peps/pep-0333/">PEP 333 — Python Web Server Gateway Interface v1.0</a>：Web开发相关，WSGI协议，描述 web 服务器和 Python web 应用程序\框架之间的标准接口。<br><a href="https://www.python.org/dev/peps/pep-3333/">PEP 3333 — Python Web Server Gateway Interface v1.0.1</a>：PEP 333的更新版本</p>
<h3 id="13-PEP-343-with语句"><a href="#13-PEP-343-with语句" class="headerlink" title="13. PEP 343 - with语句"></a>13. PEP 343 - with语句</h3><p><a href="https://www.python.org/dev/peps/pep-0343/">PEP 343 — The “with” Statement</a><br>with语句</p>
<h3 id="14-PEP-484-类型提示"><a href="#14-PEP-484-类型提示" class="headerlink" title="14. PEP 484 - 类型提示"></a>14. PEP 484 - 类型提示</h3><p><a href="https://www.python.org/dev/peps/pep-0484/">PEP 484 — Type Hints</a>：Python类型提示（Type Hints），在Python3.5.0中引入，允许开发者指定变量类型。</p>
<h3 id="15-PEP-342-协程"><a href="#15-PEP-342-协程" class="headerlink" title="15. PEP 342 - 协程"></a>15. PEP 342 - 协程</h3><p><a href="https://www.python.org/dev/peps/pep-0342/">PEP 342 — Coroutines via Enhanced Generators</a>：协程和yield</p>
<h3 id="16-PEP-498-字符串插值"><a href="#16-PEP-498-字符串插值" class="headerlink" title="16. PEP 498 - 字符串插值"></a>16. PEP 498 - 字符串插值</h3><p><a href="https://www.python.org/dev/peps/pep-0498/">PEP 498 — Literal String Interpolation</a><br>Python3.6新提出的字符串插值方法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anniversary = datetime.date(<span class="number">1991</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span>, my age next year is <span class="subst">&#123;age+<span class="number">1</span>&#125;</span>, my anniversary is <span class="subst">&#123;anniversary:%A, %B %d, %Y&#125;</span>.&#x27;</span></span><br><span class="line"><span class="string">&#x27;My name is Fred, my age next year is 51, my anniversary is Saturday, October 12, 1991.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;He said his name is <span class="subst">&#123;name!r&#125;</span>.&#x27;</span></span><br><span class="line"><span class="string">&quot;He said his name is &#x27;Fred&#x27;.&quot;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="17-PEP-3101-字符串格式化"><a href="#17-PEP-3101-字符串格式化" class="headerlink" title="17. PEP 3101 - 字符串格式化"></a>17. PEP 3101 - 字符串格式化</h3><p><a href="https://www.python.org/dev/peps/pep-3101/">PEP 3101 — Advanced String Formatting</a><br>字符串格式化</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP</tag>
      </tags>
  </entry>
  <entry>
    <title>同一台电脑配置Gitee、Github 的 Git SSH公钥</title>
    <url>/posts/git-generate-ssh-public-key-guide/</url>
    <content><![CDATA[<p>为了安全，远程登录上传项目需要通过认证，Git 服务器基本都使用 SSH 公钥进行认证登录，为了减去每次登录需要输入秘钥的麻烦，可以事先配置ssh公钥，SSH 密钥默认存储在 ~/.ssh 目录下。<a id="more"></a> 下面介绍一台电脑上配置 Gitee 和 GithubSSH公钥的方法。</p>
<h1 id="1-清除-git-的全局设置"><a href="#1-清除-git-的全局设置" class="headerlink" title="1. 清除 git 的全局设置"></a>1. 清除 git 的全局设置</h1><p>如果已经配置Git，需要先清除git 的全局设置，如果没有就跳过这一步。<br><code>git config --global --list</code> 查看是否设置：<br><img src="git-config-global-list.png" width="80%" height="80%" /></p>
<p>删除设置<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line">git config --global --<span class="built_in">unset</span> yser.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> yser.email</span><br></pre></td></tr></table></figure></p>
<h1 id="2-创建-ssh-key"><a href="#2-创建-ssh-key" class="headerlink" title="2. 创建 ssh key"></a>2. 创建 ssh key</h1><p>进入 .ssh 文件夹下，生成 key<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment"># 进入 .ssh 文件夹下</span></span><br><span class="line"><span class="comment"># 生成 key，邮件地址为 Gitee 或者 Github 使用的邮件地址 </span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置Github-的-ssh-key"><a href="#配置Github-的-ssh-key" class="headerlink" title="配置Github 的 ssh key"></a>配置Github 的 ssh key</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Github 使用的邮件地址&quot;</span></span><br></pre></td></tr></table></figure>
<p>设置 Github 的 ssh key 为 id_rsa_github<br><img src="id_rsa_github.png" width="80%" height="80%" /></p>
<h2 id="配置Gitee-的-ssh-key"><a href="#配置Gitee-的-ssh-key" class="headerlink" title="配置Gitee 的 ssh key"></a>配置Gitee 的 ssh key</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Gitee 使用的邮件地址&quot;</span></span><br></pre></td></tr></table></figure>
<p>设置 Gitee 的 ssh key 为 id_rsa_gitee<br><img src="id_rsa_gitee.png" width="80%" height="80%" /></p>
<p>完成后会在~/.ssh / 目录下生成以下文件</p>
<ul>
<li>id_rsa.github</li>
<li>id_rsa.github.pub</li>
<li>id_rsa.gitee</li>
<li>id_rsa.gitee.pub</li>
</ul>
<p><img src="git-ssh.png" width="80%" height="80%" /></p>
<h1 id="3-在-Github-和-Gitee-中添加-public-key"><a href="#3-在-Github-和-Gitee-中添加-public-key" class="headerlink" title="3. 在 Github 和 Gitee 中添加 public key"></a>3. 在 Github 和 Gitee 中添加 public key</h1><p>进入 .ssh 文件夹下<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p>
<h2 id="配置GitHub-的public-key"><a href="#配置GitHub-的public-key" class="headerlink" title="配置GitHub 的public key"></a>配置GitHub 的public key</h2><p>复制 public key<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 id_rsa_github.pub 文件内容 </span></span><br><span class="line">cat id_rsa_github.pub</span><br></pre></td></tr></table></figure><br><img src="id_rsa_github-pub.png" width="80%" height="80%" /></p>
<p>点击新增 SHH key<br><img src="github-ssh-key.png" width="80%" height="80%" /></p>
<p>粘贴复制的public key<br><img src="github-ssh-key2.png" width="80%" height="80%" /></p>
<h2 id="配置Gitee-的public-key"><a href="#配置Gitee-的public-key" class="headerlink" title="配置Gitee 的public key"></a>配置Gitee 的public key</h2><p>复制 public key，新增 SHH key<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 id_rsa_github.pub 文件内容 </span></span><br><span class="line">cat id_rsa_gitee.pub</span><br></pre></td></tr></table></figure><br><img src="id_rsa_gitee-pub.png" width="80%" height="80%" /></p>
<p><img src="gitee-public-key.png" width="80%" height="80%" /></p>
<h1 id="4-创建配置文件-解决ssh冲突"><a href="#4-创建配置文件-解决ssh冲突" class="headerlink" title="4. 创建配置文件 解决ssh冲突"></a>4. 创建配置文件 解决ssh冲突</h1><p>在 .ssh 文件夹中创建 config 文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh </span><br><span class="line">vim config </span><br></pre></td></tr></table></figure></p>
<p>添加以下内容以区分两个 ssh key：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostiName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitee</span><br></pre></td></tr></table></figure></p>
<h1 id="5-测试连接是否正常"><a href="#5-测试连接是否正常" class="headerlink" title="5. 测试连接是否正常"></a>5. 测试连接是否正常</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>查看是否连接成功<br><img src="github-ssh-T.png" width="80%" height="80%" /></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p>连接成功<br><img src="gitee-ssh-T.png" width="80%" height="80%" /></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>charles SSL证书安装</title>
    <url>/posts/api-test-charles-ca-certificate-install/</url>
    <content><![CDATA[<p>charles抓取https协议报文需要配置SSL通用证书，否则会导致乱码，本文介绍Charles 的 CA 证书安装方法。</p>
<a id="more"></a>
<h1 id="1-电脑安装SSL证书"><a href="#1-电脑安装SSL证书" class="headerlink" title="1. 电脑安装SSL证书"></a>1. 电脑安装SSL证书</h1><p>选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”<br><img src="charles_ca_certificate.png" width="80%" height="80%" /></p>
<p><img src="charles_ca_certificate2.png" width="80%" height="80%" /></p>
<h1 id="2-浏览器安装SwitchyOmega插件"><a href="#2-浏览器安装SwitchyOmega插件" class="headerlink" title="2. 浏览器安装SwitchyOmega插件"></a>2. 浏览器安装SwitchyOmega插件</h1><p>插件下载地址：<a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<p>设置代理：<br>charles默认代理端口为8888<br><img src="charles_switchomega.png" width="80%" height="80%" /></p>
<p>设置完成后，浏览器开启charles代理。</p>
<h1 id="3-配置SSL的抓取域名"><a href="#3-配置SSL的抓取域名" class="headerlink" title="3. 配置SSL的抓取域名"></a>3. 配置SSL的抓取域名</h1><p>选择 “Proxy” -&gt; “SSL Proxying Settings”<br><img src="charles_ssl_setting.png" width="80%" height="80%" /><br>启用SSL代理，配置location<br><img src="charles_ssl_setting2.png" width="80%" height="80%" /></p>
<h1 id="4-浏览器安装SSL证书"><a href="#4-浏览器安装SSL证书" class="headerlink" title="4. 浏览器安装SSL证书"></a>4. 浏览器安装SSL证书</h1><p>选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”<br><img src="charles_ca_certificate3.png" width="80%" height="80%" /><br>弹出如下提示框<br><img src="charles_ca_certificate4.png" width="80%" height="80%" /></p>
<p>浏览器地址栏输入“chls.pro/ssl” 下载证书<br><img src="charles_shls_ssl.png" width="80%" height="80%" /></p>
<p>chrome浏览器安装：<br><img src="charles_chrome_ssl_setting.png" width="80%" height="80%" /></p>
<h1 id="5-手机安装SSL证书"><a href="#5-手机安装SSL证书" class="headerlink" title="5. 手机安装SSL证书"></a>5. 手机安装SSL证书</h1><p>设置手机代理<br><img src="android-proxy.png" width="80%" height="80%" /></p>
<p>手机浏览器输入“chls.pro/ssl” 下载证书<br><img src="android-chls.png" width="80%" height="80%" /></p>
<p>点击下载的证书文件进行安装<br><img src="android-chls-install.png" width="80%" height="80%" /><br><img src="android-chls-install2.png" width="80%" height="80%" /><br>设置PIN码后安装成功</p>
<p>手机浏览器访问baidu，charles查看https报文：<br><img src="android-proxy-baidu.png" width="80%" height="80%" /><br>证书安装成功</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>charles</tag>
        <tag>SSL证书</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode + Python环境配置</title>
    <url>/posts/python-vscode-jupyter-notebook/</url>
    <content><![CDATA[<p>VSCode Python开发环境配置<br><a id="more"></a></p>
<h1 id="Visual-Studio-Code-下载安装"><a href="#Visual-Studio-Code-下载安装" class="headerlink" title="Visual Studio Code 下载安装"></a>Visual Studio Code 下载安装</h1><p>Visual Studio Code下载地址: <a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p>
<p>安装Visual Studio Code后，打开Visual Studio Code，安装python：<br><img src="vscode-python.png" alt="png"></p>
<h1 id="设置-Python-环境"><a href="#设置-Python-环境" class="headerlink" title="设置 Python 环境"></a>设置 Python 环境</h1><p>Ctrl+Shift+P<br><img src="vscode-python2.png" alt="png"></p>
<p>输入>python select Interpreter<br><img src="vscode-python-interpreter.png" alt="png"></p>
<p>会列出系统所有python解释器，选择对应的解释器：<br><img src="vscode-python-interpreter2.png" alt="png"></p>
<h1 id="安装code-runner插件"><a href="#安装code-runner插件" class="headerlink" title="安装code runner插件"></a>安装code runner插件</h1><h2 id="配置code-runner"><a href="#配置code-runner" class="headerlink" title="配置code runner"></a>配置code runner</h2><p><img src="vscode-python-coderunner.png" alt="png"></p>
<p>运行代码方式：</p>
<ul>
<li>键盘快捷键 Ctrl+Alt+N</li>
<li>快捷键 Ctrl+Shift+P调出 命令面板, 然后输入 Run Code</li>
<li>在编辑区，右键选择 Run Code</li>
<li>在左侧的文件管理器，右键选择 Run Code</li>
<li>右上角的运行小三角按钮</li>
</ul>
<p>停止代码运行：</p>
<ul>
<li>键盘快捷键 Ctrl+Alt+M</li>
<li>快捷键 Ctrl+Shift+P调出 命令面板, 然后输入 Stop Code Run</li>
<li>在Output Channel，右键选择 Stop Code Run</li>
</ul>
<h2 id="Run-in-Terminal"><a href="#Run-in-Terminal" class="headerlink" title="Run in Terminal"></a>Run in Terminal</h2><p>可以把代码放到 VS Code 内置的 Terminal 来运行</p>
<p>选择 文件 -&gt; 首选项 -&gt; 设置，打开VS Code设置页面，找到 Run Code configuration，勾上 Run In Terminal 选项。设置之后，代码就会在 Terminal 中运行了。<br><img src="vscode-python-terminal.png" alt="png"></p>
<h1 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h1><h2 id="配置VSCode自动保存"><a href="#配置VSCode自动保存" class="headerlink" title="配置VSCode自动保存"></a>配置VSCode自动保存</h2><p>进入设置界面<br><img src="vscode-autosave.png" alt="png"></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>显示所有函数列表<br>Shift+Ctl+O</p>
<p>向下复制：<br>设置为Ctl+D<br>点击File -&gt; Preferences -&gt; Keyboard Shortcuts，找到copy line down，设置为Ctrl+D</p>
<h1 id="Jupyter-Notebook插件"><a href="#Jupyter-Notebook插件" class="headerlink" title="Jupyter Notebook插件"></a>Jupyter Notebook插件</h1><p>Jupyter Notebook （<a href="https://jupyter.org/">https://jupyter.org/</a>）<br>几乎支持所有语言，把代码、输出、解释文档、多媒体资源整合在了一起。 Jupyter Notebook应用广泛，Google的Google Colab平台就是基于 Jupyter Notebook改进的。</p>
<p>Jupyter 主要优点包括：</p>
<ol>
<li>将代码、文档整合到一起，这样更加方便，提高效率。</li>
<li>Cell 的概念，代码可以一块一块的运行，实现交互编程。</li>
<li>Jupyter 官方的 <a href="https://mybinder.readthedocs.io/en/latest/index.html">Binder</a> 、<a href="https://colab.research.google.com/notebooks/welcome.ipynb">Google Colab平台</a>可以直接运行代码，不需要重新安装依赖。</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>VSCode Jupyter Notebook插件安装：<br>搜索Jupyter，安装<br><img src="vscode-python-jupyter.png" alt="png"><br>插件安装成功后，新建*.ipynb文件：<br><img src="vscode-python-ipynb.png" alt="png"></p>
<h2 id="将ipynb文件转换为markdown"><a href="#将ipynb文件转换为markdown" class="headerlink" title="将ipynb文件转换为markdown"></a>将ipynb文件转换为markdown</h2><p>将ipynb文件转换为markdown<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter nbconvert --to markdown <span class="string">&quot;文件名.ipynb&quot;</span></span><br><span class="line"><span class="comment"># 批量转换</span></span><br><span class="line">jupyter nbconvert --to markdown *.ipynb </span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>VSCode</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>接口测试简介及 Web 服务架构</title>
    <url>/posts/api-test-and-web-protocol/</url>
    <content><![CDATA[<p><strong>API (Application Programming Interface，应用程序接口)</strong>是支持两个相互独立的软件系统之间进行通信和数据交换的计算机接口，它定义了两个软件系统之间可以发出什么请求、如何发出请求、可用的数据格式等。<br><a id="more"></a></p>
<h1 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h1><h2 id="什么是接口测试？"><a href="#什么是接口测试？" class="headerlink" title="什么是接口测试？"></a>什么是接口测试？</h2><p>接口测试是一种验证应用程序接口(API)的软件测试类型，目的是检查系统组件间接口的功能、可靠性、性能和安全性。在 API 测试中，不使用标准的用户输入(键盘)和输出，而是使用软件向 API 发送调用，获取输出，并记录系统的响应。API 测试与 GUI 测试不同，不关注应用程序的外观和使用体验，专注于软件架构的业务逻辑层。</p>
<h2 id="接口测试必要性"><a href="#接口测试必要性" class="headerlink" title="接口测试必要性"></a>接口测试必要性</h2><p>使用接口测试可以更早的发现问题，让Bug提前暴露出来，提高测试效率，实现更快的质量反馈<br><img src="test_pyramid.png" alt="img"><br>接口测试保证的是后端工程师的产出质量，不能解决移动端的质量，所以接口测试不能取代UI测试。大前端工程师的产出质量只能通过UI测试保证。</p>
<h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><p>API架构有REST，XML-RPC, SOAP ，JSON-RPC等，REST和RPC是常用的两种方式，XML-RPC 和 SOAP使用xml存储数据，进行数据传输，REST基于JSON作为传输格式，使用起来比较简单，学习成本低。下面简要介绍REST和RPC这两种架构。</p>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>RPC(Remote Procedure Call, 远程过程调用 ) 由Bruce Jay Nelson 在 1984 年提出，在客户端通过参数传递的方式调用远程服务器，以本地代码调用的方式实现远程执行，采用C/S模式。由阿里开发的基于java的Apache Dubbo就是采用的RPC框架，通讯协议是RPC协议。底层应用层协议支持 tcp http, hessian, thrift, grpc等。</p>
<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST(representational state transfer，表现层状态转移)由<a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Thomas Fielding</a>在他的<a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">博士论文</a>中提出，REST 是一种架构设计风格，不是架构，也不是协议。主要特征：</p>
<ul>
<li>每一个URL代表一种资源</li>
<li>客户端和服务器之间，传递这种资源的某种表现层</li>
<li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现表现层状态转化</li>
</ul>
<p>借助于http协议的基本请求方法代表资源的状态切换，将所有 Web 服务抽象为资源：</p>
<ul>
<li>post：新增或者更新资源</li>
<li>get：获取资源</li>
<li>put：更新资源</li>
<li>delete：删除资源</li>
</ul>
<p>REST API文档：<a href="https://developer.github.com/v3/">https://developer.github.com/v3/</a></p>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>请求方法</strong></th>
<th style="text-align:center"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">获取服务器的响应头信息</td>
</tr>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">请求指定的资源</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">向指定资源提交数据，请求服务器进行处理</td>
</tr>
<tr>
<td style="text-align:center">PATCH</td>
<td style="text-align:center">与<code>PUT</code>请求类似，一般用于资源的部分更新</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">将指定资源的最新数据传送给服务器取代指定的资源：修改数据</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">用于删除所请求<code>URI</code>所标识的资源</td>
</tr>
<tr>
<td style="text-align:center">CONNECT</td>
<td style="text-align:center">HTTP1.1新增，用于支持https加密，用于ssl隧道基于HTTP代理的请求</td>
</tr>
<tr>
<td style="text-align:center">OPTIONS</td>
<td style="text-align:center">获取服务器可用方法，可在跨域请求中使用</td>
</tr>
<tr>
<td style="text-align:center">TRACE</td>
<td style="text-align:center">追踪请求路径，可用于测试或者诊断</td>
</tr>
</tbody>
</table>
</div>
<h3 id="请求-响应模型"><a href="#请求-响应模型" class="headerlink" title="请求/响应模型"></a>请求/响应模型</h3><p><strong>HTTP请求报文Request</strong><br>客户端向服务器发送一个HTTP请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。</p>
<ul>
<li><strong>HTTP1.0</strong>定义了三种请求方法：GET, POST 和 HEAD方法。</li>
<li><strong>HTTP1.1</strong>新增了六种请求方法：OPTIONS, PUT, DELETE, TRACE, PATCH 和 CONNECT 方法。</li>
</ul>
<p><strong>HTTP响应报文Response</strong><br>服务器接收并处理客户端发过来的请求后会返回一个HTTP响应消息。</p>
<p>服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol>
<li>客户与服务器建立连接；<strong>建立连接-TCP三次握手</strong></li>
<li>客户向服务器提出请求；<strong>发送请求信息</strong></li>
<li>服务器接受请求，并根据请求返回相应的文件作为应答；<strong>发送响应信息</strong></li>
<li>客户与服务器关闭连接。<strong>关闭连接</strong></li>
<li>客户端浏览器解析HTML内容</li>
</ol>
<h3 id="URL：统一资源定位符"><a href="#URL：统一资源定位符" class="headerlink" title="URL：统一资源定位符"></a>URL：统一资源定位符</h3><p>URL是互联网上用来标识某一处资源的地址，一个完整的URL包括以下几部分：</p>
<ul>
<li><a href="https://www.google.com/search?q=request&amp;source=lnms#imgrc=Lz-GAoSvIgYOlM">https://www.google.com/search?q=request&amp;source=lnms#imgrc=Lz-GAoSvIgYOlM</a><ul>
<li>协议：https</li>
<li>域名：www.google.com</li>
<li>端口：位于域名后面，冒号连接</li>
<li>虚拟目录：从域名后的第一个“/”开始到最后一个“/”为止</li>
<li>文件名：从域名后的最后一个“/”开始到“？”为止；若没有“?”,则是到“#”为止；若没有“？”和“#”，则是到结束</li>
<li>锚：从“#”开始到最后</li>
<li>参数：从“？”开始到“#”为止之间的部分为参数部分，参数与参数之间用“&amp;”作为分隔符</li>
</ul>
</li>
</ul>
<h2 id="REST-API测试"><a href="#REST-API测试" class="headerlink" title="REST API测试"></a>REST API测试</h2><p>REST API测试用于测试 web 应用程序的 RESTful API，目的是通过发送各种 HTTP/S 请求来记录 REST API的响应，以检查 rest api 是否工作正常。主要包括 GET、 POST、 PUT 和 DELETE 方法。</p>
<h1 id="协议分析工具"><a href="#协议分析工具" class="headerlink" title="协议分析工具"></a>协议分析工具</h1><p>抓包解包分析推荐使用tcpdump+ WireShark，参考 <a href="https://hiyong.gitee.io/posts/network-tcpdump-and-wireshark/">使用tshark命令解析tcpdump抓取的数据包</a></p>
<p>代理工具推荐：</p>
<ul>
<li><p>手工测试 charles、安全测试 burpsuite</p>
</li>
<li><p>自动化测试：mitmproxy</p>
</li>
<li><p>其他代理：fiddler[仅windows]、 Any Proxy[全平台]</p>
</li>
</ul>
<p>客户端模拟请求工具：</p>
<ul>
<li><p>curl：最常使用的http请求工具</p>
</li>
<li><p>postman：http协议测试工具</p>
</li>
<li><p>nc工具：tcp/udp协议发送，全名netcat，被誉为网络安全界的‘瑞士军刀’</p>
</li>
</ul>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>REST架构</tag>
        <tag>RPC协议</tag>
        <tag>SOAP协议</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tshark命令解析tcpdump抓取的数据包</title>
    <url>/posts/network-tcpdump-and-wireshark/</url>
    <content><![CDATA[<p>tshark是wireshark的命令行工具，通过shell命令抓取、解析报文。tcpdump是Linux系统下的抓包工具。wireshark和tcpdump都共同使用 libpcap作为其底层抓包的库，tshark也可以抓取报文。<a id="more"></a></p>
<p>有时候需要在linux系统或者ARM开发板中进行抓包，使用tcpdump抓包更加方便，在这种场景下，一般使用tcpdump进行抓包，然后在Windows中使用wireshark来分析生成的包文件，在自动化分析或者自动化测试中，可以使用tshark来进行包解析。本文介绍使用tcpdump抓取报文后使用tshark进行报文解析。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>wireshark下载安装<br>wireshark官网：<a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">yum -y install wireshark</span><br><span class="line">yum -y install tcpdump</span><br></pre></td></tr></table></figure>
<p>帮助信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -h</span><br></pre></td></tr></table></figure><br>查看可用端口：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -D</span><br><span class="line">1.ens33</span><br><span class="line">2.ens37</span><br><span class="line">3.veth2424bf4</span><br><span class="line">4.any (Pseudo-device that captures on all interfaces)</span><br><span class="line">5.lo [Loopback]</span><br></pre></td></tr></table></figure></p>
<h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><p>tcpdump官方文档：<a href="https://www.tcpdump.org/index.html#documentation">https://www.tcpdump.org/index.html#documentation</a></p>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li><code>-i interface</code> ：指定抓包接口，<code>tcpdump -i eth1</code></li>
<li><code>-c count</code>：抓取包个数，<code>tcpdump -c 5 -i eth0</code> 仅抓取5个包</li>
<li><code>-w file</code>：保存</li>
<li><code>-A</code>：ASCII码形式打印报文</li>
<li><code>-XX</code>：HEX 和 ASCII形式显示报文</li>
</ul>
<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>抓取eth1网卡数据包，数据写入文件/tmp/packet.pcap<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth1 -w /tmp/packet.pcap  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><br>其中</p>
<ul>
<li>>/dev/null：将标准输出（控制台输出）重定向到/dev/null中，/dev/null代表 linux 的空设备文件。表示不输出内容</li>
<li>2&gt;&amp;1：重定向绑定，错误输出（2）和标准输出（1）输出到同一个地方</li>
<li>>/dev/null 2&gt;&amp;1的作用就是丢弃标准输出和错误输出，不会输出任何信息到控制台。</li>
</ul>
<p>也可以只抓取特定协议的报文，比如过滤tcp报文：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth1 tcp</span><br></pre></td></tr></table></figure><br>抓取指定端口的报文<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth1 port 22</span><br></pre></td></tr></table></figure><br>抓取指定源IP的报文<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i src 192.168.0.1</span><br></pre></td></tr></table></figure><br>抓取指定目的IP的报文<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i dst 192.168.0.1</span><br></pre></td></tr></table></figure></p>
<h2 id="停止抓包"><a href="#停止抓包" class="headerlink" title="停止抓包"></a>停止抓包</h2><p>如果没有限制 tcpdump 抓包的数量（-c 参数），tcpdump 会持续抓包。可以通过 Ctrl+C 来停止抓包，或者杀掉tcpdump进程：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall -9 tcpdump</span><br></pre></td></tr></table></figure><br>杀掉tcpdump进程后会停止抓包。</p>
<h2 id="读取报文"><a href="#读取报文" class="headerlink" title="读取报文"></a>读取报文</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -r packet.pcap</span><br><span class="line">reading from file packet.pcap, link-type EN10MB (Ethernet)</span><br><span class="line">20:47:07.732570 IP 192.168.2.103.53074 &gt; 69.173.159.48.https: Flags [F.], seq 2534329882, ack 3470120544, win 1027, length 0</span><br><span class="line">20:47:08.789990 IP 192.168.2.103.50544 &gt; tm-in-f188.1e100.net.https: Flags [.], seq 708023523:708023524, ack 4093529409, win 1027, length 1</span><br><span class="line">20:47:09.037350 IP tm-in-f188.1e100.net.https &gt; 192.168.2.103.50544: Flags [.], ack 1, win 265, options [nop,nop,sack 1 &#123;0:1&#125;], length 0</span><br><span class="line">20:47:09.195077 IP 192.168.2.103.50920 &gt; 118.178.135.232.https: Flags [P.], seq 1760992480:1760992516, ack 2403978898, win 1023, length 36</span><br><span class="line">20:47:09.222742 IP 118.178.135.232.https &gt; 192.168.2.103.50920: Flags [P.], seq 1:62, ack 36, win 1024, length 61</span><br></pre></td></tr></table></figure>
<h1 id="tshark"><a href="#tshark" class="headerlink" title="tshark"></a>tshark</h1><p>抓包完成后对数据包进行解析，下面介绍使用tshark解析数据包。</p>
<h2 id="tshark工具介绍"><a href="#tshark工具介绍" class="headerlink" title="tshark工具介绍"></a>tshark工具介绍</h2><p>tshark参考文档：<a href="https://www.wireshark.org/docs/man-pages/tshark.html">https://www.wireshark.org/docs/man-pages/tshark.html</a></p>
<p>如果要在windows命令行窗口使用tshark需要将Wireshark安装路径 C:\Program Files\Wireshark 添加到环境变量。<br><img src="tshark.png" alt="png"></p>
<p>查看帮助信息：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tshark -h</span><br></pre></td></tr></table></figure><br>列出可用网卡接口：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tshark -D</span><br><span class="line">1. \Device\NPF_&#123;4B48290B-6C8B-4A93-A942-A7E565B02F09&#125; (Npcap Loopback Adapter)</span><br><span class="line">2. \Device\NPF_&#123;D8F1F103-9733-422C-A521-77C678EEAFFC&#125; (WLAN)</span><br><span class="line">3. \Device\NPF_&#123;AB52B03B-45ED-43C9-B88F-C7499A78AED0&#125; (kc)</span><br><span class="line">4. \Device\NPF_&#123;64EA0097-AE33-49AD-9F42-959017C397FA&#125; (WAN)</span><br><span class="line">5. \Device\NPF_&#123;257F23D0-E615-4656-AB32-5338DB62843C&#125; (以太网 2)</span><br><span class="line">6. \Device\NPF_&#123;B5376652-68BB-45DA-A822-086E401773BB&#125; (本地连接* 10)</span><br></pre></td></tr></table></figure><br>前面提到过<code>tcpdump -D</code>也可以列出网卡信息，功能类似于Linux中的<code>netstat -i</code> 、<code>ifconfig -a</code>和<code>ip link</code>命令查看网卡接口信息。在windows中，除了在网络连接中查看网卡信息以外，也可以在命令行中通过如下命令查看：</p>
<ul>
<li><code>ipconfig (/all)</code></li>
<li><code>wmic nic list brief</code></li>
</ul>
<p>Linux系统和windows系统tshark使用方法一样</p>
<h2 id="tshark命令抓包"><a href="#tshark命令抓包" class="headerlink" title="tshark命令抓包"></a>tshark命令抓包</h2><p>常用参数：</p>
<ul>
<li><code>-i | --interface &lt;capture interface&gt;</code> ：指定抓包接口</li>
<li><code>-f &lt;capture filter&gt;</code>：抓包过滤，BPF(Berkeley Packet Filter)过滤规则，tcpdump和scapy(filter参数)都使用这个过滤规则，参考<a href="https://blog.csdn.net/u010698107/article/details/113825143">Python Scapy 报文构造和解析</a>。</li>
<li><code>-w &lt;outfile&gt;</code>：将数据包写入文件</li>
<li><code>-O &lt;protocols&gt;</code>：打印数据包详细信息</li>
<li><code>-V</code>：打印数据包详细视图</li>
<li><code>-P</code>：写入文件过程中，打印数据包简略信息</li>
<li><code>-c &lt;capture packet count&gt;</code>：设置抓取最大的包个数</li>
<li><code>-a|--autostop &lt;autostop condition&gt;</code>：duration:5—5秒后停止抓包；files:2—写了2个文件后停止；filesize:100—包大小达到100KB后停止， </li>
</ul>
<p>tshark抓包示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tshark -i <span class="string">&quot;WLAN&quot;</span> -f <span class="string">&quot;tcp port 80&quot;</span> -w <span class="string">&quot;test.pcap&quot;</span></span><br><span class="line">$ tshark -i <span class="string">&quot;WLAN&quot;</span> -f <span class="string">&quot;tcp port 80&quot;</span> -w <span class="string">&quot;test.pcap&quot;</span> -P -a duration:10</span><br><span class="line">Capturing on <span class="string">&#x27;WLAN&#x27;</span></span><br><span class="line">15   0.000000 08:ed:ed:3e:9e:f3 -&gt; Broadcast    ARP 60 Who has 192.168.1.1?  Tell 192.168.1.244</span><br><span class="line">  0.001051 fe80::4983:bddb:14e0:f9c4 -&gt; ff02::1:2    DHCPv6 157 Solicit XID: 0xd2726a CID: 00010001272da3902c534a01104e</span><br><span class="line">  0.065122 TendaTec_21:73:e1 -&gt; Broadcast    ARP 60 Who has 192.168.1.1?  Tell 192.168.1.126</span><br><span class="line">省略......</span><br><span class="line">$ capinfos test.pcap</span><br><span class="line">File name:           test.pcap</span><br><span class="line">File <span class="built_in">type</span>:           Wireshark - pcapng</span><br><span class="line">File encapsulation:  Ethernet</span><br><span class="line">Packet size <span class="built_in">limit</span>:   file hdr: (not <span class="built_in">set</span>)</span><br><span class="line">Number of packets:   155</span><br><span class="line">File size:           29 kB</span><br><span class="line">Data size:           23 kB</span><br><span class="line">Capture duration:    9 seconds</span><br><span class="line">Start time:          Sun Apr 25 16:44:23 2021</span><br><span class="line">End time:            Sun Apr 25 16:44:33 2021</span><br><span class="line">Data byte rate:      2595 bytes/s</span><br><span class="line">Data bit rate:       20 kbps</span><br><span class="line">Average packet size: 153.96 bytes</span><br><span class="line">Average packet rate: 16 packets/sec</span><br><span class="line">SHA1:                2b4a555a362301156ff26a7f295b4d609dd97a33</span><br><span class="line">RIPEMD160:           e34a63f4bcfe805d220f73dea78a8f4b63074a80</span><br><span class="line">MD5:                 cc560fd267886a596ed72397a73625e3</span><br><span class="line">Strict time order:   True</span><br></pre></td></tr></table></figure></p>
<h2 id="tshark解析数据包"><a href="#tshark解析数据包" class="headerlink" title="tshark解析数据包"></a>tshark解析数据包</h2><p>常用参数：</p>
<ul>
<li><code>-r</code>：指定需要解析的数据包</li>
<li><code>-T</code>：指定数据包解析输出格式，支持格式见<a href="#解码所有数据">解码所有数据</a>，这里介绍 <code>-T fields</code>，一般与<code>-e</code> 选项连用。</li>
<li><code>-e</code>：指定过滤的字段</li>
<li><code>-E</code>：可用于指定分隔符：<code>separator=,</code>：默认分隔符为缩进（\t）</li>
<li><code>-Y</code>：过滤指定报文</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark [ -r &lt;infile&gt; ]  -T fields [ -e &lt;field&gt; ] -E &lt;field print option&gt; -Y &lt;displaY filter&gt;</span><br><span class="line">tshark -r packet.pcap -T fields -e 解析的字段 -E separator=,</span><br></pre></td></tr></table></figure>
<p>需要解析的字段可以通过Wireshark查看：<br>选择要过滤的内容 -&gt; 右键 -&gt; Apply as Filter -&gt; Selected<br><img src="wireshark_filter.png" alt="png"></p>
<p>例1：过滤具有源IP和目的IP字段的所有报文<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -r packet.pcap -T fields -e ip.src -e ip.dst </span><br></pre></td></tr></table></figure><br>例2：过滤源地址为fe80::ca3a:35ff:fe09:efa1的报文，并读取UDP源端口号和IPv6目的地址。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tshark -r packet.pcap -T fields  -E separator=, -Y ipv6.src==fe80::ca3a:35ff:fe09:efa1 -e udp.srcport -e ipv6.dst</span><br><span class="line">,ff02::2</span><br><span class="line">,ff02::2</span><br><span class="line">,ff02::16</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><br><strong>注意</strong>：<code>-Y</code>参数中，多个条件用<code>||</code>，<code>&amp;&amp;</code>，<code>and</code>或者<code>or</code>连接，如果使用多个<code>-Y</code>参数，只有最后一个生效，下面过滤源地址为fe80::ca3a:35ff:fe09:efa1的DHCPv6 Solicit报文：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tshark -r packet.pcap -T fields  -E separator=, -Y dhcpv6.msgtype==1 -Y ipv6.src==fe80::ca3a:35ff:fe09:efa1 -e udp.srcport -e ipv6.dst</span><br><span class="line">,ff02::2</span><br><span class="line">,ff02::2</span><br><span class="line">,ff02::16</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">$ tshark -r packet1.pcap -T fields  -E separator=, -Y <span class="string">&quot;dhcpv6.msgtype==1 and ipv6.src==fe80::ca3a:35ff:fe09:efa1&quot;</span> -e udp.srcport -e ipv6.dst</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br><span class="line">546,ff02::1:2</span><br></pre></td></tr></table></figure></p>
<p>过滤完成后进行进一步的分析<br>比如可以使用grep命令进一步提取满足条件的报文<br>过滤源地址或者目的地址为192.168.5.38的报文<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">tshark -r packet.pcap -T fields -e ip.src -e ip.dst | grep 192.168.5.38 </span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">tshark -r packet.pcap -T fields -e ip.src -e ip.dst | findstr 192.168.5.38 </span><br></pre></td></tr></table></figure><br><img src="tshark2.png" alt="png"></p>
<p>也可以使用python、Java等高级语言进行进一步的分析，Python示例如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = os.popen(<span class="string">&quot;tshark -r packet.pcap -T fields -e ip.src -e ip.dst“)</span></span><br><span class="line"><span class="string">ret = result.read() # </span></span><br><span class="line"><span class="string">for i, value in enumerate(ret.split(&quot;</span>\n<span class="string">&quot;)):</span></span><br><span class="line"><span class="string">	# 处理value值</span></span><br><span class="line"><span class="string">	pass</span></span><br></pre></td></tr></table></figure></p>
<h2 id="解码所有数据"><a href="#解码所有数据" class="headerlink" title="解码所有数据"></a>解码所有数据</h2><p>某些字段可能无法使用tshark过滤，这种情况下，可以先将pcap文件解码，tshark支持如下文件格式：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ek|fields|json|jsonraw|pdml|ps|psml|tabs|text</span><br></pre></td></tr></table></figure><br>解码成xml和text格式文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -r packet.pcap -V -T pdml &gt; packet.xml</span><br><span class="line">tshark -r packet.pcap -V -T text &gt; packet.txt</span><br></pre></td></tr></table></figure></p>
<ul>
<li>-V：输出数据包详细信息</li>
<li>-T pdml：指定数据包解码输出格式为xml格式</li>
</ul>
<p>xml文档可以使用python的ElementTree工具解析：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br></pre></td></tr></table></figure></p>
<h1 id="问题：windows-tshark命令无效"><a href="#问题：windows-tshark命令无效" class="headerlink" title="问题：windows tshark命令无效"></a>问题：windows tshark命令无效</h1><p>系统：windows10<br>tshark已加入环境变量中<br>输入tshark，显示：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;tshark</span><br><span class="line">The NPF driver isn<span class="string">&#x27;t running.  You may have trouble capturing or</span></span><br><span class="line"><span class="string">listing interfaces.</span></span><br><span class="line"><span class="string">Capturing on &#x27;</span>鏈湴杩炴帴* 9<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>WIreshark安装需要安装WinPcap，查看电脑已经安装了WinPcap。</p>
<p>接下来以管理员身份运行命令行串口，输入<code>net start npf</code> 启动NPF，出现如下报错信息：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;net start npf</span><br><span class="line">服务名无效。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG 2185 以获得更多的帮助。</span><br></pre></td></tr></table></figure></p>
<p>卸载WinPcap10，下载安装winpcap4.1.3：<a href="https://www.winpcap.org/install/default.htm">https://www.winpcap.org/install/default.htm</a></p>
<p>重新输入<code>net start npf</code> 启动NPF：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;net start npf</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG 2182 以获得更多的帮助。</span><br></pre></td></tr></table></figure><br>启动成功！<br>tshark命令也可以正常使用了</p>
<center><b>--THE END--<b></center>


]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>tcpdump</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>cURL工具介绍及简单使用</title>
    <url>/posts/api-test-curl-guide/</url>
    <content><![CDATA[<p>curl命令是个功能强大的网络工具，可用来请求 Web 服务器，支持通过FTP、FTPS、HTTP、HTTPS、SMTP、Telnet、TFTP等协议，底层使用的是 libcurl 库。可用于文件上传、下载，还可以用来模拟客户端请求，抓取网页、网络监控等。本文介绍使用curl来发送请求。<br><a id="more"></a></p>
<h1 id="curl安装"><a href="#curl安装" class="headerlink" title="curl安装"></a>curl安装</h1><p>Windows:</p>
<ol>
<li>下载解压：<a href="https://curl.haxx.se/download.html">https://curl.haxx.se/download.html</a></li>
<li>加入环境变量</li>
</ol>
<p><code>curl -V</code> 查看版本信息：<br><img src="curl-version.png" width="80%" height="80%" /></p>
<p>Linux:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install curl <span class="comment"># CentOS </span></span><br><span class="line">apt-get install curl <span class="comment"># Ubuntu</span></span><br></pre></td></tr></table></figure></p>
<h1 id="curl常见用法"><a href="#curl常见用法" class="headerlink" title="curl常见用法"></a>curl常见用法</h1><ul>
<li>get请求：curl url</li>
<li>post请求：curl -d ‘xxx’  -X POST $url</li>
<li>proxy使用：curl -x ‘<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a>‘ $url ：指定 HTTP 请求通过<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> 代理发出。</li>
</ul>
<p>其他参数用法：</p>
<ul>
<li>-H： “Content-type: application/json”  添加 HTTP 请求头 <code>curl -H &#39;Content-type: application/json&#39; $url</code></li>
<li>-G： 把data数据当成get请求的参数发送，用来构造 URL 的查询字符串，与—data-urlencode结合使用</li>
<li>-X：指定 HTTP 请求的方法 <code>curl -X POST $url</code></li>
<li>-d： 发送post请求数据，@file表示来自于文件</li>
<li>—data-urlencode：发送post请求数据，会对内容进行url编码</li>
<li>-u： username:password用户认证</li>
<li>-o： 写文件，将服务器的响应保存成文件</li>
<li>-v： verbose，打印更详细日志 </li>
<li>-s： 关闭一些提示输出，不输出错误和进度信息。</li>
<li>-S：只输出错误信息</li>
</ul>
<h1 id="curl实例"><a href="#curl实例" class="headerlink" title="curl实例"></a>curl实例</h1><ol>
<li><p>请求 <a href="http://www.baidu.com，">http://www.baidu.com，</a> 将服务器的响应保存为html文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o /tmp/baidu.html http://www.baidu.com</span><br></pre></td></tr></table></figure>
<p><img src="curl-baidu.png" width="80%" height="80%" /></p>
</li>
<li><p>curl设置自定义 header 信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&#x27;Content-type: application/json&#x27;</span> -H <span class="string">&#x27;Accept-Language:US&#x27;</span> -H <span class="string">&#x27;Cookie:ID=1234&#x27;</span> -v https://www.baidu.com/</span><br></pre></td></tr></table></figure>
<p><img src="curl-header.png" width="80%" height="80%" /></p>
<h1 id="copy-as-curl"><a href="#copy-as-curl" class="headerlink" title="copy as curl"></a>copy as curl</h1><p>打开chrome浏览器的开发者工具：<br><img src="copy_as_curl.png" width="80%" height="80%" /></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;https://clients5.google.com/pagead/drt/ne?di=^%^5B^%^2220140509-01^%^22^%^2C320^%^2C0^%^2C550^%^5D&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;authority: clients5.google.com&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;x-requested-with: XMLHttpRequest&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;accept: */*&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;x-client-data: CK21yQEIjrbJAQijtskBCMS2yQEIqZ3KAQiWrMoBCJfCygEIrsLKAQisx8oBCPbHygEI98fKAQi0y8oBCKTNygEIos/KAQjc1coBCMKcywEIxZzLAQjVnMsBGOy4ygE=&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-fetch-site: same-origin&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-fetch-mode: cors&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-fetch-dest: empty&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;referer: https://clients5.google.com/pagead/drt/dn/&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;accept-language: zh-CN,zh;q=0.9&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;cookie: CONSENT=YES+GB.zh-CN+V14+BX; HSID=ApIaHMWrytTvjqMEY; SSID=AygJZayBnP28BxFf8; APISID=UmyTkS9N9ChWmnBG/AiX66wI9xuFNodxDq; SAPISID=2RDZPon8mmYFUeFe/AH2H3UhsBS56EVzlz; __Secure-3PAPISID=2RDZPon8mmYFUeFe/AH2H3UhsBS56EVzlz; SID=3wecPbBT_8ICWEMZ5LIHO8U6mUJK2S89ijFYUnIkyW21xGDb-NBvF2GLkodON3gjyG3pTA.; __Secure-3PSID=3wecPbBT_8ICWEMZ5LIHO8U6mUJK2S89ijFYUnIkyW21xGDbqY5AvmtkqB83SkM4W5Afuw.; NID=204=FqAz385UbUYitAfQlLxpoWdqs1wFoatEH6GwJPuJ4Am0zybAYk_jUN1hCp7sSUxQ9g2XpEJ6pXByvz4z9p9V4dYnFhsSJ48mVJite-Zz1-vhgXewIS3NeK8_rnW6BT0X6dxcKDd5GiG6A3EdN7YuWZXCWVOi_QmARqfLrqzROWzk0u54chsvJOc0MQjKQX3eQUgNM9ATMFDgayrkUu95mRETP5XiqGkL--jPKV49482QfQFjL-oomZ7yzJpzax3h62uOkqP3m0k; 1P_JAR=2020-12-15-13; SIDCC=AJi4QfGElscF8CoJohJbugG-XFh1nPnYTmwvm-mnyMsiq0BVDeYqfb-JgqXBhoGNBTTjYv3hUw; __Secure-3PSIDCC=AJi4QfF2K4Rz5-Sl_Q6p9GM8H-h_4Q43LiFHs9mLuqsP1lYjpNoH7KTpTJDgAIApoafgbq8ZNtc&quot;</span> ^</span><br><span class="line">  --compressed</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>cURL</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman安装与使用</title>
    <url>/posts/api-test-postman-guide/</url>
    <content><![CDATA[<p>Postman是可以用于API调试的工具，支持各种请求类型： get、post、put、patch、delete 等，可以用来模拟HTTP请求，测试API接口功能。<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官网地址：<a href="https://www.postman.com/">https://www.postman.com/</a><br><img src="postman.png" alt="img"></p>
<p>http请求响应测试接口：<a href="https://httpbin.testing-studio.com/">https://httpbin.testing-studio.com/</a><br>也可以自己本地搭建，GitHub地址：<a href="https://github.com/postmanlabs/httpbin">https://github.com/postmanlabs/httpbin</a></p>
<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="发送Get请求"><a href="#发送Get请求" class="headerlink" title="发送Get请求"></a>发送Get请求</h2><ul>
<li>填写请求方式: Get</li>
<li>填写请求urL：<a href="https://httpbin.testing-studio.com/get">https://httpbin.testing-studio.com/get</a></li>
<li>填写请求参数<br><img src="httpbin_get.png" alt="img"></li>
</ul>
<h2 id="发送Post请求"><a href="#发送Post请求" class="headerlink" title="发送Post请求"></a>发送Post请求</h2><p>Post请求可以发送key -value-,json,file等格式的数据<br>案例:</p>
<ul>
<li>请求 URL: <a href="https://httpbin.testing-studio.com/post">https://httpbin.testing-studio.com/post</a></li>
<li>请求方式: Post<br><img src="httpbin_post.png" alt="img"></li>
</ul>
<p>URL可以通过设置环境变量来调用：<br><img src="httpbin_url.png" alt="img"></p>
<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>Tests主要用来做断言，可以测试返回结果是否含有某一字符串。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pm.test(&quot;Status code is 200&quot;, function () &#123;</span><br><span class="line">    pm.response.to.have.status(200);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pm.test(&quot;Body matches string&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(&quot;json&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pm.test(&quot;url success&quot;, function () &#123;</span><br><span class="line">    var jsonData = pm.response.json();</span><br><span class="line">    pm.expect(jsonData.url).to.eql(&quot;http://httpbin.testing-studio.com/post&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><img src="httpbin_assert.png" alt="img"></p>
<p>测试结果：<br><img src="httpbin_assert_result.png" alt="img"></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li>环境变量与全局变量</li>
<li>变量引用方法:<br><img src="httpbin_url2.png" alt="img"></li>
</ul>
<h2 id="添加-Cookie"><a href="#添加-Cookie" class="headerlink" title="添加 Cookie"></a>添加 Cookie</h2><ul>
<li>Cookie可以用来鉴权</li>
<li>Postman可以自动保存 Cookie信息<br>URL：<a href="https://httpbin.testing-studio.com/cookies/set">https://httpbin.testing-studio.com/cookies/set</a></li>
</ul>
<p><img src="httpbin_cookie.png" alt="img"></p>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>获取需要的值， 将获取到的值设置为环境变量，可以 在需要验证的接口中引用环境变量中保存的值<br><img src="httpbin_token.png" alt="img"></p>
<h1 id="用例集"><a href="#用例集" class="headerlink" title="用例集"></a>用例集</h1><ul>
<li>选择环境变量</li>
<li>选择执行次数</li>
<li>选择延迟时间</li>
<li>选择测试数据</li>
<li>点击Run按钮即可开始执行<br><img src="httpbin_cases.png" alt="img"></li>
</ul>
<h1 id="代码导出"><a href="#代码导出" class="headerlink" title="代码导出"></a>代码导出</h1><ul>
<li>在接口页面点击code按钮进入code页面</li>
<li>选择需要导出的脚本</li>
</ul>
<p><img src="httpbin_code.png" alt="img"></p>
<h1 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h1><p>json和 CSV格式数据文件：<br>data.json<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>:<span class="string">&quot;test1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>:<span class="string">&quot;token1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>:<span class="string">&quot;test2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>:<span class="string">&quot;token2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>:<span class="string">&quot;test3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>:<span class="string">&quot;token3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>data.csv<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username,password,token</span><br><span class="line">test1,123,token1</span><br><span class="line">test2,123,token2</span><br><span class="line">test3,123,token3</span><br></pre></td></tr></table></figure><br>接口配置：<br><img src="httpbin_data.png" alt="img"><br><img src="httpbin_data_tests.png" alt="img"></p>
<p>导入数据：<br><img src="httpbin_data_run.png" alt="img"><br>运行：</p>
<p><img src="httpbin_data_results.png" alt="img"></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash编程</title>
    <url>/posts/linux-shell-bash-programing/</url>
    <content><![CDATA[<p>在《<a href="https://hiyongz.github.io/posts/linux-kernel-and-shell-introduce/">Linux系统介绍</a>》中，介绍了shell的多个版本，现在的Linux发行版基本都默认使用bash（Bourne Again shell），兼容Bourne shell (sh)，本文将简要介绍Bash编程语法。<a id="more"></a></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul>
<li>只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>
<li>中间不能有空格，可以使用下划线(_)</li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字(可用help命令查看保留关键字)<br><a href="bash-help.png">img</a></li>
</ul>
<h2 id="定义与使用变量"><a href="#定义与使用变量" class="headerlink" title="定义与使用变量"></a>定义与使用变量</h2><p>定义变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br></pre></td></tr></table></figure><br>拼接字符串<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;world&quot;</span></span><br><span class="line">your_name2=<span class="string">&quot;hello,<span class="variable">$your_name</span>!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name2</span></span><br></pre></td></tr></table></figure><br>数组<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span> <span class="comment"># 数组取值</span></span><br><span class="line">array_name[0]=value0 <span class="comment"># 赋值</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span> <span class="comment"># 获取数组长度</span></span><br></pre></td></tr></table></figure></p>
<p>数组实例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my_array=(A B <span class="string">&quot;C&quot;</span> D)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><br><span class="line">my_array[1]=b</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为:<span class="variable">$&#123;my_array[*]&#125;</span>&quot;</span> <span class="comment"># 打印所有元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为:<span class="variable">$&#123;my_array[@]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">第一个元素为: A</span><br><span class="line">数组的元素为:A b C D</span><br><span class="line">数组的元素为:A b C D</span><br></pre></td></tr></table></figure></p>
<h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> a</span><br></pre></td></tr></table></figure>
<h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> variable_name <span class="comment">#不能删除只读变量</span></span><br></pre></td></tr></table></figure>
<p>不能删除只读变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># b=10</span></span><br><span class="line"><span class="comment"># readonly b</span></span><br><span class="line"><span class="comment"># echo $b</span></span><br><span class="line">10</span><br><span class="line"><span class="comment"># unset b</span></span><br><span class="line">-bash: <span class="built_in">unset</span>: b: cannot <span class="built_in">unset</span>: <span class="built_in">readonly</span> variable</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>显示所有环境变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">printenv</span><br></pre></td></tr></table></figure><br>显示环境变量值<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">printenv LANG</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure></p>
<h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><h2 id="条件分支：if"><a href="#条件分支：if" class="headerlink" title="条件分支：if"></a>条件分支：if</h2><h3 id="if定义"><a href="#if定义" class="headerlink" title="if定义"></a>if定义</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>if和then写在同一行时，用分号分隔。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 2==2 ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;false&quot;</span>; </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="判断条件写法"><a href="#判断条件写法" class="headerlink" title="判断条件写法"></a>判断条件写法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="built_in">test</span> expression</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line">[ expression ]</span><br><span class="line"><span class="comment"># 写法三</span></span><br><span class="line">[[ expression ]]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> 2==2; <span class="keyword">then</span>	<span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ 2&gt;1 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ 2&gt;1 ]]; <span class="keyword">then</span>	<span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>比较两个变量的大小<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">echo</span><span class="string">&quot;equal&quot;</span>; </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;small&quot;</span>; </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;big&quot;</span>; </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<h2 id="循环：for"><a href="#循环：for" class="headerlink" title="循环：for"></a>循环：for</h2><h3 id="for定义"><a href="#for定义" class="headerlink" title="for定义"></a>for定义</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>for和do写在同一行时，用分号分隔。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> Ioop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Ioop <span class="keyword">in</span> 1 2 3 4 5;<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>循环读取文件内容并输出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat test.txt); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>循环遍历列表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list=(value1 value2 value3)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;list[*]&#125;</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;list[@]&#125;</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<h2 id="循环-while"><a href="#循环-while" class="headerlink" title="循环: while"></a>循环: while</h2><h3 id="while定义"><a href="#while定义" class="headerlink" title="while定义"></a>while定义</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;int++&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>循环读取文件内容并输出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$line</span>; <span class="keyword">done</span>&lt;test.txt</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">test1</span><br><span class="line">test222</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br></pre></td></tr></table></figure></p>
<h1 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h1><ul>
<li>read命令是用于从终端或者文件中读取输入的内部命令</li>
<li>读取整行输入</li>
<li>每行末尾的换行符不被读入</li>
</ul>
<h2 id="read命令使用"><a href="#read命令使用" class="headerlink" title="read命令使用"></a>read命令使用</h2><p>从标准输入读取输入并赋值给变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> var</span><br></pre></td></tr></table></figure><br>从标准输入读取多个内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> varl var2 var3</span><br></pre></td></tr></table></figure><br>不指定变量(默认赋值给 REPLY)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span></span><br></pre></td></tr></table></figure></p>
<h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># read a</span></span><br><span class="line">123</span><br><span class="line"><span class="comment"># echo $a</span></span><br><span class="line">123</span><br><span class="line"><span class="comment"># read a b c</span></span><br><span class="line">1 2 3</span><br><span class="line"><span class="comment"># echo $a   </span></span><br><span class="line">1</span><br><span class="line"><span class="comment"># echo $b</span></span><br><span class="line">2</span><br><span class="line"><span class="comment"># echo $c</span></span><br><span class="line">3</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>默认变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># read</span></span><br><span class="line">456</span><br><span class="line"><span class="comment"># echo $REPLY</span></span><br><span class="line">456</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="comment"># 多行注释</span></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">内容</span></span><br><span class="line"><span class="string">.......</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h1 id="脚本参数传递"><a href="#脚本参数传递" class="headerlink" title="脚本参数传递"></a>脚本参数传递</h1><ul>
<li><strong>$0</strong> 脚本名称</li>
<li><strong>$1~$n</strong> 获取第n个参数：</li>
<li><strong>$#</strong> 传递到脚本的参数个数</li>
<li><strong>$$</strong> 脚本运行的当前进程ID号</li>
<li><strong>$*</strong> 以一个单字符串显示所有向脚本传递的参数</li>
<li><strong>$?</strong> 显示最后命令的退出状态。0表示没有错误,其他任何值表明有错误</li>
</ul>
<p>vim param.sh：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本名称：<span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本运行的当前进程ID号：$$&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数个数：<span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有参数：$*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第1个参数：<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第10个参数：<span class="variable">$&#123;10&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return &quot;</span>$?</span><br></pre></td></tr></table></figure><br>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x param.sh</span></span><br><span class="line"><span class="comment"># ./param.sh 1 2 3 4 5 6 7 8 9 10 1        </span></span><br><span class="line">脚本名称：./param2.sh</span><br><span class="line">脚本运行的当前进程ID号：21097</span><br><span class="line">参数个数：11</span><br><span class="line">所有参数：1 2 3 4 5 6 7 8 9 10 1</span><br><span class="line">第1个参数：1</span><br><span class="line">第10个参数：10</span><br><span class="line"><span class="built_in">return</span> 0</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h1 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h1><p>bash会把反引号里面当作一条命令来执行<br>In: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo `date +%y/%m/%d` </span></span><br><span class="line">20/12/27</span><br><span class="line"><span class="comment"># echo `expr 2 + 2`  </span></span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a=10</span></span><br><span class="line"><span class="comment"># b=20</span></span><br><span class="line"><span class="comment"># echo expr $a + $b  </span></span><br><span class="line">30</span><br><span class="line"><span class="comment"># echo $(($a+$b))</span></span><br><span class="line">30</span><br><span class="line"><span class="comment"># echo expr $a - $b</span></span><br><span class="line">-10</span><br><span class="line"><span class="comment"># echo expr $a \* $b</span></span><br><span class="line">200</span><br><span class="line"><span class="comment"># echo expr $b / $a</span></span><br><span class="line">2</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure>
<ul>
<li>%   取余</li>
<li>=   赋值 a=$b 将把变量b的值赋给a</li>
<li>==  相等 相同则返回true</li>
<li><p>!=  不相等 不相同则返回true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a=10</span></span><br><span class="line"><span class="comment"># b=20</span></span><br><span class="line"><span class="comment"># echo `expr $b % $a`</span></span><br><span class="line">0</span><br><span class="line"><span class="comment"># echo $[$a == $b] </span></span><br><span class="line">0</span><br><span class="line"><span class="comment"># echo $[$a != $b]  </span></span><br><span class="line">1</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>-eq 检测相等</p>
</li>
<li>-ne 检测不相等</li>
<li>-gt 检测左边是否大于右边</li>
<li>-lt 检测左边是否小于右边</li>
<li>-ge 检测左边是否大于等于右边</li>
<li>-le 检测左边是否小于等于右边</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># vim test.sh  </span></span><br><span class="line"><span class="comment"># cat test.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># chmod +x test.sh</span></span><br><span class="line"><span class="comment"># ./test.sh</span></span><br><span class="line">equal</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h1 id="其它实例"><a href="#其它实例" class="headerlink" title="其它实例"></a>其它实例</h1><h2 id="内存统计"><a href="#内存统计" class="headerlink" title="内存统计"></a>内存统计</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 内存使用百分比</span></span><br><span class="line">free | sed -n <span class="string">&#x27;2p&#x27;</span> | gawk <span class="string">&#x27;x = int(( $3 / $2 ) * 100) &#123;print x&#125;&#x27;</span> | sed <span class="string">&#x27;s/$/%/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计内存</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ps aux | awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span> | grep -v <span class="string">&#x27;RSS&#x27;</span>`; <span class="keyword">do</span></span><br><span class="line">    count=$[<span class="variable">$count</span>+<span class="variable">$i</span>]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$count</span>/kb&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./test.sh  </span></span><br><span class="line">16%</span><br><span class="line">474608/kb</span><br></pre></td></tr></table></figure>
<h2 id="求阶乘"><a href="#求阶乘" class="headerlink" title="求阶乘"></a>求阶乘</h2><p><code>vim test.sh</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter a number:&quot;</span></span><br><span class="line">factorial=1</span><br><span class="line"><span class="keyword">for</span> (( count=1; count&lt;=<span class="variable">$REPLY</span>; count++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	factorial=$[ <span class="variable">$factorial</span> * <span class="variable">$count</span> ]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The factorial of <span class="variable">$REPLY</span> is <span class="variable">$factorial</span>&quot;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x test.sh</span></span><br><span class="line"><span class="comment"># ./test.sh </span></span><br><span class="line">Enter a number:6</span><br><span class="line">The factorial of 6 is 720</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux三剑客grep、awk和sed介绍</title>
    <url>/posts/linux-shell-programming-grep-sed-awk/</url>
    <content><![CDATA[<p>grep，sed 和 awk是Linux/Unix 系统中常用的三个文本处理的命令行工具，称为文本处理三剑客。本文将简要介绍这三个命令的基本用法以及它们在Windows系统中的使用方法。</p>
<a id="more"></a>
<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>在介绍这两个命令之前，有必要介绍一下Unix/Linux中管道（pipe）的概念。管道将一个命令/程序/进程的输出发送到另一个命令/程序/进程，以进行进一步处理。是一种进程间通信机制，使用管道符”|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。<br><img src="pipe.png" width="60%" height="60%" /></p>
<p>管道实现了数据在多个命令之间传递，不需要创建临时文件来传递，它是单向的，数据通过管道从左向右流动。</p>
<p>实例1：<br><code>cat test.txt | grep test1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | grep test1</span><br><span class="line">test1</span><br><span class="line">test111</span><br><span class="line">test3 test1</span><br><span class="line">test111</span><br><span class="line">$ cat test.txt | grep test1 | grep test3</span><br><span class="line">test3 test1</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>实例2：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | head -3</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">test3</span><br><span class="line">$ cat test.txt | tail -5</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">rrrr</span><br><span class="line">$ </span><br></pre></td></tr></table></figure></p>
<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>grep(Global Regular Expression Print) 命令用于搜索文件的特定模式，它不能增加、修改、删除文本内容，通常用于搜索过滤文本，显示被模式匹配到的行。使用正则表达式进行文本匹配（正则表达式参考文章《<a href="https://blog.csdn.net/u010698107/article/details/111568817">Python正则表达式</a>》），它的使用权限是所有用户。</p>
<p>命令形式：<br><code>grep [OPTIONS] PATTERN [FILE...]</code></p>
<ul>
<li>扩展正则表达式（egrep）添加 <code>-E</code> 参数：<code>grep -E [OPTIONS] PATTERN [FILE...]</code></li>
<li><code>-P</code>参数可以让grep使用perl的正则表达式语法</li>
</ul>
<h2 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h2><ul>
<li>-v 或 —invert-match ： 显示不被 pattern匹配到的行</li>
<li>-n 或 —line-number ： 显示匹配的行号</li>
<li>-o 或 —only-matching ：仅显示匹配到的字符串</li>
<li>-c 或 —count ： 统计匹配的行数</li>
<li>-i 或 —ignore-case ：忽略字符大小写</li>
<li>-m或—max-count：<code>-m 1</code> : 匹配到1行后停止匹配</li>
<li>-A&lt;显示行数&gt; 或 —after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li>
<li>-B&lt;显示行数&gt; 或 —before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li>
<li>-C&lt;显示行数&gt; 或 —context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前和之后的内容。</li>
</ul>
<p>or操作：</p>
<ul>
<li><code>grep &#39;pattern1\|pattern2&#39;</code></li>
<li><code>grep -E &#39;pattern1|pattern2&#39;</code></li>
<li><code>egrep &#39;pattern1|pattern2&#39;</code></li>
</ul>
<h2 id="实例1：查找文件内容，显示行号"><a href="#实例1：查找文件内容，显示行号" class="headerlink" title="实例1：查找文件内容，显示行号"></a>实例1：查找文件内容，显示行号</h2><p>查找文件内容包含’test1’的行，显示行数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -n test1 test.txt </span><br><span class="line">1:test1</span><br><span class="line">7:test111</span><br><span class="line">9:test3 test1</span><br><span class="line">11:test111</span><br><span class="line">$ grep -o test1 test.txt  </span><br><span class="line">test1</span><br><span class="line">test1</span><br><span class="line">test1</span><br><span class="line">test1</span><br><span class="line">$ grep -no test1 test.txt</span><br><span class="line">1:test1</span><br><span class="line">7:test1</span><br><span class="line">9:test1</span><br><span class="line">11:test1</span><br></pre></td></tr></table></figure></p>
<h2 id="实例2：查找文件内容，不包含test1的行"><a href="#实例2：查找文件内容，不包含test1的行" class="headerlink" title="实例2：查找文件内容，不包含test1的行"></a>实例2：查找文件内容，不包含test1的行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -nv test1 test.txt</span><br><span class="line">2:test2</span><br><span class="line">3:test3</span><br><span class="line">4:test4</span><br><span class="line">5:test5</span><br><span class="line">6:test6</span><br><span class="line">8:test2</span><br><span class="line">10:<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h2 id="实例3：grep-正则表达式"><a href="#实例3：grep-正则表达式" class="headerlink" title="实例3：grep 正则表达式"></a>实例3：grep 正则表达式</h2><p>查找test1开头的行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -n ^test1 test.txt</span><br><span class="line">1:test1</span><br><span class="line">7:test111</span><br><span class="line">11:test111</span><br></pre></td></tr></table></figure></p>
<p>查找以1结尾的行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -n 1$ test.txt    </span><br><span class="line">1:test1</span><br><span class="line">7:test111</span><br><span class="line">9:test3 test1</span><br><span class="line">11:test111</span><br></pre></td></tr></table></figure></p>
<h2 id="实例4：判断或者提取数字"><a href="#实例4：判断或者提取数字" class="headerlink" title="实例4：判断或者提取数字"></a>实例4：判断或者提取数字</h2><p>提取文本中的数字<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line">test123</span><br><span class="line">456test</span><br><span class="line">66</span><br><span class="line">$ grep -Eo <span class="string">&#x27;[0-9]&#123;1,&#125;&#x27;</span> test.txt</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">66</span><br><span class="line">$ grep -o <span class="string">&#x27;[[:digit:]]*&#x27;</span> &lt;&lt;&lt; <span class="string">cat test.txt</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">66</span></span><br><span class="line"><span class="string">$ cat</span> test.txt | grep -o <span class="string">&#x27;[[:digit:]]*&#x27;</span></span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">66</span><br></pre></td></tr></table></figure><br>打印全为数字的行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ grep -Eo <span class="string">&#x27;^[0-9]&#123;1,&#125;*$&#x27;</span> test.txt</span><br><span class="line">66</span><br><span class="line">$ grep -o <span class="string">&#x27;^[[:digit:]]*$&#x27;</span> &lt;&lt;&lt; <span class="string">cat test.txt</span></span><br><span class="line"><span class="string">66</span></span><br><span class="line"><span class="string">$ cat</span> test.txt | grep -o <span class="string">&#x27;^[[:digit:]]*$&#x27;</span></span><br><span class="line">66</span><br></pre></td></tr></table></figure><br>判断某个变量是否为数字：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ num=<span class="string">&#x27;123&#x27;</span></span><br><span class="line">$ grep <span class="string">&#x27;^[[:digit:]]*$&#x27;</span> &lt;&lt;&lt; <span class="variable">$num</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure></p>
<h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -aux | grep chrome</span><br><span class="line">root       5425  0.4  1.8 869280 34200 pts/0    Sl   Dec22  11:31 /opt/google/chrome/chrome --no-sandbox</span><br><span class="line">root       5439  0.0  0.0 563592  1132 pts/0    S    Dec22   0:00 /opt/google/chrome/chrome --<span class="built_in">type</span>=zygote --no-zygote-sandbox --no-sandbox</span><br><span class="line">root       5440  0.0  0.1 563592  2836 pts/0    S    Dec22   0:06 /opt/google/chrome/chrome --<span class="built_in">type</span>=zygote --no-sandbox</span><br><span class="line">root       5441  0.0  0.0  26452   208 pts/0    S    Dec22   0:00 /opt/google/chrome/nacl_helper --no-sandbox</span><br><span class="line">root       5442  0.0  0.0  26452   144 pts/0    S    Dec22   0:00 /opt/google/chrome/nacl_helper --no-sandbox</span><br></pre></td></tr></table></figure>
<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>sed（Stream Editor）是一种流编辑器，一次处理一行内容，将行存储在模式空间（临时缓冲区），然后用sed命令处理模式空间中的内容，处理完成后将内容送入屏幕，然后清除模式空间，继续读入下一行，执行下一个循环，直到文件末尾。这个过程中不会改变文件内容（除了 <code>-i</code> 选项）。</p>
<p>命令形式：<br><code>sed [选项] [sed命令] [-f &lt;script FILE&gt;] [FILE]</code><br>查看帮助文档：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man sed</span><br><span class="line">sed -h</span><br></pre></td></tr></table></figure></p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul>
<li>-h： 显示帮助信息</li>
<li>-n： 仅显示 script处理后的结果，常与sed命令p连用：<code>sed -n &#39;p&#39; test.txt</code> 打印test.txt文件内容</li>
<li>-e：直接在指令列模式上进行 sed 的动作编辑，不修改原文件，输出到终端</li>
<li>-i：修改文件内容，而不输出到终端</li>
<li>-f filename ： sed 动作写在filename 内，执行 filename 内的sed 动作</li>
<li>-r∶扩展正规表达式</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>a：append，新增： <code>sed -e &#39;4 a newline&#39; test.txt</code> </li>
<li>c：change，取代： <code>sed -e &#39;2,5c No 2-5 number&#39; test.txt</code> </li>
<li>d：delete，删除： <code>sed -e &#39;2,5d&#39; test.txt</code> <ul>
<li><code>sed -e &#39;/^$/d&#39; test.txt</code>：删除test.txt文件空行</li>
</ul>
</li>
<li>i：insert，插入： <code>sed -e &#39;2i newline&#39; test.txt</code> </li>
<li>p：print，打印：<code>sed -n &#39;p&#39; test.txt</code></li>
<li>s：substitute，替换：<code>sed -e &#39;s/old/new/g&#39; test.txt</code><ul>
<li><code>sed -e &#39;s/$/%/&#39; test.txt</code>：在每行末尾添加%</li>
<li><code>sed -e &#39;s/ *//g&#39; test.txt</code>： 删除test.txt文件空格</li>
<li><code>sed -e &quot;4s;old;new;g&quot; test.txt</code> 或者 <code>sed -e &#39;4s/old/new/g&#39; test.txt</code>：替换第4行</li>
</ul>
</li>
<li>N：将下一行添加到pattern space中，将当前读入行和用N命令添加的下一行看成“一行”</li>
</ul>
<p>注意：</p>
<ol>
<li>在替换操作中，替换时用的分割符 ‘/‘ 可以使用其它符号代替，特别是替换的内容中有 ‘/‘ 时，可以使用@、#、%等符号代替。</li>
<li>grep和sed命令的正则表达式中不支持 <code>\d</code> ,可使用如下方式匹配数字：<ul>
<li><code>sed -re &#39;s/[0-9]+//g&#39; test.txt</code></li>
<li><code>egrep &#39;[0-9]+&#39; test.txt</code> 或 <code>grep -E &#39;[0-9]+&#39; test.txt</code></li>
</ul>
</li>
</ol>
<h2 id="实例1：打印并输出数据"><a href="#实例1：打印并输出数据" class="headerlink" title="实例1：打印并输出数据"></a>实例1：打印并输出数据</h2><p>打印并输出第5行数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;5p&#x27;</span> test.txt</span><br><span class="line">test5</span><br><span class="line">$ cat -n test.txt | sed -n <span class="string">&#x27;5p&#x27;</span> </span><br><span class="line">     5	test5</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><br>打印并输出第3-5行数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;3,5p&#x27;</span> test.txt</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br></pre></td></tr></table></figure><br>取反，不选择第3到5行数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;3,5!p&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test2</span><br></pre></td></tr></table></figure><br>隔行输出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;1~2p&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test3</span><br><span class="line">test5</span><br><span class="line">$ sed -n <span class="string">&#x27;1~3p&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test4</span><br><span class="line">$ </span><br></pre></td></tr></table></figure></p>
<h2 id="实例2：将匹配的行数据输出到指定文件"><a href="#实例2：将匹配的行数据输出到指定文件" class="headerlink" title="实例2：将匹配的行数据输出到指定文件"></a>实例2：将匹配的行数据输出到指定文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 累加</span><br><span class="line">sed -n <span class="string">&#x27;1~2p&#x27;</span> test.txt &gt;&gt; a.log</span><br><span class="line">$ 覆盖</span><br><span class="line">sed -n <span class="string">&#x27;1~3p&#x27;</span> test.txt &gt; a.log </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;1~2p&#x27;</span> test.txt&gt;&gt; a.log</span><br><span class="line">$ cat a.log</span><br><span class="line">test1</span><br><span class="line">test3</span><br><span class="line">test5</span><br><span class="line">$ sed -n <span class="string">&#x27;1~3p&#x27;</span> test.txt &gt; a.log </span><br><span class="line">$ cat a.log</span><br><span class="line">test1</span><br><span class="line">test4</span><br><span class="line">$ </span><br></pre></td></tr></table></figure>
<h2 id="实例3：新增、插入字符串"><a href="#实例3：新增、插入字符串" class="headerlink" title="实例3：新增、插入字符串"></a>实例3：新增、插入字符串</h2><p>在第2行后加上 newLine<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2 a newline&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">newline</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><br>在第2行前加上 newline<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2 i newline&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">newline</span><br><span class="line">test2</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br></pre></td></tr></table></figure></p>
<h2 id="实例4：删除匹配到的行或者匹配行后的n行"><a href="#实例4：删除匹配到的行或者匹配行后的n行" class="headerlink" title="实例4：删除匹配到的行或者匹配行后的n行"></a>实例4：删除匹配到的行或者匹配行后的n行</h2><p>介绍两种方法来删除某一行的内容，一种是使用替代（substitute）的方法：<br>删除匹配到test3的那一行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -e <span class="string">&#x27;s/test3.*//g&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line"></span><br><span class="line">test4</span><br><span class="line">test5</span><br></pre></td></tr></table></figure><br>删除匹配行及后一行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -e <span class="string">&#x27;N;s/test3.*//g&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line"></span><br><span class="line">test5</span><br></pre></td></tr></table></figure><br>这种方法会留一个空行，可以进一步使用命令<code>sed -e &#39;/^$/d&#39; test.txt</code>命令删除空行。</p>
<p>第二种方法是使用删除（delete）命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -e <span class="string">&#x27;/test3.*/d&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">test4</span><br><span class="line">test5</span><br></pre></td></tr></table></figure><br>也可以删除匹配到的行及匹配行后的n行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -e <span class="string">&#x27;/test2.*/,+2d&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test5</span><br></pre></td></tr></table></figure></p>
<h2 id="实例5：全局替换"><a href="#实例5：全局替换" class="headerlink" title="实例5：全局替换"></a>实例5：全局替换</h2><p>将所有的test2替换为test222<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -e <span class="string">&#x27;s/test2/test222/g&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test222</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br><span class="line">$ sed -e <span class="string">&#x27;s/test2/test222/&#x27;</span> test.txt</span><br><span class="line">test1</span><br><span class="line">test222</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br></pre></td></tr></table></figure><br>替换某一行：替换test1开头的所在行<br>test2.txt内容：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat test2.txt</span><br><span class="line">hello world !</span><br><span class="line">test1 test2 test2</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">test3 </span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1：c参数，替换某一行</span></span><br><span class="line">$ sed <span class="string">&quot;2c hello&quot;</span> test2.txt</span><br><span class="line">hello world !</span><br><span class="line">hello</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">test3 </span><br><span class="line">$ sed <span class="string">&quot;3c hello&quot;</span> test2.txt</span><br><span class="line">hello world !</span><br><span class="line">test1 test2 test2</span><br><span class="line">hello</span><br><span class="line">test2</span><br><span class="line">test3 </span><br><span class="line"><span class="comment"># 方法2：s参数替换</span></span><br><span class="line">$ sed <span class="string">&#x27;s/^test1.*$/hello/&#x27;</span> test2.txt</span><br><span class="line">hello world !</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">test2</span><br><span class="line">test3 </span><br></pre></td></tr></table></figure>
<h2 id="实例6：修改文件"><a href="#实例6：修改文件" class="headerlink" title="实例6：修改文件"></a>实例6：修改文件</h2><p>前面的新增、替换操作都没有改变文件内容，如果要使文件修改生效，需要使用 <code>-i</code> 选项。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;s/test2/test222/&#x27;</span> test.txt</span><br><span class="line">$ cat test.txt </span><br><span class="line">test1</span><br><span class="line">test222</span><br><span class="line">test3</span><br><span class="line">test4</span><br><span class="line">test5</span><br><span class="line">$ </span><br></pre></td></tr></table></figure></p>
<h2 id="实例7：横向连接"><a href="#实例7：横向连接" class="headerlink" title="实例7：横向连接"></a>实例7：横向连接</h2><p>将匹配到的对象横向连接</p>
<p>比如我们需要杀掉某个服务有多个进程：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># ps -ef | grep named | grep -v grep</span></span><br><span class="line">root       7136      1  0 1月22 ?       00:00:54 /var/bin/named -c /var/named/named.conf</span><br><span class="line">root       7690      1  0 1月21 ?       00:01:02 /var/bin/named -c /var/named/named.conf</span><br></pre></td></tr></table></figure><br>使用命令 <code>kill -9 7136 7690</code>来杀掉这两个进程，使用如下命令实现连接这两个进程的ID：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 $(ps -ef | grep named | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>) | sed <span class="string">&#x27;:1;N;s/\n/ /g;t1&#x27;</span></span><br></pre></td></tr></table></figure><br>关键命令为 <code>sed &#39;:1;N;s/\n/ /g;t1&#39;</code>，将换行替换为空格。</p>
<h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>awk是一种文本模式扫描和处理的编程语言，由 Aho, Weinberger 和 Kernighan开发。awk功能强大，可用于数据提取和统计，常用在shell脚本中。awk逐行读入文件，以空格为默认分隔符将每行切片，切开的部分再进行后续处理。</p>
<p>命令形式：<br><code>awk [options] &#39;pattern action&#39; [FILE(s)]</code></p>
<ul>
<li>pattern：正则表达式</li>
<li>action：对匹配到的内容执行的命令(默认为输出每行内容)</li>
</ul>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li><strong>$0</strong>： 整条记录（当前行）</li>
<li><strong>$1 - $​n</strong>： 表示当前行的第n个域</li>
<li><strong>FILENAME</strong>： awk浏览的文件名</li>
<li><strong>BEGIN</strong>： 处理文本之前要执行的操作</li>
<li><strong>END</strong>： 处理文本之后要执行的操作</li>
<li><strong>FS</strong>： 设置输入域分隔符，等价于命令行 <code>-F</code> 选项，默认为空格“ ”<ul>
<li><code>awk -F: &#39;&#123;print $1&#125;&#39; test.txt</code> </li>
<li>或者 <code>awk &#39;BEGIN &#123;FS = &quot;:&quot;&#125; &#123;print $1&#125;&#39; test.txt</code></li>
</ul>
</li>
<li><strong>NF</strong>： 浏览记录的域的个数/列数</li>
<li><strong>NR</strong>： 已读的记录数/行数</li>
<li><strong>FNR</strong>： 当前输入文件的记录数</li>
<li><strong>OFS</strong>： 输出域分隔符，默认为空格“ ”</li>
<li><strong>ORS</strong>： 输出记录分隔符，默认为“\n”</li>
<li><strong>RS</strong>： 控制记录分隔符</li>
<li><strong>exit</strong>：匹配到第一行内容后退出：<code>awk -F: &#39;&#123;print $2;exit&#125;&#39; test.txt</code> ，grep使用 <code>-m</code> 参数</li>
</ul>
<h2 id="实例1：查找、打印"><a href="#实例1：查找、打印" class="headerlink" title="实例1：查找、打印"></a>实例1：查找、打印</h2><p>搜索/etc/passwd有root关键字的所有行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F : <span class="string">&#x27;/root/ &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">$</span><br><span class="line">$ awk -F : <span class="string">&#x27;/root/ &#123;print $7&#125;&#x27;</span> /etc/passwd</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br></pre></td></tr></table></figure><br>打印etc/passwd/的第二行信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F : <span class="string">&#x27;NR==2 &#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p>
<h2 id="实例2：BEGIN、END制表"><a href="#实例2：BEGIN、END制表" class="headerlink" title="实例2：BEGIN、END制表"></a>实例2：BEGIN、END制表</h2><p>使用 begin加入标题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F : <span class="string">&#x27;BEGIN &#123;print &quot;No&quot;, &quot;User&quot;, &quot;Auth&quot;&#125; &#123;print NR &quot;|&quot; $1 &quot;|&quot; $2&#125; END &#123;print FILENAME&#125;&#x27;</span> /etc/passwd</span><br><span class="line">No User Auth</span><br><span class="line">1|root|x</span><br><span class="line">2|bin|x</span><br><span class="line">3|daemon|x</span><br><span class="line">4|adm|x</span><br><span class="line">5|lp|x</span><br><span class="line">6|sync|x</span><br><span class="line">7|shutdown|x</span><br><span class="line">8|halt|x</span><br><span class="line">9|mail|x</span><br><span class="line">.................</span><br><span class="line">28|nscd|x</span><br><span class="line">29|exim|x</span><br><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure></p>
<h2 id="实例3：自定义分割符"><a href="#实例3：自定义分割符" class="headerlink" title="实例3：自定义分割符"></a>实例3：自定义分割符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;123|456|789&quot;</span></span><br><span class="line">123|456|789</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;123|456|789&quot;</span> | awk <span class="string">&#x27;BEGIN&#123;RS=&quot;|&quot;&#125;&#123;print $0&#125;&#x27;</span></span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">789</span><br></pre></td></tr></table></figure>
<h1 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h1><h2 id="找出log中的404-500的报错有多少条"><a href="#找出log中的404-500的报错有多少条" class="headerlink" title="找出log中的404 500的报错有多少条"></a>找出log中的404 500的报错有多少条</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -E <span class="string">&#x27; 404 | 500 &#x27;</span> nginx.log | wc -l</span><br><span class="line">267</span><br><span class="line">$ grep -P <span class="string">&#x27; 404 | 500 &#x27;</span> nginx.log | wc -l</span><br><span class="line">267</span><br><span class="line">$ grep -Pc <span class="string">&#x27; 404 | 500 &#x27;</span> nginx.log  </span><br><span class="line">267</span><br><span class="line"></span><br><span class="line">$ awk <span class="string">&#x27;$9~/404|500/&#x27;</span> nginx.log | wc -l    <span class="comment"># &#123;print&#125;省略</span></span><br><span class="line">267</span><br><span class="line">$ awk <span class="string">&#x27;$9~/404|500/&#123;print&#125;&#x27;</span> nginx.log | wc -l</span><br><span class="line">267</span><br></pre></td></tr></table></figure>
<ul>
<li>$9表示查找第9列</li>
<li>波浪号～表示用来匹配后面的正则表达式，告诉awk后面开始是正则语法。</li>
<li><code>wc -l</code> ：和<code>-c</code>参数一样，统计匹配到的行数</li>
</ul>
<h2 id="访问量最高的ip"><a href="#访问量最高的ip" class="headerlink" title="访问量最高的ip"></a>访问量最高的ip</h2><h3 id="使用awk命令查找"><a href="#使用awk命令查找" class="headerlink" title="使用awk命令查找"></a>使用awk命令查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print$1&#125;&#x27;</span> nginx.log | sort | uniq -c | sort -nr | head -3</span><br><span class="line">    282 216.244.66.241</span><br><span class="line">    130 136.243.151.90</span><br><span class="line">    110 127.0.0.1</span><br><span class="line"></span><br><span class="line">$ awk <span class="string">&#x27;&#123;print$1&#125;&#x27;</span> nginx.log | sort | uniq -c | sort -nr | head -3 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line">216.244.66.241</span><br><span class="line">136.243.151.90</span><br><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure>
<p>sort命令用于排序：</p>
<ul>
<li><code>-r</code>：sort默认为升序，<code>-r</code>参数表示降序</li>
<li><code>-n</code>：以数值来排序，如果不使用这个参数就会出现10比2小的情况，因为把10当做字符来进行比较了。</li>
</ul>
<p>uniq 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用</p>
<ul>
<li><code>-c</code>：在每列旁边显示该行重复出现的次数</li>
</ul>
<p>head命令用于查看文件的开头部分的内容</p>
<h3 id="使用grep查找"><a href="#使用grep查找" class="headerlink" title="使用grep查找"></a>使用grep查找</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">&#x27;^[0-9]*.[0-9]*.[0-9]*.[0-9]*&#x27;</span> nginx.log    <span class="comment">#其中的点“.”为正则语法，表示匹配任意字符</span></span><br><span class="line">123.127.112.18 - - [05/Dec/2018:00:09:18 +0000] <span class="string">&quot;GET /cable HTTP/1.1&quot;</span> 101 1017 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&quot;</span> 70.577 70.577 .</span><br><span class="line">139.180.132.174 - - [05/Dec/2018:00:09:20 +0000] <span class="string">&quot;GET /bbs.zip HTTP/1.1&quot;</span> 404 1264 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;</span> 0.011 0.011 .</span><br><span class="line">139.180.132.174 - - [05/Dec/2018:00:09:12 +0000] <span class="string">&quot;GET /__zep__/js.zip HTTP/1.1&quot;</span> 500 2183 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;</span> 0.018 0.018 .</span><br><span class="line"></span><br><span class="line">$ grep -o <span class="string">&#x27;^[0-9]*.[0-9]*.[0-9]*.[0-9]*&#x27;</span> nginx.log</span><br><span class="line">216.244.66.241</span><br><span class="line">223.71.41.98</span><br><span class="line">113.87.161.17</span><br><span class="line">216.244.66.241</span><br><span class="line">216.244.66.241</span><br><span class="line">144.76.81.72</span><br><span class="line">............</span><br><span class="line">$ grep -o <span class="string">&#x27;^[0-9]*.[0-9]*.[0-9]*.[0-9]*&#x27;</span> nginx.log | wc -l</span><br><span class="line">2000</span><br><span class="line">$ grep -o <span class="string">&#x27;^[0-9]*.[0-9]*.[0-9]*.[0-9]*&#x27;</span> nginx.log | sort | uniq -c | sort -nr |head -3   </span><br><span class="line">    282 216.244.66.241</span><br><span class="line">    130 136.243.151.90</span><br><span class="line">    110 127.0.0.1</span><br><span class="line">  ......................</span><br><span class="line">$ </span><br></pre></td></tr></table></figure>
<h2 id="将-topics-后面的数字替换成numer"><a href="#将-topics-后面的数字替换成numer" class="headerlink" title="将 topics 后面的数字替换成numer"></a>将 topics 后面的数字替换成numer</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">&#x27;topics&#x27;</span> nginx.log | sed <span class="string">&#x27;s#topics/[0-9]*#topics/number#g&#x27;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="将ip地址横向打印"><a href="#将ip地址横向打印" class="headerlink" title="将ip地址横向打印"></a>将ip地址横向打印</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 tmp]<span class="comment"># awk &#x27;&#123;print $1&#125;&#x27; nginx.log | sed &#x27;:1;N;s/\n/|/g;t1&#x27;  </span></span><br><span class="line">216.244.66.241|216.244.66.241|216.244.66.241|216.244.66.241|216.244.66.241|216.244.66.241|216.244.66.241|223.71.41.98|113.87.161.17|216.244.66.241|216.244.66.241|144.76.81.72</span><br></pre></td></tr></table></figure>
<ul>
<li><code># :1</code> ：标记  t1</li>
<li><code>;</code>：把不同的命令分开</li>
</ul>
<h1 id="在Windows中使用grep、awk和sed"><a href="#在Windows中使用grep、awk和sed" class="headerlink" title="在Windows中使用grep、awk和sed"></a>在Windows中使用grep、awk和sed</h1><p>在Windows系统中也可以使用这3个命令，然而，windows cmd不支持这3个命令，因此需要下载对应的Win32版本文件，下面提供几种下载方法：</p>
<ol>
<li>开源软件平台SourceForge：<a href="https://sourceforge.net/projects/gnuwin32/files/">https://sourceforge.net/projects/gnuwin32/files/</a> </li>
<li>安装<a href="https://git-scm.com/download/win">Git Bash</a>：安装方法可参考<a href="https://blog.csdn.net/u010698107/article/details/111414654">Git简易教程-安装及简单使用</a>，Git Bash的安装目录<code>~\Git\usr\bin\</code>下有很多GNU工具。</li>
<li>我把这三个工具放到了Github上：<a href="https://github.com/hiyongz/ShellNotes">hiyongz/ShellNotes</a>，可以在上面下载，注意对应的dll文件也需要下载。</li>
</ol>
<p>安装使用：</p>
<ol>
<li>在SourceForge上下载对应的setup文件安装，并添加到环境变量</li>
<li>或者直接下载对应的二进制文件，解压并添加到环境变量</li>
</ol>
<p>测试文件test.log的内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">log</span><br><span class="line">log2</span><br><span class="line">test</span><br><span class="line">666 log</span><br></pre></td></tr></table></figure>
<p>使用awk和grep命令查询log出现的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F <span class="string">&#x27; &#x27;</span> <span class="string">&quot;/^log/ &#123;print <span class="variable">$0</span>&#125;&quot;</span> test.log</span><br><span class="line"><span class="built_in">log</span></span><br><span class="line">log2</span><br><span class="line"></span><br><span class="line">$ grep -n <span class="string">&quot;^log&quot;</span> test.log</span><br><span class="line">1:<span class="built_in">log</span></span><br><span class="line">2:log2</span><br></pre></td></tr></table></figure>
<p>注意：正则表达式要用双引号。</p>
<p>使用bat脚本进行文本处理：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> grep=&quot;D:/ProgramWorkspace/ShellNotes/grep/grep.exe&quot;</span><br><span class="line"><span class="built_in">set</span> wc=&quot;D:/ProgramWorkspace/ShellNotes/wc/wc.exe&quot;</span><br><span class="line"><span class="built_in">set</span> awk=&quot;D:/ProgramWorkspace/ShellNotes/awk/awk.exe&quot;</span><br><span class="line"><span class="built_in">set</span> sed=&quot;D:/ProgramWorkspace/ShellNotes/sed/sed.exe&quot;</span><br><span class="line"></span><br><span class="line"><span class="variable">%grep%</span> -n &quot;^log&quot; test.log | <span class="variable">%wc%</span> -l &gt; esult.log</span><br><span class="line"><span class="variable">%awk%</span> -F &#x27; &#x27; &quot;/^log/ &#123;<span class="built_in">print</span> $<span class="number">0</span>&#125;&quot; test.log  &gt;&gt; result.log</span><br><span class="line"><span class="variable">%sed%</span> -n &#x27;<span class="number">1</span>,<span class="number">3</span>p&#x27; test.log  &gt;&gt; result.log</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>
<p><strong>参考资料：</strong></p>
<ol>
<li>正则表达式30分钟入门教程：<a href="https://deerchao.cn/tutorials/regex/regex.htm">https://deerchao.cn/tutorials/regex/regex.htm</a></li>
<li><a href="https://blog.csdn.net/u010698107/article/details/111568817">Python正则表达式</a></li>
</ol>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>Linux三剑客</tag>
      </tags>
  </entry>
  <entry>
    <title>Python正则表达式</title>
    <url>/posts/linux-regular-expression-and-python-regex/</url>
    <content><![CDATA[<p>正则表达式（Regular expression）是组成搜索模式的一组字符序列，是<strong>记录文本规则</strong>的代码，用来检查文本中是否包含指定模式的字符串，通过定义一个规则来匹配字符串。正则表达式广泛应用于在字符串查找和处理中，大多文本编辑器基本都支持正则表达式查找。本文将简要介绍正则表达式语法，然后介绍Python语言中正则表达式使用方法。</p>
<a id="more"></a>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>Unix之父Ken Tompson将正则表达式引入Unix，后面发展成了grep（Global Regular Expression Print）命令，由于grep不支持<code>+</code>、<code>|</code>与<code>?</code> ，且分组比较麻烦，AT&amp;T的Alfred Aho开发了egrep命令。随着Unix的版本不断演化，Unix中的程序（比如Linux三剑客中的awk、sed）所支持的正则表达式有差异，比较混乱。在1986年制定了POSIX（Portable Operating System Interface）标准，其中统一了正则表达式的语法。</p>
<p>POSIX标准把正则表达式分为两种：BRE（Basic Regular Expressions）和ERE（Extended Regular Expressions ）。BRE就是unix系统使用的grep命令，ERE对应egrep命令，是BRE的扩展。而linux系统使用的是GNU标准，linux发行版集成了GNU（Gnu’s Not Unix）套件，GNU在实现了POXIS标准的同时，做了一定的扩展。也包括GNU Basic Regular Expressions 和GNU Extends Regular Expressions。</p>
<p>正则表达式除了POSIX标准之外还有一个Perl分支，Perl与sed和awk兼容，后来演化成为PCRE（Perl Compatible Regular Expressions），是一个用C语言编写的正则表达式函数库，功能很强大，性能比POSIX正则表达式好。PCRE被引入了其他语言中，比如PHP, Tcl, Python, Ruby, C++, Java, R语言等等。</p>
<h2 id="普通正则"><a href="#普通正则" class="headerlink" title="普通正则"></a>普通正则</h2><div class="table-container">
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
<tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
</tbody>
</table>
</div>
<h2 id="扩展正则"><a href="#扩展正则" class="headerlink" title="扩展正则"></a>扩展正则</h2><p>扩展正则：grep加 <code>-E</code> 参数</p>
<ul>
<li>grep -E ‘ 404 | 500’ nginx.log</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>？</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>表示或</td>
</tr>
</tbody>
</table>
</div>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><div class="table-container">
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td>(?!exp)</td>
<td>匹配后面不是exp的位置</td>
</tr>
<tr>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
</tbody>
</table>
</div>
<h2 id="正则表达式实例"><a href="#正则表达式实例" class="headerlink" title="正则表达式实例"></a>正则表达式实例</h2><p>正则表达式在线测试工具：</p>
<ol>
<li><a href="https://regex101.com/">https://regex101.com/</a></li>
<li><a href="http://c.runoob.com/front-end/854">http://c.runoob.com/front-end/854</a></li>
<li><a href="https://tool.oschina.net/regex">https://tool.oschina.net/regex</a></li>
</ol>
<p>测试文本test.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat test.txt</span></span><br><span class="line">abc</span><br><span class="line">bac</span><br><span class="line">123456</span><br><span class="line">bc</span><br><span class="line">test123</span><br><span class="line">12345678901234</span><br><span class="line">023-12345678</span><br><span class="line">123</span><br><span class="line">GET 1</span><br><span class="line">GET123</span><br><span class="line">GET</span><br><span class="line">test123test</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-匹配以字母a开头的单词"><a href="#1-匹配以字母a开头的单词" class="headerlink" title="1. 匹配以字母a开头的单词"></a>1. 匹配以字母a开头的单词</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&#x27;\ba\w*\b&#x27;</span> test.txt</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<h3 id="2-匹配刚好6个字符的单词"><a href="#2-匹配刚好6个字符的单词" class="headerlink" title="2. 匹配刚好6个字符的单词"></a>2. 匹配刚好6个字符的单词</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -E <span class="string">&#x27;\b\w&#123;6&#125;\b&#x27;</span> test.txt</span></span><br><span class="line">123456</span><br><span class="line">GET123</span><br></pre></td></tr></table></figure>
<h3 id="3-匹配1个或更多连续的数字"><a href="#3-匹配1个或更多连续的数字" class="headerlink" title="3. 匹配1个或更多连续的数字"></a>3. 匹配1个或更多连续的数字</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -Po <span class="string">&#x27;\d+&#x27;</span> test.txt</span></span><br><span class="line">123456</span><br><span class="line">123</span><br><span class="line">12345678901234</span><br><span class="line">023</span><br><span class="line">12345678</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">123</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<h3 id="4-5位到12位QQ号"><a href="#4-5位到12位QQ号" class="headerlink" title="4. 5位到12位QQ号"></a>4. 5位到12位QQ号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -P <span class="string">&#x27;\d&#123;5,12&#125;&#x27;</span> test.txt</span></span><br><span class="line">123456</span><br><span class="line">12345678901234</span><br><span class="line">023-12345678</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep -P <span class="string">&#x27;^\d&#123;5,12&#125;$&#x27;</span> test.txt</span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<h3 id="5-匹配电话号码"><a href="#5-匹配电话号码" class="headerlink" title="5. 匹配电话号码"></a>5. 匹配电话号码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -P <span class="string">&#x27;0\d&#123;2&#125;-\d&#123;8&#125;&#x27;</span> test.txt</span></span><br><span class="line">023-12345678</span><br></pre></td></tr></table></figure>
<h3 id="6-只匹配3位数字"><a href="#6-只匹配3位数字" class="headerlink" title="6. 只匹配3位数字"></a>6. 只匹配3位数字</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -P <span class="string">&#x27;^\d&#123;3&#125;$&#x27;</span> test.txt</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<h3 id="7-查找单词‘GET’"><a href="#7-查找单词‘GET’" class="headerlink" title="7. 查找单词‘GET’"></a>7. 查找单词‘GET’</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&#x27;\bGET\b&#x27;</span> test.txt</span></span><br><span class="line">GET 1</span><br><span class="line">GET</span><br><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&#x27;^GET$&#x27;</span> test.txt</span></span><br><span class="line">GET</span><br></pre></td></tr></table></figure>
<h3 id="8-匹配两个字符之间的内容"><a href="#8-匹配两个字符之间的内容" class="headerlink" title="8. 匹配两个字符之间的内容"></a>8. 匹配两个字符之间的内容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep -Eo <span class="string">&quot;test(.+?)test&quot;</span> test.txt</span></span><br><span class="line">test123test</span><br><span class="line"><span class="meta">$</span><span class="bash"> grep -Po <span class="string">&quot;(?&lt;=test).*?(?=test)&quot;</span> test.txt</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<h3 id="9-和-的使用方法"><a href="#9-和-的使用方法" class="headerlink" title="9. .*和.+的使用方法"></a>9. <code>.*</code>和<code>.+</code>的使用方法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ text1=<span class="string">&quot;fn()&quot;</span></span><br><span class="line">$ text2=<span class="string">&quot;fn(6)&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text1</span> | grep <span class="string">&quot;fn\(.*\)&quot;</span></span><br><span class="line">fn()</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text2</span> | grep <span class="string">&quot;fn\(.*\)&quot;</span></span><br><span class="line">fn(6)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text1</span> | grep -E <span class="string">&quot;fn\(.+\)&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$text2</span> | grep -E <span class="string">&quot;fn\(.+\)&quot;</span></span><br><span class="line">fn(6)</span><br></pre></td></tr></table></figure>
<h1 id="Python正则表达式"><a href="#Python正则表达式" class="headerlink" title="Python正则表达式"></a>Python正则表达式</h1><p>Python有一个内置正则表达式模块 <code>re</code> ，可以使用它来进行字符串操作：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><br><code>re</code>模块提供了以下4种方法：</p>
<ul>
<li>findall：返回所有匹配项</li>
<li>search：如果匹配到目标字符，返回一个匹配对象，用于判断是否存在目标字符串</li>
<li>split：分割</li>
<li>sub：替换</li>
</ul>
<h2 id="匹配数字、字母"><a href="#匹配数字、字母" class="headerlink" title="匹配数字、字母"></a>匹配数字、字母</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&#x27;1&amp;\nbsp;hour(s) 2&amp;\nbsp;min 25&amp;\nbsp;s&#x27;</span></span><br><span class="line">re.findall(<span class="string">r&#x27;\d+&#x27;</span>,text) <span class="comment"># 匹配时间（数字）</span></span><br><span class="line">re.findall(<span class="string">r&#x27;\d+|(?&lt;=;)\w+&#x27;</span>,text) <span class="comment"># 匹配时间和单位</span></span><br></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;1&#39;, &#39;2&#39;, &#39;25&#39;]</span><br><span class="line">[&#39;1&#39;, &#39;hour&#39;, &#39;2&#39;, &#39;min&#39;, &#39;25&#39;, &#39;s&#39;]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;\d&#123;2&#125;+&#x27;</span>,text) <span class="comment"># 匹配2位数字</span></span><br></pre></td></tr></table></figure>
<h2 id="查找替换两个字符串之间内容"><a href="#查找替换两个字符串之间内容" class="headerlink" title="查找替换两个字符串之间内容"></a>查找替换两个字符串之间内容</h2><p>替换字符<code>target_text</code>：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xpath_path = <span class="string">&#x27;//*[contains(text(),&quot;target_text&quot;)]/../td[5]/span&#x27;</span> <span class="comment"># xpath路径</span></span><br><span class="line">repl = <span class="string">&quot;需要替换成的字符串&quot;</span></span><br><span class="line">re.sub(<span class="string">r&quot;(?&lt;=\&quot;).*?(?=\&quot;)&quot;</span>, repl, xpath_path) <span class="comment"># 替换要查找的文本</span></span><br></pre></td></tr></table></figure><br>output:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#x2F;&#x2F;*[contains(text(),&quot;需要替换成的字符串&quot;)]&#x2F;..&#x2F;td[5]&#x2F;span&#39;</span><br></pre></td></tr></table></figure></p>
<h2 id="添加千位分割符"><a href="#添加千位分割符" class="headerlink" title="添加千位分割符"></a>添加千位分割符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="string">&#x27;12345678&#x27;</span> </span><br><span class="line">re.sub(<span class="string">r&quot;\B(?=(?:\d&#123;3&#125;)+(?!\d))&quot;</span>, <span class="string">&quot;,&quot;</span>,number) <span class="comment"># 替换要查找的文本</span></span><br><span class="line">re.sub(<span class="string">r&quot;\B(?:(?:\d&#123;3&#125;)+(?!\d))&quot;</span>, <span class="string">&quot;,&quot;</span>,number) </span><br></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;12,345,678&#39;</span><br><span class="line">&#39;12,&#39;</span><br></pre></td></tr></table></figure><br><code>(?:\d&#123;3&#125;)+(?!\d)</code>:</p>
<ul>
<li>查找3n(数字) + 非数字 组合</li>
</ul>
<p><code>(?:exp)</code> :</p>
<ul>
<li>匹配exp,不捕获匹配的文本(非获取匹配)，也不给此分组分配组号，当执行了第一次匹配时，匹配到了行尾，直接将345678替换成了“,”。</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li>正则表达式30分钟入门教程：<a href="https://deerchao.cn/tutorials/regex/regex.htm">https://deerchao.cn/tutorials/regex/regex.htm</a></li>
<li>github项目learn-regex：<a href="https://github.com/ziishaned/learn-regex">https://github.com/ziishaned/learn-regex</a></li>
<li><a href="https://www.w3schools.com/python/python_regex.asp">https://www.w3schools.com/python/python_regex.asp</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Linux</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>shell</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令：性能命令</title>
    <url>/posts/linux-shell-performance-command-guide/</url>
    <content><![CDATA[<p>本文介绍Linux常用性能统计分析命令，监控进程或者系统性能。主要包括CPU（top、mpstat）、内存（vmstat、free）、I/O（iostat）、网络性能（sar）、系统日志信息（demsg）、查看进程状态（pidstat）。<a id="more"></a>下面简要介绍这些命令的使用方法。</p>
<p>mpstat、iostat、pidstat和sr命令需要安装sysstat软件包，sysstat包含了系统性能监测工具，安装方法如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install sysstat <span class="comment"># CentOS</span></span><br><span class="line">sudo apt-get install sysstat <span class="comment"># Ubuntu</span></span><br></pre></td></tr></table></figure></p>
<h1 id="负载"><a href="#负载" class="headerlink" title="负载"></a>负载</h1><p>CPU负载（cpu load）指的是某个时间点进程对系统产生的压力。表示特定时间间隔内运行队列中的平均进程数，如果一个进程满足以下条件则其就会位于运行队列中:</p>
<ul>
<li>它没有在等待IO操作的结果</li>
<li>它没有主动进入等待状态(也就是没有调用’wait’)</li>
<li>没有被停止(例如：等待终止)</li>
</ul>
<p>单CPU满负荷运行时cpu_load为1，当多个CPU或多核时，相当于大桥有多个车道，满负荷运行时cpu_load值为CPU数或多核数；CPU负载的计算（以单CPU为例），假设一分钟内执行10个任务代表满负荷，当一分钟给出30个任务时，CPU只能处理10个，剩余20个不能处理，cpu_load=3；<br><img src="cpu-load.png" width="80%" height="80%" /></p>
<p>单核CPU</p>
<ul>
<li>cpu load = 1，满负载运行</li>
<li>cpu load = 0.5，半负载运行</li>
<li>cpu load = 1.7，超负载运行</li>
</ul>
<p>一般来说，每个CPU内核当前活动进程数不大于3，则系统运行表现良好!</p>
<ul>
<li>如果多核cpu，需要累加<ul>
<li>4核cpu&lt;12<h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2>uptime命令显示的平均负载包括了正在或准备运行在CPU上的进程和阻塞在不可中断睡眠状态(uninterruptible) I/O(通常是磁盘I/O)上的进程。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># uptime</span></span><br><span class="line"> 16:54:53 up 29 days,  2:02,  1 user,  load average: 0.03, 0.03, 0.00</span><br><span class="line">[root@server ~]<span class="comment"># cat /proc/loadavg</span></span><br><span class="line">0.03 0.03 0.00 3/166 16903</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>显示最近1分钟、5分钟、15分钟系统负载的移动平均值，它们共同展现了负载随时间变动的情况。</li>
<li>3：正在运行的进程数，166：总的进程数，16903：最近运行进程的ID。</li>
</ul>
<h1 id="ps和top命令"><a href="#ps和top命令" class="headerlink" title="ps和top命令"></a>ps和top命令</h1><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>ps命令是Process Status的缩写，用于查看系统进程信息</p>
<ul>
<li>-e，-A：显示所有进程，包括其他用户的进程</li>
<li>-f：显示完整格式</li>
<li>-l：显示长列表</li>
<li>-a：所有进程，加上-x参数会显示没有控制终端的进程</li>
<li>-u：username，显示指定用户的进程，例如ps -u root</li>
<li>-x：显示当前用户在所有终端下的进程</li>
<li>-aux：显示所有进程，包括所有用户，分组情况</li>
</ul>
<p>ps常用用法，通常与grep组合使用</p>
<ol>
<li>显示dhcpd进程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps ax | grep dhcpd | grep -v grep </span><br></pre></td></tr></table></figure></li>
<li><p>ps -ef<br>显示所有进程</p>
</li>
<li><p>ps -aux<br>显示所有进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure>
<p>按照CPU或者内存用量来筛选进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux --sort -pcpu</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">ps -aux --sort -pmem</span><br></pre></td></tr></table></figure>
<h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 强制中断正在执行的命令，如，命令长时间没有响应的情况下</span></span><br><span class="line">Ctrl+C组合键</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span>命令</span></span><br><span class="line">kill -9 进程ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> killall命令：终止指定名称的所有进程</span></span><br><span class="line">killall -9 dhclient</span><br></pre></td></tr></table></figure>
<h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>ps命令列出的是当前进程的快照，top可用于持续监视系统性能，<br>动态显示进程信息。</p>
<ul>
<li>-n 获取多次cpu的执行情况，top -n 4：只更新4次</li>
<li>-d 间隔时间，top -d 4：每隔4秒更新一次</li>
<li>-p 获取指定端口进程的数据，top -p 22</li>
</ul>
<p>每隔1秒检测指定进程的cpu，检测20次<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -d 1 -n 20</span><br></pre></td></tr></table></figure></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>打印指定pid进程的cpu信息，间隔时间为1s，打印20次<br><img src="top-p.png" width="80%" height="80%" /></p>
<ol>
<li><p>查看进程的pid：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep systemd</span><br></pre></td></tr></table></figure>
<p><img src="ps-ef.png" width="80%" height="80%" /></p>
</li>
<li><p>循环打印</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印一次</span></span><br><span class="line">top -p 1 -n 1 | grep systemd | awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 循环打印20次</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;;<span class="keyword">do</span> top -p 1 -n 1 | grep systemd | awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span>;sleep 1s;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;20;i++));<span class="keyword">do</span> top -p 1 -n 1 | grep systemd | awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span>;sleep 1s;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="dmesg-tail"><a href="#dmesg-tail" class="headerlink" title="dmesg | tail"></a>dmesg | tail</h1><p>默认显示最新的10个系统信息，可以查看导致性能问题的错误信息。</p>
<h2 id="1-显示最新的20个系统信息"><a href="#1-显示最新的20个系统信息" class="headerlink" title="1. 显示最新的20个系统信息"></a>1. 显示最新的20个系统信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dmesg | tail -20</span></span><br><span class="line">[   15.356358] RPC: Registered named UNIX socket transport module.</span><br><span class="line">[   15.356360] RPC: Registered udp transport module.</span><br><span class="line">[   15.356361] RPC: Registered tcp transport module.</span><br><span class="line">[   15.356362] RPC: Registered tcp NFSv4.1 backchannel transport module.</span><br><span class="line">[   15.551529] <span class="built_in">type</span>=1305 audit(1584428235.986:4): audit_pid=1054 old=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:auditd_t:s0 res=1</span><br><span class="line">[   19.223990] NET: Registered protocol family 40</span><br><span class="line">[   23.857606] ip6_tables: (C) 2000-2006 Netfilter Core Team</span><br><span class="line">[   24.130255] Ebtables v2.0 registered</span><br><span class="line">[   24.366128] Netfilter messages via NETLINK v0.30.</span><br><span class="line">[   24.418582] ip_set: protocol 7</span><br><span class="line">[   24.517273] IPv6: ADDRCONF(NETDEV_UP): ens33: link is not ready</span><br><span class="line">[   24.521156] e1000: ens33 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: None</span><br><span class="line">[   24.524658] IPv6: ADDRCONF(NETDEV_UP): ens33: link is not ready</span><br><span class="line">[   24.524669] IPv6: ADDRCONF(NETDEV_CHANGE): ens33: link becomes ready</span><br><span class="line">[   24.528687] IPv6: ADDRCONF(NETDEV_UP): ens34: link is not ready</span><br><span class="line">[   24.532350] e1000: ens34 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: None</span><br><span class="line">[   24.535760] IPv6: ADDRCONF(NETDEV_UP): ens34: link is not ready</span><br><span class="line">[   24.574912] IPv6: ADDRCONF(NETDEV_UP): ens34: link is not ready</span><br><span class="line">[   25.391535] nf_conntrack version 0.5.0 (16384 buckets, 65536 max)</span><br><span class="line">[   25.525351] IPv6: ADDRCONF(NETDEV_CHANGE): ens34: link becomes ready</span><br><span class="line">[root@centos7 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="2-显示开始的20个系统信息"><a href="#2-显示开始的20个系统信息" class="headerlink" title="2. 显示开始的20个系统信息"></a>2. 显示开始的20个系统信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dmesg | head -20</span></span><br><span class="line">[    0.000000] Initializing cgroup subsys cpuset</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpu</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpuacct</span><br><span class="line">[    0.000000] Linux version 3.10.0-1062.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) <span class="comment">#1 SMP Wed Aug 7 18:08:02 UTC 2019</span></span><br><span class="line">[    0.000000] Command line: BOOT_IMAGE=/vmlinuz-3.10.0-1062.el7.x86_64 root=UUID=d7dc0c9e-a27d-4239-aba4-7c2e51d9fc93 ro crashkernel=auto spectre_v2=retpoline rhgb quiet LANG=en_US.UTF-8</span><br><span class="line">[    0.000000] Disabled fast string operations</span><br><span class="line">[    0.000000] e820: BIOS-provided physical RAM map:</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009ebff] usable</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x000000000009ec00-0x000000000009ffff] reserved</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x00000000000dc000-0x00000000000fffff] reserved</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000007fedffff] usable</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x000000007fee0000-0x000000007fefefff] ACPI data</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x000000007feff000-0x000000007fefffff] ACPI NVS</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x000000007ff00000-0x000000007fffffff] usable</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x00000000f0000000-0x00000000f7ffffff] reserved</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x00000000fec00000-0x00000000fec0ffff] reserved</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x00000000fee00000-0x00000000fee00fff] reserved</span><br><span class="line">[    0.000000] BIOS-e820: [mem 0x00000000fffe0000-0x00000000ffffffff] reserved</span><br><span class="line">[    0.000000] NX (Execute Disable) protection: active</span><br><span class="line">[    0.000000] SMBIOS 2.7 present.</span><br><span class="line">[root@centos7 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h1 id="vmstat-1"><a href="#vmstat-1" class="headerlink" title="vmstat 1"></a>vmstat 1</h1><p>全称 virtual memory stat，逐行输出虚拟内存状态统计信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vmstat</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line">r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line">1  0      0 1424832   2084 195100    0    0    47     4   45   55  0  0 99  1  0</span><br></pre></td></tr></table></figure><br><code>vmstat 1</code> ：每隔一秒打印一次<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># vmstat 1   #1s打印一个</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line">r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line">1  0      0 1424472   2084 195120    0    0    28     2   30   37  0  0 99  1  0</span><br><span class="line">0  0      0 1424456   2084 195120    0    0     0     0   38   53  0  0 100  0  0</span><br><span class="line">0  0      0 1424456   2084 </span><br></pre></td></tr></table></figure></p>
<p>参数解释：</p>
<ul>
<li>r: 运行队列中进程数量</li>
<li>b: 等待IO的进程数量</li>
<li>swpd：使用的虚拟内存</li>
<li>free：可用内存</li>
<li>buff：用作缓冲的内存大小</li>
<li>cache：用作缓存的内存大小</li>
<li>us：用户进程执行时间(user time)</li>
<li>sy：系统进程执行时间(system time</li>
<li>id：空闲时间(包括IO等待时间)，中央处理器的空闲时间</li>
<li>wa：等待IO时间</li>
</ul>
<h1 id="free-m"><a href="#free-m" class="headerlink" title="free -m"></a>free -m</h1><p>查看linux内存使用情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1819         199        1471           9         148        1470</span><br><span class="line">Swap:          4095           0        4095</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Mem：物理内存  </li>
<li>totel：总的物理内存 单位为：M    </li>
<li>used：用掉的内存</li>
<li>free：空闲的物理内存</li>
<li>shared：共享内存</li>
<li>buff/cache：缓存内存</li>
</ul>
<h1 id="mpstat-P-ALL-1"><a href="#mpstat-P-ALL-1" class="headerlink" title="mpstat -P ALL 1"></a>mpstat -P ALL 1</h1><p>mpstat是Multiprocessor Statistics的缩写，实时监控CPU性能。<br><code>mpstat -P ALL 1 2</code>：间隔1s打印报告，共打印2个</p>
<ul>
<li>-P ALL：监控所有CPU</li>
<li>1：间隔时间1s</li>
<li>2：打印次数2次</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mpstat</span></span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (centos7)  03/18/2020      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">04:41:47 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">04:41:47 AM  all    0.66    0.00    1.39    2.65    0.00    0.01    0.00    0.00    0.00   95.28</span><br><span class="line">[root@centos7 ~]<span class="comment">#</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># mpstat -P ALL 1</span></span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (centos7)  03/18/2020      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">04:44:11 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">04:44:11 AM  all    0.39    0.00    0.82    1.54    0.00    0.01    0.00    0.00    0.00   97.24</span><br><span class="line">04:44:11 </span><br><span class="line">[root@centos7 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>%usr：间隔时间段内，用户态的CPU时间（%），不包含 nice值为负进程</li>
<li>%nice：nice值为负进程的CPU时间（%）</li>
<li>%sys：核心时间（%）</li>
<li>%iowait：硬盘IO等待时间（%）</li>
<li>%irq：硬中断时间（%）</li>
<li>%soft：软中断时间（%）</li>
<li>%steal：虚拟机管理器在服务另一个虚拟处理器时虚拟CPU处在非自愿等待下花费时间的百分比</li>
<li>%guest：运行虚拟处理器时CPU花费时间的百分比    </li>
<li>%idle：CPU的空闲时间（%）</li>
</ul>
<h1 id="pidstat-1"><a href="#pidstat-1" class="headerlink" title="pidstat 1"></a>pidstat 1</h1><p>pidstat用于监控全部或指定进程的资源占用情况，和top命令类似，但不覆盖输出，有利于观察数据随时间的变动情况，top会覆盖之前的输出</p>
<ul>
<li><code>pidstat -p 1 1</code>：-p 指定进程号，间隔1s打印pid为1的进程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># pidstat</span></span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (centos7)  03/18/2020      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">04:52:29 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">04:52:29 AM     0         1    0.05    0.19    0.00    0.24     0  systemd</span><br><span class="line">04:52:29 AM     0         2    0.00    0.00    0.00    0.00     3  kthreadd</span><br><span class="line">04:52:29 AM     0         6    0.00    0.00    0.00    0.00     0  ksoftirqd/0</span><br><span class="line">04:52:29 </span><br></pre></td></tr></table></figure></li>
<li>PID：进程ID</li>
<li>%usr：进程在用户空间占用cpu的百分比</li>
<li>%system：进程在内核空间占用cpu的百分比</li>
<li>%guest：进程在虚拟机占用cpu的百分比</li>
<li>%CPU：进程占用cpu的百分比，各个CPU上的使用量的总和</li>
<li>CPU：处理进程的cpu编号</li>
<li>Command：当前进程对应的命令</li>
</ul>
<h1 id="iostat-1"><a href="#iostat-1" class="headerlink" title="iostat 1"></a>iostat 1</h1><p>iostat用于显示CPU和块设备（磁盘I/O）相关的统计信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># iostat 1</span></span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (centos7)  03/18/2020      _x86_64_        (4 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.15    0.00    0.34    0.60    0.00   98.92</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">sda               9.46       158.59        15.05     142895      13561</span><br><span class="line">scd0              0.02         1.14         0.00       1028          0</span><br></pre></td></tr></table></figure>
<p>avg-cpu：总体cpu使用情况统计信息<br>linux各种设备文件在/dev目录下可以看到</p>
<ul>
<li>tps：每秒进程向磁盘设备下发的IO读、写请求数量</li>
<li>kB_read/s：每秒从驱动器读入的数据量</li>
<li>kB_wrtn/s：每秒从驱动器写入的数据量</li>
<li>kB read：读入数据总量</li>
<li>kB wrtn：写入数据总量</li>
</ul>
<h1 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h1><p>sar（System ActivityReporter）：系统活动情况报告，<br>是Linux系统性能分析工具。可以用来分析磁盘I/O、CPU效率、内存使用等，下面介绍它的分析网络性能用法。</p>
<h2 id="sar-n-DEV-1"><a href="#sar-n-DEV-1" class="headerlink" title="sar -n DEV 1"></a>sar -n DEV 1</h2><p>检查网络流量的工作负载，可用来检查网络流量是否已经达到限额。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 dev]<span class="comment"># sar -n DEV 1</span></span><br><span class="line">Linux 4.18.0-147.5.1.el8_1.x86_64 (iZ8vb54310gt89j8qct198Z)     12/19/2020      _x86_64_        (1 CPU)</span><br><span class="line"></span><br><span class="line">08:08:37 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil</span><br><span class="line">08:08:38 PM      eth0      4.00      2.00      0.23      0.27      0.00      0.00      0.00      0.00</span><br><span class="line">08:08:38 PM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">08:08:38 PM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></p>
<h2 id="sar-n-TCP-1"><a href="#sar-n-TCP-1" class="headerlink" title="sar -n TCP 1"></a>sar -n TCP 1</h2><p>显示TCP连接情况，可用来描述系统负载<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 dev]<span class="comment"># sar -n TCP,ETCP 1</span></span><br><span class="line">Linux 4.18.0-147.5.1.el8_1.x86_64 (iZ8vb54310gt89j8qct198Z)     12/19/2020      _x86_64_        (1 CPU)</span><br><span class="line"></span><br><span class="line">08:15:48 PM  active/s passive/s    iseg/s    oseg/s</span><br><span class="line">08:15:49 PM      0.00      0.00      1.00      1.00</span><br><span class="line"></span><br><span class="line">08:15:48 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s</span><br><span class="line">08:15:49 PM      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></p>
<ul>
<li>active/s：主动连接数，本地每秒创建的TCP连接数</li>
<li>passive/s：被动连接数，远程每秒创建的TCP连接数</li>
<li>retrans/s：每秒TCP重传次数</li>
</ul>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 虚拟机配置</title>
    <url>/posts/linux-centos-configure-tutorials/</url>
    <content><![CDATA[<p>Centos 虚拟机配置及相关报错信息<br><a id="more"></a></p>
<h1 id="克隆虚拟机后设置静态IP"><a href="#克隆虚拟机后设置静态IP" class="headerlink" title="克隆虚拟机后设置静态IP"></a>克隆虚拟机后设置静态IP</h1><p>克隆虚拟机后设置静态IP无效的解决方法</p>
<h2 id="1-获取虚拟机网卡的MAC地址"><a href="#1-获取虚拟机网卡的MAC地址" class="headerlink" title="1. 获取虚拟机网卡的MAC地址"></a>1. 获取虚拟机网卡的MAC地址</h2><p>通过下面的其中一个命令获取要设置的网卡MAC地址<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip link show</span><br><span class="line">ifconfig -a</span><br><span class="line">ip address show</span><br></pre></td></tr></table></figure><br><img src="ip_link.png" alt="img"></p>
<h2 id="2-修改70-persistent-ipoib-rules-文件"><a href="#2-修改70-persistent-ipoib-rules-文件" class="headerlink" title="2. 修改70-persistent-ipoib.rules 文件"></a>2. 修改70-persistent-ipoib.rules 文件</h2><p>将eth0的MAC地址改为第一步获取到的地址<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/udev/rules.d/70-persistent-ipoib.rules</span><br></pre></td></tr></table></figure><br><img src="persistent.png" alt="img"></p>
<h2 id="3-修改网卡配置文件"><a href="#3-修改网卡配置文件" class="headerlink" title="3. 修改网卡配置文件"></a>3. 修改网卡配置文件</h2><p>将对于网卡配置文件的MAC地址也改为第一步获取到的地址<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><br><img src="ifcfg-eth0.png" alt="img"></p>
<h2 id="4-重启"><a href="#4-重启" class="headerlink" title="4. 重启"></a>4. 重启</h2><p>重启网络服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p>
<h1 id="systemctl-restart-network失败"><a href="#systemctl-restart-network失败" class="headerlink" title="systemctl restart network失败"></a>systemctl restart network失败</h1><p>systemctl restart network 重启网络失败</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@haiyong rules.d]<span class="comment"># systemctl restart network</span></span><br><span class="line">Job <span class="keyword">for</span> network.service failed because the control process exited with error code. See <span class="string">&quot;systemctl status network.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">[root@haiyong rules.d]<span class="comment"># journalctl -xe</span></span><br><span class="line">-- </span><br><span class="line">-- The start-up result is <span class="keyword">done</span>.</span><br><span class="line">Jun 19 12:10:01 haiyong CROND[5949]: (root) CMD (/usr/lib64/sa/sa1 1 1)</span><br><span class="line">Jun 19 12:10:10 haiyong polkitd[754]: Registered Authentication Agent <span class="keyword">for</span> unix-process:</span><br><span class="line">Jun 19 12:10:10 haiyong systemd[1]: Starting LSB: Bring up/down networking...</span><br><span class="line">-- Subject: Unit network.service has begun start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit network.service has begun starting up.</span><br><span class="line">Jun 19 12:10:10 haiyong NetworkManager[939]: &lt;warn&gt;  [1624075810.7721] ifcfg-rh:     mi</span><br><span class="line">Jun 19 12:10:10 haiyong network[5992]: Bringing up loopback interface:  [  OK  ]</span><br><span class="line">Jun 19 12:10:10 haiyong NetworkManager[939]: &lt;warn&gt;  [1624075810.8999] ifcfg-rh:     mi</span><br><span class="line">Jun 19 12:10:10 haiyong NetworkManager[939]: &lt;info&gt;  [1624075810.9472] agent-manager: r</span><br><span class="line">Jun 19 12:10:10 haiyong NetworkManager[939]: &lt;info&gt;  [1624075810.9481] audit: op=<span class="string">&quot;conne</span></span><br><span class="line"><span class="string">Jun 19 12:10:10 haiyong network[5992]: Bringing up interface ens33:  Error: Connection </span></span><br><span class="line"><span class="string">Jun 19 12:10:10 haiyong network[5992]: [FAILED]</span></span><br><span class="line"><span class="string">Jun 19 12:10:11 haiyong NetworkManager[939]: &lt;info&gt;  [1624075811.0139] agent-manager: r</span></span><br><span class="line"><span class="string">Jun 19 12:10:11 haiyong NetworkManager[939]: &lt;info&gt;  [1624075811.0152] audit: op=&quot;</span>conne</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: Bringing up interface ens37:  Error: Connection </span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: [FAILED]</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong network[5992]: RTNETLINK answers: File exists</span><br><span class="line">Jun 19 12:10:11 haiyong systemd[1]: network.service: control process exited, code=exite</span><br><span class="line">Jun 19 12:10:11 haiyong systemd[1]: Failed to start LSB: Bring up/down networking.</span><br><span class="line">-- Subject: Unit network.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit network.service has failed.</span><br><span class="line">-- </span><br><span class="line">-- The result is failed.</span><br><span class="line">Jun 19 12:10:11 haiyong systemd[1]: Unit network.service entered failed state.</span><br><span class="line">Jun 19 12:10:11 haiyong systemd[1]: network.service failed.</span><br><span class="line">Jun 19 12:10:11 haiyong polkitd[754]: Unregistered Authentication Agent <span class="keyword">for</span> unix-proces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@haiyong rules.d]<span class="comment"># systemctl stop NetworkManager</span></span><br><span class="line">[root@haiyong rules.d]<span class="comment"># systemctl disable NetworkManager</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/NetworkManager.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.</span><br><span class="line">Removed symlink /etc/systemd/system/network-online.target.wants/NetworkManager-wait-online.service.</span><br><span class="line">[root@haiyong rules.d]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure>
<h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><p>查看防⽕火墙状态 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>
<p>停⽌止firewall</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>
<p>禁止firewall开机启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service </span><br></pre></td></tr></table></figure>
<h1 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h1><p>vi /etc/selinux/config</p>
<p>注释SELINUX=enforcing，添加SELINUX=disabled</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line"><span class="comment"># SELINUX=enforcing</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h1 id="时钟同步"><a href="#时钟同步" class="headerlink" title="时钟同步"></a>时钟同步</h1><p>ntpdate是一个linux时间同步服务软件，一般默认情况下是未安装。</p>
<h2 id="1-配置时间服务器"><a href="#1-配置时间服务器" class="headerlink" title="1. 配置时间服务器"></a>1. 配置时间服务器</h2><p>使用root⽤户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@linux .ssh]<span class="comment"># ntpdate</span></span><br><span class="line">-bash: ntpdate: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>
<p>安装ntpdate：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install ntpdate</span><br><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@linux ~]<span class="comment"># systemctl status ntpd.service</span></span><br><span class="line">● ntpd.service - Network Time Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">[root@linux ~]<span class="comment"># rpm -qa | grep ntp</span></span><br><span class="line">ntpdate-4.2.6p5-29.el7.centos.2.x86_64</span><br><span class="line">ntp-4.2.6p5-29.el7.centos.2.x86_64</span><br></pre></td></tr></table></figure>
<p>编辑/etc/ntp.conf</p>
<p><code>vim /etc/ntp.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict ::1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hosts on local network are less restricted.</span></span><br><span class="line">restrict 192.168.183.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment"># server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line">server 127.127.1.0 <span class="comment"># local clock</span></span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure>
<p><img src="ntp.png" width="60%" height="60%" /></p>
<p>保证BIOS与系统时间同步</p>
<p>vim /etc/sysconfig/ntpd ,添加：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Command line options for ntpd</span></span><br><span class="line">OPTIONS=<span class="string">&quot;-g&quot;</span></span><br><span class="line">SYNC_HWLOCK=yes</span><br></pre></td></tr></table></figure>
<p>启动ntpd服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start ntpd.service</span><br></pre></td></tr></table></figure>
<p>设置ntpd的服务开机启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chkconfig ntpd on</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd.service</span><br></pre></td></tr></table></figure>
<p>设置时间同步：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过⽹络连接外⽹进⾏时钟同步</span></span><br><span class="line">ntpdate us.pool.ntp.org;</span><br><span class="line"><span class="comment"># 阿⾥云时钟同步服务器</span></span><br><span class="line">ntpdate ntp4.aliyun.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-其他机器配置"><a href="#2-其他机器配置" class="headerlink" title="2. 其他机器配置"></a>2. 其他机器配置</h2><p>使用root⽤户</p>
<p>安装ntpdate：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install ntpdate</span><br></pre></td></tr></table></figure></p>
<p>在其他机器配置10分钟与时间服务器同步⼀次<br>编写脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>输入如下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*/10 * * * * /usr/sbin/ntpdate 192.168.183.121</span><br></pre></td></tr></table></figure>
<p>修改任意机器时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date -s <span class="string">&quot;2020-06-20 11:11:11&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看crontab任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<p>查看crontab的执行日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -n 30 -f &#x2F;var&#x2F;log&#x2F;cron</span><br></pre></td></tr></table></figure>
<h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><p>查看系统⾃带的openjdk，如果有，卸载系统⾃带的openjdk</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@linux ~]<span class="comment"># rpm -qa | grep java</span></span><br><span class="line">[root@linux ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>使用rz命令上传jdk-8u231-linux-x64.tar.gz文件，注意不要勾选<strong>Upload files as ASCII</strong></p>
<p>解压jdk</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u231-linux-x64.tar.gz -C ../servers/</span><br></pre></td></tr></table></figure>
<p>配置环境变量</p>
<p>vi /etc/profile</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/bigdata/servers/jdk1.8.0_231</span><br><span class="line"><span class="built_in">export</span> PATH=:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>使配置文件生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@linux software]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_231&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>虚拟机克隆</tag>
        <tag>网卡配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令：网络命令</title>
    <url>/posts/linux-shell-networking-management-guide/</url>
    <content><![CDATA[<p>本文简要介绍Linux网络配置命令，包括 ip 地址、路由查看、配置等<br><a id="more"></a></p>
<h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>ping: 测试网络连接情况</p>
<ul>
<li><code>-c</code>：回应的次数</li>
<li><code>-i</code>：每次ping的时间间隔</li>
<li><code>-I</code>：网卡名</li>
<li><code>-t</code>：ttl 数值</li>
<li><code>-s</code>：数据包的大小</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ping ipv6地址</span></span><br><span class="line">ping -6 -I eth1 2001:db8::10</span><br><span class="line"><span class="comment"># ping ipv4地址</span></span><br><span class="line">ping -I eth1 192.168.0.1 </span><br></pre></td></tr></table></figure>
<h1 id="网络信息查询"><a href="#网络信息查询" class="headerlink" title="网络信息查询"></a>网络信息查询</h1><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat: 打印 Linux网络系统的状态信息</p>
<ul>
<li>-t 列出所有tcp</li>
<li>-u 列出所有udp</li>
<li>-l 只显示监听端口</li>
<li>-n 以数字形式显示地址和端口号</li>
<li>-p 显示进程的pid和名字<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -t</span><br><span class="line">netstat -ntlp</span><br><span class="line"><span class="comment"># 列出所有网络端口信息</span></span><br><span class="line">netstat -a                      </span><br><span class="line"><span class="comment"># 列出所有tcp连接信息</span></span><br><span class="line">netstat -at   </span><br><span class="line"><span class="comment"># 列出所有udp连接信息</span></span><br><span class="line">netstat -au </span><br><span class="line"><span class="comment"># 所有端口数据包统计信息 </span></span><br><span class="line">netstat -s</span><br><span class="line"><span class="comment"># 显示核心路由信息 </span></span><br><span class="line">netstat -r</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">route -n</span><br><span class="line">route <span class="built_in">print</span> <span class="comment"># windows</span></span><br><span class="line"><span class="comment"># 显示网络接口列表</span></span><br><span class="line">netstat -i</span><br><span class="line"><span class="comment"># 显示网络接口详细信息</span></span><br><span class="line">netstat -ie</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<h2 id="列出所有网卡信息"><a href="#列出所有网卡信息" class="headerlink" title="列出所有网卡信息"></a>列出所有网卡信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有网卡信息</span></span><br><span class="line">ifconfig  -a</span><br><span class="line">ip link</span><br><span class="line">netstat -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某一个网卡</span></span><br><span class="line">ifconfig 网卡名字 </span><br></pre></td></tr></table></figure>
<h1 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipv4</span></span><br><span class="line">route add/del -net 192.168.0.0/24 netmask 255.255.255.0 gw 192.168.0.1</span><br><span class="line">route add/del -host 192.168.1.1 dev eth1</span><br><span class="line">route add -net 23.23.23.0 netmask 255.255.255.0 reject <span class="comment"># 屏蔽一条路由</span></span><br><span class="line">route add/del default gw 192.168.0.1 <span class="comment">#增加/删除默认网关</span></span><br><span class="line"><span class="comment"># ipv6</span></span><br><span class="line">ip -6 route add default via fe80::290:4cff:fe88:8888 dev eth1 <span class="comment"># 配置默认网关</span></span><br><span class="line">ip -6 route add 2001:db8:3333::/64 via fe80::ca3a:35ff:fe09:efa1 dev eth1 <span class="comment"># 添加目的网络为2001:db8:3333::/64，下一跳网关为fe80::ca3a:35ff:fe09:efa1的静态路由</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route -n</span><br><span class="line">route -4 -n</span><br><span class="line">route -6 -n</span><br><span class="line">ip -6 route show default <span class="comment"># 查看默认路由网关</span></span><br></pre></td></tr></table></figure>
<h1 id="禁用启用网卡"><a href="#禁用启用网卡" class="headerlink" title="禁用启用网卡"></a>禁用启用网卡</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth1 up</span><br><span class="line">ifconfig eth1 down</span><br></pre></td></tr></table></figure>
<h1 id="释放、更新地址"><a href="#释放、更新地址" class="headerlink" title="释放、更新地址"></a>释放、更新地址</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipv4</span></span><br><span class="line">dhclient -r eth1</span><br><span class="line">dhclient -v eth1</span><br><span class="line"><span class="comment"># ipv6</span></span><br><span class="line">dhclient -6 -r eth1 //释放ipv6地址 </span><br><span class="line">dhclient -6 //重新获取ipv6地址</span><br></pre></td></tr></table></figure>
<p>重启网络：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p>
<h1 id="添加、删除IP地址"><a href="#添加、删除IP地址" class="headerlink" title="添加、删除IP地址"></a>添加、删除IP地址</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加IPv4地址</span></span><br><span class="line">ifconfig eth1 192.168.1.200 netmask 255.255.255.0</span><br><span class="line">ip addr add 192.168.1.200/24 dev eth1</span><br><span class="line"><span class="comment"># 添加IPv6地址</span></span><br><span class="line">ip -6 addr add 2001:db8:1111::20 dev eth1</span><br><span class="line"><span class="comment"># 删除IPv6地址</span></span><br><span class="line">ip -6 addr del 2001:db8:1111::20 dev eth1</span><br><span class="line">ip addr del 192.168.1.200/24 dev eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活/禁用设备</span></span><br><span class="line">ifconfig eth0 up</span><br><span class="line">ifconfig eth0 down</span><br></pre></td></tr></table></figure>
<h1 id="修改MAC地址"><a href="#修改MAC地址" class="headerlink" title="修改MAC地址"></a>修改MAC地址</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth1 hw ether MAC地址 up</span><br></pre></td></tr></table></figure>
<h1 id="设置MTU值"><a href="#设置MTU值" class="headerlink" title="设置MTU值"></a>设置MTU值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth1 mtu 1500 up</span><br></pre></td></tr></table></figure>
<h1 id="配置arp信息"><a href="#配置arp信息" class="headerlink" title="配置arp信息"></a>配置arp信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> arp缓存</span></span><br><span class="line">arp -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除arp</span></span><br><span class="line">arp -d IP</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加arp</span></span><br><span class="line">arp -s IP MAC       </span><br></pre></td></tr></table></figure>
<h1 id="设置无线网络"><a href="#设置无线网络" class="headerlink" title="设置无线网络"></a>设置无线网络</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install wireless-tools</span><br><span class="line"><span class="comment"># 开启无线网卡wlan0</span></span><br><span class="line">ifconfig wlan0 up</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">iwconfig wlan0 key 12345678</span><br><span class="line"><span class="comment"># 设置SSID</span></span><br><span class="line">iwconfig wlan0 essid <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment"># 加入无线网</span></span><br><span class="line">iwconfig wlan0 ap auto</span><br><span class="line"><span class="comment"># 查看网卡信息</span></span><br><span class="line">iwconfig wlan0</span><br><span class="line"><span class="comment"># 为无线网卡指定IP地址</span></span><br><span class="line">ifconfig wlan0 192.168.1.30 netmask 255.255.255.0  </span><br><span class="line"><span class="comment"># 用dhclient或dhcpcd获取ip</span></span><br><span class="line">dhclient wlan0</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">dhcpcd wlan0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>iwconfig 的弊端是只支持WEP认证方式，要想支持WPA，需要wpa_supplicant工具，wpa_supplicant支持4种认证方式：OPEN，WEP，WPA，WPA2</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令：文件操作命令</title>
    <url>/posts/linux-shell-file-command-guide/</url>
    <content><![CDATA[<p>Linux系统命令主要包括文件操作、网络命令和性能命令，本文介绍常用文件操作命令。<br><a id="more"></a></p>
<h1 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h1><p><img src="linux-shell-file.png" width="80%" height="80%" /><br>文件类型：</p>
<ul>
<li>普通文件：-</li>
<li>目录文件：d</li>
<li>块设备文件：b，硬盘</li>
<li>字符设备： c，串行端口的接口设备，例如键盘、鼠标</li>
<li>链接文件：l</li>
<li>套接字文件：s</li>
<li>管道文件：p</li>
</ul>
<p>r 读权限read <strong>4</strong><br>w 写权限 write <strong>2</strong><br>x 操作权限 execute <strong>1</strong></p>
<p>常用命令：</p>
<ul>
<li>chmod 777 test，修改test文件属性为可读，可写，可执行（4+2+1=7）</li>
<li>ls -l 查看文件属性（或者使用<code>ll</code>）</li>
<li>ls -ld 查看当前目录的属性</li>
<li>ls -l 长模式，属性信息</li>
<li>ls -1 把文件一行一个的显示出来</li>
<li>ls -a 显示所有文件</li>
<li>ls -s 显示文件及文件大小</li>
<li>ls -l -a -s  —&gt; ls -las</li>
<li>ls -sh (h-human，显示文件大小单位）</li>
</ul>
<h1 id="基本终端操作命令"><a href="#基本终端操作命令" class="headerlink" title="基本终端操作命令"></a>基本终端操作命令</h1><p>ls: 列出目录文件<br>pwd: 显示目前的目录<br>cd: 切换目录</p>
<ul>
<li>cd - ：切换到上次目录</li>
<li>cd .. ：切换到上级目录</li>
<li>cd / ：切换到根目录</li>
<li>cd ~ ：切换到当前用户的home目录</li>
<li>cd start*end ：目录名较长时可使用通配符”*“，比如进入system目录，可以使用 cd s*m</li>
</ul>
<p>man命令：可以通过 <code>man + 命令</code> 查看帮助文档：</p>
<ul>
<li>j：下翻</li>
<li>k：上翻</li>
<li>空格键：翻页 </li>
<li>q：退出</li>
<li>/-e：查找“-e”<ul>
<li>n 下一个“-e”</li>
<li>N（shift+n） 上一个“-e”</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># ls</span></span><br><span class="line">desktop.ini  jenkins  test.log  test.txt  t.txt</span><br><span class="line">[root@client ~]<span class="comment"># cd j*s</span></span><br><span class="line">[root@client jenkins]<span class="comment"># pwd  </span></span><br><span class="line">/root/jenkins</span><br><span class="line">[root@client jenkins]<span class="comment"># cd -</span></span><br><span class="line">/root</span><br><span class="line">[root@client ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@client ~]<span class="comment"># cd jenkins/</span></span><br><span class="line">[root@client jenkins]<span class="comment"># pwd</span></span><br><span class="line">/root/jenkins</span><br><span class="line">[root@client jenkins]<span class="comment"># cd ..</span></span><br><span class="line">[root@client ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@client ~]<span class="comment"># </span></span><br><span class="line">/root</span><br><span class="line">[root@client ~]<span class="comment"># cd /</span></span><br><span class="line">[root@client /]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">[root@client /]<span class="comment"># cd ~</span></span><br><span class="line">[root@client ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<h1 id="文件、目录操作"><a href="#文件、目录操作" class="headerlink" title="文件、目录操作"></a>文件、目录操作</h1><p>touch：新建文件，或者使用vim命令创建文件：vim test.txt，保存<br>mkdir: 创建一个新的目录<br>rmdir: 删除一个空的目录<br>cp: 复制文件或目录<br>rm: 移除文件或目录<br>mv: 移动文件与目录，或修改文件与目录的名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将目录A复制到目录B下</span></span><br><span class="line">cp -r /etc/A /etc/B</span><br><span class="line"><span class="comment"># 将目录A的内容复制到目录B下</span></span><br><span class="line">cp -r /etc/A/* /etc/B</span><br><span class="line">cp -r /etc/A/. /etc/B</span><br><span class="line"><span class="comment"># 删除目录A及其下面的所有文件</span></span><br><span class="line">rm -r /etc/A</span><br><span class="line">rm -rf /etc/A <span class="comment">#强制删除</span></span><br><span class="line"><span class="comment"># 移动目录A到目录B下</span></span><br><span class="line">mv /etc/A /etc/B</span><br><span class="line"><span class="comment"># 移动目录A下的所有文件到目录B下</span></span><br><span class="line">mv /etc/A/* /etc/B</span><br></pre></td></tr></table></figure>
<h1 id="文件内容显示"><a href="#文件内容显示" class="headerlink" title="文件内容显示"></a>文件内容显示</h1><p>cat：显示文件内容，还可以将多个文件连接起来显示，适用于内容少的文件<br>more：以一页一页的显示内容，空格键下一页<br>less：支持向前翻，向后翻页<br>head：打印前面n行内容：head -2 test.txt<br>tail：打印后面n行内容：tail -2 test.txt</p>
<h1 id="向文件添加内容"><a href="#向文件添加内容" class="headerlink" title="向文件添加内容"></a>向文件添加内容</h1><p>将内容”TEST”添加到test.txt文件中</p>
<p><strong>方法一：vi编辑法</strong>　</p>
<ul>
<li>打开终端，输入vi test.txt 回车，按a或i进入编辑模式<br>输入 TEST，然后按esc键退出编辑模式，输入 <code>:wq</code> 保存并退出。</li>
</ul>
<p><strong>方法二：echo命令法</strong>　　<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 追加</span></span><br><span class="line"><span class="built_in">echo</span> ‘TEST’ &gt;&gt; ./test.txt</span><br><span class="line"><span class="comment"># 覆盖</span></span><br><span class="line"><span class="built_in">echo</span> ‘TEST’ &gt; ./test.txt</span><br></pre></td></tr></table></figure><br><strong>方法三：cat命令法</strong>　　<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; ./test.txt &lt;&lt;<span class="string">TEST</span></span><br></pre></td></tr></table></figure><br>结尾的TEST要顶格。 </p>
<p><strong>方法四：cat编辑法</strong>　　<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; ./test.txt</span><br></pre></td></tr></table></figure></p>
<ul>
<li>回车后开始编辑输入内容：TEST</li>
<li>按ctrl+d组合键结束编辑。</li>
</ul>
<h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><p>用于查找文件，基本用法：<code>find path -name‘xxx&#39;</code><br><code>find / -name jenkins</code>：查找所有目录下的jenkins文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># find / -name jenkins</span></span><br><span class="line">/root/jenkins</span><br><span class="line">/var/lib/docker/overlay2/6cc1d9dcc70fed5dcc455ca4147a13f650724c2e8004a9c101b4e2130276241c/diff/usr/share/jenkins</span><br><span class="line">/var/lib/docker/overlay2/9b98446d8cf91c4c8da9d8eab5cd6366ef2cec266615c1fe6ad4f4faa84f25a1/diff/usr/share/jenkins</span><br><span class="line">/var/lib/docker/overlay2/f1f4123687b215d1eff46d989df6c9568be89c231a83ab6105dc22c136ccf24b/diff/usr/share/jenkins</span><br><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><br>限制搜索深度</p>
<ul>
<li>-maxdepth</li>
<li>-mindefth</li>
</ul>
<p>限制文件类型：文件类型有：普通文件f，目录d，符号链接 l，字符设备c，块设备b，套接字s，FIFO-p</p>
<ul>
<li>-type f：搜索普通文件和目录<br>还有其他限制条件，可以通过命令 <code>man find</code> 查看</li>
</ul>
<h1 id="文件解压"><a href="#文件解压" class="headerlink" title="文件解压"></a>文件解压</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvzf xxx.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-x, --extract</code>：解压文件</li>
<li><code>-v, --verbose</code>：显示解压日志</li>
<li><code>-z, --gzip</code>：通过gzip支持压缩或解压缩</li>
<li><code>-f, --file</code>：指定解压文件</li>
</ul>
<h1 id="du-命令：显示目录或文件的大小"><a href="#du-命令：显示目录或文件的大小" class="headerlink" title="du 命令：显示目录或文件的大小"></a>du 命令：显示目录或文件的大小</h1><p>du（disk usage）命令主要用于显示目录或文件的大小：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ du</span><br><span class="line">du</span><br><span class="line">18760   ./node_exporter-1.1.2.linux-amd64</span><br><span class="line">27792   .</span><br></pre></td></tr></table></figure><br>下面介绍几个选项参数：</p>
<ul>
<li><code>-a, --all</code>：显示目录下所有文件大小</li>
<li><code>-b, --bytes</code>：以byte为单位</li>
<li><code>-h, --human-readable</code>：文件大小以K，M，G为单位显示</li>
<li><code>-H, --si</code>：文件大小以KB，MB，GB为单位（幂底数为1000）</li>
<li><code>-k, --kilobytes</code>：以1024 bytes为单位</li>
<li><code>-m, --megabytes</code>：以MB为单位</li>
<li><code>-s, --summarize</code>：显示文件总大小</li>
</ul>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$du</span> -hs</span><br><span class="line">28M     .</span><br><span class="line"></span><br><span class="line">$ du -ah</span><br><span class="line">8.9M    ./node_exporter-1.1.2.linux-amd64.tar.gz</span><br><span class="line">12K     ./node_exporter-1.1.2.linux-amd64/LICENSE</span><br><span class="line">4.0K    ./node_exporter-1.1.2.linux-amd64/NOTICE</span><br><span class="line">19M     ./node_exporter-1.1.2.linux-amd64/node_exporter</span><br><span class="line">12K     ./node_exporter-1.1.2.linux-amd64/nohup.out</span><br><span class="line">19M     ./node_exporter-1.1.2.linux-amd64</span><br><span class="line">28M     .</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统介绍：内核、shell及软件包管理</title>
    <url>/posts/linux-kernel-and-shell-introduce/</url>
    <content><![CDATA[<p>Linux系统主要包括3层， 硬件（RAM、CPU、I/O设备等）、 Linux 内核和 用户进程。<a id="more"></a><br>Linux 内核最初由芬兰黑客 Linus Torvalds 开发，Linux内核是Linux操作系统的重要组成部分，是操作系统的核心，是系统硬件和进程之间的接口。内核提供内存管理、进程管理、设备驱动和各种系统调用。<br><img src="linux-architecture.png" width="80%" height="80%" /></p>
<h1 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h1><p>Linux各个内核版本可以在<a href="https://www.kernel.org/">https://www.kernel.org/</a> 上下载，一些社区组织或厂商将Linux内核与各种软件和文档包装起来，并提供系统安装界面和系统配置、设定与管理工具，就构成了 Linux 的发行版本。Linux有多个发行版本，常见的Linux系统有Centos和Ubuntu。<br><img src="linux-kernel.jpg" width="80%" height="80%" /></p>
<h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># cat /proc/version</span></span><br><span class="line">Linux version 4.18.0-147.5.1.el8_1.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 8.3.1 20190507 (Red Hat 8.3.1-4) (GCC)) <span class="comment">#1 SMP Wed Feb 5 02:00:39 UTC 2020</span></span><br><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux iZ8vb54310gt89j8qct198Z 4.18.0-147.5.1.el8_1.x86_64 <span class="comment">#1 SMP Wed Feb 5 02:00:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>
<p><code>4.18.0-147.5.1.el8_1.x86_64</code> :</p>
<ul>
<li>4：内核主版本号</li>
<li>18：内核次版本号，偶数代表稳定版；奇数代表开发版</li>
<li>0：内核修订版本号，添加安全补丁，bug修复，新功能或驱动程序等</li>
<li>147.5.1：发行版本的补丁版本  </li>
<li>el8_1：使用的内核是 RedHat / CentOS 系列发行版专用内核</li>
<li>x86_64：x86平台64位CPU</li>
</ul>
<p>查看centos发行版本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 8.1.1911 (Core) </span><br></pre></td></tr></table></figure></p>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="常见-shell"><a href="#常见-shell" class="headerlink" title="常见 shell"></a>常见 shell</h2><p>Shell 是一种脚本编程语言，连接内核和用户。常见的 Shell 有 sh、bash、ksh、csh等。</p>
<ul>
<li>Bourne Shell (/usr/bin/sh或/bin/sh)</li>
<li>Bourne Again Shell (/bin/bash)：兼容 sh</li>
<li>C Shell (/usr/bin/csh)</li>
<li>K Shell (/usr/bin/ksh)</li>
<li>Shell for Root (/sbin/sh)</li>
</ul>
<p><code>cat /etc/shells</code> 命令查看系统可用shell:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># cat /etc/shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">[root@client ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h2 id="运行-shell"><a href="#运行-shell" class="headerlink" title="运行 shell"></a>运行 shell</h2><ol>
<li>使脚本具有执行权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x ./test.sh </span><br><span class="line">chmod 777 ./test.sh </span><br></pre></td></tr></table></figure></li>
<li>执行脚本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test.sh <span class="comment"># 执行脚本</span></span><br><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure>
<h1 id="查看Linux系统信息"><a href="#查看Linux系统信息" class="headerlink" title="查看Linux系统信息"></a>查看Linux系统信息</h1><h2 id="查看系统位数"><a href="#查看系统位数" class="headerlink" title="查看系统位数"></a>查看系统位数</h2></li>
<li><code>getconf LONG_BIT</code></li>
<li><code>file /bin/ls</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># getconf LONG_BIT</span></span><br><span class="line">64</span><br><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># file /bin/ls</span></span><br><span class="line">/bin/ls: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=937708964f0f7e3673465d7749d6cf6a2601dea2, stripped, too many notes (256)</span><br><span class="line">[root@iZ8vb54310gt89j8qct198Z ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<h2 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h2><p>Linux 查看内存支持的最大内存容量<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dmidecode|grep -P <span class="string">&#x27;Maximum\s+Capacity&#x27;</span></span><br><span class="line">        Maximum Capacity: 8 GB</span><br></pre></td></tr></table></figure></p>
<p>查看槽位上内存的速率，没插就是unknown。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmidecode|grep -A16 <span class="string">&quot;Memory Device&quot;</span>|grep <span class="string">&#x27;Speed&#x27;</span></span><br></pre></td></tr></table></figure><br><img src="Linux-Memory-Device.png" alt="png"></p>
<p>查看内存条厂家<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmidecode -t memory | grep Manufacturer</span><br></pre></td></tr></table></figure><br><img src="Linux-Memory-Manufacturer.png" alt="png"></p>
<p>查看内存信息（显示插槽个数和每个插槽里内存条的大小）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dmidecode -t memory | grep Size</span><br><span class="line">        Size: 8192 MB</span><br></pre></td></tr></table></figure><br>查看内存使用情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$free</span> -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G        1.4G        173M        764K        251M        268M</span><br><span class="line">Swap:          2.0G        1.0G        1.0G</span><br></pre></td></tr></table></figure>
<h2 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CPU型号</span></span><br><span class="line">$ cat /proc/cpuinfo | grep name | sort | uniq</span><br><span class="line">model name      : Intel Xeon Processor (Skylake, IBRS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 物理CPU个数</span></span><br><span class="line">$ cat /proc/cpuinfo | grep <span class="string">&quot;physical id&quot;</span> </span><br><span class="line">physical id     : 0</span><br><span class="line">physical id     : 1</span><br><span class="line">physical id     : 2</span><br><span class="line">physical id     : 3</span><br><span class="line">physical id     : 4</span><br><span class="line">physical id     : 5</span><br><span class="line">physical id     : 6</span><br><span class="line">physical id     : 7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个物理CPU核数</span></span><br><span class="line">$ cat /proc/cpuinfo| grep <span class="string">&quot;cpu cores&quot;</span>| uniq</span><br><span class="line">cpu cores       : 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑CPU个数</span></span><br><span class="line">$ cat /proc/cpuinfo| grep <span class="string">&quot;processor&quot;</span>| wc -l</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h1 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a>Linux软件包管理</h1><p>Linux软件安装可以直接通过源码编译安装，一般源码包都打包成tar.gz压缩格式。源码包安装比较麻烦，容易出错，也可以使用包管理来软件包的管理，包管理工具是对软件工具的安装、卸载及其他管理， 常见的两类软件包管理工具是RPM 和 DPKG，RPM是Red Hat软件包管理器，DPKG的是Debian的Linux系列基本的包管理系统。</p>
<h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><p>源码编译安装步骤：</p>
<ol>
<li>下载安装文件</li>
<li>解压<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvzf xxx.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>检查编译<br>进入解压文件内<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
检查通过后，将生成用于编译的MakeFile文件。</li>
<li>编译<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li>安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>安装完毕，应清除编译过程中产生的临时文件和配置过程中产生的文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make distclean</span><br></pre></td></tr></table></figure><br>如果要卸载，则执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make uninstall</span><br></pre></td></tr></table></figure></p>
<h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><p>RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，rpm包文件通常以.rpm结尾。</p>
<h3 id="RPM包安装"><a href="#RPM包安装" class="headerlink" title="RPM包安装"></a>RPM包安装</h3><p>下载rpm包后安装：<br>安装 RPM 包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh package.rpm</span><br></pre></td></tr></table></figure></p>
<p>升级 RPM 包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh package.rpm</span><br></pre></td></tr></table></figure></p>
<p>卸载 RPM 包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ev package</span><br></pre></td></tr></table></figure></p>
<h3 id="rpm命令其它用法"><a href="#rpm命令其它用法" class="headerlink" title="rpm命令其它用法"></a>rpm命令其它用法</h3><p>查看是否安装了某个软件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># rpm -qa | grep wireshark</span></span><br><span class="line">wireshark-1.10.14-25.el7.x86_64</span><br></pre></td></tr></table></figure>
<p>查询某个命令属于哪个软件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># which scp</span></span><br><span class="line">/usr/bin/scp</span><br><span class="line">[root@Client ~]<span class="comment"># rpm -qf /usr/bin/scp</span></span><br><span class="line">openssh-clients-7.4p1-21.el7.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>rpm无法解决软件包与软件包之间的依赖问题，可以使用yum工具进行在线安装，yum（Yellowdog update Modifier）是RPM前端工具，操作对象为rpm包。由于网络问题，可以设置yum国内镜像源，也可以配置本地源。下面介绍yum安装方法：<br>搜索可用软件包：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search all 软件关键字</span><br></pre></td></tr></table></figure><br>搜索已安装的软件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list installed | grep 软件关键字</span><br></pre></td></tr></table></figure></p>
<p>安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install package-name</span><br><span class="line">yum -y install package-name <span class="comment">#接受所有互动问答</span></span><br></pre></td></tr></table></figure><br>卸载<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove package-name</span><br><span class="line">yum -y remove package-name</span><br></pre></td></tr></table></figure></p>
<h2 id="DPKG"><a href="#DPKG" class="headerlink" title="DPKG"></a>DPKG</h2><p>DPKG全称为 Debian Package，功能与 RPM 相似，包文件通常以 .deb 扩展名结尾。Ubuntu系统使用此包管理工具。</p>
<h3 id="DPKG-命令安装"><a href="#DPKG-命令安装" class="headerlink" title="DPKG 命令安装"></a>DPKG 命令安装</h3><p>安装 DEB 包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i package.deb</span><br></pre></td></tr></table></figure><br>升级 DEB 包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i package.deb ( 和安装命令相同）</span><br></pre></td></tr></table></figure><br>卸载 DEB 包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -r package.deb <span class="comment"># 不卸载配置文件</span></span><br><span class="line">dpkg -P package.deb <span class="comment"># 卸载配置文件</span></span><br></pre></td></tr></table></figure></p>
<h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><p>apt 全称 Advanced Packaging Tools，DPKG 前端工具， apt 的主要包管理工具为apt-get，实现功能和yum类似。</p>
<p>搜索可用软件包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache search 软件关键字</span><br></pre></td></tr></table></figure><br>安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install package-name</span><br></pre></td></tr></table></figure><br>下载指定软件的源文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get <span class="built_in">source</span> package-name</span><br></pre></td></tr></table></figure><br>更新<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get upgrade <span class="comment"># 更新软件</span></span><br><span class="line">apt-get update <span class="comment"># 更新软件列表</span></span><br><span class="line">apt-get dist-upgrade <span class="comment"># 更新所有软件</span></span><br></pre></td></tr></table></figure><br>卸载<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt-get remove package-name</span><br></pre></td></tr></table></figure></p>
<h1 id="查看历史命令history"><a href="#查看历史命令history" class="headerlink" title="查看历史命令history"></a>查看历史命令history</h1><p>在Linux命令窗口可以查看执行过的历史命令，可以通过上/下方向键（或者Ctrl+ p / Ctrl+ n）显示相对于当前命令的上一条或下一条历史记录。或者通过<code>Ctrl+ r</code> 来搜索历史命令。</p>
<p>还有一种更为直观的方法是使用history命令，可以显示多个记录，默认情况下，历史命令存放在 <code>~/.bash_history</code> 文件里面，也可以在<code>/etc/bashrc</code>中设置历史命令存放路径，添加：<code>export HISTFILE=存放路径</code></p>
<p>history命令格式如下：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> [-c] [-d offset] [n]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>-c：清空历史命令</li>
<li>-d offset：删除历史命令中第offset个命令</li>
<li>n：显示最近的n条历史命令</li>
</ul>
<p>显示最近的5个命令：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># history 5</span></span><br><span class="line">  996  cat /etc/bashrc</span><br><span class="line">  997  vim /etc/bashrc</span><br><span class="line">  998  <span class="built_in">history</span> --<span class="built_in">help</span></span><br><span class="line">  999  <span class="built_in">echo</span> <span class="variable">$HISTSIZE</span></span><br><span class="line"> 1000  <span class="built_in">history</span> 5</span><br><span class="line">[root@server ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></p>
<h1 id="Linux-文件句柄"><a href="#Linux-文件句柄" class="headerlink" title="Linux 文件句柄"></a>Linux 文件句柄</h1><p>由于UNIX/Linux系统中的资源都是以文件的形式存在的，可以限制用户进程可使用的系统资源数量，比如一个进程可以打开的文件数，用户可以创建多大的文件，以及进程可以使用多少内存。如果Linux在进行大量并发操作的时候，可能会报 “Too many open files” 错误，这是因为并发操作的文件数超过了限制，可以使用<code>ulimit</code>命令查看：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 7144</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 1024</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 7144</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure></p>
<p>open files 的最大限制为1024，可以使用ulimit命令进行修改：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> –n 10000</span><br></pre></td></tr></table></figure><br>这个命令不能保证永久生效，系统重启后会恢复原来的默认值。为了让ulimit在重启过程中持续存在，需要修改配置文件<code>/etc/security/limits.conf</code>：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&lt;domain&gt;      &lt;type&gt;  &lt;item&gt;         &lt;value&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*               soft    core            0</span></span><br><span class="line"><span class="comment">#*               hard    rss             10000</span></span><br><span class="line"><span class="comment">#@student        hard    nproc           20</span></span><br><span class="line"><span class="comment">#@faculty        soft    nproc           20</span></span><br><span class="line"><span class="comment">#@faculty        hard    nproc           50</span></span><br><span class="line"><span class="comment">#ftp             hard    nproc           0</span></span><br><span class="line"><span class="comment">#@student        -       maxlogins       4</span></span><br></pre></td></tr></table></figure></p>
<p>type可以设置为soft和hard：</p>
<ul>
<li>soft：软件限制，用于警告</li>
<li>hard：硬件限制，设置实际的默认值</li>
</ul>
<p>item选项包括：</p>
<ul>
<li><strong>core</strong> ：core文件大小 (KB)</li>
<li><strong>data</strong> ：最大的数据大小 (KB)</li>
<li><strong>fsize</strong> ：最大文件大小 (KB)</li>
<li><strong>memlock</strong> ：最大锁定内存空间 (KB)</li>
<li><strong>nofile</strong> ：打开文件的最大数量</li>
<li><strong>rss</strong> ：最大Resident Set大小 (KB)</li>
<li><strong>stack</strong> ：堆栈大小 (KB)</li>
<li><strong>cpu</strong> ：最大CPU time (MIN)</li>
<li><strong>nproc</strong> ：最大进程数</li>
<li><strong>as</strong> ：最大地址空间 (KB)</li>
<li><strong>maxlogins</strong> ：此用户的最大登录数</li>
<li><strong>maxsyslogins</strong> ：系统的最大登录数</li>
<li><strong>priority</strong> ：运行用户进程的优先级</li>
<li><strong>locks</strong> ：用户最大文件锁定数</li>
<li><strong>sigpending</strong> ：最大被挂起/阻塞 (pending) 的信号数</li>
<li><strong>msgqueue</strong> ：POSIX消息队列使用的最大内存 (bytes)</li>
<li><strong>nice</strong> ：最大允许的 nice 优先级: [-20, 19]</li>
<li><strong>rtprio</strong> ：最大realtime优先级</li>
</ul>
<p>打开文件的最大数量设置方法如下：</p>
<p>编辑配置文件 <code>/etc/security/limits.conf</code> 加入如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* soft nofile 10000</span><br><span class="line">* hard nofile 10000</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* - nofile 2000</span><br></pre></td></tr></table></figure>
<p>保存退出。</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | AppCrawler自动遍历测试</title>
    <url>/posts/appium-automatic-traversal-test-appcrawler/</url>
    <content><![CDATA[<p>AppCrawler 是由 seveniruby开源的一个自动遍历测试工具，谷歌有一个叫<a href="https://developer.android.com/training/testing/crawler">App Crawler</a> 的遍历工具。AppCrawler具有很大的灵活性，可以自由控制测试页面，控件类型，测试深度等，且支持Android和IOS应用测试。<br><a id="more"></a><br>AppCrawler开源地址：<a href="https://github.com/seveniruby/AppCrawler">https://github.com/seveniruby/AppCrawler</a></p>
<p>appcrawler基于appium开发，底层引擎还引用了 adb、 macaca、 selenium</p>
<h1 id="AppCrawler安装"><a href="#AppCrawler安装" class="headerlink" title="AppCrawler安装"></a>AppCrawler安装</h1><p>AppCrawler工具以jar包方式发布，下载地址：<a href="https://pan.baidu.com/s/1dE0JDCH">https://pan.baidu.com/s/1dE0JDCH</a></p>
<p>appcrawler 2.4.0</p>
<ul>
<li>java8 </li>
<li>appium 1.8.x</li>
</ul>
<p><img src="appcrawler.png" alt="img"></p>
<h1 id="AppCrawler运行"><a href="#AppCrawler运行" class="headerlink" title="AppCrawler运行"></a>AppCrawler运行</h1><ul>
<li>启动 appium server</li>
<li>启动模拟器或者连接真机</li>
<li>开始自动遍历</li>
<li>appcrawler —capability</li>
<li>“appPackage=com.xueqiu.android,appActivity=.view.WelcomeActivity Alias”</li>
</ul>
<p>使用AppCrawler前需要启动appium server，然后启动模拟器或者连接真机。运行 <code>java -jar appcrawler.jar</code> 查看帮助。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\testing_tools\appcrawler&gt;java -jar appcrawler-2.4.0-jar-with-dependencies.jar</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">AppCrawler 2.4.0 [霍格沃兹测试学院特别纪念版]</span><br><span class="line">Appium 1.8.1 Java8 tested</span><br><span class="line">app爬虫, 用于自动遍历测试. 支持Android和iOS, 支持真机和模拟器</span><br><span class="line">项目地址: https://github.com/seveniruby/AppCrawler</span><br><span class="line">移动测试技术交流: https://testerhome.com</span><br><span class="line">联络作者: seveniruby@testerhome.com (思寒)</span><br><span class="line">致谢: 晓光 泉龙 杨榕 恒温 mikezhou yaming116 沐木</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: appcrawler [options]</span><br><span class="line"></span><br><span class="line">  -a, --app &lt;value&gt;        Android或者iOS的文件地址, 可以是网络地址, 赋值给appium的app选项</span><br><span class="line">  -e, --encoding &lt;value&gt;   set encoding, such as UTF-8 GBK</span><br><span class="line">  -c, --conf &lt;value&gt;       配置文件地址</span><br><span class="line">  -p, --platform &lt;value&gt;   平台类型android或者ios, 默认会根据app后缀名自动判断</span><br><span class="line">  -t, --maxTime &lt;value&gt;    最大运行时间. 单位为秒. 超过此值会退出. 默认最长运行3个小时</span><br><span class="line">  -u, --appium &lt;value&gt;     appium的url地址</span><br><span class="line">  -o, --output &lt;value&gt;     遍历结果的保存目录. 里面会存放遍历生成的截图, 思维导图和日志</span><br><span class="line">  --capability k1=v1,k2=v2...</span><br><span class="line">                           appium capability选项, 这个参数会覆盖-c指定的配置模板参数, 用于在模板配置之上的参数微调</span><br><span class="line">  -r, --report &lt;value&gt;     输出html和xml报告</span><br><span class="line">  --template &lt;value&gt;       输出代码模板</span><br><span class="line">  --master &lt;value&gt;         master的diff.yml文件地址</span><br><span class="line">  --candidate &lt;value&gt;      candidate环境的diff.yml文件</span><br><span class="line">  --diff                   执行diff对比</span><br><span class="line">  -vv, --verbose           是否展示更多debug信息</span><br><span class="line">  --demo                   生成demo配置文件学习使用方法</span><br><span class="line">  --help</span><br><span class="line">示例</span><br><span class="line">appcrawler -a xueqiu.apk</span><br><span class="line">appcrawler -a xueqiu.apk --capability noReset=true</span><br><span class="line">appcrawler -c conf/xueqiu.json -p android -o result/</span><br><span class="line">appcrawler -c xueqiu.json --capability udid=[你的udid] -a Snowball.app</span><br><span class="line">appcrawler -c xueqiu.json -a Snowball.app -u 4730</span><br><span class="line">appcrawler -c xueqiu.json -a Snowball.app -u http://127.0.0.1:4730/wd/hub</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生成demo例子</span></span><br><span class="line">appcrawler --demo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动已经安装过的app</span></span><br><span class="line">appcrawler --capability &quot;appPackage=com.xueqiu.android,appActivity=.view.WelcomeActivityAlias&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从已经结束的结果中重新生成报告</span></span><br><span class="line">appcrawler --report result/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新老版本对比</span></span><br><span class="line">appcrawler --candidate result/ --master pre/ --report ./</span><br></pre></td></tr></table></figure>
<h2 id="生成样板配置示例"><a href="#生成样板配置示例" class="headerlink" title="生成样板配置示例"></a>生成样板配置示例</h2><p>运行 <code>java -jar appcrawler.jar --demo</code> 会在当前目录下生成一个demo.yml文件。</p>
<p>通过编辑demo.yml文件实现app自动遍历的灵活定制。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\testing_tools\appcrawler&gt;java -jar appcrawler-2.4.0-jar-with-dependencies.jar --demo</span><br><span class="line">2020-11-18 20:47:04 INFO [AppCrawler$.86.main]</span><br><span class="line">----------------</span><br><span class="line">AppCrawler 2.4.0 [霍格沃兹测试学院特别纪念版]</span><br><span class="line">Appium 1.8.1 Java8 tested</span><br><span class="line">app爬虫, 用于自动遍历测试. 支持Android和iOS, 支持真机和模拟器</span><br><span class="line">项目地址: https://github.com/seveniruby/AppCrawler</span><br><span class="line">移动测试技术交流: https://testerhome.com</span><br><span class="line">联络作者: seveniruby@testerhome.com (思寒)</span><br><span class="line">致谢: 晓光 泉龙 杨榕 恒温 mikezhou yaming116 沐木</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-11-18 20:47:05 INFO [AppCrawler$.223.parseParams] use default appium address 4723</span><br><span class="line">2020-11-18 20:47:05 INFO [AppCrawler$.230.parseParams] appium address = Some(http://127.0.0.1:4723/wd/hub)</span><br><span class="line">2020-11-18 20:47:05 INFO [AppCrawler$.242.parseParams] result directory = 20201118204701</span><br><span class="line">2020-11-18 20:47:07 INFO [AppCrawler$.286.parseParams] you can read D:\testing_tools\appcrawler\demo.yml for demo</span><br></pre></td></tr></table></figure>
<p><img src="appcrawler_demo.png" alt="img"></p>
<h1 id="执行参数与配置文件"><a href="#执行参数与配置文件" class="headerlink" title="执行参数与配置文件"></a>执行参数与配置文件</h1><ul>
<li>capability设置：与 appium完全一致  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appPackage: &quot;com. xueqiu.android&quot;</span><br><span class="line">appActivity: &quot;.view.WelcomeActivityAlias&quot;</span><br><span class="line">app:</span><br><span class="line">appium: &quot;http: //127.0.0.1:4723/wd/hub&quot;</span><br><span class="line">noReset: true</span><br><span class="line">automationName: uiautomator2</span><br><span class="line">dontStopAppOnReset: true</span><br></pre></td></tr></table></figure>
<img src="appcrawler_capability.png" alt="img"></li>
<li>testcase：用于启动app后的基础测试用例</li>
<li>selectedList：设定遍历范围</li>
<li>triggerActions：特定条件触发执行动作</li>
<li>执行参数比配置文件优先级别高  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar &lt;appcrawler.jar路径&gt; -c example.yml --capability appPackage=com.xueqiu.android,appActivity=.view.WelcomeActivityAlias -o /tmp/xueqiu/</span><br></pre></td></tr></table></figure>
<h2 id="testcase"><a href="#testcase" class="headerlink" title="testcase"></a>testcase</h2></li>
</ul>
<p>testcase的完整形态</p>
<ul>
<li>given：所有的先决条件</li>
<li>when：先决条件成立后的行为</li>
<li>then：断言集合</li>
</ul>
<p>testcase的简写形态</p>
<ul>
<li>xpath：对应when里的 xpath</li>
<li>action：对应when的 action</li>
</ul>
<p><img src="appcrawler_testcase.png" alt="img"></p>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><ul>
<li>back 后退</li>
<li>backApp 回退到当前的app默认等价于back行为 可定制</li>
<li>monkey 随机事件</li>
<li>xxx()执行代码<ul>
<li>Thread.sleep(3000)</li>
<li>driver.swipe(0.9, 0.5,0.1,0.5)</li>
</ul>
</li>
<li>click</li>
<li>longTap </li>
</ul>
<p><img src="appcrawler_action.png" alt="img"></p>
<h2 id="自动遍历定制"><a href="#自动遍历定制" class="headerlink" title="自动遍历定制"></a>自动遍历定制</h2><ul>
<li>selectedList：需要被遍历的元素范围</li>
<li>firstList：优先被点击</li>
<li>lastList：最后被点击</li>
<li>tagLimitMax：同祖先(同类型)的元素最多点击多少次</li>
<li>backButton：当所有元素都被点击后默认后退控件定位</li>
<li>blackList：黑名单</li>
<li>maxDepth：遍历的最大深度</li>
</ul>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>triggerActions:</p>
<ul>
<li><p>动作触发特定次数</p>
</li>
<li><p>通常用于处理弹框：关闭弹框</p>
<ul>
<li>xpath：指定具体按钮<ul>
<li>action：动作</li>
<li>times：规则的使用次数</li>
</ul>
</li>
</ul>
<p><img src="appcrawler_trigger.png" alt="img"></p>
</li>
</ul>
<h1 id="自动遍历测试过程"><a href="#自动遍历测试过程" class="headerlink" title="自动遍历测试过程"></a>自动遍历测试过程</h1><ol>
<li><p>信息的获取:</p>
<ul>
<li>把当前app的界面dump为xml结构</li>
</ul>
</li>
<li><p>获取待遍历元素</p>
<ul>
<li>遍历范围 selectedList</li>
<li>过滤黑名单 小控件 不可见控件 blackList</li>
<li>重排控件顺序 firstList lastList</li>
<li>跳过已点击+跳过限制点击的控件tagLimit</li>
<li>根据匹配的规则执行 action</li>
</ul>
</li>
<li><p>循环上面的步骤</p>
</li>
</ol>
<h1 id="网页报告"><a href="#网页报告" class="headerlink" title="网页报告"></a>网页报告</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar appcrawler-2.4.0-jar-with-dependencies.jar -c demo1.yml</span><br></pre></td></tr></table></figure>
<p>自动遍历执行完成后，当前目录会生成测试报告index.html<br><img src="appcrawler_report.png" alt="img"><br>打开index.html文件<br><img src="appcrawler_report2.png" alt="img"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>AppCrawler</tag>
        <tag>自动遍历测试</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议架构介绍（一）：网络接口层</title>
    <url>/posts/tcp-ip-protocol-architecture-model_link-layer/</url>
    <content><![CDATA[<p>TCP/IP协议架构是通信协议的统称，常被称为<strong>TCP/IP协议族</strong>，包括两个核心协议：<strong>TCP（传输控制协议）</strong>和<strong>IP（网际协议）</strong>，TCP/IP协议的开发始于20世纪60年代后期，早于OSI参考模型，由于TCP/IP模型更加简洁易用，目前大多采用TCP/IP模型。一共包括4层：应用层、传输层、网络层和网络接口层。</p>
<a id="more"></a>
<p>OSI模型与TCP/IP模型：</p>
<p><img src="TCP_IP.png" width="60%" height="60%" /></p>
<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>负责0、1 比特流（0/1序列）与电压的高低之间的转换</p>
<p>数据的单位称为<strong>比特（bit）</strong></p>
<p>属于物理层定义的典型规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45、fddi令牌环网等<br>OSI采纳了各种现成的协议，其中有RS-232、RS-449、X.21、V.35、ISDN、以及FDDI、IEEE802.3、IEEE802.4、和IEEE802.5的物理层协议</p>
<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>负责物理层面上的互联的、节点间的通信传输（例如一个以太网项链的2个节点之间的通信）；</p>
<p>该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。在这一层，数据的单位称为<strong>帧（frame）</strong></p>
<ul>
<li><p><strong>封装成帧</strong>: 把网络层数据报加头和尾，封装成帧,帧头中包括源<strong>MAC地址</strong>和目的MAC地址。</p>
</li>
<li><p><strong>透明传输</strong>：零比特填充、转义字符。</p>
</li>
<li><p><strong>可靠传输</strong>：在出错率很低的链路上很少用，但是无线链路WLAN会保证可靠传输。</p>
</li>
<li><p><strong>差错检测(</strong>CRC)：接收者检测错误,如果发现差错，丢弃该帧。</p>
</li>
</ul>
<h2 id="主要协议"><a href="#主要协议" class="headerlink" title="主要协议"></a>主要协议</h2><p>①点对点协议PPP（Point to Point Protocol）<br>②以太网（Ethernet)<br>③高级数据链路控制协议HDLC(High-Level Data Link Control)<br>④ 帧中继（Frame Relay)<br>⑤异步传输模式ATM(Asynchronous Transfer Mode)</p>
<h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>MAC(Medium/Media Access Control)地址，媒体访问控制,或称为物理地址、硬件地址，48位</p>
<p>MAC地址</p>
<p><img src="MAC地址.png" width="60%" height="60%" /></p>
<ul>
<li>组织唯一标识符（OUI）由IEEE（电气和电子工程师协会）分配给厂商</li>
<li>I/G（Individual/Group）位，如果I/G=0，则是某台设备的MAC地址，即<strong>单播地址</strong>；如果I/G=1，则是<strong>多播地址</strong>（组播+广播=多播）。</li>
<li>G/L（Global/Local，也称为U/L位，其中U表示Universal）位，如果G/L=0，则是全局管理地址，由IEEE分配；如果G/L=1，则是本地管理地址，是网络管理员为了加强自己对网络管理而指定的地址。</li>
</ul>
<p>MAC帧</p>
<p><img src="MAC.png" width="60%" height="60%" /></p>
<blockquote>
<p>IP地址负责表示计算机的网络层地址，网络层设备（如路由器）根据IP地址来进行操作；<br>MAC地址负责表示计算机的数据链路层地址<br>IP和MAC地址这种映射关系由<strong>ARP</strong>（Address Resolution Protocol，地址解析协议）协议完成。</p>
</blockquote>
<h2 id="PPPoE-协议"><a href="#PPPoE-协议" class="headerlink" title="PPPoE 协议"></a>PPPoE 协议</h2><p>基于以太网的点对点通讯协议PPPOE(Point to Point Protocol over Ethernet)</p>
<ul>
<li>单纯的以太网没有验证功能，也没有建立和断开连接的处理，因此无法按时计费。</li>
<li>如果采用PPPoE管理以太网连接，就可以利用PPP的验证等功能使各家ISP可以有效地管理终端用户的使用。</li>
<li>分成发现阶段(Discorvery)和PPP会话阶段（Session）</li>
</ul>
<p>报文的以太网类型:</p>
<ul>
<li>当值为0x8863时表示Discovery阶段或Terminate阶段。</li>
<li>当值为0x8864时表示Session阶段。</li>
</ul>
<p><strong>PPPoE拨号过程</strong><br><img src="PPPoE.png" width="60%" height="60%" /></p>
<h3 id="PPPoE-Discovery发现阶段"><a href="#PPPoE-Discovery发现阶段" class="headerlink" title="PPPoE Discovery发现阶段"></a>PPPoE Discovery发现阶段</h3><ol>
<li>用户主机用<strong>广播</strong>的方式发出<strong>PADI </strong>(PPPOE Active Discovery Initiatio) 包，准备去获得所有可连接的接入设备（获得其MAC地址）；</li>
<li><strong>PPPoE服务器</strong>收到PADI包后，返回<strong>PADO</strong> (PPPOE Active Discovery Offer) 作为回应；</li>
<li>用户主机从收到的多个PADO包中，根据其名称类型名或者服务名，<strong>选择一个合适的接入设备</strong>，然后发送<strong>PADR</strong> (PPPOE Active Discovery Request) 包，<u>另外如果一个用户主机在发出PADI后在规定时间内没有收到PADO，则会重发PADI,并且加倍等待时间</u>；</li>
<li><strong>PPPoE服务器</strong>收到PADR包后，返回<strong>PADS </strong>(PPPOE Active Discovery Session-confirmation) 包，其中包含了一个<strong>唯一session ID</strong>，双方进入PPP会话阶段。</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>code</th>
<th>报文</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>0x09</td>
<td>PADI</td>
<td>PPPoE Active Discovery Initiation</td>
<td>PPPoE发现初始报文</td>
</tr>
<tr>
<td>0x07</td>
<td>PADO</td>
<td>PPPoE Active Discovery Offer</td>
<td>PPPoE发现提供报文</td>
</tr>
<tr>
<td>0x19</td>
<td>PADR</td>
<td>PPPoE Active Discovery Request</td>
<td>PPPoE发现请求报文</td>
</tr>
<tr>
<td>0x65</td>
<td>PADS</td>
<td>PPPoE Active Discovery Sessionconfirmation</td>
<td>PPPoE发现会话确认报文</td>
</tr>
<tr>
<td>0xa7</td>
<td>PADT</td>
<td>PPPoE Active Discovery Terminate</td>
<td>PPPoE发现终止报文</td>
</tr>
</tbody>
</table>
</div>
<p>Discovery阶段：以太网帧的ETHER_TYPE域都设置为 <strong>0x8863</strong><br><img src="PPPoE_discovery_type.png" width="60%" height="60%" /></p>
<h3 id="PPPoE-Session-会话阶段"><a href="#PPPoE-Session-会话阶段" class="headerlink" title="PPPoE Session 会话阶段"></a>PPPoE Session 会话阶段</h3><p><strong>1 LCP协商阶段（Link Control Protocol）</strong><br>链路协商</p>
<ul>
<li>LCP用于建立、拆除和监控PPP数据链路</li>
<li>还用于链路层参数的协商，如MRU、验证方式</li>
</ul>
<p>协商双方互相发送一个<strong>LCP Config-Request报文</strong>，确认收到的Config-Request报文中的协商选项，根据这些选项的支持与接受情况，做出适当的<strong>回应</strong>。若<strong>两端都回应了Config-ACK</strong>，则标志LCP链路建立成功，否则会继续发送Request报文，直到对端回应了ACK报文为止。</p>
<p><img src="LCP.png" width="60%" height="60%" /></p>
<p><strong>2 认证阶段</strong></p>
<p>会话双方通过<strong>LCP协商好的认证方法</strong>进行认证，如果认证通过了，才可以进行下面的网络层的协商。认证过程在链路协商结束后就进行。</p>
<ul>
<li><p><strong>PAP</strong>（Password Authentication Protocol，口令认证协议）</p>
<p>PAP为两次握手协议，它通过用户名及口令来对用户进行验证。</p>
</li>
<li><p><strong>CHAP</strong>（Challenge Handshake Authentication Protocol，质询握手认证协议）</p>
<p>CHAP为三次握手协议。只在网络上传输用户名，并不传输用户口令，因此它的安全性要比PAP高。</p>
<p>Md5算法</p>
</li>
</ul>
<p><strong>3 NCP协商阶段</strong></p>
<p><strong>网络层协商：IPCP、BCP、IPv6CP等</strong></p>
<ul>
<li>协商PPP报文的网络层参数，如IP地址，DNS Server IP等。</li>
<li>PPPoE用户主要通过<strong>IPCP</strong>来获取访问网络的IP地址或IP地址段，网关，DNS等。</li>
<li>用户和接入设备对IP服务阶段的一些要求进行多次协商，以决定双方都能够接收的约定。如：IP业务阶段使用的IP压缩协议等。</li>
<li><p>双方的协议是通过报文中包含的<strong>Option项</strong>进行协商的，每一个Option都是一个需要协商的问题。最后双方都需要对方答复Configure_Ack的同意报文。</p>
</li>
<li><p>IPCP的协商过程是基于<strong>PPP状态机</strong>进行协商的。</p>
</li>
<li>经过双方协商，通过配置请求、配置确认、配置否认等包文交换配置信息，<strong>最终由initial (或closed)状态变为Opened状态</strong>。</li>
<li>IPCP状态变为Opened的条件必须是<strong>发送方和接收方都发送和接收过确认报文</strong>。</li>
<li>IPCP协商过程中，协商报文可包含多个选项，即参数。</li>
<li>各个选项的拒绝或否认都不能影响IPCP的UP，IPCP可以无选项协商，<strong>无选项协商也同样能够UP</strong>。选项有<strong>IP Address、网关、掩码</strong>等，其中IP Address是最重要的一个选项，有些厂家的实现必须这个选项得到确认，大多数厂家的实现允许这个选项为空。</li>
</ul>
<h3 id="PPPoE-Terminate阶段"><a href="#PPPoE-Terminate阶段" class="headerlink" title="PPPoE Terminate阶段"></a>PPPoE Terminate阶段</h3><ul>
<li>PPP通信双方可以使用<strong>PPP协议自身</strong>来结束PPPoE会话</li>
<li>当无法使用PPP协议结束会话时可以使用<strong>PADT</strong>（PPPoE Active Discovery Terminate）报文。</li>
<li>进入PPPoE Session阶段后，PPPoE Client和PPPoE Server<strong>都可以通过发送PADT报文的方式来结束PPPoE连接</strong>。</li>
<li>PADT数据包可以在会话建立以后的任意时刻单播发送。在发送或接收到PADT后，就不允许再使用该会话发送PPP流量了。</li>
</ul>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议架构介绍（三）：传输层</title>
    <url>/posts/tcp-ip-protocol-architecture-model_transport-layer/</url>
    <content><![CDATA[<p>传输层主要为两台主机上的应用程序提供端到端的通信。</p>
<a id="more"></a>
<h1 id="传输层简介"><a href="#传输层简介" class="headerlink" title="传输层简介"></a>传输层简介</h1><ul>
<li><p>传输层是唯一负责总体的<strong>数据传输</strong>和<strong>数据控制</strong>的一层；</p>
</li>
<li><p>数据的单位称为<strong>数据段（segment）</strong></p>
</li>
<li><p>TCP报文段（<strong>TCP segment</strong>）</p>
</li>
<li>UDP数据报（<strong>User Datagram</strong>）</li>
</ul>
<p>主要功能：</p>
<p>①为<strong>端到端</strong>连接提供传输服务</p>
<p>②这种传输服务分为可靠和不可靠的,其中<strong>TCP</strong>是典型的可靠传输，而<strong>UDP</strong>则是不可靠传输</p>
<p>③为端到端连接提供<strong>流量控制</strong>，<strong>差错控制</strong>，<strong>服务质量</strong>(Quality of Service,<strong>QoS</strong>)等管理服务</p>
<p>包括的协议如下：</p>
<p>TCP：传输控制协议，传输效率低，可靠性强</p>
<p>UDP：用户数据报协议，适用于传输可靠性要求不高，数据量小的数据（比如QQ：采用的通信协议以UDP为主，辅以TCP协议）</p>
<p>DCCP、SCTP、RTP、RSVP、PPTP等协议</p>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><ul>
<li><p><strong>MAC地址</strong>用来识别同一链路中不同的计算机，<strong>IP地址</strong>用来识别TCP/IP网络中互连的主机和路由器</p>
</li>
<li><p>传输层中也有这种类似于地址的概念，那就是<strong>端口号</strong>。</p>
</li>
<li><p>端口号用来识别同一台计算机中不同的应用程序。因此，它也被称为<strong>程序地址</strong>。</p>
</li>
<li><p>同一台计算机可以同时运行多个程序：通过端口号来识别正在进行通信的应用程序，并准确的将数据传输</p>
</li>
<li><p>TCP/IP或者UDP/IP通信中通常采用<strong>5个信息</strong>来识别一个通信，分别是“源IP地址”、“目标IP地址”、“协议号”、“源端口号”、“目标端口号”，也被称为“五元组”，只要其中某一项不同，则被认为是其他通信。</p>
</li>
<li><p>端口号的取值范围在0-65535之间，其中0-1023为知名端口号，1024-65535之间的端口为非知名端口不同的传输层协议可以使用相同的端口号</p>
</li>
<li><p>数据到达IP层后，会先检查IP首部中的<strong>协议号</strong>，再传给相应协议的模块。如果是TCP则传给TCP模块，如果是UDP则传给UDP模块去做<strong>端口号</strong>的处理，即使是同一个端口号，由于传输协议是各自独立的进行处理，因此相互之间不会受到影响。</p>
</li>
</ul>
<h1 id="TCP协议和UDP协议"><a href="#TCP协议和UDP协议" class="headerlink" title="TCP协议和UDP协议"></a>TCP协议和UDP协议</h1><p>TCP（Transmission Control Protocol，传输控制协议）</p>
<p>UDP（User Datagram Protocol，用户数据报协议）</p>
<h2 id="TCP和UDP协议特点"><a href="#TCP和UDP协议特点" class="headerlink" title="TCP和UDP协议特点"></a>TCP和UDP协议特点</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">TCP</th>
<th style="text-align:center">UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">可靠性</td>
<td style="text-align:center">可靠</td>
<td style="text-align:center">不可靠</td>
</tr>
<tr>
<td style="text-align:center">连接性</td>
<td style="text-align:center">面向连接</td>
<td style="text-align:center">无连接</td>
</tr>
<tr>
<td style="text-align:center">报文</td>
<td style="text-align:center">面向字节流</td>
<td style="text-align:center">面向报文</td>
</tr>
<tr>
<td style="text-align:center">效率</td>
<td style="text-align:center">传输效率低</td>
<td style="text-align:center">传输效率高</td>
</tr>
<tr>
<td style="text-align:center">双工性</td>
<td style="text-align:center">全双工</td>
<td style="text-align:center">一对一、一对多、多对一、多对多</td>
</tr>
<tr>
<td style="text-align:center">流量控制</td>
<td style="text-align:center">滑动窗口</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">拥塞控制</td>
<td style="text-align:center">慢开始、拥塞避免、快重传、快恢复</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">传输速度</td>
<td style="text-align:center">慢</td>
<td style="text-align:center">快</td>
</tr>
<tr>
<td style="text-align:center">应用</td>
<td style="text-align:center">SMTP、Telnet、HTTP、FTP、DNS</td>
<td style="text-align:center">DNS、TFTP、SNMP、NFS</td>
</tr>
</tbody>
</table>
</div>
<p>TCP的主要特点是：</p>
<p>1.TCP 是<strong>面向连接</strong>的传输层协议。</p>
<p>2.TCP 提供<strong>可靠交付</strong>的服务。</p>
<p>3.TCP是面向<strong>字节流</strong></p>
<p>4.<strong>提供</strong>流量控制，拥塞控制</p>
<p><strong>5.TCP提供</strong>全双工<strong>通信。每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP连接只能是点对点的（一对一）。</strong></p>
<p><strong>6.首部最低</strong>20个字节。</p>
<p>可靠传输：</p>
<ol>
<li><p>应答机制：对方收到消息底层会回复</p>
</li>
<li><p>超时重传：给多方发送一个数据，如果一段时间内对方没有接收，会隔一段时间给对方再次发送，如果一直没有回复，会认为对方掉线了</p>
</li>
<li><p>错误校验：如果接收的数据包序号发生了错乱，TCP会自动排序，保证数据的有序性，如果有重复数据包，会删除重复的数据包</p>
</li>
<li><p>流量控制：数据发送在网卡缓存区达到一定上限，对方不会一直发送数据，需要等待对方接收数据，网卡缓存区有空间再发送，保证网卡缓存不会超出</p>
</li>
</ol>
<p>UDP的主要特点是：</p>
<ol>
<li>UDP是<strong>无连接</strong>的，在发送数据之前不需要建立连接，因此减少了靠小和发送数据之前的时延。</li>
<li>UDP使用<strong>尽最大努力交付</strong>，不保证可靠交付。</li>
<li>UDP是<strong>面向报文</strong>的，发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。</li>
<li>UDP<strong>没有拥塞控制</strong>，因此网络出现的拥塞不会使源主机的发送速率降低。</li>
<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>
<li>UDP的首部开销小，只有<strong>8个字节</strong>，比TCP的20个字节首部要短。</li>
</ol>
<h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="TCP报文.png" width="60%" height="60%" /></p>
<p><strong>源端口和目的端口：</strong>各占两个字节，分别表示数据包源端口和目的端口，由此可知，端口号的范围是0-65535。</p>
<p><strong>序号</strong>：四个字节，范围是[0,232-1]，共232(4294967296)个序号。TCP字节流的起始序号必须在连接建立时设置，首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号。</p>
<p><strong>确认号：</strong>四个字节，是期望收到对方下一个报文段的第一个数据字节的序号。若确认号=N，则表示到序号N-1为止的所有数据都已正确收到。</p>
<p><strong>数据偏移：</strong>占四位，它指出当前TCP报文段的数据起始处距离整个TCP报文段的起始处有多远。</p>
<p><strong>保留：</strong>占六位，保留为今后使用，当前应置为0。</p>
<p><strong>控制位：</strong>占六位，包含URG,ACK,PSH,RST,SYN和FIN，分别为TCP连接中需要使用的数据位。</p>
<p><strong>窗口：</strong>两个字节，窗口值是[0,216-1]之间的整数，窗口指的是发送本报文段一方的接收窗口，作为接收方让发送方设置其发送窗口的依据。</p>
<p><strong>校验和</strong>：两个字节，检查范围包括首部和数据这两部分。</p>
<p><strong>紧急指针</strong>：两个字节，只有URG=1时才有意义。</p>
<p><strong>选项：</strong>长度可变，最长可达40字节，当没有使用选项时，TCP首部长度是<strong>20字节</strong>。</p>
<p>在TCP中，当发送端的数据到达接收端主机时，接收端主机会返回一个已收到消息的通知。这个消息叫做确认应答（ACK）。</p>
<h2 id="TCP连接的建立和断开过程"><a href="#TCP连接的建立和断开过程" class="headerlink" title="TCP连接的建立和断开过程"></a>TCP连接的建立和断开过程</h2><p> 三次握手和四次挥手 </p>
<p> 建立一个TCP连接需要3个报文段，而关闭TCP连接需要4个报文段。     </p>
<p><img src="TCP连接.png" width="60%" height="60%" /></p>
<h2 id="UDP报文格式"><a href="#UDP报文格式" class="headerlink" title="UDP报文格式"></a>UDP报文格式</h2><p><img src="UDP报文.png" width="60%" height="60%" /></p>
<p><strong>源端口号：</strong>表示发送端端口号，字段长16位。该字段是可选项，有时可能不会设置源端口号。没有源端口号的时候该字段的值为0，可用于不需要返回的通信中。</p>
<p><strong>目标端口号：</strong>表示接收端端口，字段长度16位。</p>
<p><strong>包长度：</strong>该字段保存了UDP首部的长度和数据的长度之和，单位为字节。</p>
<p><strong>校验和：</strong>校验和是为了提供可靠的UDP首部和数据而设计的。需要把首部和数据部分一起都检验</p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议架构介绍（四）：应用层</title>
    <url>/posts/tcp-ip-protocol-architecture-model_application-layer/</url>
    <content><![CDATA[<p>本文介绍应用层相关协议</p>
<a id="more"></a>
<p>数据：<strong>报文</strong></p>
<h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><p>文件传输协议FTP(File Transfer Protocol)：<strong>TCP20</strong>，<strong>21</strong><br>FTP协议包括两个组成部分：FTP服务器和FTP客户端</p>
<h2 id="FTP传输模式"><a href="#FTP传输模式" class="headerlink" title="FTP传输模式"></a>FTP传输模式</h2><p>FTP支持两种模式，一种方式叫做Standard (也就是 PORT方式，主动方式)，一种是 Passive(也就是PASV，被动方式)。 </p>
<ul>
<li>Standard模式：FTP的客户端发送 PORT 命令到FTP服务器</li>
<li>Passive模式：FTP的客户端发送 PASV命令到 FTP服务器</li>
<li>默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息</li>
<li>但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关</li>
<li>如果采用主动模式，那么数据传输端口就是20</li>
<li>如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定</li>
</ul>
<p><strong>Port</strong></p>
<ul>
<li>FTP <strong>客户端</strong>首先和FTP<strong>服务器</strong>的<strong>TCP 21</strong>端口建立连接，通过这个通道发送命令</li>
<li>客户端需要接收数据的时候在这个通道上<strong>发送PORT命令</strong>，PORT命令包含了客户端用什么端口接收数据。</li>
<li>在传送数据的时候，<strong>服务器端</strong>通过自己的<strong>TCP 20</strong>端口连接至<strong>客户端</strong>的<strong>指定端口</strong>发送数据。 </li>
<li>FTP server必须和客户端建立一个<strong>新的连接</strong>用来传送数据</li>
</ul>
<p><strong>Passive</strong></p>
<ul>
<li><p>在建立控制通道的时候和Standard模式类似，但建立连接后发送的不是Port命令，而是<strong>Pasv命令</strong></p>
</li>
<li><p>FTP服务器收到Pasv命令后，随机打开一个<strong>高端端口</strong>（端口号大于1024）并且通知客户端在这个端口上传送数据的请求</p>
</li>
<li><p>客户端连接FTP服务器此端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。  </p>
</li>
</ul>
<p>很多防火墙在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；</p>
<p>而许多内网的客户端不能用PORT模式登陆FTP服务器，因为从服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作。</p>
<h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><p>TFTP（Trivial File Transfer Protocol,简单文件传输协议）</p>
<p>端口号 <strong>UDP69</strong></p>
<p>TFTP协议支持三种传输模式：</p>
<ul>
<li><p>netascii：ASCII文本模式</p>
</li>
<li><p>octet：二进制模式，每字节8位</p>
</li>
<li><p>mail：现在已经不使用</p>
</li>
</ul>
<p>TFTP协议数据包种类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>opcode</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>读请求（RRQ）</td>
</tr>
<tr>
<td>2</td>
<td>写请求（WRQ）</td>
</tr>
<tr>
<td>3</td>
<td>数据（DATA）</td>
</tr>
<tr>
<td>4</td>
<td>应答（ACK）</td>
</tr>
<tr>
<td>5</td>
<td>错误（ERROR）</td>
</tr>
<tr>
<td>6</td>
<td>选项应答（OACK）</td>
</tr>
</tbody>
</table>
</div>
<p>TFTP和FTP一个主要的区别就是它没有交互式，且不进行身份验证。</p>
<h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>安全外壳协议SSH( secure shell protocal )：<strong>TCP22</strong></p>
<ul>
<li>ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用<strong>明文</strong>传送口令和数据 </li>
<li>SSH可以有效防止远程管理过程中的信息泄露问题， 提供了基于内容加密服务 </li>
<li>SSH传输的数据是经过压缩的，所以可以加快传输的速度。</li>
<li>SSH既可以代替Telnet，又可以为FTP、PoP、甚至为PPP提供一个安全的”通道”</li>
</ul>
<h2 id="口令验证"><a href="#口令验证" class="headerlink" title="口令验证"></a>口令验证</h2><p><a href="https://blog.csdn.net/dreamwbt/article/details/80280557">参考网址</a><br>（1）客户端向远程主机发起登陆链接请求。<br>（2）远程主机收到用户的登录连接请求，然后把自己的公钥发给客户端。<br>（3）客户端收到这个公钥，并使用这个公钥，将登录密码加密后，发送到远程主机。<br>（4）远程主机用自己的私钥，解密登录密码，并验证该密码与当前要登陆的用户密码是否匹配，匹配就同意用户登录。</p>
<p>缺陷：口令验证，主动权在客户端，真正的远程主机可能会被拦截掉，能会有别的服务器伪装真正的服务器，受到“中间人”的攻击。此时客户端收到的密钥是伪装机的，客户端发送加密后的密码后，会被伪装机通过私钥解密，此时伪装机就获取到了真实远程主机的账密，那么真实远程主机的安全就受到了严重威胁。</p>
<h2 id="密钥验证"><a href="#密钥验证" class="headerlink" title="密钥验证"></a>密钥验证</h2><p>前提：客户端在本地生成非对称密钥（公钥、私钥）。并且将公钥放到了远程主机的.ssh/authorized_keys文件中。<br>（1）客户端向远程主机发起登陆连接请求，附带信息<br>备注：网上对于附带信息，我目前看到两个版本，一个是：ip，用户名；一个是：公钥信息。对于第一种，我是肯定不赞同，客户端物理位置不定，Ip会变，而且公钥信息中根本没有IP，用户名等信息，所以用IP和用户名在远程主机中定位公钥肯定不行；第二版本我比较赞同，但是目前还有待验证。<br>（2）远程主机根据附带的信息定位到客户端对应的公钥，然后生成一个随机串并用该公钥加密，然后将生成的加密串发送给客户端。<br>（3）客户端收到远程主机送来的加密串，然后用自己的私钥解密，再将解密后的字符串送给远程主机。<br>（4）远程主机接收到解密后的字符串，然后跟自己最初生成的字符串作比较，一样则校验成功，允许与客户端建立登陆链接。</p>
<p>与第一种级别相比，第二种级别不需要在网络上传送口令。<br>第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒  。</p>
<h1 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h1><p>远程登录协议Telnet(telecommunication network protocol)：<strong>TCP23</strong><br>Telnet 协议是基于网络虚拟终端 NVT(Network Virtual Termina1)的实现<br>NVT 是虚拟设备，连接双方(客户机和服务器)都必须把它们的物理终端和 NVT 进行相互转换。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>整个协议软件分为三个模块，各模块的功能如下：</p>
<ol>
<li>与本地用户的输入/输出模块：处理用户输入/输出；</li>
<li>与远地系统的输入/输出模块：处理与远程系统输入/输出；</li>
<li>TELNET 协议模块：实现 TELNET 协议，维护协议状态机。</li>
</ol>
<p>Telnet远程登录服务分为以下4个过程：<br>1）本地与远程主机建立连接。该过程实际上是建立一个TCP连接，用户必须知道远程主机的Ip地址或域名；<br>2）将本地终端上输入的用户名和口令及以后输入的任何命令或字符以NVT（Net Virtual Terminal）格式传送到远程主机。该过程实际上是从本地主机向远程主机发送一个IP数据包；<br>3）将远程主机输出的NVT格式的数据转化为本地所接受的格式送回本地终端，包括输入命令回显和命令执行结果；<br>4）最后，本地终端对远程主机进行撤消连接。该过程是撤销一个TCP连接。</p>
<p>telnet 客户机要做两件事：</p>
<ul>
<li>读取用户在键盘上键入的字符，并通过 tcp 连接把他们发送到远程服务器上</li>
<li>读取从 tcp 连接上收到的字符，并显示在用户的终端上</li>
</ul>
<p>Telnet 协议的主体由三个部分组成：</p>
<ol>
<li>网络虚拟终端（NVT，Network Virtual Terminal）；</li>
<li>操作协商；</li>
<li>协商有限自动机；</li>
</ol>
<h2 id="NVT-的组成"><a href="#NVT-的组成" class="headerlink" title="NVT 的组成"></a>NVT 的组成</h2><p>网络虚拟终端 NVT 包括两个部分：</p>
<ul>
<li>输出设备：输出远程数据，一般为显示器</li>
<li>输入设备：本地数据输入<br>在网络虚拟终端 NVT 上传输的数据采用 8bit 字节数据，其中 最高位为 0 的字节用于一般数据，最高位为 1 的字节用于 NVT 命令。</li>
</ul>
<p>操作协商<br>为了实现对多种终端特性的支持，TELNET协议规定在扩展NVT功能时采用<strong>协商</strong>的机制，只有通信双方通过协商后达成一致的特性才能使用，才能赋予NVT该项特性，这样就可以支持具有不同终端特性的终端设备可以互连，保证他们是工作在他们自己的能力以内。</p>
<h1 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h1><p>远程桌面协议RDP(Remote Desktop Protocol)<br>是一个多通道(multi-channel)的协议，windows自带的远程桌面mstsc<br>端口TCP 3389</p>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>超文本传输协议HTTP(HTTPHyper Text Transfer Protocol)：</p>
<ul>
<li>HTTP端口号：<strong>TCP 80</strong></li>
<li>HTTPS端口号：<strong>TCP 443</strong></li>
</ul>
<p>HTTP协议的服务器端实现程序有httpd、nginx等，其客户端的实现程序主要是Web浏览器<br>应用：WEB端内容获取(门户网站)，在移动互联网的客户端APP</p>
<h2 id="HTTP请求报文方法"><a href="#HTTP请求报文方法" class="headerlink" title="HTTP请求报文方法"></a>HTTP请求报文方法</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>方法</strong></th>
<th style="text-align:center"><strong>意义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">OPTION</td>
<td style="text-align:center">请求一些选项信息</td>
</tr>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">请求读取由URL所标志的信息</td>
</tr>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">请求读取由URL所标志的信息的首部</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">给服务器添加信息</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">在指明的URL下存储一个文档</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">删除指明的URL所标志的资源</td>
</tr>
<tr>
<td style="text-align:center">TRACE</td>
<td style="text-align:center">用来进行环回测试的请求报文</td>
</tr>
<tr>
<td style="text-align:center">CONNECT</td>
<td style="text-align:center">用于代理服务器</td>
</tr>
</tbody>
</table>
</div>
<h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><p>状态码有5个大类，由第一位数字进行区分，每个大类下面还有不同的子类，每种子类的长度都是3位，都代表一个状态码，即一种类型的返回的信息。</p>
<ul>
<li>1xx 表示通知信息，如请求收到了或正在进行处理</li>
<li>2xx 表示成功，如接受或知道了</li>
<li>3xx 表示重定向，如果要完成请求还必须才去进一步的行动</li>
<li>4xx 表示客户的差错</li>
<li>5xx 表示服务器的差错</li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>HTTP是基于客户/服务器模式，且面向连接的。一次HTTP操作称为一个事务，典型的HTTP事务处理过程如下： </p>
<p>（1）客户与服务器建立连接；<strong>建立连接-</strong>TCP三次握手</p>
<p>（2）客户向服务器提出请求；<strong>发送请求信息</strong></p>
<p>（3）服务器接受请求，并根据请求返回相应的文件作为应答；<strong>发送响应信息</strong></p>
<p>（4）客户与服务器关闭连接。<strong>关闭连接</strong></p>
<p>客户与服务器之间的HTTP连接是一种<strong>一次性连接</strong>，它限制每次连接只处理一个请求，当服务器返回本次请求的应答后便立即关闭连接，下次请求再重新建立连接(可以大大提高服务器的执行效率)。</p>
<p><strong>HTTP是一种无状态协议</strong>，即服务器不保留与客户交易时的任何状态。这就大大减轻了服务器记忆负担，从而保持较快的响应速度。</p>
<p>HTTP是一种<strong>面向对象</strong>的协议。允许传送任意类型的数据对象。它通过数据类型和长度来标识所传送的数据内容和大小，并允许对数据进行压缩传送。</p>
<p>当用户在一个HTML文档中定义了一个超文本链后，浏览器将通过<strong>TCP/IP协议</strong>与指定的服务器建立连接。</p>
<p>从技术上讲是客户在一个特定的<strong>TCP端口（端口号一般为80）</strong>上打开一个套接字。如果服务器一直在这个周知的端口上倾听连接，则该连接便会建立起来。然后客户通过该连接发送一个包含请求方法的请求块。</p>
<p>HTTP规范定义了7种请求方法，每种请求方法规定了客户和服务器之间不同的信息交换方式，常用的请求方法是<strong>GET和POST</strong>。服务器将根据客户请求完成相应操作，并以应答块形式返回给客户，最后关闭连接。 </p>
<p>HTTP协议是无状态的和Connection: keep-alive的区别</p>
<ul>
<li><strong>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。HTTP是一个无状态的面向连接的协议，</strong></li>
<li>无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。</li>
<li>从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</li>
<li>Keep-Alive不会永久保持连接，它有一个<strong>保持时间</strong>，可以在不同的服务器软件（如Apache）中设定这个时间。</li>
</ul>
<h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p><img src="HTTP报文交互过程.png" width="60%" height="60%" /></p>
<ol>
<li><p>TCP三次握手建立连接<br>[SYN]—seq:(x=0)<br>[SYN,ACK]—seq:(y=0),ack = x+1 = 1<br>[ACK]—seq=x+1=1,ack=y+1=1</p>
</li>
<li><p>9.9.9.13 发出HTTP页面和图片请求 No.4<br>GET</p>
</li>
<li><p>157.255.77.60确认 No.5</p>
</li>
<li><p>157.255.77.60传输数据 No.6<br>发送状态响应码200 OK</p>
</li>
<li>9.9.9.13确认 No.7<br>.<br>.<br>.</li>
<li>关闭连接<br>tcp.flags.fin==1</li>
</ol>
<p>HTTP请求报文<br><img src="HTTP请求报文.png" width="60%" height="60%" /></p>
<p>HTTP响应报文<br><img src="HTTP响应报文.png" width="60%" height="60%" /></p>
<h2 id="chrome开发者工具分析网络请求"><a href="#chrome开发者工具分析网络请求" class="headerlink" title="chrome开发者工具分析网络请求"></a>chrome开发者工具分析网络请求</h2><p>chrome浏览器打开网页，按<code>F12</code> 或者 右键选择<code>检查</code>，选择Network，刷新页面或者点击页面元素，可以看到报文交互、资源请求信息：<br><img src="chrome_http.png" width="60%" height="60%" /></p>
<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>域名服务系统DNS（Domain Name System）：<strong>UDP53</strong>，是因特网上作为域名和IP地址相互映射的一个分布式数据库，进行域名解析的服务器</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p><img src="域名.png" width="60%" height="60%" /><br>顶级域名（top level domain）:<br>(1) 国家顶级域名<br>(2) 通用顶级域名<br>(3) 基础结构域名</p>
<p>阿里云DNS：223.5.5.5，备用，223.6.6.6<br>老牌DNS：114.114.114.114<br>谷歌：8.8.8.8<br>腾讯：119.29.29.29<br>百度：180.76.76.76</p>
<h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h2><p>DNS在区域传输的时候使用TCP协议，其他时候使用UDP协议。</p>
<p>DNS区域传输的时候使用TCP协议：</p>
<ol>
<li>辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>
<li>TCP是一种可靠连接，保证了数据的准确性。</li>
</ol>
<p>域名解析时使用UDP协议：</p>
<ul>
<li>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。</li>
<li>理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</li>
</ul>
<h2 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h2><p>DNS首部12字节<br><img src="DNS报文.png" width="60%" height="60%" /></p>
<p>DNS query 查询报文<br><img src="DNS查询报文1.png" width="60%" height="60%" /></p>
<p>DNS response 响应报文<br><img src="DNS响应报文1.png" width="60%" height="60%" /></p>
<h2 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h2><p>DDNS（Dynamic Domain Name Server，动态域名服务）<br>将用户的动态IP地址映射到一个固定的域名解析服务上，用户每次连接网络的时候客户端程序就会通过信息传递把该主机的动态IP地址传送给位于服务商主机上的服务器程序，服务器程序负责提供DNS服务并实现动态域名解析。</p>
<p>动态域名解析（Dynamic DNS，简称DDNS）是把互联网域名指向可变IP地址的系统。</p>
<ul>
<li>DNS只是提供了域名和IP地址之间的静态对应关系，当IP地址发生变化时，DNS无法动态的更新域名和IP地址之间的对应关系，从而导致访问失败。</li>
<li>DDNS系统是将用户的动态IP地址映射到一个固定的域名解析服务上，用户每次连接网络时，客户端程序通过信息传递把该主机的动态IP地址传送给位于服务商主机上的服务器程序，实现动态域名解析。</li>
<li>DDNS用来动态更新DNS服务器上域名和IP地址之间的对应关系，从而保证通过域名访问到正确的IP地址。</li>
<li>很多机构都提供了DDNS服务，在后台运行并且每隔数分钟来检查电脑的IP地址，如果IP发生变更，就会向DNS服务器发送更新IP地址的请求。</li>
</ul>
<h1 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h1><p>动态主机配置协议DHCP（Dynamic Host Configuration Protocol）：<strong>UDP67，68</strong></p>
<p>bootps:67<br>bootpc:68</p>
<h2 id="DHCP过程"><a href="#DHCP过程" class="headerlink" title="DHCP过程"></a>DHCP过程</h2><p><img src="DHCP报文交互.png" width="60%" height="60%" /></p>
<ol>
<li><p><strong>发现阶段</strong>，DHCP Discover，DHCP客户机以<strong>广播</strong>方式发送DHCP discover报文寻找DHCP服务器（向地址255.255.255.255发送广播信息）。</p>
</li>
<li><p><strong>提供阶段</strong>，DHCP Offer，接收到DHCP discover报文的DHCP服务器都会做出响应，向DHCP客户机发送一个包含IP地址和其他信息的Offer报文。</p>
</li>
<li><p><strong>选择阶段</strong>，DHCP Request，DHCP客户机只接受第一个收到的DHCP offer提供的信息，然后它就以广播方式回答一个DHCP request请求信息，该信息中包含向它所选定的DHCP服务器请求IP地址的内容，通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p>
</li>
<li><p><strong>确认阶段</strong>，DHCP ACK，确认IP地址。当DHCP服务器收到DHCP客户机回答的DHCP request请求信息之后，它便向DHCP客户机发送一个包含它所提供的IP地址和其他设置的DHCP ack确认信息，告诉DHCP客户机可以使用它所提供的IP地址。</p>
</li>
<li><p><strong>重新登录</strong>，DHCP NAK，如果客户机的IP地址已无法再分配给原来的DHCP客户机使用时（比如此IP地址已分配给其它DHCP客户机使用），则DHCP服务器给DHCP客户机回答一个DHCP nack否认信息。当原来的DHCP客户机收到此DHCP nack否认信息后，重新发送DHCP discover发现信息来请求新的IP地址。</p>
</li>
<li><p><strong>更新租约</strong>，DHCP服务器向DHCP客户机出租的IP地址一般都有一个租借期限，期满后DHCP服务器便会收回出租的IP地址。如果DHCP客户机要延长其IP租约，则必须更新其IP租约。DHCP客户机启动时和IP租约期限过一半时，DHCP客户机都会自动向DHCP服务器发送更新其IP租约的信息。通过单播发送DHCP request信息到DHCP服务器</p>
</li>
<li><p><strong>DHCP Release</strong>，当用户不再需要使用分配IP地址时，就会”主动”向DHCP服务器发送Release报文，告知服务器用户不再需要分配IP地址，DHCP服务器会释放被绑定的租约(在数据库中清除某个MAC对某个IP的租约记录，这样，这个IP就可以分配给下一个请求租约的MAC)</p>
</li>
<li><p><strong>DHCP Decline</strong>，DHCP客户端收到DHCP服务器回应的ACK报文后，通过地址冲突检测发现服务器分配的地址冲突或者由于其他原因导致不能使用，则发送Decline报文，通知服务器所分配的IP地址不可用，我们在手工设置静态IP、或者DHCP分配中有时会遇到”检测到IP冲突”的提示就是因为客户端利用ARP机制来在当前内网中确认当前指定的IP是否已经被占用</p>
</li>
<li><p><strong>DHCP Inform</strong>，DHCP客户端如果需要从DHCP服务器端获取更为详细的配置信息，则发送Inform报文向服务器进行请求，服务器收到该报文后，将根据租约进行查找，找到相应的配置信息后，发送ACK报文回应DHCP客户端</p>
</li>
</ol>
<h3 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h3><p>家庭网络大多都只有一个以太网（无线LAN）的网段，与其连接的主机台数也不会太多。因此，只要有一台DHCP服务器就足以应对IP地址分配的需求，而大多数情况下都由<strong>宽带路由器</strong>充当这个DHCP的角色。相比之下，一个企业或学校等较大规模组织机构的网络环境中，一般会有多个以太网（无线LAN）网段。在这类网络环境中，往往需要将DHCP统一管理。具体方法可以使用DHCP服务器统一进行管理和运维。</p>
<p>只需在每个网段设置一个<strong>DHCP中继代理</strong>即可。<strong>DHCP客户端</strong>会向<strong>DHCP中继代理</strong>发送DHCP请求包，而DHCP中继代理收到这个广播包以后再以<strong>单播形式</strong>发给<strong>DHCP服务器</strong>。</p>
<p>服务器收到该包以后再向DHCP中继代理返回应答，并由DHCP中继代理将此包转发给DHCP客户端。<strong>DHCP包中包含发出请求的主机的MAC地址</strong>。DHCP中继代理正是利用这个MAC地址将包返回给了DHCP客户端。由此，DHCP服务器即使不在同一个链路上也可以实现统一分配和管理IP地址。</p>
<h3 id="DHCP报文格式"><a href="#DHCP报文格式" class="headerlink" title="DHCP报文格式"></a>DHCP报文格式</h3><p><img src="DHCP报文.png" width="60%" height="60%" /></p>
<p><img src="DHCP报文1.png" width="60%" height="60%" /></p>
<p>OP：报文的操作类型。分为请求报文和响应报文。</p>
<ul>
<li>1：请求报文，2：应答报文。即client送给server的封包，设为1，反之为2。</li>
<li>请求报文：DHCP Discover、DHCP Request、DHCP Release、DHCP Inform和DHCP Decline。</li>
<li>应答报文：DHCP Offer、DHCP ACK和DHCP NAK。</li>
</ul>
<p>Htype：DHCP客户端的MAC地址类型。MAC地址类型其实是指明网络类型</p>
<p>Htype值为1时表示为最常见的以太网MAC地址类型。</p>
<p>Hlen：DHCP客户端的MAC地址长度。以太网MAC地址长度为6个字节，即以太网时Hlen值为6。</p>
<p>Hops：DHCP报文经过的DHCP中继的数目，默认为0。</p>
<ul>
<li>DHCP请求报文每经过一个DHCP中继，该字段就会增加1。</li>
<li>没有经过DHCP中继时值为0。(若数据包需经过router传送，每站加1，若在同一网内，为0。)</li>
</ul>
<p>Xid：客户端通过DHCP Discover报文发起一次IP地址请求时选择的随机数，相当于请求标识。用来标识一次IP地址请求过程。在一次请求中所有报文的Xid都是一样的。</p>
<p>Secs：DHCP客户端从获取到IP地址或者续约过程开始到现在所消耗的时间，以秒为单位。在没有获得IP地址前该字段始终为0。(DHCP客户端开始DHCP请求后所经过的时间。目前尚未使用，固定为0。)</p>
<p>Flags：标志位，只使用第0比特位，是广播应答标识位</p>
<ul>
<li><p>用来标识DHCP服务器应答报文是采用单播还是广播发送，0表示采用单播发送方式，1表示采用广播发送方式。其余位尚未使用。(即从0-15bits，最左1bit为1时表示server将以广播方式传送封包给client。)</p>
</li>
<li><p>【注意】在客户端正式分配了IP地址之前的第一次IP地址请求过程中，所有DHCP报文都是以广播方式发送的，包括客户端发送的DHCP Discover和DHCP Request报文，以及DHCP服务器发送的DHCP Offer、DHCP ACK和DHCP NAK报文。当然，如果是由DHCP中继器转的报文，则都是以单播方式发送的。</p>
</li>
<li>另外，IP地址续约、IP地址释放的相关报文都是采用单播方式进行发送的。</li>
</ul>
<p>Ciaddr：DHCP客户端的IP地址。仅在DHCP服务器发送的ACK报文中显示，在其他报文中均显示0，因为在得到DHCP服务器确认前，DHCP客户端是还没有分配到IP地址的。</p>
<p>Yiaddr：DHCP服务器分配给客户端的IP地址。</p>
<ul>
<li>仅在DHCP服务器发送的Offer和ACK报文中显示，其他报文中显示为0。</li>
</ul>
<p>Siaddr：下一个为DHCP客户端分配IP地址等信息的DHCP服务器IP地址。</p>
<ul>
<li>仅在DHCP Offer、DHCP ACK报文中显示，其他报文中显示为0。(用于bootstrap过程中的IP地址)</li>
</ul>
<p>Giaddr：DHCP客户端发出请求报文后经过的第一个DHCP中继的IP地址。</p>
<ul>
<li>如果没有经过DHCP中继，则显示为0。(转发代理（网关）IP地址)</li>
</ul>
<p>Chaddr：DHCP客户端的MAC地址。在每个报文中都会显示对应DHCP客户端的MAC地址。</p>
<p>Sname：为DHCP客户端分配IP地址的DHCP服务器名称（DNS域名格式）。</p>
<ul>
<li>在Offer和ACK报文中显示发送报文的DHCP服务器名称，其他报文显示为0。</li>
</ul>
<p>File：DHCP服务器为DHCP客户端指定的启动配置文件名称及路径信息。</p>
<ul>
<li>仅在DHCP Offer报文中显示，其他报文中显示为空。</li>
</ul>
<p>Options：可选项字段，长度可变，格式为”代码+长度+数据”。</p>
<h3 id="DHCP报文交互"><a href="#DHCP报文交互" class="headerlink" title="DHCP报文交互"></a>DHCP报文交互</h3><p>报文过滤：</p>
<p>pppoed：过滤PPPoE<br>bootp：过滤DHCP协议</p>
<p><strong>1、DHCP Release</strong><br>如果Client放弃现在使用的IP地址，则它发送DHCP Release单播报文，通知Server, Server将此地址回收以便下次使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ipconfig /release</span><br></pre></td></tr></table></figure>
<p><img src="DHCP_Release.png" width="60%" height="60%" /></p>
<p><strong>2、DHCP Discover_offer_request_ack</strong></p>
<p>Client发送释放报文后，必须不再使用此地址发送其他数据包，并且再使用IP地址前必须重新发送Discover报文</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ipconfig /renew</span><br></pre></td></tr></table></figure>
<p>DHCP Discover<br><img src="DHCP_Discover.png" width="60%" height="60%" /></p>
<p>DHCP offer<br><img src="DHCP_offer.png" width="60%" height="60%" /></p>
<p>DHCP Request<br><img src="DHCP_Request.png" width="60%" height="60%" /></p>
<p>DHCP ACK<br><img src="DHCP_ACK.png" width="60%" height="60%" /></p>
<p><strong>3、续租及续租失败的情况</strong><br>(1) 续租</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ipconfig /release</span><br><span class="line">C:\Users\DELL&gt;ipconfig /renew</span><br></pre></td></tr></table></figure>
<p><img src="DHCP续租.png" width="60%" height="60%" /><br><img src="DHCP报文2.png" width="60%" height="60%" /><br>50%-75%-87.5%</p>
<ul>
<li>当Client的地址到达50%的租用期（T1）时，Client进入RENEW状态，使用Request单播报文续约，联系该服务器</li>
<li>当Client的地址到87.5%租用期（T2）时，Client进入REBINDING状态，使用Request广播报文续约，联系任意服务器</li>
<li>该Request报文中，‘server identifier’必须为空 ，‘ requested IP address’为空， ’ciaddr’字段填充为客户端的IP地址</li>
</ul>
<p><img src="DHCP报文3.png" width="60%" height="60%" /></p>
<p>(2) 续租失败</p>
<p><img src="DHCP续租失败.png" width="60%" height="60%" /></p>
<p>(3) 没有IP地址缓存的情况<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;ipconfig /renew</span><br></pre></td></tr></table></figure><br><img src="DHCP报文_没有IP地址缓存.png" width="60%" height="60%" /></p>
<p>这是因为没有IP地址缓存<br>下图为有IP地址缓存的情况下，会有option 50这个字段<br><img src="DHCP报文_有IP地址缓存.png" width="60%" height="60%" /></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议架构介绍（二）：网络层</title>
    <url>/posts/tcp-ip-protocol-architecture-model_internet-layer/</url>
    <content><![CDATA[<p>网络层负责<strong>寻址</strong>和<strong>路由</strong>，还可以实现拥塞控制、网际互连等功能。数据的单位称为<strong>数据包（packet）-分组</strong>。</p>
<p>分组指IP数据报既可以是一个IP数据报（IP datagram，也可以是IP数据报的一个片（fragment）。<strong>网络层协议</strong>的代表包括：IP、IPX、RIP、OSPF等<br><a id="more"></a></p>
<h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><p>所有的TCP，UDP，IMCP，IGMP的数据都以IP数据格式传输。要注意的是，IP是<strong>不可靠的协议</strong>，这是说，IP协议没有提供一种数据未传达以后的处理机制，这是上层协议（传输层）：TCP或UDP要做的事情。</p>
<p><img src="IP及其配套协议.png" width="60%" height="60%" /></p>
<h2 id="IP数据报首部"><a href="#IP数据报首部" class="headerlink" title="IP数据报首部"></a>IP数据报首部</h2><p><img src="IP数据报.png" width="60%" height="60%" /></p>
<p>首部和数据报之和的长度，<strong>最大65535</strong>，不能超过MTU（即最大传送单元）   </p>
<p><strong>版本</strong>：4位，IP协议的版本 </p>
<p><strong>首部长度</strong>：4位（1个单位表示4个字节）  </p>
<p><strong>区分服务</strong>：8位，报文的优先级，获得更好的服务（QoS应用）</p>
<p><strong>总长度</strong>：16位</p>
<p><strong>标识</strong>：计数器，产生数据报的标识（共有几个数据报）</p>
<p><strong>标志</strong>：3位，前两位有意义（MF=1，有分片，MF=0，最后一个分片，DF=0，允许分片）</p>
<p><strong>片偏移</strong>：13位，较长的分组在分片后，某片在原分组中的相对位置，以8个字节为偏移单位</p>
<p><strong>生存时间</strong>：TTL，数据报在网络中可通过的路由器数的最大值（8位）</p>
<p><strong>协议</strong>：8位，指出数据报使用何种协议</p>
<p><strong>首部校验和</strong>：16位，只检查数据报首部，不检查数据部分</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><img src="IP地址分类.png" width="60%" height="60%" /></p>
<p><strong>192.168.128.10/24</strong></p>
<ul>
<li><p>24表示从头数到第几为止属于网络标识（前面24位为网络标识）</p>
<p>路由器仅根据目的主机所连接的网络号来转发分组（不考虑目的主机号）   </p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">IP地址</th>
<th style="text-align:center">地址范围</th>
<th style="text-align:center">私有地址</th>
<th style="text-align:center">保留地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A类</td>
<td style="text-align:center">0.0.0.0 ~127.255.255.255</td>
<td style="text-align:center">10.0.0.0~10.255.255.255</td>
<td style="text-align:center">127.0.0.0~127.255.255.255</td>
</tr>
<tr>
<td style="text-align:center">B类</td>
<td style="text-align:center">128.0.0.0~191.255.255.255</td>
<td style="text-align:center">172.16.0.0~172.31.255.255</td>
<td style="text-align:center">169.254.0.0~169.254.255.255</td>
</tr>
<tr>
<td style="text-align:center">C类</td>
<td style="text-align:center">192.0.0.0~223.255.255.255</td>
<td style="text-align:center">192.168.0.0~192.168.255.255</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">D类</td>
<td style="text-align:center">224.0.0.0-239.255.255.255</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">E类</td>
<td style="text-align:center">240.0.0.0~255.255.255.255</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>私有地址就是在互联网上不使用，而被用在局域网络中的地址 </p>
</li>
<li><p><strong>单播地址</strong>：A类，B类和C类地址</p>
</li>
<li><p><strong>多播地址</strong>：D类地址</p>
</li>
<li><p>224.0.0.0代表组地址，用在IGMP查询报文中</p>
</li>
<li><p>224. 0.0.1 代表“该子网内的所有主机”，用在IGMP的查询报文</p>
</li>
<li><p>224.0.0.2 代表“该子网内的所有路由器组”</p>
</li>
<li><p>224.0.1.1 用作网络时间协议NTP</p>
</li>
<li><p>224.0.0.9 用作RIP-2</p>
</li>
<li><p>224.0.1.2 用作SGI公司的dogfight应用</p>
</li>
</ul>
<p><strong>广播地址</strong></p>
<ul>
<li><p>主机地址全为1的IP地址为广播地址</p>
</li>
<li><p>本地广播：在本网络内的广播</p>
</li>
<li><p>直接广播：不同网络之间的广播</p>
</li>
</ul>
<p><strong>特殊IP地址</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">net-id</th>
<th style="text-align:center">host-id</th>
<th style="text-align:center">源地址使用</th>
<th style="text-align:center">目的地址使用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">不可</td>
<td style="text-align:center">本网络本主机(DHCP协议)</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">host-id</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">不可</td>
<td style="text-align:center">本网络的某个主机(host-id)</td>
</tr>
<tr>
<td style="text-align:center">全1</td>
<td style="text-align:center">全1</td>
<td style="text-align:center">不可</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">广播地址（在本网络广播，即路由器不转发）</td>
</tr>
<tr>
<td style="text-align:center">net-id</td>
<td style="text-align:center">全1</td>
<td style="text-align:center">不可</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">广播地址(对net-id上的所有主机进行广播)</td>
</tr>
<tr>
<td style="text-align:center">127</td>
<td style="text-align:center">非全0或全1的任何数</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">环回地址：本主机进程之间的通信</td>
</tr>
</tbody>
</table>
</div>
<h2 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h2><p>从主机号借用若干位作为子网号，两级IP地址变成了三级IP地址：网络号、子网号和主机号</p>
<p>数据报到达路由器后，路由器通过子网掩码来确定子网，将数据转发到子网到达目的主机</p>
<p><img src="IP地址及子网掩码.png" width="60%" height="60%" /></p>
<p>为了便于查找路由表，不划分子网时也使用子网掩码</p>
<ul>
<li><p>A类地址默认子网掩码：255.0.0.0</p>
</li>
<li><p>B类地址默认子网掩码：255.255.0.0</p>
</li>
<li><p>C类地址默认子网掩码：255.255.255.0</p>
</li>
</ul>
<h2 id="为什么同时需要IP地址和MAC地址？"><a href="#为什么同时需要IP地址和MAC地址？" class="headerlink" title="为什么同时需要IP地址和MAC地址？"></a>为什么同时需要IP地址和MAC地址？</h2><ul>
<li>如果只用MAC地址，网桥在学习到MAC地址前，必须向全世界发送包，将会造成巨大的网络流量，并且表格难以维护，超过网桥所能承受的极限。</li>
<li>如果只使用IP地址，网络中的路由器会隔断网络，在以太网发送IP包时，“下一个路由器”只能有MAC地址来确定，IP地址无法确定。</li>
<li>IP地址的作用很重要的一部分就是<strong>屏蔽链路层的差异</strong>，因为它是一个逻辑地址，所以可以适应于多种链路；</li>
<li>以太网这种<strong>链路层组网</strong>方式中，要通过mac地址来通信，其实ip协议完全可以运行于串口（通常运行slip或ppp等链路层协议）等其他形式的链路之上，这时并不需要一个mac地址</li>
<li>在<strong>局域网</strong>中两台电脑之间传输数据包用MAC地址即可识别</li>
<li>而<strong>通过路由器访问互联网</strong> ，传输数据包中的MAC地址就转成路由器的MAC地址。此时就要靠IP来识别，当我要<strong>换了一台路由器</strong>时候，只要我的IP地址不变，要跟我们传输数据的对象只要记住IP地址即可与我们通信，而不需记住我们的mac地址。</li>
</ul>
<h1 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h1><p>地址解析协议ARP（Address Resolution Protocol）</p>
<p>ARP 是根据IP地址获取MAC地址的一种协议，  工作在数据链路层与网络层之间  </p>
<p><img src="ARP.png" width="60%" height="60%" /></p>
<ul>
<li>IP地址和MAC地址都具有唯一性，只有IP地址具有<strong>层次性</strong>（网段）</li>
<li>当主机要发送一个IP包的时候，会首先查一下自己的<strong>ARP高速缓存</strong>（就是一个IP-MAC地址对应表缓存）。</li>
<li>如果查询的IP－MAC值对不存在，那么主机就向网络发送一个<strong>ARP协议广播包</strong>，这个广播包里面就有待查询的IP地址</li>
<li>收到这份广播的包的所有主机都会<strong>查询自己的IP地址</strong></li>
<li>如果收到广播包的某一个主机发现自己符合条件，那么就准备好一个<strong>包含自己的MAC地址</strong>的ARP包传送给发送ARP广播的主机。</li>
</ul>
<h2 id="ARP报文字段"><a href="#ARP报文字段" class="headerlink" title="ARP报文字段"></a>ARP报文字段</h2><p><img src="ARP字段.png" width="60%" height="60%" /></p>
<ul>
<li><p><strong>以太网帧类型</strong>：0x0806</p>
</li>
<li><p><strong>硬件类型</strong>：1表示以太网地址</p>
</li>
<li><p><strong>协议类型</strong>：表示要映射的协议地址类型。值为0x0800，表示IP地址</p>
</li>
<li><p><strong>硬件地址长度和协议地址长度</strong>分别指出硬件地址和协议地址的长度，以字节为单位。对于以太网上IP地址的ARP请求或应答来说，它们的值分别为6和4。</p>
</li>
<li><p><strong>操作字段：</strong>指出四种操作类型，ARP请求（值为1）、ARP应答（值为2）、RARP请求（值为3）和RARP应答（值为4）</p>
</li>
</ul>
<p>以太网目的地址为全1的广播地址，以太网源地址和发送端以太网地址相同。</p>
<h2 id="ARP请求响应报文"><a href="#ARP请求响应报文" class="headerlink" title="ARP请求响应报文"></a>ARP请求响应报文</h2><p><strong>1 ARP request(ARP请求)</strong></p>
<p><img src="ARPrequest报文.png" width="60%" height="60%" /></p>
<p><strong>2 ARP replay(ARP响应)</strong></p>
<p><img src="ARPreplay报文.png" width="60%" height="60%" /></p>
<h2 id="ARP缓存表"><a href="#ARP缓存表" class="headerlink" title="ARP缓存表"></a>ARP缓存表</h2><p>ARP是借助ARP请求与ARP响应两种类型的包确定MAC地址</p>
<ul>
<li>主机A为了获得主机B的MAC地址，起初要通过<strong>广播</strong>发送一个ARP请求包。这个包中包含了想要了解其MAC地址的主机IP地址。</li>
<li>ARP的请求包会被这同一个链路上所有的主机和路由器解析。如果ARP请求包中的目标IP地址与自己的IP地址一致，那么这个节点就将自己的MAC地址塞入ARP响应包返回给主机A。</li>
<li>由此，可以通过ARP从IP地址获得MAC地址，实现链路内的IP通信。</li>
<li>如果每发送一个IP数据报都要进行一次ARP请求以确定MAC地址，那将会造成不必要的网络流量，因此，通常的做法是<strong>把获取到的MAC地址缓存一段时间</strong>。</li>
<li>即把第一次通过ARP获取到的MAC地址作为IP对MAC的映射关系记忆到一个<strong>ARP缓存表</strong>中，下一次再向这个IP地址发送数据报时不需再重新发送ARP请求，而是直接使用这个缓存表当中的MAC地址进行数据报的发送。</li>
<li>每执行一次ARP，其对应的缓存内容都会被清除。高速缓存中每一项的生存时间一般为<strong>20分钟</strong></li>
</ul>
<h1 id="RARP协议"><a href="#RARP协议" class="headerlink" title="RARP协议"></a>RARP协议</h1><p>逆地址解析协议PARP（Reverse Address Resolution Protocol）</p>
<p>从MAC地址定位IP地址</p>
<ul>
<li>对于嵌入式设备，会遇到没有任何输入接口或无法通过DHCP动态获取IP地址的情况。需要RARP服务器来注册设备的MAC地址及其IP地址。</li>
<li>RARP分组的格式与ARP分组基本一致。主要的差别是RARP<strong>请求或应答的帧类型代码为0x8035</strong>，<strong>而且RARP请求的操作代码为3，应答操作代码为4</strong>。</li>
<li>ARP，RARP请求以广播方式传送，应答一般是单播(unicast)传送的</li>
</ul>
<h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><p>ICMP协议（Internet Control Message Protocol，网际控制报文协议）</p>
<p>IP协议并不是一个可靠的协议，它不保证数据被送达，那么，自然的，<strong>保证数据送达</strong>的工作应该由其他的模块来完成。其中一个重要的模块就是<strong>ICMP(网络控制报文)协议</strong>。ICMP不是高层协议，而是IP层的协议。当传送IP数据包发生错误。比如主机不可达，路由不可达等等，ICMP协议将会把错误信息封包，然后传送回给主机。给主机一个处理错误的机会</p>
<p>ICMP报文是在IP数据报内部被传输的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br><span class="line">tracert www.baidu.com  # 侦测主机到目的主机之间所经路由情况</span><br></pre></td></tr></table></figure>
<p>Ping发送一个ICMP，回声请求消息给目的地并报告是否收到所希望的ICMP echo （ICMP回声应答）。它是用来检查网络是否通畅或者网络连接速度的命令。<br>原理：利用网络上机器IP地址的唯一性，给目标IP地址发送一个数据包，再要求对方返回一个同样大小的数据包来确定两台网络机器是否连接相通，时延是多少。</p>
<h2 id="ICMP报文"><a href="#ICMP报文" class="headerlink" title="ICMP报文"></a>ICMP报文</h2><p><img src="ICMP报文.png" width="60%" height="60%" /></p>
<p>不同类型由报文中的类型字段和代码字段来共同决定</p>
<p><strong>查询报文</strong><br>类型8 代码0：请求回显（ping请求）</p>
<p><img src="ICMP响应报文.png" width="60%" height="60%" /></p>
<p><strong>响应报文</strong><br>类型0 代码0：回显应答(Ping应答）<br><img src="ICMP响应报文2.png" width="60%" height="60%" /></p>
<ul>
<li><strong>0 回送应答（Echo Reply）</strong></li>
<li>3 目标不可达（Destination Unreachable）</li>
<li>4 原点抑制（Source Quench）</li>
<li>5 重定向或改变路由（Redirect）</li>
<li><strong>8 回送请求（Echo Request）</strong></li>
<li>9 路由器公告（Router Advertisement）</li>
<li>10 路由器请求（Router Solicitation）</li>
<li><strong>11 超时（Time Exceeded）</strong></li>
<li>17 地址子网请求（Address Mask Request）</li>
<li>18 地址子网应答（Address Mask Reply）</li>
</ul>
<h1 id="IGMP协议"><a href="#IGMP协议" class="headerlink" title="IGMP协议"></a>IGMP协议</h1><p>IGMP协议（Internet Group Management Protocol，网际组管理协议），用于主机与路由器之间交互信息，IGMP有固定的报文长度，没有可选数据</p>
<ul>
<li>所有要加入组播组的主机和所有连接到有组播主机的子网中的路由器都需支持IGMP协议</li>
<li>IGMP消息不能被路由器转发，只限制在本地网络内</li>
<li>IGMP报文的TTL值始终为1</li>
</ul>
<h2 id="IGMP版本"><a href="#IGMP版本" class="headerlink" title="IGMP版本"></a>IGMP版本</h2><ul>
<li>IGMP的版本目前有V1/V2/V3三种<br> RFC 1112 — IGMPv1<br> RFC 2236 — IGMPv2<br> RFC 3376 — IGMPv3</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">IGMPv1</th>
<th style="text-align:center">IGMPv2</th>
<th style="text-align:center">IGMPv3</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>查询器选举</strong></td>
<td style="text-align:center">依靠上层路由协议</td>
<td style="text-align:center">自己选举</td>
<td style="text-align:center">自己选举</td>
</tr>
<tr>
<td><strong>成员离开方式</strong></td>
<td style="text-align:center">默默离开</td>
<td style="text-align:center">主动发出离开报文</td>
<td style="text-align:center">主动发出离开报文</td>
</tr>
<tr>
<td><strong>特定组查询</strong></td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td><strong>指定源、组加入</strong></td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
</tbody>
</table>
</div>
<h2 id="多播路由器"><a href="#多播路由器" class="headerlink" title="多播路由器"></a>多播路由器</h2><p><strong>加入一个多播组</strong><br>一个主机通过组地址和接口来识别一个多播组。主机必须保留一个表，此表中包含所有至少含有一个进程的多播组以及多播组中的进程数量。</p>
<p>多播路由器使用IGMP报文来记录与该路由器相连网络中组成员的变化情况。使用规则如下：<br>1)  当第一个进程<strong>加入一个组</strong>时，<strong>主机就发送一个IGMP报告</strong>。如果一个主机的多个进程加入同一组，只发送一个IGMP报告。这个报告被发送到进程加入组所在的同一接口上。</p>
<p>2) 进程<strong>离开一个组</strong>时，主机<strong>不发送IGMP报告</strong>，即便是组中的最后一个进程离开。主机知道在确定的组中已不再有组成员后，在随后收到的IGMP查询中就不再发送报告报文。</p>
<p>3) <strong>多播路由器定时发送IGMP查询</strong>来了解是否还有任何主机包含有属于多播组的进程。多播路由器必须向每个接口发送一个IGMP查询。因为路由器希望主机对它加入的每个多播组均发回一个报告，因此<strong>IGMP查询报文中的组地址被设置为0</strong>。</p>
<p>4) <strong>主机通过发送IGMP报告来响应一个IGMP查询</strong>，对每个至少还包含一个进程的组均要发回IGMP报告。</p>
<p>使用这些查询和报告报文，多播路由器对每个接口保持一个表，表中记录接口上至少还包含一个主机的多播组。当路由器收到要转发的多播数据报时，它只将该数据报转发到（使用相应的多播链路层地址）还拥有属于那个组主机的接口上。</p>
<h2 id="IGMP-报文"><a href="#IGMP-报文" class="headerlink" title="IGMP 报文"></a>IGMP 报文</h2><p><img src="IGMP报文.png" width="60%" height="60%" /></p>
<ul>
<li>IGMP<strong>类型为1</strong>说明是由多播路由器发出的查询报文，<strong>为2</strong>说明是主机发出的报告报文。</li>
<li>检验和的计算和ICMP协议相同。</li>
<li>组地址为D类IP地址。在查询报文中组地址设置为0，在报告报文中组地址为要参加的组地址。</li>
</ul>
<p>IGMPv1的查询与响应过程如下：</p>
<ul>
<li>IGMP查询器周期性地向共享网段内所有主机以<strong>组播方式</strong>（目的地址为224.0.0.1）发送“成员关系<strong>查询</strong>”报文（组地址为0）。</li>
<li>网络内所有主机都接收到该查询消息，如果某主机对任意组播组G感兴趣，则发送“成员关系<strong>报告</strong>”报文（其中携带组播组G的地址）来宣告自己将加入该组播组。</li>
<li>经过查询/响应过程后，IGMP路由器了解到本网络内存在组播组G对应的接收者，生成（*，G）组播转发表项并依此作为组播信息的转发依据。（*表示组播组成员，G表示某个组播组）。</li>
</ul>
<h1 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h1><p>OSPF(Open Shortest Path First开放式最短路径优先）  </p>
<ul>
<li><p>是一个内部网关协议(Interior Gateway Protocol，简称IGP）   </p>
</li>
<li><p>是目前广泛使用的一种<strong>动态路由协议</strong>，属于链路状态路由协议，运作于自治系统内部    </p>
</li>
<li><p>著名的迪克斯加算法被用来计算最短路径树</p>
</li>
<li><p>OSPF支持负载均衡和基于服务类型的选路</p>
</li>
<li><p>也支持多种路由形式，如特定主机路由和子网路由等。   </p>
</li>
</ul>
<h1 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h1><p><strong>RIP(Routing Information Protocol, 路由信息协议）</strong></p>
<ul>
<li><p>是一种内部网关协议（IGP），是一种<strong>动态路由选择协议</strong>，用于自治系统 (autonomous system,AS）   内的路由信息的传递</p>
</li>
<li><p>RIP协议基于距离矢量算法（DistanceVectorAlgorithms）</p>
</li>
</ul>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>协议</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | 自动遍历测试之Monkey工具</title>
    <url>/posts/appium-automatic-traversal-test-monkey/</url>
    <content><![CDATA[<p>某些移动APP业务线多，流程复杂，且产品迭代速度快，在回归测试中涉及到大量用例，工作量大，解决这个问题的一个可行方法是使用自动遍历测试，可以降低用例维护成本，尽可能的自动化覆盖回归业务。<br><a id="more"></a></p>
<h1 id="自动遍历工具"><a href="#自动遍历工具" class="headerlink" title="自动遍历工具"></a>自动遍历工具</h1><ul>
<li>google android原生monkey、 app crawler</li>
<li>百度 smartmonkey</li>
<li>腾讯 newmonkey</li>
<li>smart_monkey</li>
<li>macaca的NoSmoke</li>
<li>头条的 zhangzhao maxim</li>
<li>seveniruby appcrawler</li>
</ul>
<p>下面介绍android原生monkey工具</p>
<h1 id="Android-monkey"><a href="#Android-monkey" class="headerlink" title="Android monkey"></a>Android monkey</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>monkey是开发用来进行压力测试的工具，测试activity的性能。monkey向应用程序发送<strong>伪随机的用户事件流</strong>（如按键、触屏、滑动等操作），对应用程序进行随机操作，它的这种特性可以用来做自动遍历测试。</p>
<p>Android SDK提供了Monkey工具，使用<code>adb shell monkey</code>运行</p>
<h2 id="常用Monkey命令"><a href="#常用Monkey命令" class="headerlink" title="常用Monkey命令"></a>常用Monkey命令</h2><p><strong>对所有包随机操作100次</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey 100</span><br></pre></td></tr></table></figure>
<p><strong>对指定包随机操作100次</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p com.xueqiu.android 100</span><br></pre></td></tr></table></figure>
<p><strong>时间种子</strong>，如果想重现一样的测试路径，两次测试的-s参数应相同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p com.xueqiu.android -s 20 100</span><br></pre></td></tr></table></figure>
<p><strong>打印详细日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p com.xueqiu.android -vv -s 20 100</span><br></pre></td></tr></table></figure>
<p><img src="monkey_vv.png" alt="img"><br>可以看到对雪球app的操作日志，其中</p>
<ul>
<li>0：触摸事件百分比，参数—pct-touch</li>
<li>1：滑动事件百分比，参数—pct-motion</li>
<li>2：缩放事件百分比，参数—pct-pinchzoom</li>
<li>3：轨迹球事件百分比，参数—pct-trackball</li>
<li>4：屏幕旋转事件百分比，参数—pct-rotation</li>
<li>5：基本导航事件百分比，参数—pct-nav</li>
<li>6：主要导航事件百分比，参数—pct-majornav</li>
<li>7：系统事件百分比，参数—pct-syskeys</li>
<li>8：Activity启动事件百分比，参数—pct-appswitch</li>
<li>9：键盘翻转事件百分比，参数—pct-flip</li>
<li>10：其他事件百分比，参数—pct-anyevent</li>
</ul>
<p><strong>事件百分比</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p com.xueqiu.android --pct-touch 10 1000</span><br></pre></td></tr></table></figure>
<p>其他事件类似</p>
<p><strong>时间延迟</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p com.xueqiu.android --throttle 5000 100</span><br></pre></td></tr></table></figure>
<p>每次随机事件的时间间隔5000毫秒</p>
<h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><ul>
<li>—pct-touch：触摸事件，比如点击</li>
<li>—pct-motion：动作事件，比如滑动(直线)</li>
<li>—pct-trackball：轨迹事件，比如移动+点击,曲线滑动</li>
<li>—pct-majornav：主要导航事件，比如回退按键、菜单按键:</li>
</ul>
<h1 id="monkey-使用实例"><a href="#monkey-使用实例" class="headerlink" title="monkey 使用实例"></a>monkey 使用实例</h1><ol>
<li>启动模拟器或者连接真机</li>
<li>自动遍历雪球APP</li>
</ol>
<p>随机操作100次，触摸事件百分比50%，每次随机事件的时间间隔1s</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p com.xueqiu.android -vv --pct-touch 50 --throttle 1000 100</span><br></pre></td></tr></table></figure>
<p><img src="adb_monkey.png" alt="img"></p>
<center><b>--THE END--<b></center>]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>自动遍历测试</tag>
        <tag>Monkey</tag>
      </tags>
  </entry>
  <entry>
    <title>解决网易mumu模拟器忘记PIN码</title>
    <url>/posts/android-mumu-emulator-pin-code/</url>
    <content><![CDATA[<p>网易mumu模拟器忘记PIN码</p>
<a id="more"></a>
<ol>
<li><strong>连接模拟器</strong></li>
<li><strong>adb shell 进入手机</strong></li>
<li><strong>cd data/system</strong></li>
<li><strong>删除*.key文件</strong></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;adb connect 127.0.0.1:7555</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">connected to 127.0.0.1:7555</span><br><span class="line"></span><br><span class="line">C:\Users\10287&gt;adb shell</span><br><span class="line">root@x86:/ <span class="comment"># cd data</span></span><br><span class="line">root@x86:/data <span class="comment"># cd system</span></span><br><span class="line">root@x86:/data/system <span class="comment"># ls</span></span><br><span class="line">appops.xml</span><br><span class="line">apps-gson-info</span><br><span class="line">batterystats-daily.xml</span><br><span class="line">batterystats.bin</span><br><span class="line">called_pre_boots.dat</span><br><span class="line">device_policies.xml</span><br><span class="line">dropbox</span><br><span class="line">entropy.dat</span><br><span class="line">framework_atlas.config</span><br><span class="line">gatekeeper.password.key</span><br><span class="line">gatekeeper.pattern.key</span><br><span class="line">heapdump</span><br><span class="line">ifw</span><br><span class="line">inputmethod</span><br><span class="line">install_sessions</span><br><span class="line">job</span><br><span class="line">last-fstrim</span><br><span class="line">locksettings.db</span><br><span class="line">locksettings.db-shm</span><br><span class="line">locksettings.db-wal</span><br><span class="line">ndebugsocket</span><br><span class="line">netstats</span><br><span class="line">notification_log.db</span><br><span class="line">notification_log.db-journal</span><br><span class="line">package-usage.list</span><br><span class="line">packages.list</span><br><span class="line">packages.xml</span><br><span class="line">procstats</span><br><span class="line">recent_images</span><br><span class="line">recent_tasks</span><br><span class="line">seapp_hash</span><br><span class="line">shared_prefs</span><br><span class="line">sync</span><br><span class="line">touch_sound_has_been_set</span><br><span class="line">uiderrors.txt</span><br><span class="line">usagestats</span><br><span class="line">users</span><br><span class="line">root@x86:/data/system <span class="comment"># rm gatekeeper.password.key</span></span><br><span class="line">root@x86:/data/system <span class="comment"># rm gatekeeper.pattern.key</span></span><br><span class="line">root@x86:/data/system <span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>模拟器</tag>
        <tag>网易mumu模拟器</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | Android WebView测试</title>
    <url>/posts/appium-android-webview/</url>
    <content><![CDATA[<p>混合应用中包含 Web 视图的应用，在 <strong>App自动化测试 | Appinum 介绍及环境安装</strong> 中介绍了appium支持WebView测试，本文将分享Android 混合页面的测试方法。</p>
<a id="more"></a>
<h1 id="WebView测试环境准备"><a href="#WebView测试环境准备" class="headerlink" title="WebView测试环境准备"></a>WebView测试环境准备</h1><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><ul>
<li><p>被测浏览器：</p>
<p>iOS：Safari</p>
<p>Android：Chrome，Chromium，Browser (自带浏览器)</p>
</li>
</ul>
<h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><ul>
<li>安装 Chrome浏览器(或chromium)，可以访问<a href="https://www.google.com/">https://www.google.com</a></li>
<li>下载手机浏览器webview版本对应的 driver<ul>
<li>webview和driver版本对应关系：<a href="https://raw.githubusercontent.com/appium/appium-chromedriver/master/config/mapping.json">https://raw.githubusercontent.com/appium/appium-chromedriver/master/config/mapping.json</a></li>
<li>driver下载：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>国内镜像地址 : <a href="https://npm.taobao.org/mirrors/chromedriver/">https://npm.taobao.org/mirrors/chromedriver/</a></li>
<li>appium github: <a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md">https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md</a></li>
</ul>
</li>
</ul>
<h2 id="查看手机浏览器版本"><a href="#查看手机浏览器版本" class="headerlink" title="查看手机浏览器版本"></a>查看手机浏览器版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell pm list package | grep webview</span><br><span class="line">adb shell pm dump com.android.browser | grep version</span><br><span class="line">adb shell pm dump com.android.chrome | grep version</span><br><span class="line">adb shell pm dump com.android.webview | grep version</span><br></pre></td></tr></table></figure>
<p>查看手机browser和chrome版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\10287&gt;adb shell pm list packages|findstr browser</span><br><span class="line">package:com.android.browser</span><br><span class="line"></span><br><span class="line">C:\Users\10287&gt;adb shell pm dump com.android.browser | findstr version</span><br><span class="line">      versionCode=22 targetSdk=22</span><br><span class="line">      versionName=5.1.1-500200323</span><br><span class="line"></span><br><span class="line">C:\Users\10287&gt;adb shell pm dump com.android.chrome | findstr version</span><br><span class="line">      versionCode=398713200 targetSdk=29</span><br><span class="line">      versionName=80.0.3987.132</span><br><span class="line">            enabled=true targetSdkVersion=29 versionCode=398713200</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="查看手机webview版本"><a href="#查看手机webview版本" class="headerlink" title="查看手机webview版本"></a>查看手机webview版本</h2><p>在手机上设置中查看 Android System WebView应用版本</p>
<p><img src="webview_version.png" alt="img"></p>
<h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><ul>
<li><p>desirecapability</p>
</li>
<li><ul>
<li>“chromedriverExecutable” = “指定driver地址”</li>
<li>“browser” = “Browser” 或者“browser” = ”Chrome“</li>
</ul>
</li>
</ul>
<h1 id="WebView元素定位"><a href="#WebView元素定位" class="headerlink" title="WebView元素定位"></a>WebView元素定位</h1><p>1、连接手机/模拟器</p>
<p><img src="adb_devices.png" alt="img"></p>
<p>手机打开google浏览器，并进入百度网页：<a href="https://m.baidu.com">https://m.baidu.com</a></p>
<p>2、Chrome浏览器输入地址： <a href="chrome://inspect">chrome://inspect</a></p>
<p>可以看到电脑连接的设备名以及打开的手机浏览器</p>
<p><img src="chrome_inspect.png" alt="img"></p>
<p>点击inspect</p>
<p><img src="chrome_baidu.png" alt="img"></p>
<p>这样就可以定位到浏览器元素。</p>
<h1 id="Android混合页面测试"><a href="#Android混合页面测试" class="headerlink" title="Android混合页面测试"></a>Android混合页面测试</h1><p>文档：<a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews?hl=zh-cn">https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews?hl=zh-cn</a></p>
<p>测试步骤：</p>
<ol>
<li>打开ApiDemos</li>
<li>进入WebView页面</li>
<li>点击”i am a link”</li>
<li>退出应用</li>
</ol>
<p><img src="webview_apidemos.png" alt="img"></p>
<p>下载ApiDemos-debug.apk</p>
<ul>
<li><a href="https://github.com/appium/appium/blob/master/sample-code/apps/ApiDemos-debug.apk">https://github.com/appium/appium/blob/master/sample-code/apps/ApiDemos-debug.apk</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.mobileby <span class="keyword">import</span> MobileBy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBrowser</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;</span><br><span class="line">        <span class="string">&#x27;platformName&#x27;</span>: <span class="string">&#x27;android&#x27;</span>,        </span><br><span class="line">        <span class="string">&#x27;platformVersion&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;appPackage&#x27;</span>: <span class="string">&#x27;io.appium.android.apis&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;appActivity&#x27;</span>: <span class="string">&#x27;io.appium.android.apis.ApiDemos&#x27;</span>,        </span><br><span class="line">        <span class="string">&#x27;deviceName&#x27;</span>: <span class="string">&#x27;CUYDU19626004019&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;noReset&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chromedriverExecutable&#x27;</span>: <span class="string">&#x27;D:/testing_tools/chromedriver85/chromedriver.exe&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        self.driver.quit()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_webview</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.find_element_by_accessibility_id(<span class="string">&quot;Views&quot;</span>).click()</span><br><span class="line">        webview =<span class="string">&quot;WebView&quot;</span></span><br><span class="line">        print(self.driver.contexts)</span><br><span class="line">        self.driver.find_element_by_android_uiautomator(<span class="string">&#x27;new UiScrollable(new UiSelector().&#x27;</span></span><br><span class="line">                                                        <span class="string">&#x27;scrollable(true).instance(0)).&#x27;</span></span><br><span class="line">                                                        <span class="string">f&#x27;scrollIntoView(new UiSelector().text(&quot;<span class="subst">&#123;webview&#125;</span>&quot;)&#x27;</span></span><br><span class="line">                                                        <span class="string">&#x27;.instance(0));&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">        print(self.driver.contexts)</span><br><span class="line">        self.driver.switch_to.context(self.driver.contexts[<span class="number">1</span>])</span><br><span class="line">        print(self.driver.current_context)</span><br><span class="line">        self.driver.find_element(MobileBy.ID, <span class="string">&#x27;i am a link&#x27;</span>).click()</span><br></pre></td></tr></table></figure>
<center><b>--THE END--<b></center>


]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | Appium元素定位（二）</title>
    <url>/posts/appium-locator-uiautomator/</url>
    <content><![CDATA[<p>UiAutomator定位用于Android APP的元素定位，使用UI Automator API（UISelector类）来搜索特定元素。 Appium将Java代码作为字符串发送到服务器实现对应用程序的交互。<br><a id="more"></a><br>UiAutomator是android的工作引擎，所以定位速度快。缺点是语法表达式复杂，容易写错。</p>
<p>可参考官方文档：<a href="https://developer.android.com/reference/android/support/test/uiautomator/UiSelector">https://developer.android.com/reference/android/support/test/uiautomator/UiSelector</a></p>
<p>下面将介绍UiSelector类一些常用接口使用方法。</p>
<h1 id="uiautomator定位方式"><a href="#uiautomator定位方式" class="headerlink" title="uiautomator定位方式"></a>uiautomator定位方式</h1><h2 id="通过-resource-id定位"><a href="#通过-resource-id定位" class="headerlink" title="通过 resource-id定位"></a>通过 resource-id定位</h2><ul>
<li><code>new UiSelector().resourceld(&quot;id&quot;)</code><h2 id="通过-classname定位"><a href="#通过-classname定位" class="headerlink" title="通过 classname定位"></a>通过 classname定位</h2></li>
<li><code>new UiSelector().className(&quot;className&quot;)</code><h2 id="通过-content-desc定位"><a href="#通过-content-desc定位" class="headerlink" title="通过 content-desc定位"></a>通过 content-desc定位</h2></li>
<li><code>new UiSelector().description(&quot;contenet-desc属性&quot;)</code><h2 id="通过文本定位"><a href="#通过文本定位" class="headerlink" title="通过文本定位"></a>通过文本定位</h2></li>
<li>text文本定位<ul>
<li><code>new UiSelector().text(&quot;text文本&quot;)</code></li>
</ul>
</li>
<li>textContains 模糊匹配<ul>
<li><code>new UiSelector().textContains(&quot;包含text文本&quot;)</code></li>
</ul>
</li>
<li>textStartsWith，以某个文本开头来匹配<ul>
<li><code>new UiSelector().textStartsWith(&quot;以text文本开头&quot;)</code></li>
</ul>
</li>
<li>正则表达式 textMatches 匹配<ul>
<li><code>new UiSelector().textMatches(&quot;正则表达式&quot;)</code><h2 id="组合定位"><a href="#组合定位" class="headerlink" title="组合定位"></a>组合定位</h2></li>
</ul>
</li>
<li>id与text属性组合      <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">id_text = <span class="string">&#x27;resourceld(&quot;com.baidu.yuedu:id/webbooktitle&quot;).text(&quot;textname&quot;)&#x27;</span></span><br><span class="line">driver.find_element_by_android_uiautomator(id_text).click()</span><br></pre></td></tr></table></figure></li>
<li>class与text属性组合  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_text=<span class="string">&#x27;className(&quot;android.widget.TextView&quot;).text(&quot;textname&quot;)&#x27;</span></span><br><span class="line">driver.find_element_by_android_uiautomator(class_text).click()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="父子元素、兄弟元素定位"><a href="#父子元素、兄弟元素定位" class="headerlink" title="父子元素、兄弟元素定位"></a>父子元素、兄弟元素定位</h2><h3 id="父子关系定位-childSelector"><a href="#父子关系定位-childSelector" class="headerlink" title="父子关系定位 childSelector"></a>父子关系定位 childSelector</h3><p>通过父元素找儿子元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">son = <span class="string">&#x27;resourceld(&quot;com.baidu.yuedu:id/rl_tabs&quot;).childSelector(text(&quot;股票&quot;))&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="兄弟定位-fromParent"><a href="#兄弟定位-fromParent" class="headerlink" title="兄弟定位 fromParent"></a>兄弟定位 fromParent</h3><p>通过相邻的兄弟元素定位，通过兄弟元素，找到同一父级元素下的子元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brother = <span class="string">&#x27;resourceld(&quot;com.baidu.yuedu:id/lefttitle&quot;).fromParent(text(&quot;用户&quot;))&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="滚动查找元素"><a href="#滚动查找元素" class="headerlink" title="滚动查找元素"></a>滚动查找元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(newUiSelector().text(&quot;查找的文本&quot;).instance(0));&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="uiautomator定位实例"><a href="#uiautomator定位实例" class="headerlink" title="uiautomator定位实例"></a>uiautomator定位实例</h1><p>跟 App自动化测试 | Appium元素定位（一）的测试过程一样，判断股票价格<br>测试过程：</p>
<ol>
<li>打开雪球app</li>
<li>点击搜索框</li>
<li>输入”招商银行”</li>
<li>选择</li>
<li>获取股价，并判断</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUiautomator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;6.0.1&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;127.0.0.1:7555&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;com.xueqiu.android&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;automationName&#x27;</span>] = <span class="string">&#x27;Uiautomator2&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;com.xueqiu.android.common.MainActivity&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;newCommandTimeout&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;noReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;dontStopAppOnReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;skipDeviceInitialization&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;unicodeKeyboard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;resetKeybBoard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_search</span>(<span class="params">self, searchkey, <span class="built_in">type</span>, price</span>):</span></span><br><span class="line">        self.driver.find_element_by_android_uiautomator(</span><br><span class="line">            <span class="string">&#x27;new UiSelector().resourceId(&quot;com.xueqiu.android:id/tv_search&quot;)&#x27;</span>).click()</span><br><span class="line">        self.driver.find_element_by_android_uiautomator(</span><br><span class="line">            <span class="string">&#x27;new UiSelector().resourceId(&quot;com.xueqiu.android:id/search_input_text&quot;)&#x27;</span>).send_keys(<span class="string">&quot;招商银行&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_android_uiautomator(<span class="string">&#x27;new UiSelector().text(&quot;SH600036&quot;)&#x27;</span>).click()</span><br><span class="line">        self.driver.find_element_by_android_uiautomator(<span class="string">&#x27;new UiSelector().text(&quot;SH600036&quot;)&#x27;</span>).click()</span><br><span class="line">        current_price = self.driver.find_element_by_android_uiautomator(</span><br><span class="line">            <span class="string">&#x27;new UiSelector().resourceId(&quot;com.xueqiu.android:id/stock_current_price&quot;)&#x27;</span>).text</span><br><span class="line">        print(current_price)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">float</span>(current_price) &gt; <span class="number">40</span></span><br></pre></td></tr></table></figure>
<p>执行结果：<br><img src="test_uiautomator.png" alt="img"></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>元素定位</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | Appium元素定位（一）</title>
    <url>/posts/appium-locator/</url>
    <content><![CDATA[<p>APP元素定位方式与Web元素定位方式大体相同，APP自动化测试中最重要的一部分是对元素进行定位，实现对APP的控制交互。Appium常用的定位方式有Accessibility ID、Class name、ID、Name、XPath、Android UiAutomator（UiAutomator2)等。<br><a id="more"></a></p>
<h1 id="ID定位"><a href="#ID定位" class="headerlink" title="ID定位"></a>ID定位</h1><p>使用resource-id属性定位，iOS中使用name属性。<br><img src="locator_id.png" alt="img"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elem = driver.find_element_by_id(<span class="string">&quot;com.xueqiu.android:id/enter_stock_fund&quot;</span>)</span><br><span class="line">elem = driver.find_element(MobileBy.ID,<span class="string">&quot;com.xueqiu.android:id/enter_stock_fund&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="Accessibility-ID定位"><a href="#Accessibility-ID定位" class="headerlink" title="Accessibility ID定位"></a>Accessibility ID定位</h1><p>在写Android和iOS自动化测试用例时，可以使用这种定位方法，使代码可重用， 实现跨平台自动化测试。iOS的Accessibility ID为UI元素的名称， Android的Accessibility ID为“ content-desc”属性值。<br><img src="locator_accessibility.png" alt="img"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elem = driver.find_element_by_accessibility_id(<span class="string">&quot;Accessibility&quot;</span>)</span><br><span class="line">elem = driver.find_element(MobileBy.ACCESSIBILITY_ID,<span class="string">&quot;Accessibility&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="Class-name定位"><a href="#Class-name定位" class="headerlink" title="Class name定位"></a>Class name定位</h1><p>使用控件的class属性<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elem = driver.find_element_by_class_name(<span class="string">&quot;classname&quot;</span>)</span><br><span class="line">elem = driver.find_element(MobileBy.CLASS_NAME,<span class="string">&quot;classname&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="Xpath定位"><a href="#Xpath定位" class="headerlink" title="Xpath定位"></a>Xpath定位</h1><p>APP Xpath定位与Web元素Xpath定位一样，Xpath定位语法可参考文章 <a href="https://hiyong.gitee.io/posts/selenium-xpath-and-CSS-Selector-locator/">Web自动化测试 | xpath &amp; CSS Selector定位</a>，可以通过父结点定位子结点、子结点定位父结点、子结点定位兄弟结点、 爷爷结点定位孙子结点。Xpath定位语法参考：<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">https://www.w3school.com.cn/xpath/xpath_syntax.asp</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">nodename</td>
<td style="text-align:left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td style="text-align:left">/</td>
<td style="text-align:left">从根节点选取。</td>
</tr>
<tr>
<td style="text-align:left">//</td>
<td style="text-align:left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">选取当前节点。</td>
</tr>
<tr>
<td style="text-align:left">..</td>
<td style="text-align:left">选取当前节点的父节点。</td>
</tr>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">选取属性。</td>
</tr>
</tbody>
</table>
</div>
<p>点击雪球APP “行情”<br><img src="locator_xpath.png" alt="img"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elem = driver.find_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;行情&quot;]&#x27;</span>).click()</span><br><span class="line">elem.click()</span><br></pre></td></tr></table></figure></p>
<h1 id="Toast定位"><a href="#Toast定位" class="headerlink" title="Toast定位"></a>Toast定位</h1><h2 id="toast介绍"><a href="#toast介绍" class="headerlink" title="toast介绍"></a>toast介绍</h2><ul>
<li>Toast是手机应用消息提示框，为当前视图显示一个浮动弹出框</li>
<li>Toast类的思想：尽可能不引人注意，同时还向用户显示信息，希望他们看到</li>
<li>Toast显示的时间有限, Toast会根据用户设置的显示时间后自动消失。</li>
<li>Toast本身是个系统级别的控件，它归属于系统 settings，当一个app发送消息的时候，不是自己造出来的这个弹框，它是发给系统，由系统统一进行弹框，这类的控件不在app内，需要特殊的控件识别方法。</li>
<li>Appium使用 uiautomator底层的机制来分析抓取 Toast，并且把 Toast放到控件树里面，但本身并不属于控件。</li>
<li>必须使用 xpath查找<ul>
<li>//*[@class=’android.widget.Toast’]</li>
<li>//*[contains(@text, “xxxxx”)]<h2 id="toast定位"><a href="#toast定位" class="headerlink" title="toast定位"></a>toast定位</h2></li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>打开ApiDemos</li>
<li>进入Popup Menu页面</li>
<li>点击”search”</li>
<li>打印弹出toast内容</li>
</ol>
<p><img src="popup_toast.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.mobileby <span class="keyword">import</span> MobileBy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestToast</span>():</span></span><br><span class="line">    <span class="comment"># API Demos</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;</span><br><span class="line">            <span class="string">&#x27;platformName&#x27;</span>: <span class="string">&#x27;android&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;platformVersion&#x27;</span>: <span class="string">&#x27;6.0.1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;deviceName&#x27;</span>: <span class="string">&#x27;127.0.0.1:7555&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;appPackage&#x27;</span>: <span class="string">&#x27;io.appium.android.apis&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;appActivity&#x27;</span>: <span class="string">&#x27;io.appium.android.apis.view.PopupMenu1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;automationName&#x27;</span>: <span class="string">&#x27;Uiautomator2&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_toast</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.find_element_by_class_name(<span class="string">&quot;android.widget.Button&quot;</span>).click()</span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">&quot;//*[@text=&#x27;Search&#x27;]&quot;</span>).click()</span><br><span class="line">        <span class="comment"># print(self.driver.page_source)</span></span><br><span class="line">        print(self.driver.find_element(MobileBy.XPATH, <span class="string">&quot;//*[contains(@text,&#x27;Clicked popup&#x27;)]&quot;</span>).text)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Launching pytest with arguments test_toast.py::TestToast::test_toast in D:\ProgramWorkspace\TestingDemo\test_appium</span><br><span class="line"></span><br><span class="line">============================= test session starts =============================</span><br><span class="line">platform win32 -- Python 3.7.6, pytest-6.0.2, py-1.9.0, pluggy-0.13.1 -- D:\Anaconda3\python.exe</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">hypothesis profile &#x27;default&#x27; -&gt; database=DirectoryBasedExampleDatabase(&#x27;D:\\ProgramWorkspace\\TestingDemo\\test_appium\\.hypothesis\\examples&#x27;)</span><br><span class="line">rootdir: D:\ProgramWorkspace\TestingDemo\test_appium</span><br><span class="line">plugins: allure-pytest-2.8.12, hypothesis-5.5.4, arraydiff-0.3, assume-2.3.2, astropy-header-0.1.2, doctestplus-0.5.0, openfiles-0.4.0, remotedata-0.3.2, rerunfailures-9.1</span><br><span class="line">collecting ... collected 1 item</span><br><span class="line"></span><br><span class="line">test_toast.py::TestToast::test_toast </span><br><span class="line"></span><br><span class="line">============================= 1 passed in 37.07s ==============================</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line">PASSED                              [100%]Clicked popup menu item Search</span><br></pre></td></tr></table></figure>
<h1 id="APP自动化测试实例"><a href="#APP自动化测试实例" class="headerlink" title="APP自动化测试实例"></a>APP自动化测试实例</h1><p>测试过程：</p>
<ol>
<li>打开雪球app</li>
<li>点击搜索框</li>
<li>输入”招商银行”</li>
<li>选择</li>
<li>获取股价，并判断<br><img src="locator_xueqiu.png" alt="img"></li>
</ol>
<p>Note：</p>
<ol>
<li><p>实例使用的是网易mumu浏览器，开启后，使用adb命令：<code>adb connect 127.0.0.1:7555</code> 连接模拟器</p>
</li>
<li><p>执行代码前需要开启appium服务器</p>
<p><img src="appium.png" alt="img"></p>
</li>
</ol>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestXueQiu</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;6.0.1&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;127.0.0.1:7555&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;com.xueqiu.android&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;automationName&#x27;</span>] = <span class="string">&#x27;Uiautomator2&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;com.xueqiu.android.common.MainActivity&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;newCommandTimeout&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;noReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;dontStopAppOnReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;skipDeviceInitialization&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;unicodeKeyboard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;resetKeybBoard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_search</span>(<span class="params">self, searchkey, <span class="built_in">type</span>, price</span>):</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;com.xueqiu.android:id/tv_search&quot;</span>).click()</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).send_keys(<span class="string">&quot;招商银行&quot;</span>)</span><br><span class="line">        current_price = self.driver.find_element_by_xpath(<span class="string">&quot;//*[@text=&#x27;SH600036&#x27;]&quot;</span>).click()</span><br><span class="line">        current_price = self.driver.find_element_by_xpath(</span><br><span class="line">            <span class="string">&quot;//*[@text=&#x27;SH600036&#x27;]/../../..//*[@resource-id=&#x27;com.xueqiu.android:id/current_price&#x27;]&quot;</span>).text  </span><br><span class="line">        print(current_price)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">float</span>(current_price) &gt; <span class="number">40</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="test_xueqiu.png" alt="img"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>元素定位</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | App控件定位</title>
    <url>/posts/appium-android-controls/</url>
    <content><![CDATA[<p>本文将分享Android相关基础知识和Android APP控件定位工具的使用方法。<br><a id="more"></a></p>
<h1 id="Android基础知识"><a href="#Android基础知识" class="headerlink" title="Android基础知识"></a>Android基础知识</h1><h2 id="Android布局"><a href="#Android布局" class="headerlink" title="Android布局"></a>Android布局</h2><p>Android是通过容器的<strong>布局属性</strong>来管理子控件的位置关系（iOS去掉了布局的概念，直接用变量之间的相对关系完成位置的计算），把界面上所有的控件根据他们的间距的大小，摆放在正确的位置。布局是一种可用于放置很多<strong>控件</strong>的容器，通过多层<a href="https://developer.android.com/guide/topics/ui/declaring-layout?hl=zh-cn">布局</a>嵌套完成一些比较复杂的界面。</p>
<p>Android布局有LinearLayout(线性布局)、RelativeLayout(相对布局)、FrameLayout(帧布局)、AbsoluteLayout(绝对布局)、TableLayout(表格布局)、Grid layout(网格布局)、ConstraintLayout(约束布局)等。布局的内部除了放置控件外，也可以放置布局，通过多层布局的嵌套，我们就能够完成一些比较复杂的界面。</p>
<p><img src="android_layout.png" width="80%" height="80%" /></p>
<h2 id="Android四大组件"><a href="#Android四大组件" class="headerlink" title="Android四大组件"></a>Android四大组件</h2><p>Android四大基本组件分别是Activity，Service服务，Content Provider内容提供者，Broadcast Receiver广播接收器。</p>
<h3 id="1、activity"><a href="#1、activity" class="headerlink" title="1、activity"></a>1、activity</h3><ul>
<li>与用户交互的可视化界面</li>
<li>一个Activity通常就是一个单独的屏幕（窗口）</li>
<li>Activity之间通过Intent进行通信</li>
</ul>
<h3 id="2、Service"><a href="#2、Service" class="headerlink" title="2、Service"></a>2、Service</h3><ul>
<li>service 实现后台运行程序，在后台完成用户指定的操作</li>
<li>通常用于为其他组件提供后台服务或监控其他组件的运行状态。<h3 id="3、Content-Provider"><a href="#3、Content-Provider" class="headerlink" title="3、Content Provider"></a>3、Content Provider</h3></li>
<li>content provider 内容提供者，提供程序所需要的数据</li>
<li>只有需要在多个应用程序间共享数据才需要内容提供者，是不同应用程序间共享数据的唯一方式。<h3 id="4、Broadcast-Receiver"><a href="#4、Broadcast-Receiver" class="headerlink" title="4、Broadcast Receiver"></a>4、Broadcast Receiver</h3></li>
<li>监听外部事件的到来(比如来电)<h2 id="Android控件"><a href="#Android控件" class="headerlink" title="Android控件"></a>Android控件</h2></li>
</ul>
<p>常用的控件：</p>
<ul>
<li><p>TextView(文本控件)，EditText(可编辑文本控件)</p>
</li>
<li><p>Button(按钮)，imageButton(图片按钮)，ToggIeButton(开关按钮)</p>
</li>
<li><p>Image View(图片控件)</p>
</li>
<li><p>CheckBox(复选框控件), RadioButton(单选框控件)</p>
</li>
</ul>
<p>元素定位实际上就是定位控件，Android应用的层级结构使用xml编写，xml全名叫可扩展标记语言，类似于HTML，可以看作一个微型的数据库。android系统里安装的每一个app，其信息都被存到一个xml里。</p>
<p>xml定义了节点和属性，每个控件都有它的属性(resourceid, xpath, aid)，没有css属性（样式文件和布局xml文件是分开的）。</p>
<p>Android中提供了三种解析XML的方式：DOM(Document Object Model)、SAX(Simple API XML)以及Pull解析方式。DOM解析器在解析XML文档时，会把文档中的所有元素按照其出现的层次关系，解析成一个个Node对象(节点)，形成Dom树。DOM允许用户遍历文档树，访问父节点、子节点或者兄弟节点。每个节点具有特定的属性：</p>
<ul>
<li>clickable</li>
<li>content-desc</li>
<li>resource-id</li>
<li>text</li>
<li>bounds</li>
<li>…</li>
</ul>
<h1 id="App控件定位"><a href="#App控件定位" class="headerlink" title="App控件定位"></a>App控件定位</h1><p>对App控件的定位其实就是节点和属性的定位，下面介绍三种UI元素定位工具：</p>
<ul>
<li>Android App可以使用uiautomatorviewer工具进行定位，它是 sdk路径下的一个工具。</li>
<li>基于浏览器技术的weditor 工具</li>
<li>Appium inspector工具</li>
</ul>
<h2 id="uiautomatorviewer定位"><a href="#uiautomatorviewer定位" class="headerlink" title="uiautomatorviewer定位"></a>uiautomatorviewer定位</h2><p>电脑通过无线或者USB连接到手机设备后（或者连接到模拟机），双击uiautomatorviewer.bat打开uiautomatorviewer工具。</p>
<p><img src="uiautomatorviewer.png" width="80%" height="80%" /></p>
<p> 点击左上角第二个或者第三个图标获取当前手机APP页面，在右边可以看到app的xml结构树，可以获取到每个节点的详细属性。</p>
<p><img src="uiautomatorviewer2.png" width="80%" height="80%" /></p>
<h2 id="weditor"><a href="#weditor" class="headerlink" title="weditor"></a>weditor</h2><p>weditor是基于浏览器技术的UI查看器，直接在浏览器打开。</p>
<p>项目地址：<a href="https://github.com/alibaba/web-editor">https://github.com/alibaba/web-editor</a>。</p>
<p>环境要求Python3.6+，通过pip安装：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install -U weditor <span class="comment"># 会安装uiautomator2和facebook-wda两个库，分别支持android和iOS APP。</span></span><br></pre></td></tr></table></figure><br>在命令窗口输入如下命令运行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ weditor <span class="comment"># 启动server并打开浏览器</span></span><br></pre></td></tr></table></figure><br>启动后会在浏览器自动访问 <a href="http://localhost:17310">http://localhost:17310</a></p>
<p><img src="weditor.png" width="80%" height="80%" /></p>
<h2 id="Appium-inspector工具"><a href="#Appium-inspector工具" class="headerlink" title="Appium inspector工具"></a>Appium inspector工具</h2><p>打开appium，点击【启动服务器】</p>
<p><img src="appium.png" width="80%" height="80%" /></p>
<p>点击右上角搜索标志图标【Start Inspector Session】</p>
<p><img src="appium_server2.png" width="80%" height="80%" /></p>
<p>编辑Desired Capabilities</p>
<p><img src="desirecapability.png" width="80%" height="80%" /></p>
<p>Capability设置：<a href="https://appium.io/docs/en/writing-running-appium/caps/">https://appium.io/docs/en/writing-running-appium/caps/</a></p>
<ul>
<li>platformName：Android或者iOS</li>
<li>deviceName：设备名，127.0.0.1:7555是网易mumu模拟器，开启后需要使用adb命令<code>adb connect 127.0.0.1:7555</code>连接。</li>
<li>appPackage：包名</li>
<li>appActivity：Activity名字</li>
<li>platformVersion：系统版本</li>
<li>automationName：默认使用 uiautomator2(andorid默认使用 uiautomator2，ios默认使用 XCUITest)</li>
<li>noReset：是否在测试前后重置相关环境(例如首次打开弹框，或者是登录信息)</li>
<li>fullReset：</li>
<li>unicodeKeyBoard：是否需要输入非英文之外的语言并在测试完成后重置输入法</li>
<li>dontStopAppOnReset：首次启动的时候，不停止app(可以调试或者运行的时候提升运行速度)</li>
<li>skipDeviceInitialization：跳过安装，权限设置等操作(可以调试或者运行的时候提升运行速度)</li>
<li>newCommandTimeout：两条命令的最大间隔时间，默认60s</li>
<li>udid：连接设备的唯一标识</li>
<li>autoGrantPermissions：自动允许/拒绝弹框信息，默认为false，如果noReset为true时，这个参数不生效</li>
</ul>
<p>其他更多参数参考官方文档：<a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md">https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md</a></p>
<p>主要设置好前面6个参数后，点击右下角【Start Session】，可以获取到每个节点的详细属性。</p>
<p><img src="appium_inspector.png" width="80%" height="80%" /></p>
<h1 id="用例录制"><a href="#用例录制" class="headerlink" title="用例录制"></a>用例录制</h1><p>appium desktop可以录制用例，并生成测试代码</p>
<p>点击上方眼睛图标，开始录制，手动点击左边app元素，右边显示了三种元素操作方法：Tap、Send Keys、Clear，选择对应的操作</p>
<p><img src="appium_inspector1.png" width="80%" height="80%" /></p>
<p>完成后测试步骤后，点击停止录制，右上角可以看到生成的自动化代码，可以选择Java，Python等语言。</p>
<p><img src="appium_inspector2.png" width="80%" height="80%" /></p>
<p>获取到app页面元素属性值后就可以使用appium来进行定位，实现对app的操作。下一篇文章将介绍appium元素定位方法。</p>
<h1 id="Python-Appium启动APP"><a href="#Python-Appium启动APP" class="headerlink" title="Python + Appium启动APP"></a>Python + Appium启动APP</h1><p>APP自动化测试关键步骤包括：</p>
<ul>
<li>导入依赖:<br>  <code>from appium import webdriver</code></li>
<li>capabilities设置</li>
<li>初始化 driver<br>  <code>webdriver.remote(&#39;http://127.0.0.1:4723/wd/hub&#39;, desired_caps)</code></li>
<li>元素定位与操作</li>
<li>断言 assert</li>
</ul>
<p>下面代码实现打开雪球APP，点击输入框，输入”京东“，然后退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line">desired_caps = &#123;&#125;</span><br><span class="line"><span class="comment"># desired_caps[&#x27;recreateChromeDriverSessions&#x27;] = True</span></span><br><span class="line">desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;5.1.1&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;127.0.0.1:7555&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;com.xueqiu.android&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;automationName&#x27;</span>] = <span class="string">&#x27;Uiautomator2&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;.common.MainActivity&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;newCommandTimeout&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">desired_caps[<span class="string">&#x27;unicodeKeyboard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">desired_caps[<span class="string">&#x27;noReset&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;dontStopAppOnReset&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">desired_caps[<span class="string">&#x27;skipDeviceInitialization&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">driver.implicitly_wait(<span class="number">15</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;com.xueqiu.android:id/tv_search&quot;</span>).click()</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;com.xueqiu.android:id/search_input_text&quot;</span>).send_keys(<span class="string">&quot;京东&quot;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | Appium 介绍及环境安装</title>
    <url>/posts/appium-install-and-architecture/</url>
    <content><![CDATA[<p>Appium是一个可用于测试iOS、 Android操作系统和Windows桌面平台原生应用，移动网页应用和混合应用的自动化测试框架。</p>
<a id="more"></a>
<ul>
<li><p><strong>原生应用</strong>（Native App）：用 android、iOS或者Windows SDK编写的应用</p>
</li>
<li><p><strong>移动网页应用</strong>（Web App）：通过手机浏览器访问的网页应用，比如iOS中 safari应用，Android上的Chrome应用或者内置浏览器应用，不会占用手机的存储空间。</p>
</li>
<li><p><strong>混合应用</strong>（Hybrid App）：同时具备Native App和Web App的特性，一种 webview应用，将Javascript，HTML和CSS执行在embedded webview中，外层用Native App wrapper包起來。</p>
</li>
</ul>
<p><img src="android_app.jpg" alt="img"></p>
<p>Appium 跨语言支持：Java、 Python、 Ruby、JavaScript (Node.js)、PHP、C# (.NET)、RobotFramework等，Appium是跨平台的，可以用在OSX，Windows以及Linux桌面系统上运行。</p>
<h1 id="Appium架构"><a href="#Appium架构" class="headerlink" title="Appium架构"></a>Appium架构</h1><p><img src="appium_server.png" alt="img"></p>
<h2 id="WebDriver"><a href="#WebDriver" class="headerlink" title="WebDriver"></a>WebDriver</h2><p>Selenium Webdriver API实现脚本语言与浏览器之间的通信，是一个远程控制接口，可参考<a href="https://blog.csdn.net/u010698107/article/details/114681384">Selenium Webdriver 架构</a>。 Webdriver定义的JSON Wire Protocol（JSON有线协议）实现selenium客户端与remote server（浏览器驱动的HTTP服务器）的交互，remote server将命令发送给浏览器，实现浏览器的native调用。</p>
<p>WebDriver协议可参考官方文档：<a href="https://w3c.github.io/webdriver/">https://w3c.github.io/webdriver/</a></p>
<p>Appium WebDriver对Selenium Webdriver协议进行了扩展（<a href="https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md">Mobile JSON Wire Protocol</a>），Appium 客户端通过Webdriver协议与Appium Server进行交互。</p>
<h2 id="Appium引擎列表"><a href="#Appium引擎列表" class="headerlink" title="Appium引擎列表"></a>Appium引擎列表</h2><p>为了不重新编译或修改应用，Appium 使用系统自带的自动化框架：<br><strong>Android 4.3+</strong></p>
<ul>
<li>UIAutomator</li>
<li>UIAutomator2[推荐]</li>
</ul>
<p><strong>iOS</strong></p>
<ul>
<li>UIAutomation (iOS ≤ 9.3) </li>
<li>XCUITest[推荐] (iOS ≥ 9.3) </li>
</ul>
<p><strong>Windows: </strong></p>
<ul>
<li>WinAppDriver</li>
</ul>
<h2 id="Appium的设计理念"><a href="#Appium的设计理念" class="headerlink" title="Appium的设计理念"></a>Appium的设计理念</h2><h3 id="Client-Server设计模式"><a href="#Client-Server设计模式" class="headerlink" title="Client/Server设计模式"></a>Client/Server设计模式</h3><p>Appium采用 C/S架构，Appium与客户端建立连接并监听命令，然后在移动设备上执行这些命令，命令执行结果通过 HTTP 响应的方式返回。客户端通过 WebDriver json wire协议与服务端通讯。由于Appium的这种特性，我们可以将Appium server放在与测试机不同的机器上。Appium Server是使用 Node.js 编写的HTTP服务。</p>
<p><img src="appium_architecture.png" alt="img"></p>
<h3 id="session-会话"><a href="#session-会话" class="headerlink" title="session 会话"></a>session 会话</h3><p>Appium自动化执行时会首先拉起一个session会话，客户端和服务器之间初始化一个session，通过发送一个<code>POST /session</code>建立连接，客户端的post请求中携带一个称为 ‘desired capabilities‘ 的JSON对象，定义设备平台（iOS或Android）、版本、server地址等请求字段，后面的文章将详细介绍。服务器接收到请求后会建立一个session并回应一个session ID，建立好连接后就可以发送命令了。</p>
<h3 id="Appium-Clients"><a href="#Appium-Clients" class="headerlink" title="Appium Clients"></a>Appium Clients</h3><p>Appium支持多语言，包括Java, Ruby, Python, PHP, JavaScript, 和 C#，这些客户端库支持WebDriver 协议扩展。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">语言/框架</th>
<th style="text-align:left">Github仓库地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Ruby</td>
<td style="text-align:left"><a href="https://github.com/appium/ruby_lib">https://github.com/appium/ruby_lib</a>, <a href="https://github.com/appium/ruby_lib_core">https://github.com/appium/ruby_lib_core</a></td>
</tr>
<tr>
<td style="text-align:left">Python</td>
<td style="text-align:left"><a href="https://github.com/appium/python-client">https://github.com/appium/python-client</a></td>
</tr>
<tr>
<td style="text-align:left">Java</td>
<td style="text-align:left"><a href="https://github.com/appium/java-client">https://github.com/appium/java-client</a></td>
</tr>
<tr>
<td style="text-align:left">JavaScript (Node.js)</td>
<td style="text-align:left"><a href="https://github.com/admc/wd">https://github.com/admc/wd</a></td>
</tr>
<tr>
<td style="text-align:left">JavaScript (Node.js)</td>
<td style="text-align:left"><a href="https://github.com/webdriverio/webdriverio">https://github.com/webdriverio/webdriverio</a></td>
</tr>
<tr>
<td style="text-align:left">JavaScript (Browser)</td>
<td style="text-align:left"><a href="https://github.com/projectxyzio/web2driver">https://github.com/projectxyzio/web2driver</a></td>
</tr>
<tr>
<td style="text-align:left">Objective C</td>
<td style="text-align:left"><a href="https://github.com/appium/selenium-objective-c">https://github.com/appium/selenium-objective-c</a></td>
</tr>
<tr>
<td style="text-align:left">PHP</td>
<td style="text-align:left"><a href="https://github.com/appium/php-client">https://github.com/appium/php-client</a></td>
</tr>
<tr>
<td style="text-align:left">C# (.NET)</td>
<td style="text-align:left"><a href="https://github.com/appium/appium-dotnet-driver">https://github.com/appium/appium-dotnet-driver</a></td>
</tr>
<tr>
<td style="text-align:left">RobotFramework</td>
<td style="text-align:left"><a href="https://github.com/serhatbolsu/robotframework-appiumlibrary">https://github.com/serhatbolsu/robotframework-appiumlibrary</a></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Appium工作原理"><a href="#Appium工作原理" class="headerlink" title="Appium工作原理"></a>Appium工作原理</h2><ol>
<li>首先开启Appium server，它会默认监听4723端口</li>
<li>appium客户端（测试脚本）基于Json wire protocol发送设备信息给Appium server，请求创建session。其中设备信息放在desired capabilities中，包括系统平台，版本，应用等信息（详细介绍参考<a href="https://blog.csdn.net/u010698107/article/details/111431111">App控件定位</a>）。session用于保存设备配置信息。</li>
<li>Appium server创建session id并返回给client：appium server调用AndroidDriver为client生成一个session并且生成一个与此session相关联的session id，作为client与server之间通信的唯一标识。</li>
<li>开启bootstrap socket服务器：Appium在初始化时将中间件Bootstrap.jar推送到设备，bootstrap是uiautomator的测试脚本，继承于UiautomatorTestCase。手机端通过该脚本监听端口4724，appium server作为socket-client端通过4724端口将请求发送给socket服务器（bootstrap.jar），然后bootstrap将appium命令转换成uiautomator命令。</li>
</ol>
<p>连接建立完成后，Appium client基于Json wire protocol通过4723端口将指令发送给Appium server，Appium server（socket-client）通过4724端口转发给中间件bootstrap.jar（socket-server），bootstrap.jar将请求转换成UiAutomator可以识别的命令，发给UiAutomator对设备进行操作。执行完操作后将执行的结果返回给Appium server，Appium server返回给Appium客户端，客户端对结果做校验。</p>
<h1 id="Appium生态工具"><a href="#Appium生态工具" class="headerlink" title="Appium生态工具"></a>Appium生态工具</h1><ul>
<li><p><strong>adb</strong>：android的控制工具，用于获取 android的各种数据和控制</p>
</li>
<li><p><strong>Appium Desktop</strong>：内嵌了 appium server和inspector的综合工具</p>
</li>
<li><p><strong>Appium Server</strong>：appium的核心工具，命令行工具</p>
</li>
<li><p><strong>Appium client</strong>：各种语言的客户端封装库，用于连接 appium server</p>
</li>
<li><p><strong>AppCrawler</strong>：自动遍历工具</p>
</li>
</ul>
<p>appium使用 appium-xcuitest-driver来测试iPhone设备,其中需要安装 facebook开发的WDA(webdriver agent)来驱动iOS测试，下面介绍Android APP测试环境安装。</p>
<h1 id="Appium环境安装"><a href="#Appium环境安装" class="headerlink" title="Appium环境安装"></a>Appium环境安装</h1><ul>
<li>Java1.8版本</li>
<li>Android sdk</li>
<li>Node.js(&gt;=10 版本)，npm(&gt;=6 版本)</li>
<li>Python3</li>
<li>Appium-desktop</li>
<li>Appium python client</li>
</ul>
<h2 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h2><ul>
<li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</li>
<li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</li>
<li>是运行在服务端的 JavaScript</li>
</ul>
<p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br><img src="nodejs_download.png" alt="img">)</p>
<p>命令行窗口中运行<code>node -v</code> 查看是否安装成功<br><img src="nodejs_version.png" alt="img"></p>
<h2 id="2、安装jdk"><a href="#2、安装jdk" class="headerlink" title="2、安装jdk"></a>2、安装jdk</h2><p>jdk下载下载地址：<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>按照默认路径安装<br><strong>配置环境变量</strong><br>“我的电脑”右键菜单—-&gt;属性—-&gt;高级—-&gt;环境变量—-&gt;系统变量—&gt;新建</p>
<ul>
<li>变量名：JAVA_HOME<br>变量值：C:\Program Files (x86)\Java\jdk1.8.0_144 </li>
<li>变量名：CALSS_PATH<br>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; </li>
</ul>
<p>找到path变量名—&gt;“编辑”添加：</p>
<ul>
<li>变量名：PATH<br>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</li>
</ul>
<p>查看是否安装成功：java -version<br><img src="java_version.png" alt="img"></p>
<h2 id="3-安装Android-SDK"><a href="#3-安装Android-SDK" class="headerlink" title="3. 安装Android SDK"></a>3. 安装Android SDK</h2><p>Android SDK是Google提供的Android开发工具包，在开发Android应用的时候会用到，需要通过引入工具包来调用Android的API</p>
<p>下载地址：<a href="https://developer.android.com/">https://developer.android.com/</a><br>中文社区的SDK下载地址：<a href="http://tools.android-studio.org/index.php/sdk"><br>http://tools.android-studio.org/index.php/sdk</a></p>
<p>双击打开SDK Manage.exe，安装API版本和对应的工具包，这些在运行模拟器和真机测试的时候会使用到。</p>
<p><strong>配置环境变量</strong><br>新建环境变量ANDROID_HOME，变量值为sdk的路径：E:\Android\android-sdk </p>
<p>“我的电脑”右键菜单—-&gt;属性—-&gt;高级—-&gt;环境变量—-&gt;系统变量—&gt;新建</p>
<ul>
<li>变量名：ANDROID_HOME<br>变量值：D:\android\android-sdk-windows </li>
</ul>
<p>找到环境变量path—&gt;“编辑”添加：</p>
<ul>
<li>变量名：PATH<ul>
<li>变量值：;% ANDROID_HOME%\platform-tools;</li>
<li>变量值：% ANDROID_HOME%\build-tools;</li>
<li>变量值：% ANDROID_HOME%\tools;  </li>
</ul>
</li>
</ul>
<p>tools目录下运行android命令，platform-tools目录运行adb命令</p>
<p>检验Android SDK是否安装成功：adb version<br><img src="adb_version.png" alt="img"></p>
<h2 id="4-安装Appium"><a href="#4-安装Appium" class="headerlink" title="4. 安装Appium"></a>4. 安装Appium</h2><p>下载地址：<a href="https://bitbucket.org/appium/appium.app/downloads/?tab=downloads">https://bitbucket.org/appium/appium.app/downloads/?tab=downloads</a><br><img src="appium.png" alt="img"></p>
<ul>
<li>安装完成后添加到环境变量</li>
<li>把安装的appium文件夹的Appium\node_modules.bin加到系统环境变量path中</li>
</ul>
<p>运行appium-doctor，检测appium运行环境的工具<br><img src="appium_doctor.png" alt="img"></p>
<h2 id="5-安装appium-desktop"><a href="#5-安装appium-desktop" class="headerlink" title="5. 安装appium-desktop"></a>5. 安装appium-desktop</h2><p>下载地址：<a href="https://github.com/appium/appium-desktop/releases/tag/v1.15.1">https://github.com/appium/appium-desktop/releases/tag/v1.15.1</a></p>
<h2 id="6-下载Appium-Python-Client"><a href="#6-下载Appium-Python-Client" class="headerlink" title="6. 下载Appium-Python-Client"></a>6. 下载Appium-Python-Client</h2><p>下载链接：<a href="https://pypi.org/project/Appium-Python-Client/">https://pypi.org/project/Appium-Python-Client/</a><br>运行<code>python setup.py install</code>安装<br><img src="appium_python_client.png" alt="img"></p>
<p>或者运行 <code>pip install Appium-Python-Client</code> 安装。</p>
<h1 id="appium测试"><a href="#appium测试" class="headerlink" title="appium测试"></a>appium测试</h1><p>下面来测试一下是否能够进行 Android APP自动化测试</p>
<p>测试APP使用appium提供的测试APP: <a href="https://github.com/appium/android-apidemos/releases/tag/v3.1.0">android-apidemos</a>，它是从Google的Android ApiDemos fork过来的。</p>
<p>下载成功后安装到测试机：<code>adb install ApiDemos-debug.apk</code></p>
<h2 id="1-启动appium"><a href="#1-启动appium" class="headerlink" title="1. 启动appium"></a>1. 启动appium</h2><p>IP和端口号默认就行（如果你的appium server不在本地，IP地址需要填写appium所在的主机IP地址），点击Start Server：<br><img src="appium-server.png" alt="img"></p>
<p><img src="appium-server2.png" alt="img"></p>
<p>可以看到appium server已经启动，这个窗口会显示appium server运行日志。</p>
<p>windows中使用手动方式打开appium比较麻烦，可以使用bat脚本来启动appium：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off REM 回显到控制台上</span><br><span class="line"></span><br><span class="line">start cmd /k <span class="string">&quot;&quot;</span><span class="string">&quot;taskkill /f /im adb.exe&amp;adb start-server&amp;node &quot;</span>C:\\Program Files\\Appium\\resources\\app\\node_modules\\appium\\build\\lib\\main.js<span class="string">&quot; --address 127.0.0.1 --port 4723 --session-override --log-level debug --log d:/appium-server.log&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>main.js位于Appium安装路径下  </p>
<ul>
<li><code>--address</code>：appium server地址</li>
<li><code>--port</code>：端口号</li>
<li><code>--log-level</code>：日志级别，可设置4种—debug<code>,</code> info<code>,</code> warn<code>,</code> error</li>
<li><code>--log</code>：保存日志</li>
<li>更多appium server参数设置可参考：<a href="https://appium.io/docs/en/writing-running-appium/server-args/">https://appium.io/docs/en/writing-running-appium/server-args/</a></li>
</ul>
<p>注意命令之间用 <code>&amp;</code> 隔开。</p>
<blockquote>
<p><code>&amp;</code> 、<code>&amp;&amp;</code> 和 <code>||</code>区别</p>
<ul>
<li>cmd1 &amp; cmd2 &amp; cmd3：无论前面的命令是否执行成功，后面的命令都会执行</li>
<li>cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3：如果前面的命令执行失败，退出，后面的命令不会执行。</li>
<li>cmd1 || cmd2 || cmd3：前面的命令执行成功就退出，不会执行后面的命令。</li>
</ul>
</blockquote>
<h2 id="2-手机USB连接电脑"><a href="#2-手机USB连接电脑" class="headerlink" title="2. 手机USB连接电脑"></a>2. 手机USB连接电脑</h2><p><code>adb devices</code>命令查看手机是否连接成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">SNHVB20C18002195        device</span><br></pre></td></tr></table></figure>
<h2 id="3-编写测试脚本"><a href="#3-编写测试脚本" class="headerlink" title="3. 编写测试脚本"></a>3. 编写测试脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApidemos</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;</span><br><span class="line">            <span class="string">&#x27;platformName&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;platformVersion&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;deviceName&#x27;</span>: <span class="string">&#x27;SNHVB20C18002195&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;appPackage&#x27;</span>: <span class="string">&#x27;io.appium.android.apis&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;appActivity&#x27;</span>: <span class="string">&#x27;.ApiDemos&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;automationName&#x27;</span>: <span class="string">&#x27;Uiautomator2&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;newCommandTimeout&#x27;</span>: <span class="number">3000</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_appium</span>(<span class="params">self</span>):</span></span><br><span class="line">        elem = self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;App&quot;]&#x27;</span>)</span><br><span class="line">        elem.click()</span><br><span class="line">        Alarm_exist = self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;Alarm&quot;]&#x27;</span>).is_displayed()</span><br><span class="line">        <span class="keyword">assert</span> Alarm_exist == <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>使用pytest命令执行测试脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pytest test_apidemos.py::TestApidemos::test_appium</span><br></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li><p>WebDriver协议：<a href="https://w3c.github.io/webdriver/">https://w3c.github.io/webdriver/</a></p>
</li>
<li><p>Mobile JSON Wire Protocol：<a href="https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md">https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest测试框架（四）：pytest 参数化用例</title>
    <url>/posts/pytest-parametrize/</url>
    <content><![CDATA[<p>在 <a href="https://hiyong.gitee.io/posts/pytest-fixture/">Pytest测试框架（三）：pytest fixture 用法</a> 中介绍了pytest.fixture()可以参数化fixture函数，@pytest.mark.parametrize 可以为测试方法或者测试类定义多组变量。本文将分享使用@pytest.mark.parametrize 实现参数化用例。</p>
<a id="more"></a>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>@pytest.mark.parametrize(argnames, argvalues)</p>
<ul>
<li><p><strong>argnames</strong>：参数化变量名，可以是string(逗号分割) 、list 和 tuple类型</p>
<ul>
<li>@pytest.mark.parametrize(“a, b”, [(1,2),(3,4)])</li>
<li>@pytest.mark.parametrize([“a”,”b”], [(1,2),(3, 4)])</li>
<li>@pytest.mark.parametrize((“a”, “b”), [(1,2),(3,4)])</li>
</ul>
</li>
<li><p><strong>argvalues</strong>：参数化的值</p>
</li>
</ul>
<h1 id="参数化实例1"><a href="#参数化实例1" class="headerlink" title="参数化实例1"></a>参数化实例1</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a, b, result&quot;</span>, [(<span class="params"><span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span></span>), (<span class="params"><span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span></span>)]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self, a, b, result</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> a + b == result</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                 [ <span class="number">50</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED                [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="参数化实例2"><a href="#参数化实例2" class="headerlink" title="参数化实例2"></a>参数化实例2</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">data = [(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">         (<span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">         (<span class="number">99</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a, b, result&quot;</span>, data</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self, a, b, result</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> a + b == result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED               [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED             [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="参数化实例3"><a href="#参数化实例3" class="headerlink" title="参数化实例3"></a>参数化实例3</h1><p>data.yaml文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">99</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params">[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;result&quot;</span>],yaml.safe_load(<span class="params"><span class="built_in">open</span>(<span class="params"><span class="string">&quot;./data.yaml&quot;</span></span>)</span>)</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self, a, b, result</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> a + b == result</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED               [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED             [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h1><p>数据驱动参数化的应用，数据量小的测试用例可以使用代码的参数化来实现数据驱动，数据量大的情况下可以使用一种结构化的文件(例如csv、yaml、xml、db、 excel、json等)来存储数据，然后在测试用例中读取这些数据。</p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试框架</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | Appium控件交互</title>
    <url>/posts/appium-locator-operate/</url>
    <content><![CDATA[<p>与Web元素操作一样（<strong>Web自动化测试 | 元素操作</strong>），定位到APP控件元素后，可以对控件进行一系列的操作，实现与APP就交互，比如点击、文本输入、元素属性获取等。</p>
<a id="more"></a>
<h1 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h1><h2 id="元素常用操作方法"><a href="#元素常用操作方法" class="headerlink" title="元素常用操作方法"></a>元素常用操作方法</h2><ul>
<li>点击方法 element.click()</li>
<li>输入操作 element.send_keys(“appium”)</li>
<li>设置元素的值 element.set_value(“appium”)</li>
<li>清除操作 element.clear()</li>
</ul>
<h2 id="Python测试实例"><a href="#Python测试实例" class="headerlink" title="Python测试实例"></a>Python测试实例</h2><p>安装ApiDemos-debug.apk，下载地址：<a href="https://github.com/appium/appium/blob/master/sample-code/apps/ApiDemos-debug.apk">https://github.com/appium/appium/blob/master/sample-code/apps/ApiDemos-debug.apk</a></p>
<ol>
<li>点击Views</li>
<li>滑动选择并点击TextFields</li>
<li>输入文本“appium”</li>
<li>清除文本</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.mobileby <span class="keyword">import</span> MobileBy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLocator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;6.0.1&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;127.0.0.1:7555&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;io.appium.android.apis&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;.ApiDemos&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;automationName&#x27;</span>] = <span class="string">&#x27;Uiautomator2&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;newCommandTimeout&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;noReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;dontStopAppOnReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;skipDeviceInitialization&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;unicodeKeyboard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;resetKeybBoard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_locator</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;Views&quot;]&#x27;</span>).click()</span><br><span class="line">        self.driver.find_element_by_android_uiautomator(</span><br><span class="line">            <span class="string">&#x27;new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(&quot;TextFields&quot;).instance(0));&#x27;</span>).click()</span><br><span class="line">        elem = self.driver.find_element(MobileBy.ID, <span class="string">&quot;io.appium.android.apis:id/edit&quot;</span>)</span><br><span class="line">        elem.send_keys(<span class="string">&quot;appium&quot;</span>)</span><br><span class="line">        elem.clear()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h1><ul>
<li>获取属性值：get_attribute(name)</li>
<li>获取元素文本：element.text</li>
<li>获取元素坐标：element.location</li>
<li>获取元素尺寸(高和宽): element.size</li>
<li>是否可见 element.is_displayed 返回True/False</li>
<li>是否可用 element.is_enabled 返回True/False</li>
<li>是否被选中 element.is_selected 返回True/False</li>
</ul>
<h2 id="get-attribute-方法"><a href="#get-attribute-方法" class="headerlink" title="get_attribute()方法"></a>get_attribute()方法</h2><p>get_attribute()方法能获取的属性，元素的属性几乎都能获取到。属性名称和uiautomatorviewer里面的一致。</p>
<p>字符串类型：</p>
<ul>
<li>text：返回 text</li>
<li>resource-id：返回 resource-id， API=&gt;18</li>
<li>class：返回 class， API=&gt;18</li>
<li>content-desc：返回 content-desc属性</li>
<li>bounds</li>
</ul>
<p>布尔类型：</p>
<ul>
<li>checkable</li>
<li>checked</li>
<li>clickable</li>
<li>enabled</li>
<li>focusable</li>
<li>focused</li>
<li>scrollable</li>
<li>long-clickable</li>
<li>password</li>
<li>selected</li>
<li>displayed</li>
</ul>
<p>注意：有些属性展示在 uiautomatorviewer里，但是不能通过get_attribute获取，比如: index。</p>
<h2 id="属性获取实例"><a href="#属性获取实例" class="headerlink" title="属性获取实例"></a>属性获取实例</h2><p>获取“App”的属性值<br><img src="get_attribute.png" alt="img"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.mobileby <span class="keyword">import</span> MobileBy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGetAttribute</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">&#x27;platformName&#x27;</span>] = <span class="string">&#x27;Android&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;platformVersion&#x27;</span>] = <span class="string">&#x27;6.0.1&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;deviceName&#x27;</span>] = <span class="string">&#x27;127.0.0.1:7555&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appPackage&#x27;</span>] = <span class="string">&#x27;io.appium.android.apis&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;appActivity&#x27;</span>] = <span class="string">&#x27;.ApiDemos&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;automationName&#x27;</span>] = <span class="string">&#x27;Uiautomator2&#x27;</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;newCommandTimeout&#x27;</span>] = <span class="number">3000</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;noReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;dontStopAppOnReset&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;skipDeviceInitialization&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;unicodeKeyboard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        desired_caps[<span class="string">&#x27;resetKeybBoard&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        self.driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>, desired_caps)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_get_attribute</span>(<span class="params">self</span>):</span></span><br><span class="line">        elem = self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@text=&quot;App&quot;]&#x27;</span>)</span><br><span class="line">        print(<span class="string">&quot;text:&quot;</span> + elem.get_attribute(<span class="string">&quot;text&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;resource-id:&quot;</span> + elem.get_attribute(<span class="string">&quot;resource-id&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;class:&quot;</span> + elem.get_attribute(<span class="string">&quot;class&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;package:&quot;</span> + elem.get_attribute(<span class="string">&quot;package&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;content-desc:&quot;</span> + elem.get_attribute(<span class="string">&quot;content-desc&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;bounds:&quot;</span> + elem.get_attribute(<span class="string">&quot;bounds&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;checkable:&quot;</span> + elem.get_attribute(<span class="string">&quot;checkable&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;checked:&quot;</span> + elem.get_attribute(<span class="string">&quot;checked&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;clickable:&quot;</span> + elem.get_attribute(<span class="string">&quot;clickable&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;enabled:&quot;</span> + elem.get_attribute(<span class="string">&quot;enabled&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;password:&quot;</span> + elem.get_attribute(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;displayed:&quot;</span> + elem.get_attribute(<span class="string">&quot;displayed&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;######################&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;text:&quot;</span> + elem.text)</span><br><span class="line">        print(elem.location)</span><br><span class="line">        print(elem.size)</span><br><span class="line">        print(elem.is_displayed)</span><br><span class="line">        print(elem.is_enabled)</span><br><span class="line">        print(elem.is_selected)</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">text:App</span><br><span class="line">resource-id:android:id/text1</span><br><span class="line">class:android.widget.TextView</span><br><span class="line">package:io.appium.android.apis</span><br><span class="line">content-desc:App</span><br><span class="line">bounds:[0,342][720,414]</span><br><span class="line">checkable:<span class="literal">false</span></span><br><span class="line">checked:<span class="literal">false</span></span><br><span class="line">clickable:<span class="literal">true</span></span><br><span class="line">enabled:<span class="literal">true</span></span><br><span class="line">password:<span class="literal">false</span></span><br><span class="line">displayed:<span class="literal">true</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line">text:App</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: 0, <span class="string">&#x27;y&#x27;</span>: 342&#125;</span><br><span class="line">&#123;<span class="string">&#x27;height&#x27;</span>: 72, <span class="string">&#x27;width&#x27;</span>: 720&#125;</span><br><span class="line">&lt;bound method WebElement.is_displayed of &lt;appium.webdriver.webelement.WebElement (session=<span class="string">&quot;cceeee8f-ad89-4d00-ab4f-25b57de58ea5&quot;</span>, element=<span class="string">&quot;a1443341-aad8-4814-8f9b-27ada3fe6f50&quot;</span>)&gt;&gt;</span><br><span class="line">&lt;bound method WebElement.is_enabled of &lt;appium.webdriver.webelement.WebElement (session=<span class="string">&quot;cceeee8f-ad89-4d00-ab4f-25b57de58ea5&quot;</span>, element=<span class="string">&quot;a1443341-aad8-4814-8f9b-27ada3fe6f50&quot;</span>)&gt;&gt;</span><br><span class="line">&lt;bound method WebElement.is_selected of &lt;appium.webdriver.webelement.WebElement (session=<span class="string">&quot;cceeee8f-ad89-4d00-ab4f-25b57de58ea5&quot;</span>, element=<span class="string">&quot;a1443341-aad8-4814-8f9b-27ada3fe6f50&quot;</span>)&gt;&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>元素定位</tag>
      </tags>
  </entry>
  <entry>
    <title>App自动化测试 | Android ADB原理及常用命令</title>
    <url>/posts/appium-adb/</url>
    <content><![CDATA[<p>Android调试桥(ADB, Android Debug Bridge)是一个Android命令行工具，包含在SDK 平台工具包中，adb可以用于连接Android设备，或者模拟器，实现对设备的控制，比如安装和调试应用。和Appium一样，adb也是基于C/S架构实现的。<br><a id="more"></a></p>
<h1 id="一、ADB运行原理"><a href="#一、ADB运行原理" class="headerlink" title="一、ADB运行原理"></a>一、ADB运行原理</h1><p>adb分为三个部分：PC上的adb client，adb server和手机（也可能是PC上的模拟器）上的adb daemon。这是一个<strong>多多连接</strong>的设计。即一台PC可以连接多个手机，一台手机也可以连接多个PC。<br><img src="adb.jpg" alt="img"></p>
<ol>
<li><strong>Client本质上就是Shell</strong>，用来发送命令给<strong>Server</strong>。发送命令时，首先检测PC上有没有启动Server，如果没有Server，则自动启动一个Server，绑定 TCP 的 5037 端口，然后将命令发送到Server，并不关心命令发送过去以后会怎样。</li>
<li><strong>ADB Server</strong>：运行在PC上的后台程序，目的是检测USB接口何时连接或者移除设备。ADB Server维护着一个“已连接的设备的链表”，并且为每一个设备标记了一个状态：<strong>offline，bootloader，recovery或者online</strong>；Server一直在做一些循环和等待，，监听从 clients 发来的命令，协调client和Server还有daemon之间的通信。</li>
<li><strong>ADB Daemon</strong>：程序“adbd”作为一个<strong>后台进程</strong>在Android设备或模拟器系统中运行。它的作用是<u>连接ADB服务器</u>，并且为运行在主机上的客户端提供一些服务；</li>
</ol>
<p>Client和Server之间通过<strong>TCP/IP</strong>通信，Server侦听本机的<strong>5037端口</strong>，Client试图去连接这个端口。基于ADB的工具有 DDMS 、monkey 测试等</p>
<ul>
<li>adb源码：<a href="https://android.googlesource.com/platform/system/core/+/refs/heads/android10-c2f2-release/adb/">https://android.googlesource.com/platform/system/core/+/refs/heads/android10-c2f2-release/adb/</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -nao | findstr 5037</span><br></pre></td></tr></table></figure>
<p><img src="adb2.jpg" alt="img"></p>
<h1 id="二、ADB常用命令"><a href="#二、ADB常用命令" class="headerlink" title="二、ADB常用命令"></a>二、ADB常用命令</h1><h2 id="1-adb-server启动和连接"><a href="#1-adb-server启动和连接" class="headerlink" title="1. adb server启动和连接"></a>1. adb server启动和连接</h2><ul>
<li>启动 adb server<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb start-server </span><br></pre></td></tr></table></figure></li>
<li>停止 adb server<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure></li>
<li><p>指定 adb server 的网络端口<adb默认端口为5037></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb -P &lt;port&gt; start-server </span><br></pre></td></tr></table></figure>
<p>在发送adb命令时，如果pc没有启动Server，则会自动启动一个Server，然后将命令发送到Server。</p>
</li>
<li><p>通过adb usb打开设备上的tcpip服务并绑定一个端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb tcpip 5555</span><br><span class="line">adb -s 611DKBQC22SH2 tcpip 5555  # 设备在 5555 端口监听 TCP/IP 连接</span><br></pre></td></tr></table></figure>
<p>无线连接要将 Android 设备与将运行 adb 的电脑连接到<strong>同一个局域网</strong></p>
</li>
<li>ADB Client通过命令adb connect ip连接远程的终端</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001 <span class="comment">#夜游神模拟器</span></span><br><span class="line">adb connect 127.0.0.1:7555 <span class="comment">#网易mumu模拟器</span></span><br><span class="line">adb disconnect &lt;device-ip-address&gt; <span class="comment"># 断开连接</span></span><br></pre></td></tr></table></figure>
<p><strong>USB连接</strong><br>开启Android 设备的开发者选项和 USB 调试模式</p>
<h2 id="2-adb常用命令"><a href="#2-adb常用命令" class="headerlink" title="2. adb常用命令"></a>2. adb常用命令</h2><p>以 root 权限运行 adbd<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb root </span><br><span class="line">adb -s 611DKBQC22SH2 root</span><br></pre></td></tr></table></figure><br>查看 adb 版本<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb version</span><br></pre></td></tr></table></figure><br>查看设备名称<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><br>重启手机<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><br>查看appPackage和appActivity<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">adb logcat | findstr -i displayed <span class="comment"># 打印手机日志</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">adb shell dumpsys activity</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">C:\Users\admin&gt; adb shell</span><br><span class="line">root@shamu:/ <span class="comment"># dumpsys activity | grep kaoyan</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">adb shell dumpsys activity top</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line">adb shell dumpsys activity|findstr mFocusedActivity <span class="comment"># 进入APP，得到APP名</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line">adb shell dumpsys window windows|findstr <span class="string">&quot;Current&quot;</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line">adb shell pm list packages <span class="comment">#所有应用列表</span></span><br><span class="line">adb shell pm list packages -s <span class="comment"># 系统应用</span></span><br><span class="line">adb shell pm list packages -3 <span class="comment"># 第三方应用</span></span><br><span class="line">adb shell pm list packages smart <span class="comment"># 包名包含smart字符串的应用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>安装卸载apk包<br>模拟器可以直接把安装包拖入模拟器进行安装</p>
<p>adb安装卸载方法：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">adb uninstall 包名</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">adb install app.apk</span><br><span class="line">adb install -r app.apk <span class="comment"># 强制安装</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-adb-模拟控制手机"><a href="#3-adb-模拟控制手机" class="headerlink" title="3. adb 模拟控制手机"></a>3. adb 模拟控制手机</h2><h3 id="拉起、停止Activity"><a href="#拉起、停止Activity" class="headerlink" title="拉起、停止Activity"></a>拉起、停止Activity</h3><p><code>adb shell am start [options] &lt;INTENT&gt;</code> ：调起 Activity<br><code>adb shell am force-stop &lt;packagename&gt;</code> ： 强制停止应用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adb shell am start -n com.tenda.smarthome.app/.activity.main.MainActivity <span class="comment"># 打开smarthome APP</span></span><br><span class="line">adb shell am force-stop com.tenda.smarthome.app <span class="comment"># 强制停止应用</span></span><br><span class="line">adb shell pm clear &lt;packagename&gt;  <span class="comment"># 清除应用数据与缓存</span></span><br><span class="line">adb shell am start -a android.intent.action.VIEW -d https://www.baidu.com <span class="comment"># 打开网页</span></span><br></pre></td></tr></table></figure>
<h3 id="模拟按键"><a href="#模拟按键" class="headerlink" title="模拟按键"></a>模拟按键</h3><p><code>adb shell input keyevent &lt;keycode&gt;</code>： 模拟按键<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 3 <span class="comment"># 按下HOME 键</span></span><br><span class="line">adb shell input keyevent 4 <span class="comment"># 按下返回键</span></span><br><span class="line"></span><br><span class="line">adb shell input keyevent 26 <span class="comment"># 按下电源键</span></span><br><span class="line">adb shell input keyevent 82 <span class="comment"># 按下菜单键</span></span><br><span class="line"></span><br><span class="line">adb shell input keyevent 223 <span class="comment"># 熄灭屏幕</span></span><br><span class="line">adb shell input keyevent 224 <span class="comment"># 点亮屏幕</span></span><br><span class="line"></span><br><span class="line">adb shell input keyevent 67 <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure></p>
<h3 id="文本框输入"><a href="#文本框输入" class="headerlink" title="文本框输入"></a>文本框输入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell input text <span class="string">&quot;text&quot;</span> <span class="comment"># 向文本框中输入文字，不支持中文</span></span><br></pre></td></tr></table></figure>
<h3 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell input tap 458 573 根据坐标点击</span><br></pre></td></tr></table></figure>
<h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><p><code>adb shell input swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt;</code>： x：屏幕左到右 y：从上到下     左上角为0点-<strong>图像坐标系</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell input swipe 550 1200 550 375 <span class="comment"># 滑动解锁</span></span><br><span class="line">adb shell input swipe 700 200 100 200 <span class="comment"># 左翻页</span></span><br><span class="line">adb shell input swipe 100 200 1000 200 <span class="comment"># 右翻页</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="comment">## 4. adb文件管理（同Linux）</span></span><br><span class="line"><span class="comment">### 目录操作</span></span><br><span class="line">```bash</span><br><span class="line">C:\Users\DELL&gt;adb shell</span><br><span class="line">root@M5:/data <span class="comment"># su  提取到root权限，显示井号即可</span></span><br><span class="line">su</span><br><span class="line">root@M5:/ <span class="comment"># ls</span></span><br><span class="line">ls</span><br><span class="line">@btmtk</span><br><span class="line">acdapi</span><br><span class="line">adb</span><br><span class="line">agps_supl</span><br><span class="line">...</span><br><span class="line">root@M5:/data <span class="comment"># ls -l</span></span><br><span class="line">ls -l</span><br><span class="line">drwxrwx--- bluetooth net_bt            2019-03-01 14:26 @btmtk</span><br><span class="line">drwxrwx--- system   system            2019-03-01 14:26 acdapi</span><br><span class="line">drwx------ root     root              2019-03-01 14:26 adb</span><br><span class="line">drwxrwx--x gps      system            2019-07-19 10:49 agps_supl</span><br><span class="line">drwxrwx--- system   system            2019-03-01 14:26 amit</span><br><span class="line">drwxrwxr-x system   system            2019-07-22 09:13 anr</span><br><span class="line">drwxrwx--x system   system            2019-08-01 09:00 app</span><br><span class="line">drwx------ root     root              2019-03-01 14:26 app-asec</span><br><span class="line"></span><br><span class="line">root@M5:/data <span class="comment"># pwd   当前路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/data</span><br><span class="line"></span><br><span class="line">root@M5:/data/system <span class="comment"># cd - 切换到上次目录</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line">/data</span><br><span class="line">root@M5:/data <span class="comment"># cd .. 切换到上级目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">2|root@M5:/ <span class="comment"># cd d*a </span></span><br><span class="line"><span class="built_in">cd</span> d*a</span><br><span class="line">root@M5:/data <span class="comment"># cd s*m 目录名较长时建议使用通配符&quot;*&quot;,如cd到system目录</span></span><br><span class="line"><span class="built_in">cd</span> s*m</span><br><span class="line">root@M5:/data/system <span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<h3 id="文件操作（同Linux）"><a href="#文件操作（同Linux）" class="headerlink" title="文件操作（同Linux）"></a>文件操作（同Linux）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -r crash <span class="comment"># 删除文件夹及内容</span></span><br><span class="line">rmdir <span class="comment"># 文件夹 删文件夹</span></span><br><span class="line">rm <span class="comment"># 文件 删文件</span></span><br><span class="line">cat filename <span class="comment"># cat,more less显示文件内容</span></span><br><span class="line">cp /data/data/com.android.contacts/databases/contacts_app.db /mnt/sdcard/ <span class="comment"># 复制</span></span><br><span class="line">mkdir <span class="comment"># 创建目录</span></span><br><span class="line">du <span class="comment"># 显示目录空间大小</span></span><br><span class="line">df <span class="comment"># 显示磁盘空间大小</span></span><br><span class="line">touch test.txt <span class="comment"># 创建文件</span></span><br><span class="line">ps <span class="comment"># 显示进程</span></span><br><span class="line">top <span class="comment"># 动态显示进程状态</span></span><br><span class="line">chmod 644 <span class="comment"># 改变权限</span></span><br></pre></td></tr></table></figure>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>CTRL+C 退出shell模式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@M5:/mnt/sdcard <span class="comment"># ^C</span></span><br><span class="line">C:\Users\DELL&gt;d:</span><br></pre></td></tr></table></figure></p>
<h3 id="手机和电脑文件传输"><a href="#手机和电脑文件传输" class="headerlink" title="手机和电脑文件传输"></a>手机和电脑文件传输</h3><p>将手机文件pull到电脑<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;adb pull sdcard/cmcc_sso_config.dat  <span class="comment"># 将手机sdcard中的cmcc_sso_config.dat 文件copy到电脑D：根目录下</span></span><br><span class="line">D:\&gt;adb pull sdcard/cmcc_sso_config.dat D:\adbtest</span><br><span class="line">D:\&gt;</span><br></pre></td></tr></table></figure><br><img src="adb_pull.jpg" alt="img"></p>
<ul>
<li>将电脑文件push到手机目录下D<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;adb push D:/adbtest/cmcc_sso_config111.dat /sdcard/ <span class="comment"># 将D:中的cmcc_sso_config111.dat copy到手机sdcard 文件夹下</span></span><br><span class="line">D:\&gt;adb shell</span><br><span class="line">root@M5:/ <span class="comment"># cd /mnt/sdcard</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/sdcard</span><br><span class="line"></span><br><span class="line">root@M5:/mnt/sdcard <span class="comment"># ls *cmcc_sso_config*</span></span><br><span class="line">ls *cmcc_sso_config*</span><br><span class="line">cmcc_sso_config.dat</span><br><span class="line">cmcc_sso_config111.dat</span><br><span class="line"></span><br><span class="line">root@M5:/mnt/sdcard <span class="comment"># find /data -name &quot;cmcc_sso_config*&quot;</span></span><br><span class="line">find /data -name <span class="string">&quot;cmcc_sso_config*&quot;</span></span><br><span class="line">/data/media/0/cmcc_sso_config.dat</span><br><span class="line">/data/media/0/cmcc_sso_config111.dat</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-其它实用功能"><a href="#5-其它实用功能" class="headerlink" title="5. 其它实用功能"></a>5. 其它实用功能</h2><h3 id="屏幕截图-截图保存到SD卡里再导出"><a href="#屏幕截图-截图保存到SD卡里再导出" class="headerlink" title="屏幕截图-截图保存到SD卡里再导出"></a>屏幕截图-截图保存到SD卡里再导出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;adb shell screencap -p /sdcard/screen.png</span><br><span class="line">D:\&gt;adb pull /sdcard/screen.png</span><br><span class="line">D:\&gt;adb shell rm /sdcard/screen.png</span><br></pre></td></tr></table></figure>
<h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;adb shell screenrecord /sdcard/filename22.mp4</span><br><span class="line">D:\&gt;adb pull /sdcard/filename22.mp4</span><br><span class="line">D:\&gt;adb shell rm /sdcard/filename22.mp4</span><br><span class="line"></span><br><span class="line">D:\&gt;adb shell screenrecord  --time-limit 10 /sdcard/demo.mp4</span><br><span class="line">adb shell screenrecord --size 1280*720 /sdcard/demo.mp4</span><br><span class="line">adb shell screenrecord --bit-rate 6000000 /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>
<h3 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\&gt;adb shell svc wifi <span class="built_in">disable</span> <span class="comment"># 关闭WiFi</span></span><br><span class="line">D:\&gt;adb shell svc wifi <span class="built_in">enable</span>  <span class="comment"># 开启WiFi</span></span><br><span class="line"></span><br><span class="line">D:\&gt;adb shell ping -w 3 8.8.8.8  <span class="comment">#  查看是否能联网</span></span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span><br><span class="line">--- 8.8.8.8 ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, 100% packet loss, time 0ms   </span><br><span class="line">D:\&gt;adb shell cat /data/misc/wifi/*.conf  <span class="comment"># 查看连接过的 WiFi 密码</span></span><br><span class="line">.....</span><br><span class="line">device_name=meizu_M5</span><br><span class="line">manufacturer=Meizu</span><br><span class="line">model_name=M611D</span><br><span class="line">model_number=M611D</span><br><span class="line">serial_number=611DKBQC22SH2</span><br><span class="line">device_type=10-0050F204-5</span><br><span class="line">os_version=01020300</span><br><span class="line">config_methods=physical_display virtual_push_button</span><br><span class="line">p2p_no_group_iface=1</span><br><span class="line">external_sim=1</span><br><span class="line">wowlan_triggers=disconnect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">&quot;Plug_C415&quot;</span></span><br><span class="line">        key_mgmt=NONE</span><br><span class="line">        priority=1</span><br><span class="line">        flag=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">&quot;                                &quot;</span></span><br><span class="line">        key_mgmt=NONE</span><br><span class="line">        priority=2</span><br><span class="line">        flag=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">&quot;test&quot;</span></span><br><span class="line">        psk=<span class="string">&quot;12345678&quot;</span></span><br><span class="line">        key_mgmt=WPA-PSK</span><br><span class="line">        priority=3</span><br><span class="line">        flag=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="切换飞行模式"><a href="#切换飞行模式" class="headerlink" title="切换飞行模式"></a>切换飞行模式</h3><p>通过adb shell，输入命令，可以切换飞行模式<br>开启飞行模式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell settings put global airplane_mode_on 1</span><br><span class="line">adb shell am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>关闭飞行模式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell settings put global airplane_mode_on 0</span><br><span class="line">adb shell am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="svc命令"><a href="#svc命令" class="headerlink" title="svc命令"></a>svc命令</h3><p>这个脚本在/system/bin目录下，可以用来控制电源管理，wifi开关，数据开关(就是上网流量)<br>控制usb插入的时候屏幕是否常亮<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc power stayon [<span class="literal">true</span>|<span class="literal">false</span>|usb|ac]</span><br></pre></td></tr></table></figure><br>关闭数据连接（上网流量），这个命令不会更改app的任何设置，直接在底层关闭数据连接。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc data <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><br>打开上网数据连接<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc data <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><br>控制3g数据连接比wifi优先。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc data prefer</span><br></pre></td></tr></table></figure><br>关闭wifi 连接<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc wifi <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><br>开启wifi连接<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc wifi <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><br>设置wifi优先<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svc wifi prefer</span><br></pre></td></tr></table></figure><br>上面的命令都要在shell中执行，需要root。可以用script ，然后输入这些命令做成在快捷方式放在桌面，跟那些开关软件一样方便使用。</p>
<h3 id="安卓busybox"><a href="#安卓busybox" class="headerlink" title="安卓busybox"></a>安卓busybox</h3><p>android busybox解决adbshell命令不全</p>
<p>安卓虽然是基于linux，但是精简了很多linux工具，很多常用的linux指令不能使用。busybox相当于一个打包的工具箱，打包了很多的常用的linux可执行文件和其依赖。安装了busybox你就可以在安卓下下载一个模拟终端然后在里面运行一些之前不能运行的指令。</p>
<h3 id="wpa-spplicant"><a href="#wpa-spplicant" class="headerlink" title="wpa_spplicant"></a>wpa_spplicant</h3><p>wpa_supplicant本是开源项目源码，被谷歌修改后加入Android移动平台，它主要是用来支持WEP，WPA/WPA2和WAPI无线协议和加密认证的，控制漫游和无线驱动的IEEE 802.11 验证和关联。通过socket（不管是wpa_supplicant与上层还是wpa_supplicant与驱动都采用socket通讯）与驱动交互上报数据给用户，而用户可以通过socket发送命令给wpa_supplicant调动驱动来对WiFi芯片操作。 简单的说，wpa_supplicant就是WiFi驱动和用户的中转站外加对协议和加密认证的支持。</p>
<p>wpa_supplicant工具主要包含wpa_supplicant(命令行模式，属于服务端)与wpa_cli(交互模式，属于客户端)两个程序来达到无线认证连接。通过wpa_cli来进行WiFi的配置和连接，也可以直接调用wpa_supplicant接口实现网络控制。<br>部分命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_cli -i wlan0 scan   \\扫描热点</span><br><span class="line">wpa_cli -i wlan0 scan_result   \\打印热点信息</span><br><span class="line">wpa_cli -i wlan0 set_network 0 ssid  &quot;wifi_name&quot; \\配置WiFi热点的名称ssid</span><br><span class="line">wpa_cli -i wlan0 set_network 0 psk &#x27;&quot;12345678&quot;&#x27; \\配置WiFi热点的密码psk</span><br></pre></td></tr></table></figure>
<h1 id="三、Python获取ADB返回结果"><a href="#三、Python获取ADB返回结果" class="headerlink" title="三、Python获取ADB返回结果"></a>三、Python获取ADB返回结果</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd = <span class="string">&quot;adb shell pm list packages smarthome&quot;</span></span><br><span class="line">result = os.popen(cmd)</span><br><span class="line">f = result.read() <span class="comment">#result只能读取一次</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;smarthome&quot;</span> <span class="keyword">in</span> f:</span><br><span class="line">    print(f)</span><br></pre></td></tr></table></figure>
<p>ADB获取手机时间<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now_time_new</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># now_time_new = datetime.datetime.now().strftime(&#x27;%H:%M&#x27;)</span></span><br><span class="line">        <span class="comment"># print &quot;now_time_new&quot;,self.now_time_new</span></span><br><span class="line">        time_a=os.popen(<span class="string">&#x27;adb shell date &quot;+%Y-%m-%d+%H:%M:%S&quot;&#x27;</span>)</span><br><span class="line">        time_a=time_a.read()</span><br><span class="line">        time_a=time_a.strip()</span><br><span class="line">        dates=time_a.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        times=time_a.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> (dates,times)</span><br></pre></td></tr></table></figure></p>
<h1 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h1><p>没有运行模拟器，而<code>adb devices</code>显示多余的设备emulator-5576<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">emulator-5576   offline</span><br><span class="line">611DKBQC22SH2   device</span><br></pre></td></tr></table></figure><br>解决方法：<br>运行<code>adb kill-server</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\DELL&gt;adb kill-server</span><br><span class="line"></span><br><span class="line">C:\Users\DELL&gt;adb devices</span><br><span class="line">* daemon not running. starting it now on port 5037 *</span><br><span class="line">* daemon started successfully *</span><br><span class="line">List of devices attached</span><br><span class="line">611DKBQC22SH2   device</span><br></pre></td></tr></table></figure></p>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>自动化测试</category>
        <category>App自动化测试</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest测试框架（五）：pytest + allure生成测试报告</title>
    <url>/posts/pytest-allure-report/</url>
    <content><![CDATA[<p>Allure 是一款轻量级、支持多语言的开源自动化测试报告生成框架，由Java语言开发，可以集成到 Jenkins。 pytest 测试框架支持Allure 报告生成。</p>
<a id="more"></a>
<p>pytest也可以生成junit格式的xml报告和HTML报告，命令如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_demo.py --junitxml=report.xml</span><br><span class="line">pytest test_demo.py --html=report.html #需要安装插件：pip install pytest-html</span><br></pre></td></tr></table></figure><br>Allure 报告更加灵活美观，本文介绍如何使用pytest 生成 allure测试报告</p>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="安装allure"><a href="#安装allure" class="headerlink" title="安装allure"></a>安装allure</h2><ol>
<li>allure包下载：<a href="https://github.com/allure-framework/allure2/releases">https://github.com/allure-framework/allure2/releases</a> </li>
<li>解压 -&gt; 进入bin目录 -&gt; 运行allure.bat, </li>
<li>把bin目录加入PATH环境变量<br><img src="1.png" alt="img"></li>
</ol>
<p>allure官网 : <a href="http://allure.qatools.ru/">http://allure.qatools.ru/</a></p>
<p>allure文档 : <a href="https://docs.qameta.io/allure/#">https://docs.qameta.io/allure/#</a></p>
<h2 id="安装-allure-pytest插件"><a href="#安装-allure-pytest插件" class="headerlink" title="安装 allure-pytest插件"></a>安装 allure-pytest插件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install allure-pytest</span><br></pre></td></tr></table></figure>
<h1 id="生成Allure报告"><a href="#生成Allure报告" class="headerlink" title="生成Allure报告"></a>生成Allure报告</h1><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest [测试文件] -s -q --alluredir=./result #--alluredir用于指定存储测试结果的路径)</span><br></pre></td></tr></table></figure>
<h2 id="查看测试报告"><a href="#查看测试报告" class="headerlink" title="查看测试报告"></a>查看测试报告</h2><p>方式一：直接打开默认浏览器展示报告</p>
<p><code>allure serve ./result/</code></p>
<p>方式二：从结果生成报告</p>
<ul>
<li><p>生成报告</p>
<p><code>allure generate ./result/ -o ./report/ --clean</code>  (覆盖路径加—clean)</p>
</li>
<li><p>打开报告</p>
<p><code>allure open -h 127.0.0.1 -p 8883 ./report/</code></p>
</li>
</ul>
<p>实例代码：<a href="https://docs.qameta.io/allure/#_pytest">https://docs.qameta.io/allure/#_pytest</a></p>
<p>test_allure.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_success</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;this test succeeds&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_failure</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;this test fails&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_skip</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;this test is skipped&quot;&quot;&quot;</span></span><br><span class="line">    pytest.skip(<span class="string">&#x27;for a reason!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_broken</span>():</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;oops&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>执行测试用例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_allure.py --alluredir=./result/1</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt="img"></p>
<p>打开报告:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; allure serve ./result/<span class="number">1</span></span><br><span class="line">Generating report to temp directory...</span><br><span class="line">Report successfully generated to C:\Users\<span class="number">10287</span>\AppData\Local\Temp\<span class="number">6968593833275403330</span>\allure-report</span><br><span class="line">Starting web server...</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">25</span> <span class="number">20</span>:<span class="number">59</span>:<span class="number">42.368</span>:INFO::main: Logging initialized @4873ms to org.eclipse.jetty.util.log.StdErrLog</span><br><span class="line">Server started at &lt;http://<span class="number">169.254</span><span class="number">.57</span><span class="number">.162</span>:<span class="number">60084</span>/&gt;. Press &lt;Ctrl+C&gt; to exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt="img"></p>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allure generate ./result/1 -o ./report/1/ --clean</span><br><span class="line">allure open -h 127.0.0.1 -p 8883 ./report/1</span><br></pre></td></tr></table></figure>
<p>浏览器访问地址 <a href="http://127.0.0.1:8883/">http://127.0.0.1:8883/</a> ，会显示跟上图一样的报告。</p>
<h2 id="通过nginx-服务查看报告"><a href="#通过nginx-服务查看报告" class="headerlink" title="通过nginx 服务查看报告"></a>通过nginx 服务查看报告</h2><p>由于查看报告时都需要执行上面的命令，将报告发给其他人查看就不是很方便，我们可以将报告放到 tomcat 或者 nginx 服务器上，然后通过IP地址来访问。另外，如果你使用的是Jenkins来进行用例执行，可以安装一个allure插件，测试执行完成后，可以在Jenkins上查看allure报告，具体实现可以参考<a href="https://blog.csdn.net/u010698107/article/details/115033183">持续集成：jenkins + pytest + selenium + Git + Allure自动化测试</a>。</p>
<p>下面介绍使用nginx 服务来查看报告。</p>
<p>在服务器上nginx服务</p>
<p>1、docker安装nginx（docker安装方法可参考<a href="https://blog.csdn.net/u010698107/article/details/113820115">容器技术介绍：Docker简介及安装</a>）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></p>
<p>2、启动nginx服务</p>
<p>挂载目录：将你的报告存放目录映射到容器目录/usr/share/nginx/html<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 -d --name=nginx -v /var/pytest/report:/usr/share/nginx/html nginx:latest </span><br></pre></td></tr></table></figure><br>allure报告可以通过<code>allure generate ./result -o ./report</code>命令生成，将报告放到<code>/var/pytest/report</code>目录下。</p>
<p>3、访问服务器IP地址<br>我的地址是：<a href="http://192.168.20.9:80/">http://192.168.20.9:80/</a></p>
<p>这样就可以查看allure报告了，其它人也可以通过访问这个地址（注意要在同一局域网下或者可以通信）来查看报告。</p>
<h1 id="allure特性—feature-storry-step"><a href="#allure特性—feature-storry-step" class="headerlink" title="allure特性—feature, storry, step"></a>allure特性—feature, storry, step</h1><p>可以在报告中添加用例描述信息，比如测试功能，子功能或场景，测试步骤以及测试附加信息：</p>
<ul>
<li>@allure.feature(‘功能名称’)：相当于 testsuite</li>
<li>@allure.story(’子功能名称‘)：对应这个功能或者模块下的不同场景，相当于 testcase</li>
<li>@allure.step(‘步骤’)：测试过程中的每个步骤，放在具体逻辑方法中<ul>
<li>allure.step(‘步骤’) 只能以装饰器的形式放在类或者方法上面</li>
<li>with allure.step：可以放在测试用例方法里面</li>
</ul>
</li>
<li>@allure.attach(‘具体文本信息’)<ul>
<li>附加信息：数据，文本，图片，视频，网页</li>
</ul>
</li>
</ul>
<p>测试用例 test_feature_story_step.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;登录&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>():</span></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;登录成功&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login_success</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;密码错误&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login_failure</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;输入用户名&quot;</span>):</span><br><span class="line">            print(<span class="string">&quot;输入用户名&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;输入密码&quot;</span>):</span><br><span class="line">            print(<span class="string">&quot;输入密码&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;点击登录&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;登录失败&quot;</span>):</span><br><span class="line">            <span class="keyword">assert</span> <span class="string">&#x27;1&#x27;</span> == <span class="number">1</span></span><br><span class="line">            print(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;用户名密码错误&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login_failure_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;用户名或者密码错误，登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;注册&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRegister</span>():</span></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;注册成功&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register_success</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;测试用例：注册成功&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;注册失败&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register_failure</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;输入用户名&quot;</span>):</span><br><span class="line">            print(<span class="string">&quot;输入用户名&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;输入密码&quot;</span>):</span><br><span class="line">            print(<span class="string">&quot;输入密码&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;再次输入密码&quot;</span>):</span><br><span class="line">            print(<span class="string">&quot;再次输入密码&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;点击注册&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;注册失败&quot;</span>):</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">            print(<span class="string">&quot;注册失败&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>用例执行、生成报告</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_feature_story.py --alluredir=./result/2 </span><br><span class="line">allure generate ./result/2 -o ./report/2/ --clean</span><br><span class="line">allure open -h 127.0.0.1 -p 8883 ./report/2</span><br></pre></td></tr></table></figure>
<p>报告：</p>
<p><img src="4.png" alt="img"></p>
<h1 id="allure特性—link-issue-testcase"><a href="#allure特性—link-issue-testcase" class="headerlink" title="allure特性—link, issue, testcase"></a>allure特性—link, issue, testcase</h1><p>可以在测试报告中添加链接、bug地址、测试用例地址。</p>
<p>关联bug需要在用例执行时添加参数：</p>
<ul>
<li>—allure-link-pattern=issue:[bug地址]{}</li>
<li>例如：—allure-link-pattern=issue:<a href="http://www.bugfree.com/issue/{}">http://www.bugfree.com/issue/{}</a></li>
</ul>
<p>test_allure_link_issue.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.link(<span class="params"><span class="string">&quot;http://www.baidu.com&quot;</span>, name=<span class="string">&quot;baidu link&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_with_link</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.issue(<span class="params"><span class="string">&quot;140&quot;</span>,<span class="string">&quot;this is a issue&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_with_issue_link</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">TEST_CASE_LINK = <span class="string">&#x27;https://github.com&#x27;</span></span><br><span class="line"><span class="meta">@allure.testcase(<span class="params">TEST_CASE_LINK, <span class="string">&#x27;Test case title&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_with_testcase_link</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>用例执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_allure_link_issue.py --allure-link-pattern=issue:http://www.bugfree.com/issue/&#123;&#125; --alluredir=./result/3</span><br><span class="line">allure serve ./result/3</span><br></pre></td></tr></table></figure>
<p>报告：</p>
<p><img src="5.png" alt="img"></p>
<p>点击 <code>this is a issue</code>，页面会跳转到bug页面：<a href="http://www.bugfree.com/issue/140">http://www.bugfree.com/issue/140</a></p>
<h1 id="allure特性—severity"><a href="#allure特性—severity" class="headerlink" title="allure特性—severity"></a>allure特性—severity</h1><p>有时候在上线前，由于时间关系，我们只需要把重要模块测试一遍，在这样的场景下我们怎么实现呢？主要有三种方法：</p>
<ol>
<li>可以使用pytest.mark来标记用例，Pytest测试框架（一）：pytest安装及用例执行 介绍了这种方法。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.webtest </span><span class="comment"># 添加标签 </span></span><br><span class="line"><span class="meta">@pytest.mark.sec </span></span><br><span class="line">pytest -m <span class="string">&quot;webtest and not sec&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>通过 allure.feature, allure.story来实现   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_feature_story_step.py --allure-features &quot;登录&quot; //只运行登录模块</span><br><span class="line">pytest test_feature_story_step.py --allure-stories &quot;登录成功&quot; //只运行登录成功子模块</span><br><span class="line">     ​```sss</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line">3. 通过 allure.severity按重要性级别来标记，有5种级别：</span><br><span class="line"></span><br><span class="line">      - Blocker级别：阻塞</span><br><span class="line"></span><br><span class="line">      - Critical级别：严重</span><br><span class="line"></span><br><span class="line">      - Normal级别：正常</span><br><span class="line"></span><br><span class="line">      - Minor级别：不太重要</span><br><span class="line"></span><br><span class="line">      - Trivial级别：不重要</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_allure_severity.py：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;python</span><br><span class="line">import allure</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_with_no_severity_label():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">@allure.severity(allure.severity_level.TRIVIAL)</span><br><span class="line">def test_with_trivial_severity():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">@allure.severity(allure.severity_level.NORMAL)</span><br><span class="line">def test_with_normal_severity():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">@allure.severity(allure.severity_level.NORMAL)</span><br><span class="line">class TestclassWithNormalSeverity(object):</span><br><span class="line">    def test_inside_the_normalseverity_test_class(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @allure.severity(allure.severity_level.CRITICAL)</span><br><span class="line">    def test_inside_the_normal_severity_test_class_with_overriding_critical_severity(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>用例执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_allure_severity.py --alluredir=./result/4 --allure-severities normal,critical</span><br><span class="line">allure serve ./result/4</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="6.png" alt="img"></p>
<h1 id="allure-attach"><a href="#allure-attach" class="headerlink" title="allure.attach()"></a>allure.attach()</h1><p>可以在报告中附加文本、图片以及html网页，用来补充测试步骤或测试结果，比如错误截图或者关键步骤的截图。</p>
<p>test_allure_attach.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_attach_text</span>():</span></span><br><span class="line">    allure.attach(<span class="string">&quot;纯文本&quot;</span>, attachment_type=allure.attachment_type.TEXT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_attach_html</span>():</span></span><br><span class="line">    allure.attach(<span class="string">&quot;&lt;body&gt;这是一段htmlbody块&lt;/body&gt;&quot;</span>, <span class="string">&quot;html页面&quot;</span>, attachment_type=allure.attachment_type.HTML)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_attach_photo</span>():</span></span><br><span class="line">    allure.attach.file(<span class="string">&quot;test.jpg&quot;</span>, name=<span class="string">&quot;图片&quot;</span>, attachment_tye=allure.attachment_type.JPG)</span><br></pre></td></tr></table></figure>
<p>用例执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_allure_attach.py --alluredir=./result/5</span><br><span class="line">allure serve ./result/5</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="7.png" alt="img"></p>
<h1 id="pytest-selenium-allure报告"><a href="#pytest-selenium-allure报告" class="headerlink" title="pytest+selenium+allure报告"></a>pytest+selenium+allure报告</h1><p>测试步骤：</p>
<ol>
<li>打开百度</li>
<li>搜索关键词</li>
<li>搜索结果截图，保存到报告中</li>
<li>退出浏览器</li>
</ol>
<p>test_allure_baidu.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.testcase(<span class="params"><span class="string">&quot;http://www.github.com&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;百度搜索&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;test_data1&#x27;</span>, [<span class="string">&#x27;allure&#x27;</span>, <span class="string">&#x27;pytest&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_steps_demo</span>(<span class="params">test_data1</span>):</span></span><br><span class="line">    <span class="keyword">with</span> allure.step(<span class="string">&quot;打开百度网页&quot;</span>):</span><br><span class="line">        driver = webdriver.Chrome(<span class="string">&quot;D:/testing_tools/chromedriver85/chromedriver.exe&quot;</span>)</span><br><span class="line">        driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> allure.step(<span class="string">&quot;搜索关键词&quot;</span>):</span><br><span class="line">        driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(test_data1)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> allure.step(<span class="string">&quot;保存图片&quot;</span>):</span><br><span class="line">        driver.save_screenshot(<span class="string">&quot;./result/b.png&quot;</span>)</span><br><span class="line">        allure.attach.file(<span class="string">&quot;./result/b.png&quot;</span>, attachment_type=allure.attachment_type.PNG)</span><br><span class="line">        allure.attach(<span class="string">&#x27;&lt;head&gt;&lt;/head&gt;&lt;body&gt;首页&lt;/body&gt;&#x27;</span>, <span class="string">&#x27;Attach with HTML type&#x27;</span>, allure.attachment_type.HTML)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> allure.step(<span class="string">&quot;退出浏览器&quot;</span>):</span><br><span class="line">        driver.quit()</span><br></pre></td></tr></table></figure>
<p>用例执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_allure_baidu.py --alluredir=./result/6</span><br><span class="line">allure serve ./result/6</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="8.png" alt="img"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试框架</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest测试框架（三）：pytest fixture 用法</title>
    <url>/posts/pytest-fixture/</url>
    <content><![CDATA[<p>xUnit style 结构的 fixture用于初始化测试函数， pytest fixture是对传统的 xUnit 架构的setup/teardown功能的改进。pytest fixture为测试准备一个良好的测试环境，测试函数使用的每个 fixture通常有一个参数(以 fixture 命名)，测试函数通过参数访问它们。本文将介绍pytest fixture的一些基本用法。</p>
<a id="more"></a>
<h1 id="pytest-fixture"><a href="#pytest-fixture" class="headerlink" title="@pytest.fixture"></a>@pytest.fixture</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        print(login)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + login == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>test_case2需要调用login方法（或者获取login的返回值），pytest 将会寻找并调用<code>@pytest.fixture</code>标记的login() 方法。</p>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                           [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录</span><br><span class="line">PASSED                           [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">PASSED                           [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="共享-fixture-函数：conftest-py"><a href="#共享-fixture-函数：conftest-py" class="headerlink" title="共享 fixture 函数：conftest.py"></a>共享 fixture 函数：conftest.py</h1><p>在测试过程中，多个测试文件可能都要调用 fixture 函数，可以将其移动到 conftest.py 文件中。conftest.py 文件中的 fixture 函数不需要在测试函数中导入，可以被 pytest 自动识别，查找顺序从测试类开始，然后是测试模块，然后是 conftest.py 文件，最后是内置插件和第三方插件。</p>
<p>conftest.py ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>测试用例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        print(login)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + login == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                           [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录</span><br><span class="line">PASSED                           [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">PASSED                           [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="yield方法"><a href="#yield方法" class="headerlink" title="yield方法"></a>yield方法</h1><p>使用yield关键字可以实现setup/teardown的功能，在yield关键字之前的代码在case之前执行，yield之后的代码在case运行结束后执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">&quot;退出登录&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                      [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录</span><br><span class="line">PASSED                      [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">退出登录</span><br><span class="line">PASSED                      [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="addfinalizer方法"><a href="#addfinalizer方法" class="headerlink" title="addfinalizer方法"></a>addfinalizer方法</h1><p>addfinalizer也可以实现环境的清理，实现与yield方法相同的效果，跟yield不同的是需要注册作为终结器使用的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">demo_finalizer</span>():</span></span><br><span class="line">        print(<span class="string">&quot;退出登录&quot;</span>)</span><br><span class="line">    <span class="comment"># 注册demo_finalizer为终结函数</span></span><br><span class="line">    request.addfinalizer(demo_finalizer)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED               [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录</span><br><span class="line">PASSED               [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">退出登录</span><br><span class="line">PASSED               [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="fixture-作用范围：Scope"><a href="#fixture-作用范围：Scope" class="headerlink" title="fixture 作用范围：Scope"></a>fixture 作用范围：Scope</h1><p>fixture 作用范围可以为module、class、session和function，默认作用域为function。</p>
<ul>
<li><strong>function</strong>：每一个函数或方法都会调用</li>
<li><strong>class</strong>：每一个类调用一次</li>
<li><strong>module</strong>：每一个.py文件调用一次</li>
<li><strong>session</strong>：是多个文件调用一次<h2 id="scope-”function”"><a href="#scope-”function”" class="headerlink" title="scope=”function”"></a>scope=”function”</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;function&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">登录...</span><br><span class="line">PASSED                      [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录...</span><br><span class="line">PASSED                      [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">登录...</span><br><span class="line">PASSED                      [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="scope-”class”"><a href="#scope-”class”" class="headerlink" title="scope=”class”"></a>scope=”class”</h2><p>一个class里面多个用例都调用了此fixture，那么只在class里所有用例开始前执行一次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;class&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">登录...</span><br><span class="line">PASSED                      [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED                      [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">PASSED                      [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="fixture自动应用"><a href="#fixture自动应用" class="headerlink" title="fixture自动应用"></a>fixture自动应用</h1><h2 id="autouse参数"><a href="#autouse参数" class="headerlink" title="autouse参数"></a>autouse参数</h2><p>autouse设置为True时，自动调用fixture功能。由于默认作用域为function，不指定scope则每个方法都会调用fixture方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">登录...</span><br><span class="line">PASSED                    [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录...</span><br><span class="line">PASSED                    [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">登录...</span><br><span class="line">PASSED                    [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="pytest-mark-usefixtures"><a href="#pytest-mark-usefixtures" class="headerlink" title="@pytest.mark.usefixtures()"></a>@pytest.mark.usefixtures()</h2><p>在测试方法上加@pytest.mark.usefixtures()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(<span class="params"><span class="string">&quot;login&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">登录...</span><br><span class="line">PASSED                [ <span class="number">33</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">登录...</span><br><span class="line">PASSED                [ <span class="number">66</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">登录...</span><br><span class="line">PASSED                [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="fixture函数参数化"><a href="#fixture函数参数化" class="headerlink" title="fixture函数参数化"></a>fixture函数参数化</h1><p>如果多条用例都需要调用相同参数，可以将fixture函数参数化。fixture 函数将执行每个参数值，fixture通过固定参数request传递。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;module&quot;</span>, params=[</span></span></span><br><span class="line"><span class="meta"><span class="params">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>],</span></span></span><br><span class="line"><span class="meta"><span class="params">    [<span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>],</span></span></span><br><span class="line"><span class="meta"><span class="params">    [<span class="number">99</span>, <span class="number">1</span>, <span class="number">100</span>]</span></span></span><br><span class="line"><span class="meta"><span class="params">]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> request.param</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> data[<span class="number">0</span>] + data[<span class="number">1</span>] == data[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;\n开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PASSED                     [ <span class="number">20</span>%]</span><br><span class="line">开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED              [ <span class="number">40</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">PASSED              [ <span class="number">60</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">PASSED              [ <span class="number">80</span>%]</span><br><span class="line">开始执行测试用例<span class="number">2</span></span><br><span class="line">PASSED                     [<span class="number">100</span>%]</span><br><span class="line">开始执行测试用例<span class="number">3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试框架</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest测试框架（二）：pytest 的setup/teardown方法</title>
    <url>/posts/pytest-xunit-style-of-setup-teardown/</url>
    <content><![CDATA[<p>PyTest支持xUnit style 结构， setup() 和 teardown() 方法用于初始化和清理测试环境，可以保证测试用例的独立性。pytest的setup/teardown方法包括：模块级别(setup_module/teardown_module)、函数级别(setup_function/teardown_function)、类级别(setup_class/ teardown_class)、方法级别(setup_method/teardown_methond或者setup/teardown)。</p>
<a id="more"></a>
<h1 id="模块级别"><a href="#模块级别" class="headerlink" title="模块级别"></a>模块级别</h1><p>模块中的第一个测试用例开始前执行setup_module方法，模块中的最后一个测试用例结束后运行teardown_module方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_module</span>():</span></span><br><span class="line">    print(<span class="string">&quot;初始化。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_module</span>():</span></span><br><span class="line">    print(<span class="string">&quot;清理。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模块初始化。。。</span><br><span class="line">PASSED                     [ <span class="number">33</span>%]开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED                     [ <span class="number">66</span>%]开始执行测试用例<span class="number">2</span></span><br><span class="line">PASSED                     [<span class="number">100</span>%]开始执行测试用例<span class="number">3</span></span><br><span class="line">模块清理。。。</span><br></pre></td></tr></table></figure>
<h1 id="函数级别"><a href="#函数级别" class="headerlink" title="函数级别"></a>函数级别</h1><p> setup_function/teardown_function在每个测试函数前后运行，只对函数用例生效，不在类中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_function</span>():</span></span><br><span class="line">    print(<span class="string">&quot;初始化。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_function</span>():</span></span><br><span class="line">    print(<span class="string">&quot;清理。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>():</span></span><br><span class="line">    print(<span class="string">&quot;开始执行测试用例1&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>():</span></span><br><span class="line">    print(<span class="string">&quot;开始执行测试用例2&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>():</span></span><br><span class="line">    print(<span class="string">&quot;开始执行测试用例3&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_setup_teardown2.py::test_case1 初始化。。。</span><br><span class="line">PASSED                               [ <span class="number">33</span>%]开始执行测试用例<span class="number">1</span></span><br><span class="line">清理。。。</span><br><span class="line"></span><br><span class="line">test_setup_teardown2.py::test_case2 初始化。。。</span><br><span class="line">PASSED                               [ <span class="number">66</span>%]开始执行测试用例<span class="number">2</span></span><br><span class="line">清理。。。</span><br><span class="line"></span><br><span class="line">test_setup_teardown2.py::test_case3 初始化。。。</span><br><span class="line">PASSED                               [<span class="number">100</span>%]开始执行测试用例<span class="number">3</span></span><br><span class="line">清理。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="类级别"><a href="#类级别" class="headerlink" title="类级别"></a>类级别</h1><p>类级别函数 setup_class/teardown_class 对类有效，位于类中，在测试类中前后调用一次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;初始化。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;清理。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始化。。。</span><br><span class="line">PASSED                    [ <span class="number">33</span>%]开始执行测试用例<span class="number">1</span></span><br><span class="line">PASSED                    [ <span class="number">66</span>%]开始执行测试用例<span class="number">2</span></span><br><span class="line">PASSED                    [<span class="number">100</span>%]开始执行测试用例<span class="number">3</span></span><br><span class="line">清理。。。</span><br></pre></td></tr></table></figure>
<h1 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h1><p>方法级别函数 setup_method/teardown_method和setup/teardown对类有效，也位于类中，这两个效果一样，在测试类中每个测试方法前后调用一次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Demo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;初始化。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;清理。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例1&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例2&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">8</span> == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;开始执行测试用例3&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">99</span> + <span class="number">1</span> == <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始化。。。</span><br><span class="line">PASSED                    [ <span class="number">33</span>%]开始执行测试用例<span class="number">1</span></span><br><span class="line">清理。。。</span><br><span class="line">初始化。。。</span><br><span class="line">PASSED                    [ <span class="number">66</span>%]开始执行测试用例<span class="number">2</span></span><br><span class="line">清理。。。</span><br><span class="line">初始化。。。</span><br><span class="line">PASSED                    [<span class="number">100</span>%]开始执行测试用例<span class="number">3</span></span><br><span class="line">清理。。。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试框架</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest测试框架（一）：pytest安装及用例执行</title>
    <url>/posts/pytest-install-and-running/</url>
    <content><![CDATA[<p>Pytest是基于Python的开源测试框架，语法简单易用，有大量的插件，功能非常多。自动检测测试用例，支持参数化，跳过特定用例，失败重试等功能。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用pip命令安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U pytest  <span class="comment"># 安装</span></span><br><span class="line">pytest --version <span class="comment"># 查看版本</span></span><br><span class="line">pytest -h <span class="comment"># 查看帮助信息</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pytest --version</span><br><span class="line">pytest 6.2.4</span><br></pre></td></tr></table></figure>
<h1 id="用例识别"><a href="#用例识别" class="headerlink" title="用例识别"></a>用例识别</h1><ul>
<li>pytest识别文件名为test_*.py或者*_test.py的测试文件</li>
<li>测试文件中可以在Test*类中写测试用例（测试用例以test_*开头，并且测试类不能有__init__方法）</li>
<li>不在Test*类中的test_*用例也可以被识别到。</li>
</ul>
<p>打印测试目录下匹配到的所有用例：<code>pytest --collect-only</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) D:\ProgramWorkspace\TestingDemo&gt;pytest --collect-only</span><br><span class="line">============================================== test session starts ==============================================</span><br><span class="line">platform win32 -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1</span><br><span class="line">rootdir: D:\ProgramWorkspace\TestingDemo</span><br><span class="line">plugins: hypothesis-5.5.4, arraydiff-0.3, astropy-header-0.1.2, doctestplus-0.5.0, openfiles-0.4.0, remotedata-0.3</span><br><span class="line">.2</span><br><span class="line">collected 20 items                                                                                               </span><br><span class="line">&lt;Module test_pytest.py&gt;</span><br><span class="line">  &lt;Function test_one&gt;</span><br><span class="line">  &lt;Function test_two&gt;</span><br><span class="line">  &lt;Function test_three&gt;</span><br><span class="line">&lt;Module test_pytest2.py&gt;</span><br><span class="line">  &lt;Class Test_Demo&gt;</span><br><span class="line">      &lt;Function test_one&gt;</span><br><span class="line">      &lt;Function test_two&gt;</span><br><span class="line">      &lt;Function test_three&gt;</span><br><span class="line">&lt;Package D:\ProgramWorkspace\TestingDemo\testing&gt;</span><br><span class="line">  &lt;Module test_calc.py&gt;</span><br><span class="line">    &lt;UnitTestCase TestCalc&gt;</span><br><span class="line">      &lt;TestCaseFunction test_add_1&gt;</span><br><span class="line">      &lt;TestCaseFunction test_add_2&gt;</span><br><span class="line">  &lt;Module test_calc2.py&gt;</span><br><span class="line">    &lt;Class TestCalc&gt;</span><br><span class="line">        &lt;Function test_add[1-2-3]&gt;</span><br><span class="line">        &lt;Function test_add[-1--2--3]&gt;</span><br><span class="line">        &lt;Function test_add[0-1-1]&gt;</span><br><span class="line">        &lt;Function test_add[0--1--1]&gt;</span><br><span class="line">        &lt;Function test_add[0.1-0.2-0.3]&gt;</span><br><span class="line">        &lt;Function test_add[999999-1000000-1999999]&gt;</span><br><span class="line">        &lt;Function test_div[1-2-0.5]&gt;</span><br><span class="line">        &lt;Function test_div[-1--2-0.5]&gt;</span><br><span class="line">        &lt;Function test_div[0-1-0]&gt;</span><br><span class="line">        &lt;Function test_div[1-0-0]&gt;</span><br><span class="line">        &lt;Function test_div[0.1-0.2-0.5]&gt;</span><br><span class="line">        &lt;Function test_add_1&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><ul>
<li><code>-V, --version</code>：查看版本信息</li>
<li><code>-h, --help</code>：查看帮助信息</li>
<li><code>-k EXPRESSION</code>：运行EXPRESSION匹配到的用例，例如 <code>pytest -k &quot;add&quot;</code> 运行文件名包含<code>add</code>的用例。</li>
<li><code>-m MARKEXPR</code>：执行标记的用例</li>
<li><code>-x, --exitfirst</code>：报错就停止</li>
<li><code>--maxfail=num</code>：错误数达到num时停止</li>
<li><code>--lf, --last-failed</code>：仅运行上次执行失败的用例，上一次执行失败的用例记录在.pytest_cache/v/cache/lastfailed文件中</li>
<li><code>--ff, --failed-first</code>：运行所以用例，但是先运行上一次执行失败的用例</li>
<li><code>-s</code>：命令行显示输出日志，加上它之后可以显示代码中print打印内容</li>
<li><code>-v, --verbose</code>：打印详细日志信息</li>
<li><code>-q, --quiet</code>：打印简略日志信息</li>
<li><code>--collect-only, --co</code>：仅收集测试用例，不执行</li>
</ul>
<h1 id="Pytest用例执行"><a href="#Pytest用例执行" class="headerlink" title="Pytest用例执行"></a>Pytest用例执行</h1><h2 id="用例执行"><a href="#用例执行" class="headerlink" title="用例执行"></a>用例执行</h2><p>一个简单的测试用例test_pytest.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer1</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        <span class="keyword">assert</span> calc(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer2</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">1</span>) == <span class="number">3</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">  @pytest.mark.answer3        </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer3</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        <span class="keyword">assert</span> calc(<span class="number">6</span>, <span class="number">6</span>) == <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>可以使用如下方式执行某个测试用例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行test_pytest.py所有用例（模块）</span></span><br><span class="line">pytest test_pytest.py </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行test_pytest.py里的TestDemo类</span></span><br><span class="line">pytest test_pytest.py::TestDemo </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行test_pytest.py里的TestDemo类的test_answer2方法</span></span><br><span class="line">pytest test_pytest.py::TestDemo::test_answer2</span><br></pre></td></tr></table></figure>
<h2 id="打印日志信息"><a href="#打印日志信息" class="headerlink" title="打印日志信息"></a>打印日志信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印详细运行日志信息</span></span><br><span class="line">pytest -v test_pytest.py </span><br><span class="line">pytest -s test_pytest.py</span><br></pre></td></tr></table></figure>
<p><img src="1.png" width="80%" height="80%" /></p>
<h2 id="跳过某个用例"><a href="#跳过某个用例" class="headerlink" title="跳过某个用例"></a>跳过某个用例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过运行某个用例</span></span><br><span class="line">pytest -v -k <span class="string">&quot;类名 and not方法名&quot;</span> 文件名</span><br><span class="line">pytest -v -k <span class="string">&quot;TestDemo and not test_answer2&quot;</span> test_pytest.py</span><br></pre></td></tr></table></figure>
<p><img src="2.png" width="80%" height="80%" /></p>
<h2 id="运行文件名包含某个关键字的用例"><a href="#运行文件名包含某个关键字的用例" class="headerlink" title="运行文件名包含某个关键字的用例"></a>运行文件名包含某个关键字的用例</h2><p>识别包含“add”的用例：<code>pytest -k &quot;add&quot; --collect-only</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) D:\ProgramWorkspace\TestingDemo&gt;pytest -k &quot;add&quot; --collect-only</span><br><span class="line">============================================== test session starts ==============================================</span><br><span class="line">platform win32 -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1</span><br><span class="line">rootdir: D:\ProgramWorkspace\TestingDemo</span><br><span class="line">plugins: hypothesis-5.5.4, arraydiff-0.3, astropy-header-0.1.2, doctestplus-0.5.0, openfiles-0.4.0, remotedata-0.3</span><br><span class="line">.2</span><br><span class="line">collected 20 items / 11 deselected / 9 selected                                                                  </span><br><span class="line">&lt;Package D:\ProgramWorkspace\TestingDemo\testing&gt;</span><br><span class="line">  &lt;Module test_calc.py&gt;</span><br><span class="line">    &lt;UnitTestCase TestCalc&gt;</span><br><span class="line">      &lt;TestCaseFunction test_add_1&gt;</span><br><span class="line">      &lt;TestCaseFunction test_add_2&gt;</span><br><span class="line">  &lt;Module test_calc2.py&gt;</span><br><span class="line">    &lt;Class TestCalc&gt;</span><br><span class="line">        &lt;Function test_add[1-2-3]&gt;</span><br><span class="line">        &lt;Function test_add[-1--2--3]&gt;</span><br><span class="line">        &lt;Function test_add[0-1-1]&gt;</span><br><span class="line">        &lt;Function test_add[0--1--1]&gt;</span><br><span class="line">        &lt;Function test_add[0.1-0.2-0.3]&gt;</span><br><span class="line">        &lt;Function test_add[999999-1000000-1999999]&gt;</span><br><span class="line">        &lt;Function test_add_1&gt;</span><br></pre></td></tr></table></figure>
<h2 id="运行某个标记的用例"><a href="#运行某个标记的用例" class="headerlink" title="运行某个标记的用例"></a>运行某个标记的用例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将运行有这个标记的测试用例：@pytest.mark.[标记名]</span></span><br><span class="line">pytest -m [标记名] 文件名</span><br><span class="line">pytest -m answer3 test_pytest.py</span><br></pre></td></tr></table></figure>
<p><img src="3.png" width="80%" height="80%" /></p>
<h2 id="报错停止"><a href="#报错停止" class="headerlink" title="报错停止"></a>报错停止</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一旦运行到报错用例就停止运行</span></span><br><span class="line">pytest -x 文件名</span><br><span class="line">pytest -x test_pytest.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当报错达到num的时候就停止运行</span></span><br><span class="line">pytest --maxfail=[num] 文件名</span><br><span class="line">pytest --maxfail=<span class="number">1</span> test_pytest.py</span><br></pre></td></tr></table></figure>
<p><img src="4.png" width="80%" height="80%" /></p>
<p><img src="5.png" width="80%" height="80%" /></p>
<h2 id="失败重新运行"><a href="#失败重新运行" class="headerlink" title="失败重新运行"></a>失败重新运行</h2><p>安装 pytest-rerunfailures 插件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pytest-rerunfailures</span><br></pre></td></tr></table></figure>
<p>测试失败后重新运行n次，在重新运行间延迟n秒再运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新运行3次</span></span><br><span class="line">pytest --reruns <span class="number">3</span> -v -s test_pytest.py</span><br><span class="line"><span class="comment"># 重新运行5次，延迟1s</span></span><br><span class="line">pytest --reruns <span class="number">5</span> --reruns-delay <span class="number">1</span> -v test_pytest.py</span><br></pre></td></tr></table></figure>
<p><img src="6.png" width="80%" height="80%" /></p>
<h2 id="重复执行"><a href="#重复执行" class="headerlink" title="重复执行"></a>重复执行</h2><p>安装pytest-repeat插件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pytest-repeat</span><br></pre></td></tr></table></figure><br>重复执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新执行3次</span></span><br><span class="line">pytest -v -s --count=<span class="number">3</span> test_pytest.py</span><br><span class="line"><span class="comment"># 设置重复范围：session, module, class或者function（默认）</span></span><br><span class="line">pytest -v -s --count=<span class="number">3</span> --repeat-scope=session test_pytest.py</span><br></pre></td></tr></table></figure>
<p>或者在代码中标记：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line"><span class="meta">  @pytest.mark.repeat(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer1</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        <span class="keyword">assert</span> calc(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="多条断言"><a href="#多条断言" class="headerlink" title="多条断言"></a>多条断言</h2><p>一个方法中有多条断言，通常第一条失败后下面就不执行了，pytest-assume插件可以解决断言失败后继续执行断言的问题。</p>
<p>安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pytest-assume</span><br></pre></td></tr></table></figure>
<p>执行多条断言:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法1</span></span><br><span class="line">pytest.assume(x == y)</span><br><span class="line">pytest.assume(<span class="literal">True</span>)</span><br><span class="line">pytest.assume(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法2</span></span><br><span class="line"><span class="keyword">with</span> assume: <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">1</span>) == <span class="number">4</span> </span><br><span class="line"><span class="keyword">with</span> assume: <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">1</span>) == <span class="number">3</span> </span><br><span class="line"><span class="keyword">with</span> assume: <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">2</span>) == <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>修改测试用例test_pytest.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> pytest <span class="keyword">import</span> assume</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer1</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        <span class="keyword">assert</span> calc(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer2</span>(<span class="params">self</span>):</span></span><br><span class="line">  		<span class="keyword">with</span> assume: <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">1</span>) == <span class="number">4</span></span><br><span class="line">		<span class="keyword">with</span> assume: <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">1</span>) == <span class="number">3</span></span><br><span class="line">		<span class="keyword">with</span> assume: <span class="keyword">assert</span> calc(<span class="number">2</span>, <span class="number">2</span>) == <span class="number">3</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">	@pytest.mark.answer3        </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_answer3</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        <span class="keyword">assert</span> calc(<span class="number">6</span>, <span class="number">6</span>) == <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="7.png" width="80%" height="80%" /></p>
<h1 id="pytest-main"><a href="#pytest-main" class="headerlink" title="pytest.main()"></a>pytest.main()</h1><p>除了在终端执行外，也可以通过pytest.main()来执行，pytest.main() 自动查找当前目录下以test_开头的文件或者以_test结尾的py文件。</p>
<p>括号内可传入执行参数，通过[]进行分割，[]内的多个参数通过逗号分割，所有的参数和pytest命令行方式一样：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pytest.main([<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;test_pytest.py&#x27;</span>]) <span class="comment"># 执行test_pytest.py用例</span></span><br></pre></td></tr></table></figure><br>或者直接在测试文件最后写如下代码，执行py文件。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    pytest.main()   </span><br><span class="line">    <span class="comment"># pytest.main([&#x27;-v&#x27;, &#x27;test_pytest.py&#x27;])</span></span><br></pre></td></tr></table></figure></p>
<p>更多pytest执行方法可参考官方文档：<a href="https://docs.pytest.org/en/latest/contents.html#toc">https://docs.pytest.org/en/latest/contents.html#toc</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试框架</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | 执行JavaScript脚本</title>
    <url>/posts/selenium-javascript/</url>
    <content><![CDATA[<p>JavaScript是运行在客户端（浏览器）和服务器端的脚本语言，允许将静态网页转换为交互式网页。可以通过 Python Selenium WebDriver 执行 JavaScript 语句，在Web页面中进行js交互。那么js能做的事，Selenium应该大部分也能做。WebDriver是模拟终端用户的交互，所以就不能点击不可见的元素，有时可见元素也不能点击。在这些情况下，我们就可以通过WebDriver 执行JavaScript来点击或者执行页面元素。本文将介绍如何使用<strong>WebDriver执行</strong>JavaScript语句。<br><a id="more"></a></p>
<h1 id="Web元素定位及操作"><a href="#Web元素定位及操作" class="headerlink" title="Web元素定位及操作"></a>Web元素定位及操作</h1><p>使用execute_script() 执行 JavaScript 代码，有两种方法实现元素操作</p>
<h2 id="方法1：文档级别操作"><a href="#方法1：文档级别操作" class="headerlink" title="方法1：文档级别操作"></a>方法1：文档级别操作</h2><p>直接使用JavaScript实现元素定位和动作执行，主要方法有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.getElementById</span><br><span class="line">document.getElementsByClassName</span><br><span class="line">document.getElementsByName</span><br><span class="line">document.getElementsByTagName</span><br><span class="line">document.getElementsByTagNameNS</span><br></pre></td></tr></table></figure>
<p>测试示例：</p>
<ol>
<li>打开百度一下</li>
<li>输入框输入”test“</li>
<li>点击百度一下</li>
</ol>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_baidu</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">    self.driver.execute_script(<span class="string">&#x27;document.getElementById(&quot;kw&quot;).value = &quot;test&quot;&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    self.driver.execute_script(<span class="string">&#x27;document.getElementById(&quot;su&quot;).click()&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>在执行过程中，WebDriver 将 JavaScript 语句注入到浏览器中，然后脚本将执行。这个注入 JavaScript 有自己的名称空间，不会干扰实际网页中的 JavaScript运行。</p>
<h2 id="方法2：元素级别操作"><a href="#方法2：元素级别操作" class="headerlink" title="方法2：元素级别操作"></a>方法2：元素级别操作</h2><p>可以先使用WebDriver获取想要操作的元素，然后使用JavaScript执行操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_ele = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>) </span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, input_ele)</span><br></pre></td></tr></table></figure>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_baidu2</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">    input_ele = self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">    self.driver.execute_script(<span class="string">&quot;arguments[0].value = &#x27;test&#x27;;&quot;</span>, input_ele)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    baidu_ele = self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line">    self.driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, baidu_ele)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>可以在语句中使用多个 JavaScript动作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = driver.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;username&#x27;]&quot;</span>)</span><br><span class="line">password = driver.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;password&#x27;]&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].value = &#x27;admin&#x27;;arguments[1].value = &#x27;admin&#x27;;&quot;</span>, username, password)</span><br></pre></td></tr></table></figure>
<h1 id="获取返回值"><a href="#获取返回值" class="headerlink" title="获取返回值"></a>获取返回值</h1><p>可以返回JavaScript的执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.execute_script(<span class="string">&quot;return document.getElementById(&#x27;kw&#x27;).value&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;return document.title;&quot;</span>)  <span class="comment"># 返回网页标题</span></span><br></pre></td></tr></table></figure>
<h1 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h1><p>在<a href="https://blog.csdn.net/u010698107/article/details/111414932">Selenium ActionChains、TouchAction方法</a>中介绍了TouchAction类中scroll_from_element()也可以滑动页面。</p>
<h2 id="滑动到浏览器底部"><a href="#滑动到浏览器底部" class="headerlink" title="滑动到浏览器底部"></a>滑动到浏览器底部</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.documentElement.scrollTop=<span class="number">10000</span></span><br><span class="line">window.scrollTo(<span class="number">0</span>, document.body.scrollHeight)</span><br></pre></td></tr></table></figure>
<h2 id="滑动到浏览器顶部"><a href="#滑动到浏览器顶部" class="headerlink" title="滑动到浏览器顶部"></a>滑动到浏览器顶部</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.documentElement.scrollTop=<span class="number">0</span></span><br><span class="line">window.scrollTo(document.body.scrollHeight,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h1 id="更改元素属性"><a href="#更改元素属性" class="headerlink" title="更改元素属性"></a>更改元素属性</h1><p>大部分时间控件都是 readonly属性，需要手动去选择对应的时间。自动化测试中，可以使用JavaScript代码取消readonly属性。</p>
<p>测试页面：<a href="https://www.12306.cn/index/">https://www.12306.cn/index/</a></p>
<p><img src="1.png" alt="img"></p>
<p>测试步骤：</p>
<ol>
<li>打开测试页面</li>
<li>修改出发日期</li>
<li>断言日期是否修改成功</li>
</ol>
<p>python测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_datettime</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.12306.cn/index/&quot;</span>)</span><br><span class="line">    <span class="comment"># 取消readonly属性</span></span><br><span class="line">    self.driver.execute_script(<span class="string">&quot;dat=document.getElementById(&#x27;train_date&#x27;); dat.removeAttribute(&#x27;readonly&#x27;)&quot;</span>)   </span><br><span class="line">    self.driver.execute_script(<span class="string">&quot;document.getElementById(&#x27;train_date&#x27;).value=&#x27;2020-10-01&#x27;&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    now_time = self.driver.execute_script(<span class="string">&quot;return document.getElementById(&#x27;train_date&#x27;).value&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;2020-10-01&#x27;</span> == now_time</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> Selenium WebDriver 执行 JavaScript代码是一个非常强大的功能，可以实现WebElement 接口所有功能，甚至更多的功能。比如在web性能测试中可以调用Web API接口window.performance来测试Web性能。</p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | xpath &amp; CSS Selector定位</title>
    <url>/posts/selenium-xpath-and-CSS-Selector-locator/</url>
    <content><![CDATA[<h1 id="Xpath-和-CSS-Selector简介"><a href="#Xpath-和-CSS-Selector简介" class="headerlink" title="Xpath 和 CSS Selector简介"></a>Xpath 和 CSS Selector简介</h1><h2 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h2><p>CSS Selector和Xpath都可以用来表示XML文档中的位置。CSS (Cascading Style Sheets)是一种样式表语言，是所有浏览器内置的，用于描述以HTML或XML编写的文档的外观和样式。CSS Selector用于选择样式化的元素，所以理论上前端人员可以定位 DOM 节点并设置样式，那么对于测试人员这些元素也可以定位到。<br><a id="more"></a></p>
<h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p>XPath是XML路径语言，是一种查询语言，使用路径表达式浏览XML文档中的元素和属性。XPath标准语法如下：</p>
<p><strong>Xpath=//tagname[@attribute=’value’]</strong></p>
<ul>
<li>\// : 选择当前节点</li>
<li>Tagname: 节点标签名</li>
<li>@: 选择属性</li>
<li>Attribute: 节点属性名</li>
<li>Value: 属性值</li>
</ul>
<p>XPath有绝对定位和相对定位两种，绝对定位使用绝对路径，缺点是路径太长，只要一个节点变动就无法定位。以单斜杠（/）开始，表示从根节点开始选择元素。下面是页面<a href="https://www.baidu.com/上“百度一下”按钮的绝对路径：">https://www.baidu.com/上“百度一下”按钮的绝对路径：</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;html&#x2F;body&#x2F;div[1]&#x2F;div[1]&#x2F;div[5]&#x2F;div[1]&#x2F;div&#x2F;form&#x2F;span[2]&#x2F;input</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt="img"></p>
<p>相对路径以双斜杠（//）开始，可以从HTML文档的任何位置开始，“百度一下”按钮的相对路径可以表示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;input[@id&#x3D;&quot;su&quot;]</span><br></pre></td></tr></table></figure>
<h2 id="Xpath-VS-CSS-Selector"><a href="#Xpath-VS-CSS-Selector" class="headerlink" title="Xpath VS. CSS Selector"></a>Xpath VS. CSS Selector</h2><p>CSS Selector和Xpath几乎可以定位到所有Web元素（HTML和XML文档元素，Android应用的层级结构使用xml编写），它们的主要差异包括：</p>
<ol>
<li>XPath通过遍历的方式从XML文档中选择节点，CSS Selector是一种匹配模式定位，因此CSS Selector比 XPath 执行效率更高。</li>
<li>Xpath可以通过文本来定位，而CSS Selector不能；</li>
<li>Xpath可以通过子节点来定位父节点，CSS Selector是前向的，不能利用子节点定位父节点。</li>
<li>CSS Selector语法相比Xpath更加简洁</li>
</ol>
<h1 id="Xpath-和-CSS-Selector元素定位"><a href="#Xpath-和-CSS-Selector元素定位" class="headerlink" title="Xpath 和 CSS Selector元素定位"></a>Xpath 和 CSS Selector元素定位</h1><p>接下来对比一下这两种方法的语法差异，节点的定义我们规定如下：</p>
<p><img src="2.png" alt="img"></p>
<h2 id="儿子元素定位"><a href="#儿子元素定位" class="headerlink" title="儿子元素定位"></a>儿子元素定位</h2><p>xpath使用‘/’，CSS Selector使用‘&gt;’</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Xpath</th>
<th>CSS Selector</th>
</tr>
</thead>
<tbody>
<tr>
<td>语法</td>
<td>//element/element</td>
<td>element&gt;element</td>
</tr>
<tr>
<td>示例</td>
<td>//div/a</td>
<td>div &gt; a</td>
</tr>
<tr>
<td>描述</td>
<td>选择父元素为 \<div> 元素的所有 \<a> 元素。</td>
</tr>
</tbody>
</table>
</div>
<p>还可以使用XPath Axes（轴）<strong>child</strong> 来定位子元素</p>
<p>XPATH:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//div/child::*   <span class="comment"># 选择父元素为 &lt;div&gt; 元素的所有儿子元素</span></span><br><span class="line">//div/child::a  <span class="comment"># 选择父元素为 &lt;div&gt; 元素的所有&lt;a&gt;元素</span></span><br></pre></td></tr></table></figure>
<p>CSS Selector:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">div &gt; a:nth-child(<span class="number">2</span>) <span class="comment"># 选择父元素为 &lt;div&gt; 元素的第二个&lt;a&gt;元素</span></span><br><span class="line">div &gt; a:nth-last-child(<span class="number">2</span>) <span class="comment"># 选择父元素为 &lt;div&gt; 元素的倒数第二个&lt;a&gt;元素</span></span><br><span class="line">div &gt; a:last-child <span class="comment"># 选择父元素为 &lt;div&gt; 元素的最后一个&lt;a&gt;元素</span></span><br><span class="line">div &gt; a:first-child <span class="comment"># 选择父元素为 &lt;div&gt; 元素的第一个&lt;a&gt;元素</span></span><br></pre></td></tr></table></figure>
<h2 id="子孙元素定位"><a href="#子孙元素定位" class="headerlink" title="子孙元素定位"></a>子孙元素定位</h2><p>xpath使用‘//’，CSS Selector使用空格</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><strong>Xpath</strong></th>
<th><strong>CSS Selector</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>语法</strong></td>
<td>//element//element</td>
<td>element element</td>
</tr>
<tr>
<td><strong>示例</strong></td>
<td>//div//a</td>
<td>div a</td>
</tr>
<tr>
<td><strong>描述</strong></td>
<td>选择 \<div> 元素内部的所有 \<a> 元素。</td>
</tr>
</tbody>
</table>
</div>
<p>还可以使用XPath Axes（轴）<strong>descendant</strong> 来定位子孙元素</p>
<p>XPATH:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//div/descendant::*   <span class="comment"># 选择祖先元素为 &lt;div&gt; 元素的所有子孙元素</span></span><br><span class="line">//div/descendant::a  <span class="comment"># 选择祖先元素为 &lt;div&gt; 元素的所有&lt;a&gt;元素     </span></span><br></pre></td></tr></table></figure>
<p>CSS Selector使用空格定位子孙元素后进行选择:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">div a:nth-child(<span class="number">2</span>) <span class="comment"># 选择祖先元素为 &lt;div&gt; 元素的第二个&lt;a&gt;元素</span></span><br><span class="line">div a:nth-last-child(<span class="number">2</span>) <span class="comment"># 选择祖先元素为 &lt;div&gt; 元素的倒数第二个&lt;a&gt;元素</span></span><br><span class="line">div a:last-child <span class="comment"># 选择祖先元素为 &lt;div&gt; 元素的最后一个&lt;a&gt;元素</span></span><br><span class="line">div a:first-child <span class="comment"># 选择祖先元素为 &lt;div&gt; 元素的第一个&lt;a&gt;元素</span></span><br></pre></td></tr></table></figure>
<h2 id="邻居节点定位"><a href="#邻居节点定位" class="headerlink" title="邻居节点定位"></a>邻居节点定位</h2><p>在同一个父节点下，定位下一个相邻节点</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><strong>Xpath</strong></th>
<th><strong>CSS Selector</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>语法</strong></td>
<td>//element/following-sibling::element</td>
<td>element + element</td>
</tr>
<tr>
<td><strong>示例</strong></td>
<td>//div/following-sibling::a</td>
<td>div + a</td>
</tr>
<tr>
<td><strong>描述</strong></td>
<td>选择紧接在 \<div> 元素之后的所有 \<p> 元素。</td>
</tr>
</tbody>
</table>
</div>
<p>Xpath可以定位当前节点前面的邻居节点，CSS Selector不能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//*element/preceding-sibling::element</span><br></pre></td></tr></table></figure>
<h2 id="父元素、祖先元素定位"><a href="#父元素、祖先元素定位" class="headerlink" title="父元素、祖先元素定位"></a>父元素、祖先元素定位</h2><p>CSS Selector是前向的，不能利用子节点定位父节点</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>..</td>
<td>一个点”.“表示选取当前节点，两个点”..“表示选取当前节点的父节点。</td>
</tr>
<tr>
<td>ancestor</td>
<td>当前节点祖先元素（父、祖父…）</td>
</tr>
<tr>
<td>parent</td>
<td>当前节点的父节点</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Id定位"><a href="#Id定位" class="headerlink" title="Id定位"></a>Id定位</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><strong>Xpath</strong></th>
<th><strong>CSS Selector</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>语法</strong></td>
<td>//*[@id=’example’]</td>
<td>#example</td>
</tr>
<tr>
<td><strong>示例</strong></td>
<td>//*[@id=’uesrname’]</td>
<td>#uesrname</td>
</tr>
<tr>
<td><strong>描述</strong></td>
<td>选择id=’uesrname’的元素。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Class定位"><a href="#Class定位" class="headerlink" title="Class定位"></a>Class定位</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><strong>Xpath</strong></th>
<th><strong>CSS Selector</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>语法</strong></td>
<td>//*[@class=’example’]</td>
<td>.example</td>
</tr>
<tr>
<td><strong>示例</strong></td>
<td>//*[@class=’uesrname’]</td>
<td>.uesrname</td>
</tr>
<tr>
<td><strong>描述</strong></td>
<td>选择class=’uesrname’的元素。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="属性值定位"><a href="#属性值定位" class="headerlink" title="属性值定位"></a>属性值定位</h2><p>没有Id和Class的情况下，可以使用其它属性值定位，比如name、type等。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><strong>Xpath</strong></th>
<th><strong>CSS Selector</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>语法</strong></td>
<td>//*[@attribute=’value’]</td>
<td>[attribute=value]</td>
</tr>
<tr>
<td><strong>示例</strong></td>
<td>//*[@name=’uesrname’]</td>
<td>[name=’username’]</td>
</tr>
<tr>
<td><strong>描述</strong></td>
<td>选择属性值<em>name=’uesrname’的</em>元素。</td>
</tr>
</tbody>
</table>
</div>
<p>xpath可以使用 ‘and’ 或者 ‘or’ 连接两个属性：</p>
<p>XPATH：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//<span class="built_in">input</span>[@name=<span class="string">&#x27;login&#x27;</span><span class="keyword">and</span> @<span class="built_in">type</span>=<span class="string">&#x27;submit&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>CSS Selector：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>[name=<span class="string">&#x27;login&#x27;</span>][<span class="built_in">type</span>=<span class="string">&#x27;submit&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>CSS Selector可以进行子字符串匹配进行定位:</p>
<p>^= 匹配前缀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">id</span>^=<span class="string">&#x27;id_prefix_&#x27;</span>] <span class="comment"># id前缀为‘id_prefix_’的元素</span></span><br></pre></td></tr></table></figure>
<p>$= 匹配后缀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">id</span>$=<span class="string">&#x27;_id_sufix&#x27;</span>] <span class="comment"># id后缀为‘_id_sufix’的元素</span></span><br></pre></td></tr></table></figure>
<p>*= 包含某个字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">id</span>*=<span class="string">&#x27;id_pattern&#x27;</span>] <span class="comment"># id包含‘id_pattern’的元素</span></span><br></pre></td></tr></table></figure>
<h2 id="Xpath-Contains-方法"><a href="#Xpath-Contains-方法" class="headerlink" title="Xpath Contains()方法"></a>Xpath Contains()方法</h2><p>Contains()方法允许通过部分文本来定位查找元素，CSS Selector不支持这种用法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Xpath = //*[contains(@<span class="built_in">type</span>,<span class="string">&#x27;partial_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[contains(@name,<span class="string">&#x27;partial_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[contains(@class,&#x27;partial_text&#x27;)]</span><br><span class="line">Xpath = //*[contains(@<span class="built_in">id</span>,<span class="string">&#x27;partial_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[contains(text(),<span class="string">&#x27;partial_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[contains(@href,<span class="string">&#x27;partial_text&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="Xpath-Starts-with-方法"><a href="#Xpath-Starts-with-方法" class="headerlink" title="Xpath Starts-with()方法"></a>Xpath Starts-with()方法</h2><p>查找属性值以特定文本开始的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Xpath = //*[starts-<span class="keyword">with</span>(@<span class="built_in">type</span>,<span class="string">&#x27;start_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[starts-<span class="keyword">with</span>(@name,<span class="string">&#x27;start_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[starts-with(@class,&#x27;start_text&#x27;)]</span><br><span class="line">Xpath = //*[starts-<span class="keyword">with</span>(@<span class="built_in">id</span>,<span class="string">&#x27;start_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[starts-<span class="keyword">with</span>(text(),<span class="string">&#x27;start_text&#x27;</span>)]</span><br><span class="line">Xpath = //*[starts-<span class="keyword">with</span>(@href,<span class="string">&#x27;start_text&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="Xpath-Text-方法"><a href="#Xpath-Text-方法" class="headerlink" title="Xpath Text()方法"></a>Xpath Text()方法</h2><p>Text()方法基于web元素文本来进行定位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Xpath = //*[text()=<span class="string">&#x27;text_value&#x27;</span>]   </span><br></pre></td></tr></table></figure>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="定位第n个元素"><a href="#定位第n个元素" class="headerlink" title="定位第n个元素"></a>定位第n个元素</h2><p>如果某个XPath表达式可以定位到多个元素标签，可以通过<code>(xpath表达式)[index]</code> 定位第<code>index</code>个元素，index索引从<code>1</code>开始。<br><img src="hao123-xpaths.png" width="60%" height="60%" /><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击百度页面 hao123 </span></span><br><span class="line">self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">self.driver.find_element_by_xpath(<span class="string">&#x27;(//*[@id=&quot;s-top-left&quot;]/a)[2]&#x27;</span>).click()</span><br></pre></td></tr></table></figure></p>
<h2 id="子孙元素定位-1"><a href="#子孙元素定位-1" class="headerlink" title="子孙元素定位"></a>子孙元素定位</h2><p>百度一下”text“，点击<strong>”资讯“</strong></p>
<p><img src="3.png" alt="img"></p>
<p>Xpath：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//*[@<span class="built_in">id</span>=<span class="string">&quot;s_tab&quot;</span>]/descendant::a[<span class="number">1</span>]</span><br><span class="line">//*[@<span class="built_in">id</span>=<span class="string">&quot;s_tab&quot;</span>]/child::*[<span class="number">1</span>]/a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>CSS selector：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#s_tab a:nth-child(2)</span></span><br><span class="line"><span class="comment">#s_tab a:nth-last-child(9)</span></span><br></pre></td></tr></table></figure>
<p>python测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_css</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test&quot;</span>)        </span><br><span class="line">    self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()        </span><br><span class="line">    <span class="comment"># element = self.driver.find_element_by_css_selector(&quot;#s_tab a:nth-child(2)&quot;)</span></span><br><span class="line">    <span class="comment"># element = self.driver.find_element_by_css_selector(&#x27;#s_tab a:nth-last-child(9)&#x27;)</span></span><br><span class="line">    element = self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;s_tab&quot;]/descendant::a[1]&#x27;</span>)        </span><br><span class="line">    element.click()</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="邻居节点定位-1"><a href="#邻居节点定位-1" class="headerlink" title="邻居节点定位"></a>邻居节点定位</h2><p>点击<strong>”资讯“</strong>下一个邻居节点<strong>”视频“</strong></p>
<p>xpath</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//*[@<span class="built_in">id</span>=<span class="string">&quot;s_tab&quot;</span>]/descendant::a[<span class="number">1</span>]/following-sibling::a[<span class="number">1</span>]</span><br><span class="line">//*[@<span class="built_in">id</span>=<span class="string">&quot;s_tab&quot;</span>]/child::*[<span class="number">1</span>]/a[<span class="number">1</span>]/following-sibling::a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>CSS selector：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#s_tab a:nth-child(2) + a</span></span><br><span class="line"><span class="comment">#s_tab a:nth-last-child(9) + a</span></span><br></pre></td></tr></table></figure>
<p>python测试代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_css2</span>(<span class="params">self</span>):</span>   </span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()   </span><br><span class="line">    <span class="comment"># element = self.driver.find_element_by_css_selector(&#x27;#s_tab a:nth-child(2) + a&#x27;)   </span></span><br><span class="line">    element = self.driver.find_element_by_xpath(<span class="string">&#x27;//*@id=&quot;s_tab&quot;]/descendant::a[1]/following-sibling::a[1]&#x27;</span>)   </span><br><span class="line">    element.click()   </span><br><span class="line">    sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="Xpath-Contains-、Starts-with-、Text-定位"><a href="#Xpath-Contains-、Starts-with-、Text-定位" class="headerlink" title="Xpath Contains()、Starts-with()、Text()定位"></a>Xpath Contains()、Starts-with()、Text()定位</h2><p>测试页面：<a href="http://sahitest.com/demo/linkTest.htm">http://sahitest.com/demo/linkTest.htm</a></p>
<p>点击”<a href="http://sahitest.com/demo/linkByContent.htm">linkByContent</a>“</p>
<p><img src="4.png" alt="img"></p>
<p>xpath语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//*[contains(@href,<span class="string">&quot;Content&quot;</span>)]</span><br><span class="line">//*[starts-<span class="keyword">with</span>(@href,<span class="string">&quot;linkByC&quot;</span>)]</span><br><span class="line">//*[contains(text(),<span class="string">&quot;Content&quot;</span>)]</span><br><span class="line">//*[text()=<span class="string">&quot;linkByContent&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>python测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_css2</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.get(<span class="string">&quot;http://sahitest.com/demo/linkTest.htm&quot;</span>)</span><br><span class="line">    <span class="comment"># element = self.driver.find_element_by_xpath(&#x27;//*[contains(@href,&quot;Content&quot;)]&#x27;)</span></span><br><span class="line">    <span class="comment"># element = self.driver.find_element_by_xpath(&#x27;//*[starts-with(@href,&quot;linkByC&quot;)]&#x27;)</span></span><br><span class="line">    <span class="comment"># element = self.driver.find_element_by_xpath(&#x27;//*[contains(text(),&quot;Content&quot;)]&#x27;)</span></span><br><span class="line">    element = self.driver.find_element_by_xpath(<span class="string">&#x27;//*[text()=&quot;linkByContent&quot;]&#x27;</span>)</span><br><span class="line">    element.click()</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Xpath几乎可以定位到所有Web元素，CSS Selector效率更高，且代码简洁，但有些元素可能无法定位，特别是需要通过子元素来定位的父元素，或者需要通过文本定位的元素。</p>
<p>在实际使用中，按照自己的实际情况来选择即可，CSS Selector理论上执行效率更高，但他们的性能差异不是很大，在几毫秒或者几十毫秒级别。这两种定位方法除了本文介绍的以外，还有更多其它高级语法，可以参考官方文档。</p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>元素定位</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | 多浏览器测试</title>
    <url>/posts/selenium-browsers/</url>
    <content><![CDATA[<p>在浏览器的兼容性测试中，会测试产品在不同浏览器上的兼容性，比较主流的浏览器有IE、Firefox、Chrome，Opera，Safari等。还有其它如360、QQ、遨游、百度等浏览器都是基于IE或者chrome内核，或者IE+Chrome双内核开发，在测试这类浏览器时可以调用对应内核驱动。</p>
<p>不同的浏览器需要对应的驱动程序，这样selenium才能与浏览器进行通信。在启动WebDriver之前可以指定驱动的绝对位置，但还是建议将驱动添加到环境变量中，这样代码更易于维护，容易移植。<br><a id="more"></a><br>下面介绍selenium对几种浏览器的远程控制方法：</p>
<h1 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h1><h2 id="1-下载驱动"><a href="#1-下载驱动" class="headerlink" title="1. 下载驱动"></a>1. 下载驱动</h2><p>首先查看浏览器版本号，根据浏览器的版本号去下载对应的 chromedriver，Chrome浏览器版本与对应的驱动参考：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></p>
<p>驱动下载地址：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p>
<p>解压并将驱动添加到环境变量中</p>
<h2 id="2-python代码实现"><a href="#2-python代码实现" class="headerlink" title="2. python代码实现"></a>2. python代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line">browser_locale = <span class="string">&#x27;fr-FR&#x27;</span></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&quot;--lang=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(browser_locale)) <span class="comment"># 设置浏览器语言</span></span><br><span class="line">self.driver = webdriver.Chrome(chrome_options=options)</span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Firefox-火狐浏览器"><a href="#Firefox-火狐浏览器" class="headerlink" title="Firefox-火狐浏览器"></a>Firefox-火狐浏览器</h1><h2 id="1-下载驱动-1"><a href="#1-下载驱动-1" class="headerlink" title="1. 下载驱动"></a>1. 下载驱动</h2><p>浏览器版本、驱动geckodriver版本、Selenium版本对应关系参考：<a href="https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html">https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html</a></p>
<p>浏览器下载地址：<a href="http://ftp.mozilla.org/pub/firefox/releases/">http://ftp.mozilla.org/pub/firefox/releases/</a><br>驱动下载地址：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p>
<h2 id="2-python代码"><a href="#2-python代码" class="headerlink" title="2. python代码"></a>2. python代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Firefox</span><br><span class="line">self.driver = webdriver.Firefox()</span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="IE浏览器"><a href="#IE浏览器" class="headerlink" title="IE浏览器"></a>IE浏览器</h1><h2 id="1-下载驱动-2"><a href="#1-下载驱动-2" class="headerlink" title="1. 下载驱动"></a>1. 下载驱动</h2><p>下载IEDriverServer.exe  ：<a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></p>
<p>IE浏览器下载：<a href="https://support.microsoft.com/zh-cn/topic/下载-internet-explorer-11-脱机安装程序-99d492a1-3a62-077b-c476-cf028aff9a7f">https://support.microsoft.com/zh-cn/topic/%E4%B8%8B%E8%BD%BD-internet-explorer-11-%E8%84%B1%E6%9C%BA%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F-99d492a1-3a62-077b-c476-cf028aff9a7f</a></p>
<p>注意：设置internet选项&gt;安全 这4个选项全勾选或者不勾选，不然无法驱动IE浏览器。</p>
<p><img src="ie1.png" alt="img"></p>
<h2 id="2-python代码-1"><a href="#2-python代码-1" class="headerlink" title="2. python代码"></a>2. python代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Ie </span><br><span class="line">self.driver = webdriver.Ie() </span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Edge浏览器"><a href="#Edge浏览器" class="headerlink" title="Edge浏览器"></a>Edge浏览器</h1><h2 id="1-下载驱动-3"><a href="#1-下载驱动-3" class="headerlink" title="1. 下载驱动"></a>1. 下载驱动</h2><p>Edge浏览器版本与edgedriver驱动版本对应关系参考：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></p>
<p>edgedriver驱动下载地址：<a href="https://msedgewebdriverstorage.z22.web.core.windows.net/">https://msedgewebdriverstorage.z22.web.core.windows.net/</a></p>
<h2 id="2-python代码-2"><a href="#2-python代码-2" class="headerlink" title="2. python代码"></a>2. python代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Edge </span><br><span class="line">self.driver = Edge()</span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Opera浏览器-欧朋浏览器"><a href="#Opera浏览器-欧朋浏览器" class="headerlink" title="Opera浏览器-欧朋浏览器"></a>Opera浏览器-欧朋浏览器</h1><h2 id="1-下载驱动-4"><a href="#1-下载驱动-4" class="headerlink" title="1. 下载驱动"></a>1. 下载驱动</h2><p>Opera浏览器版本与OperaDriver驱动版本对应关系参考：<a href="https://github.com/operasoftware/operachromiumdriver/releases">https://github.com/operasoftware/operachromiumdriver/releases</a></p>
<p>Opera浏览器历史版本下载地址：<a href="https://get.geo.opera.com/pub/opera/desktop/">https://get.geo.opera.com/pub/opera/desktop/</a></p>
<h2 id="2-python代码-3"><a href="#2-python代码-3" class="headerlink" title="2. python代码"></a>2. python代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Opera </span><br><span class="line">self.driver = Opera()</span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="其它浏览器"><a href="#其它浏览器" class="headerlink" title="其它浏览器"></a>其它浏览器</h1><h2 id="360极速浏览器"><a href="#360极速浏览器" class="headerlink" title="360极速浏览器"></a>360极速浏览器</h2><p>360极速浏览器采用chrome内核，可以使用对应版本的chromedriver</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">option=webdriver.ChromeOptions()</span><br><span class="line">option.binary_location=<span class="string">r&#x27;D:/software/360Chrome/Chrome/Application/360chrome.exe&#x27;</span></span><br><span class="line">self.driver=webdriver.Chrome(options=option)</span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>binary_location为360极速浏览器安装路径下的可执行文件360chrome.exe的路径</p>
<h2 id="2345浏览器"><a href="#2345浏览器" class="headerlink" title="2345浏览器"></a>2345浏览器</h2><p>2345浏览器是基于IE+Chrome双内核开发，可以使用chromedriver来驱动它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">option=webdriver.ChromeOptions()</span><br><span class="line">option.binary_location=<span class="string">r&#x27;C:/Program Files (x86)/2345Soft/2345Explorer/2345Explorer.exe&#x27;</span></span><br><span class="line">self.driver=webdriver.Chrome(options=option)</span><br><span class="line">self.driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>其它基于chrome内核的浏览器也可以使用这种方法来驱动，基于IE内核开发的浏览器还没办法控制，如果各位看官有好的方法，欢迎后台留言！</p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | Select下拉框</title>
    <url>/posts/selenium-select/</url>
    <content><![CDATA[<p>在web自动化测试中，经常会遇到下拉框，对列出的选项进行选择，或者判断选择的选项，本文将介绍如何使用Selenium去操作下拉框，实现自动化测试。</p>
<a id="more"></a>
<h1 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h1><p>URL <a href="http://sahitest.com/demo/selectTest.htm">http://sahitest.com/demo/selectTest.htm</a></p>
<p><img src="1.png" alt="img"></p>
<h1 id="Select方法"><a href="#Select方法" class="headerlink" title="Select方法"></a>Select方法</h1><p>使用WebElement类的send_keys(value)方法也可以选择下拉框（select标签）的值，但它只能使用选项的value值来定位：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://sahitest.com/demo/selectTest.htm&quot;</span>)</span><br><span class="line">ele = self.driver.find_element_by_id(<span class="string">&#x27;s3Id&#x27;</span>)</span><br><span class="line">print(ele.text) <span class="comment"># 打印select所有选项值</span></span><br><span class="line">ele.send_keys(<span class="string">&quot;o2val&quot;</span>) <span class="comment"># 选择value=o2val 的选项</span></span><br><span class="line">print(ele.get_attribute(<span class="string">&quot;value&quot;</span>)) <span class="comment"># 打印所选择的value值</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o1</span><br><span class="line">o2</span><br><span class="line">o3</span><br><span class="line">    With spaces</span><br><span class="line">    With nbsp</span><br><span class="line">o2val</span><br></pre></td></tr></table></figure>
<p>select类所有方法：</p>
<ol>
<li><strong>select_by_index</strong>(<em>index</em>)：通过选项index选择</li>
<li><strong>select_by_value</strong>(<em>value</em>)：通过选项value值选择</li>
<li><strong>select_by_visible_text</strong>(<em>text</em>)：过显示的文本选择</li>
<li><strong>deselect_by_index</strong>(<em>index</em>)：取消选择，用于多选</li>
<li><strong>deselect_by_value</strong>(<em>value</em>)：取消选择，用于多选</li>
<li><strong>deselect_by_visible_text</strong>(<em>text</em>)：取消选择，用于多选</li>
<li><strong>deselect_all</strong>()：全部取消，用于多选</li>
<li>options：所有选项</li>
<li>first_selected_option：第一个选择的选项（多选情况下）或者当前选择的选项（单选）</li>
<li>all_selected_options：所有已经选择的选项</li>
</ol>
<h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p><strong>select_by_index、select_by_value、select_by_visible_text三种方法选择</strong></p>
<p>first_selected_option.text返回当前所选择的选项值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://sahitest.com/demo/selectTest.htm&quot;</span>)</span><br><span class="line">ele = self.driver.find_element_by_id(<span class="string">&#x27;s3Id&#x27;</span>)</span><br><span class="line">selected_element = Select(ele)  <span class="comment"># 实例化Select</span></span><br><span class="line">selected_element.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># for select in selected_element.all_selected_options:</span></span><br><span class="line"><span class="comment">#     print(select.text)</span></span><br><span class="line">print(selected_element.first_selected_option.text) <span class="comment"># 打印当前选择的选项值</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">selected_element.select_by_value(<span class="string">&quot;o2val&quot;</span>)</span><br><span class="line">print(selected_element.first_selected_option.text)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">selected_element.select_by_visible_text(<span class="string">&quot;o3&quot;</span>)</span><br><span class="line">print(selected_element.first_selected_option.text)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o1 </span><br><span class="line">o2 </span><br><span class="line">o3</span><br></pre></td></tr></table></figure>
<h1 id="取消选择"><a href="#取消选择" class="headerlink" title="取消选择"></a>取消选择</h1><p>取消选择<strong>deselect不能用于下拉框选择，只能用于多选，即属性</strong>multiple=”multiple”的select标签。</p>
<p>取消选择有<strong>deselect_by_index</strong>、<strong>deselect_by_value</strong>、<strong>deselect_by_visible_text</strong>、<strong>deselect_all四种方法</strong></p>
<p>all_selected_options返回所有已选择的选项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://sahitest.com/demo/selectTest.htm&quot;</span>)</span><br><span class="line"><span class="comment">## 多选</span></span><br><span class="line">ele2 = self.driver.find_element_by_id(<span class="string">&#x27;s4Id&#x27;</span>)</span><br><span class="line">selected_element2 = Select(ele2)  <span class="comment"># 实例化Select</span></span><br><span class="line">selected_element2.select_by_index(<span class="number">1</span>)</span><br><span class="line">selected_element2.select_by_index(<span class="number">2</span>)</span><br><span class="line">selected_element2.select_by_index(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&quot;######&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> select <span class="keyword">in</span> selected_element2.all_selected_options:</span><br><span class="line">    print(select.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;######&quot;</span>)</span><br><span class="line">selected_element2.deselect_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> select <span class="keyword">in</span> selected_element2.all_selected_options:</span><br><span class="line">    print(select.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;######&quot;</span>)</span><br><span class="line">selected_element2.deselect_by_value(<span class="string">&quot;o2val&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> select <span class="keyword">in</span> selected_element2.all_selected_options:</span><br><span class="line">    print(select.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;######&quot;</span>)</span><br><span class="line">selected_element2.deselect_by_visible_text(<span class="string">&quot;o3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> select <span class="keyword">in</span> selected_element2.all_selected_options:</span><br><span class="line">    print(select.text)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">######</span></span><br><span class="line">o1</span><br><span class="line">o2</span><br><span class="line">o3</span><br><span class="line"><span class="comment">######</span></span><br><span class="line">o2</span><br><span class="line">o3</span><br><span class="line"><span class="comment">######</span></span><br><span class="line">o3</span><br><span class="line"><span class="comment">######</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>元素定位</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | switch_to</title>
    <url>/posts/selenium-switch_to/</url>
    <content><![CDATA[<p>在web应用自动化测试中，点击一个链接或者按钮会打开一个新的浏览器窗口，会出现多个窗口实例。默认情况下的焦点在主窗口（父窗口），如果要对子窗口进行操作，就需要首先切换到子窗口。</p>
<p>Selenium WebDriver给每个窗口指定了一个唯一的ID，Selenium通过这个唯一ID实现在多个窗口之间切换。常见的有iframe，弹出对话框alert，新窗口等。本文将介绍这几种窗口的切换。<br><a id="more"></a></p>
<h1 id="iframe切换"><a href="#iframe切换" class="headerlink" title="iframe切换"></a>iframe切换</h1><p>在web自动化中，如果一个元素定位始终不到，如果locator没有写错，很大概率就是这个元素在iframe中。</p>
<h2 id="什么是frame？"><a href="#什么是frame？" class="headerlink" title="什么是frame？"></a>什么是frame？</h2><p>frame是html中的框架，通过使用frameset 标签将页面进行垂直或者水平分离。包含frameset、frame、 iframe三种标签。</p>
<p>演示代码：<a href="https://www.w3school.com.cn/tiy/t.asp?f=html_frame_cols">https://www.w3school.com.cn/tiy/t.asp?f=html_frame_cols</a></p>
<h2 id="frame切换"><a href="#frame切换" class="headerlink" title="frame切换"></a>frame切换</h2><p>切换到frame或者iframe后就可以进行操作，操作完成后需要切换回原来的框架：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.switch_to.frame() <span class="comment">#根据元素id或 index切换</span></span><br><span class="line">driver.switch_to.default_content() <span class="comment">#切换到默认 frame</span></span><br><span class="line">driver.switch_to.parent_frame() <span class="comment">#切换到父级 frame</span></span><br></pre></td></tr></table></figure>
<h2 id="多-frame切换"><a href="#多-frame切换" class="headerlink" title="多 frame切换"></a>多 frame切换</h2><p>测试页面：<a href="https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable">https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</a></p>
<p>切换iframe，打印’请拖拽我’元素文本</p>
<p><img src="1.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_iframe</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.driver.get(<span class="string">&quot;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&quot;</span>)</span><br><span class="line">      self.driver.switch_to.frame(<span class="string">&quot;iframeResult&quot;</span>)</span><br><span class="line">      print(self.driver.find_element_by_id(<span class="string">&quot;draggable&quot;</span>).text) <span class="comment"># 打印&#x27;请拖拽我&#x27;</span></span><br><span class="line">      <span class="comment"># self.driver.switch_to.parent_frame()</span></span><br><span class="line">      self.driver.switch_to.default_content()</span><br><span class="line">      print(self.driver.find_element_by_id(<span class="string">&quot;submitBTN&quot;</span>).text) <span class="comment">#点击运行</span></span><br></pre></td></tr></table></figure>
<h1 id="弹出对话框alert切换"><a href="#弹出对话框alert切换" class="headerlink" title="弹出对话框alert切换"></a>弹出对话框alert切换</h1><p>在页面操作时会遇到 JavaScript所生成的alert、 confirm以及prompt弹框，需要对弹框操作后才能进行下一步。</p>
<h2 id="操作alert常用的方法"><a href="#操作alert常用的方法" class="headerlink" title="操作alert常用的方法"></a>操作alert常用的方法</h2><ol>
<li>switch_to.alert()：切换到当前页面上的警告框</li>
<li>text：返回弹框文本信息</li>
<li>accept()：接受弹框，确认</li>
<li>dismiss()：取消弹框</li>
<li>send_keys(keysToSend)：发送文本至弹框</li>
</ol>
<h2 id="alert切换"><a href="#alert切换" class="headerlink" title="alert切换"></a>alert切换</h2><p>测试页面还是上面的页面，拖拽后会出现一个弹框，我们打印弹框内容并点击确定。</p>
<p><img src="2.png" alt="img"></p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_alert</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.driver.get(<span class="string">&quot;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&quot;</span>)</span><br><span class="line">      self.driver.switch_to.frame(<span class="string">&quot;iframeResult&quot;</span>)</span><br><span class="line">      drag = self.driver.find_element_by_id(<span class="string">&quot;draggable&quot;</span>)</span><br><span class="line">      drop = self.driver.find_element_by_id(<span class="string">&quot;droppable&quot;</span>)</span><br><span class="line">      action = ActionChains(self.driver)</span><br><span class="line">      action.drag_and_drop(drag, drop).perform()</span><br><span class="line">      sleep(<span class="number">2</span>)</span><br><span class="line">      alert = self.driver.switch_to.alert</span><br><span class="line">      print(alert.text)</span><br><span class="line">      alert.accept()</span><br><span class="line">      <span class="comment"># self.driver.switch_to.alert.accept()</span></span><br><span class="line">      self.driver.switch_to.default_content()</span><br><span class="line">      self.driver.find_element_by_id(<span class="string">&quot;submitBTN&quot;</span>).click()</span><br><span class="line">      sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h1 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h1><p>有时候点击某些链接会打开一个新的窗口，需要先切换窗口才能在新页面上操作。selenium通过切换窗口句柄来进行多个窗口之间的切换。</p>
<h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><ol>
<li>获取当前的窗口句柄(driver.current_window_handle)</li>
<li>获取当前会话下的所有窗口句柄(driver.window_handles)</li>
<li>切换窗口(driver.switch_to_window)</li>
<li>切回原窗口(driver.switch_to_window)</li>
</ol>
<h2 id="多窗口切换-1"><a href="#多窗口切换-1" class="headerlink" title="多窗口切换"></a>多窗口切换</h2><p>1、打开百度，点击登录，进入注册界面，返回登录页</p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_window</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">      self.driver.find_element_by_link_text(<span class="string">&quot;登录&quot;</span>).click()</span><br><span class="line">      <span class="comment"># print(self.driver.current_window_handle) # 当前的窗口句柄</span></span><br><span class="line">      self. driver.find_element_by_link_text(<span class="string">&quot;立即注册&quot;</span>).click()</span><br><span class="line">      windows = self.driver.window_handles <span class="comment"># 所有窗口句柄</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 切换到注册窗口</span></span><br><span class="line">      self.driver.switch_to.window(windows[-<span class="number">1</span>])</span><br><span class="line">      self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_4__userName&quot;</span>).send_keys(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">      self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_4__phone&quot;</span>).send_keys(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">      sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 切换回登录窗口</span></span><br><span class="line">      self.driver.switch_to.window(windows[<span class="number">0</span>])</span><br><span class="line">      self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_10__footerULoginBtn&quot;</span>).click()</span><br></pre></td></tr></table></figure>
<p>2、打开新窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_window2</span>(<span class="params">self</span>):</span></span><br><span class="line">	self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">	js = <span class="string">&quot;window.open(&#x27;http://www.sogou.com&#x27;)&quot;</span></span><br><span class="line">	self.driver.execute_script(js)</span><br><span class="line">	sleep(<span class="number">3</span>)</span><br><span class="line">	windows = self.driver.window_handles</span><br><span class="line">	print(windows)</span><br><span class="line">	<span class="comment"># 切换到新打开的窗口</span></span><br><span class="line">	self.driver.switch_to.window(windows[-<span class="number">1</span>])</span><br><span class="line">	self.driver.find_element_by_id(<span class="string">&quot;query&quot;</span>).send_keys(<span class="string">&quot;test sogou&quot;</span>) <span class="comment"># 搜狗搜索框</span></span><br><span class="line">	sleep(<span class="number">3</span>)</span><br><span class="line">	self.driver.close() <span class="comment"># 关闭新打开的窗口</span></span><br><span class="line">	<span class="comment"># 切回窗口</span></span><br><span class="line">	self.driver.switch_to.window(windows[<span class="number">0</span>])</span><br><span class="line">	self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test baidu&quot;</span>) <span class="comment"># 百度搜索框</span></span><br><span class="line">	sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h1 id="获取当前焦点元素"><a href="#获取当前焦点元素" class="headerlink" title="获取当前焦点元素"></a>获取当前焦点元素</h1><p>switch_to还有一个方法叫switch_to.active_element，返回当前焦点的WebElement对象，用于判断当前焦点是否位于某个web元素。有时候需要测试打开一个网页，焦点是否在输入框，比如账号密码登录页面。</p>
<p>测试：打开<a href="https://www.baidu.com/，焦点在输入框">https://www.baidu.com/，焦点在输入框</a></p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_element_focus</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    baidu = self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> baidu == self.driver.switch_to.active_element</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | ActionChains、TouchAction</title>
    <url>/posts/selenium-actionchains-touchaction/</url>
    <content><![CDATA[<p>ActionChains和TouchAction可以用来模拟点击、双击、滑动等事件。ActionChains用于执行PC端的鼠标移动、按键、拖拽等事件；TouchActions用法与ActionChains类似，可以用来模拟PC和移动端的点击、滑动、拖拽等手势操作。</p>
<p>ActionChains和TouchAction都是将动作存储在队列中，然后执行perform()方法，按队列顺序执行动作。</p>
<a id="more"></a>
<h1 id="ActionChains"><a href="#ActionChains" class="headerlink" title="ActionChains"></a>ActionChains</h1><p>有两种执行方式</p>
<p>链式：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ActionChains(driver).move_to_element(element).click(element).perform()</span><br></pre></td></tr></table></figure><br>分布式：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">actions=ActionChains(driver) </span><br><span class="line">actions.move_to_element(element) </span><br><span class="line">actions.click(element) </span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></p>
<h2 id="例一：点击，右键，双击操作"><a href="#例一：点击，右键，双击操作" class="headerlink" title="例一：点击，右键，双击操作"></a>例一：点击，右键，双击操作</h2><p>测试页面：<a href="http://sahitest.com/demo/clicks.htm">http://sahitest.com/demo/clicks.htm</a></p>
<p><img src="1.png" alt="img"></p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://sahitest.com/demo/clicks.htm&quot;</span>) </span><br><span class="line">click = self.driver.find_element_by_xpath(<span class="string">&quot;//*[@value=&#x27;click me&#x27;]&quot;</span>) </span><br><span class="line">doubleclick = self.driver.find_element_by_xpath(<span class="string">&quot;//*[@value=&#x27;dbl click me&#x27;]&quot;</span>) </span><br><span class="line">rightclick = self.driver.find_element_by_xpath(<span class="string">&quot;//*[@value=&#x27;right click me&#x27;]&quot;</span>) </span><br><span class="line">action= ActionChains(self.driver) </span><br><span class="line">action.click(element_click) </span><br><span class="line">action.context_click(element_rightclick) </span><br><span class="line">action.double_click(element_doubleclick) </span><br><span class="line">action. perform()</span><br></pre></td></tr></table></figure>
<h2 id="例二：移动鼠标到某个元素上"><a href="#例二：移动鼠标到某个元素上" class="headerlink" title="例二：移动鼠标到某个元素上"></a>例二：移动鼠标到某个元素上</h2><p>将鼠标移动到“新闻”后进行点击</p>
<p><img src="2.png" alt="img"></p>
<p>python代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>) </span><br><span class="line">ele = self.driver.find_element_by_link_text(<span class="string">&quot;新闻&quot;</span>) </span><br><span class="line">action = ActionChains(self.driver) </span><br><span class="line">action.move_to_element(ele) </span><br><span class="line">action.click() </span><br><span class="line">action.perform()</span><br></pre></td></tr></table></figure></p>
<h2 id="例三：通过像素坐标点击页面"><a href="#例三：通过像素坐标点击页面" class="headerlink" title="例三：通过像素坐标点击页面"></a>例三：通过像素坐标点击页面</h2><p>使用move_by_offset()方法实现点击页面，像素坐标可以使用截图工具来获取。</p>
<p>python代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ActionChains(self.driver).move_by_offset(x, y).click().perform() <span class="comment">#左键点击</span></span><br><span class="line">ActionChains(self.driver).move_by_offset(x, y).context_click().perform() <span class="comment">#右键点击</span></span><br></pre></td></tr></table></figure></p>
<h2 id="例四：模拟键盘输入"><a href="#例四：模拟键盘输入" class="headerlink" title="例四：模拟键盘输入"></a>例四：模拟键盘输入</h2><p>模拟键盘输入可以使用win32api模块，也可以用 selenium的WebElement对象的send_keys()方法来实现：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = self.driver.find_element_by_id(element) element.send_keys(**<span class="string">&quot;test&quot;</span>**) element.send_keys(Keys.BACK_SPACE) <span class="keyword">assert</span> element.get_attribute(<span class="string">&quot;value&quot;</span>) == <span class="string">&quot;tes&quot;</span></span><br></pre></td></tr></table></figure><br>ActionChains类也可以模拟键盘输入：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Action = ActionChains(driver) action.send_keys(Keys.BACK_SPACE) <span class="comment"># 回退 </span></span><br><span class="line">action.key_down(Keys.CONTROL).send_keys(<span class="string">&#x27;a&#x27;</span>).key_up(Keys.CONTROL) <span class="comment"># CTRL+A </span></span><br><span class="line">action.perform() <span class="comment"># 执行</span></span><br></pre></td></tr></table></figure><br>测试页面：<a href="http://sahitest.com/demo/label.htm">http://sahitest.com/demo/label.htm</a></p>
<p><img src="3.png" alt="img"></p>
<p>在文本框1中输入内容，然后将文本框1的内容复制粘贴到文本框2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://sahitest.com/demo/label.htm&quot;</span>) </span><br><span class="line">ele1 = self.driver.find_element_by_xpath(<span class="string">&quot;/htmL/body/label[1]/input&quot;</span>) </span><br><span class="line">ele2 = self.driver.find_element_by_xpath(<span class="string">&quot;/html/body/label[2]/table/tbody/tr/td[2]/input&quot;</span>) </span><br><span class="line">ele1.click() </span><br><span class="line">action= ActionChains(self.driver) </span><br><span class="line">action.send_keys(<span class="string">&quot;testing&quot;</span>).pause(<span class="number">1</span>) </span><br><span class="line">action.send_keys(Keys.SPACE).pause(<span class="number">1</span>) <span class="comment"># 空格 </span></span><br><span class="line">action.send_keys(<span class="string">&quot;1&quot;</span>).pause(<span class="number">1</span>) </span><br><span class="line">action.send_keys(Keys.BACK_SPACE) <span class="comment">#回退 </span></span><br><span class="line">action.key_down(Keys.CONTROL).send_keys(<span class="string">&#x27;a&#x27;</span>).key_up(Keys.CONTROL) <span class="comment">#CTRL+A </span></span><br><span class="line">action.key_down(Keys.CONTROL).send_keys(<span class="string">&#x27;c&#x27;</span>).key_up(Keys.CONTROL) <span class="comment">#CTRL+C </span></span><br><span class="line">action.key_down(Keys.CONTROL,ele2).send_keys(<span class="string">&#x27;v&#x27;</span>).key_up(Keys.CONTROL) <span class="comment">#CTRL+V </span></span><br><span class="line">action.send_keys(Keys.BACK_SPACE).perform()</span><br></pre></td></tr></table></figure>
<h2 id="例五：拖拽"><a href="#例五：拖拽" class="headerlink" title="例五：拖拽"></a>例五：拖拽</h2><p>测试页面：<a href="http://sahitest.com/demo/dragDropMooTools.htm">http://sahitest.com/demo/dragDropMooTools.htm</a></p>
<p><img src="4.png" alt="img"></p>
<p>python代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://sahitest.com/demo/dragDropMooTools.htm&quot;</span>) </span><br><span class="line">drag_ele = self.driver.find_element_by_id(<span class="string">&quot;dragger&quot;</span>) </span><br><span class="line">Item1 = self.driver.find_element_by_xpath(<span class="string">&quot;/htmL/body/div[2]&quot;</span>) </span><br><span class="line">Item2 = self.driver.find_element_by_xpath(<span class="string">&quot;/html/body/div[3]&quot;</span>) </span><br><span class="line">Item3 = self.driver.find_element_by_xpath(<span class="string">&quot;/html/body/div[4]&quot;</span>) </span><br><span class="line">action= ActionChains(self.driver) </span><br><span class="line">action.drag_and_drop(drag_ele, Item1).pause(<span class="number">1</span>) <span class="comment"># 方法1 </span></span><br><span class="line">action.click_and_hold(drag_ele).release(Item2).pause(<span class="number">1</span>)<span class="comment"># 方法2 </span></span><br><span class="line">action.click_and_hold(drag_ele).move_to_element(Item3).release()<span class="comment"># 方法3 </span></span><br><span class="line">action.perform()</span><br></pre></td></tr></table></figure></p>
<h1 id="TouchAction"><a href="#TouchAction" class="headerlink" title="TouchAction"></a>TouchAction</h1><p>ActionChains无法操作H5页面，TouchAction可以对H5页面进行操作，实现点击，滑动，拖拽，模拟手势等各种操作。</p>
<h2 id="手势控制方法"><a href="#手势控制方法" class="headerlink" title="手势控制方法"></a>手势控制方法</h2><ul>
<li><p>double_tap 双击</p>
</li>
<li><p>flick 滑动</p>
</li>
<li><p>flick_element 从某个元素位置开始滑动</p>
</li>
<li><p>long_press 长按</p>
</li>
<li><p>move 手势移动指定偏移</p>
</li>
<li><p>Perform 执行</p>
</li>
<li><p>release 释放手势</p>
</li>
<li><p>scroll 点击并滚动</p>
</li>
<li><p>scroll_from_element 从某个元素位置开始手势点击并滚动(向下滑动为负数,向上滑动为正数)</p>
</li>
<li><p>flick_element——从某个元素位置开始手势滑动(负数：向上滑动，正数：向下滑动)</p>
</li>
<li><p>tap 在指定元素上点击</p>
</li>
<li><p>tap_and_hold 在指定元素上点击但不释放</p>
</li>
</ul>
<h2 id="例一：点击、滑动"><a href="#例一：点击、滑动" class="headerlink" title="例一：点击、滑动"></a>例一：点击、滑动</h2><p>百度搜索关键字，tap方法点击百度一下，滑动到底部，点击下一页</p>
<p>python代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>) </span><br><span class="line"><span class="built_in">input</span> = self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>) </span><br><span class="line">search = self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>) </span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&quot;test&quot;</span>) </span><br><span class="line">action = TouchActions(self.driver) </span><br><span class="line">action.tap(search) </span><br><span class="line">action.perform() </span><br><span class="line">action.scroll_from_element(<span class="built_in">input</span>, <span class="number">0</span>, <span class="number">10000</span>).perform() </span><br><span class="line"><span class="built_in">next</span> = self.driver.find_element_by_link_text(<span class="string">&quot;下一页 &gt;&quot;</span>) </span><br><span class="line"><span class="built_in">next</span>.click()</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ActionChains和TouchAction实现了鼠标和键盘的模拟输入，更详细的介绍可以参考官方文档 <a href="https://selenium-python.readthedocs.io/api.html。">https://selenium-python.readthedocs.io/api.html。</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | 元素操作</title>
    <url>/posts/selenium-webelement-operate/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们定位到Web页面元素之后，可以对元素进行一系列的操作，实现跟页面的交互。包括点击、文本输入、元素属性获取等。常用的方法列举如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>click</strong>()</td>
<td>点击元素</td>
</tr>
<tr>
<td><strong>send_keys</strong>(<em>*value</em>)</td>
<td>用于向EditText(可编辑文本控件)输入文本；还可以用于输入文件（如百度图片搜索输入图片）</td>
</tr>
<tr>
<td><strong>get_attribute</strong>(<em>name</em>)</td>
<td>获取元素属性</td>
</tr>
<tr>
<td><strong>is_selected</strong>()</td>
<td>元素是否被选择，一般用于判断checkbox 或者 radio 控件状态</td>
</tr>
<tr>
<td><strong>screenshot</strong>(<em>filename</em>)</td>
<td>截取元素</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h1 id="点击、输入文本"><a href="#点击、输入文本" class="headerlink" title="点击、输入文本"></a>点击、输入文本</h1><ol>
<li>打开 <a href="https://www.baidu.com/"><strong>https://www.baidu.com/</strong></a></li>
<li><strong>搜索框输入“test”</strong></li>
<li>点击“百度一下”</li>
<li>关闭网页</li>
</ol>
<p><img src="1.png" alt="img"></p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br></pre></td></tr></table></figure>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>input标签可以直接使用<code>send_keys(文件地址)</code>上传文件</p>
<p>打开百度图片搜索，输入图片地址</p>
<p><img src="2.png" alt="img"></p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.get(<span class="string">&quot;https://image.baidu.com/&quot;</span>)</span><br><span class="line">self.driver.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;sttb&#x27;]/img[1]&quot;</span>).click()</span><br><span class="line">self.driver.find_element_by_id(<span class="string">&quot;stfile&quot;</span>).send_keys(<span class="string">u&quot;D:/TestingDemo/img/图片.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="get-attribute"><a href="#get-attribute" class="headerlink" title="get_attribute()"></a>get_attribute()</h1><p>获取元素属性</p>
<p>比如获取“<strong>百度一下</strong>”这个button的属性：type、id、value、class</p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">baidu = self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line">baidu.get_attribute(<span class="string">&quot;type&quot;</span>)</span><br><span class="line">baidu.get_attribute(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">baidu.get_attribute(<span class="string">&quot;value&quot;</span>)</span><br><span class="line">baidu.get_attribute(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="is-selected"><a href="#is-selected" class="headerlink" title="is_selected()"></a>is_selected<strong>()</strong></h1><p>在勾选单选框（radio）和复选框（checkbox）的时候，如果已经被选中，再次点击就会反选了，所以在点击之前需要判断一下是否已经选中。可以使用is_selected()方法来判断是否被选中</p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkbox_switch</span>(<span class="params">self,switch=<span class="string">&quot;ON&quot;</span></span>):</span></span><br><span class="line">    self.driver = webdriver.Chrome()</span><br><span class="line">    sw = self.driver.find_element_by_id(<span class="string">&#x27;id_of_checkbox&#x27;</span>).is_selected()</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> switch == <span class="string">&quot;ON&quot;</span>:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> sw^flag:</span><br><span class="line">            self.driver.find_element_by_id(<span class="string">&#x27;id_of_checkbox&#x27;</span>).click()</span><br><span class="line">            self.driver.quit()</span><br></pre></td></tr></table></figure>
<h1 id="screenshot"><a href="#screenshot" class="headerlink" title="screenshot()"></a><strong>screenshot()</strong></h1><p>截取元素</p>
<p>python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver = webdriver.Chrome()</span><br><span class="line">self.driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">element = self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)  <span class="comment"># 百度一下的按钮</span></span><br><span class="line">element.screenshot(<span class="string">&#x27;D:\\baidu.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果图baidu.png</p>
<p><img src="3.png" alt="img"></p>
<p>当然也可以保存整个页面窗口截图</p>
<ul>
<li><strong>get_screenshot_as_base64</strong>()</li>
<li><strong>get_screenshot_as_file</strong>(<em>filename</em>)</li>
<li><strong>get_screenshot_as_png</strong>()</li>
<li><strong>save_screenshot</strong>(<em>filename</em>)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭selenium打开的所有窗口</span></span><br><span class="line">driver.quit()</span><br><span class="line"><span class="comment"># 仅关闭当前窗口</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># 前进</span></span><br><span class="line">driver.forward()</span><br><span class="line"><span class="comment"># 后退</span></span><br><span class="line">driver.back()</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">driver.refresh()</span><br><span class="line"><span class="comment"># 头名字</span></span><br><span class="line">driver.title</span><br><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line">driver.get_cookies()</span><br><span class="line"><span class="comment"># 返回当前页面url</span></span><br><span class="line">driver.current_url</span><br></pre></td></tr></table></figure>
<p>控件操作<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空输入框数据</span></span><br><span class="line">element.clear()  </span><br><span class="line"><span class="comment"># 获取文本的值</span></span><br><span class="line">element.text</span><br><span class="line"><span class="comment"># 表单提交</span></span><br><span class="line">element.submit()</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>元素定位</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Web自动化测试 | Web元素定位</title>
    <url>/posts/selenium_webelement_locator/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Selenium是用于Web应用测试的自动化测试框架，可以实现跨浏览器和跨平台的Web自动化测试。Selenium通过使用WebDriver API来控制web浏览器，每个浏览器都都有一个特定的WebDriver 驱动，处理与Selenium和浏览器之间的通信。</p>
<a id="more"></a>
<p>实现Web页面自动化控制的先决条件是定位到正确的Web页面元素，WebDriver提供了8种不同的Web元素定位方法：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Locator</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">ID属性，最常用的定位方法，每个元素的id应该是唯一的</td>
</tr>
<tr>
<td style="text-align:left">css selector</td>
<td style="text-align:left">CSS 选择器</td>
</tr>
<tr>
<td style="text-align:left">xpath</td>
<td style="text-align:left">xpath表达式定位元素</td>
</tr>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">NAME属性，与id定位类似</td>
</tr>
<tr>
<td style="text-align:left">link text</td>
<td style="text-align:left">仅用于超链接文本</td>
</tr>
<tr>
<td style="text-align:left">partial link text</td>
<td style="text-align:left">使用方法和link text相同，partial link 只截取部分文字即可</td>
</tr>
<tr>
<td style="text-align:left">tag name</td>
<td style="text-align:left">通过HTML标签名定位</td>
</tr>
<tr>
<td style="text-align:left">class name</td>
<td style="text-align:left">使用类名定位，不能使用复合类名</td>
</tr>
</tbody>
</table>
</div>
<h1 id="ID定位"><a href="#ID定位" class="headerlink" title="ID定位"></a>ID定位</h1><p><img src="id_locator.png" alt="alt"></p>
<p>python代码：</p>
<p>element = self.driver.find_element_by_id(“kw”) element = self.driver.find_element(By.ID,”kw”).send_keys(“test”)</p>
<h1 id="NAME定位"><a href="#NAME定位" class="headerlink" title="NAME定位"></a>NAME定位</h1><p><img src="name_locator.png" alt="img"></p>
<p>python代码：</p>
<p>element = self.driver.find_element_by_name(“wd”)</p>
<h1 id="Link-Text定位"><a href="#Link-Text定位" class="headerlink" title="Link Text定位"></a>Link Text定位</h1><p><img src="link_text.png" alt="img"></p>
<p>python代码：</p>
<p>element = self.driver.find_element_by_link_text(“学术”)</p>
<h1 id="Partial-Link-Text定位"><a href="#Partial-Link-Text定位" class="headerlink" title="Partial Link Text定位"></a>Partial Link Text定位</h1><p>使用部分文本来定位</p>
<p>直接使用“123”来定位：</p>
<p><img src="Partial_Link_Text.png" alt="img"></p>
<p>python代码：</p>
<p>element = self.driver.find_element_by_partial_link_text(<strong>“123”</strong>)</p>
<h1 id="Xpath定位"><a href="#Xpath定位" class="headerlink" title="Xpath定位"></a>Xpath定位</h1><p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。具体语法参考：<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">https://www.w3school.com.cn/xpath/xpath_syntax.asp</a></p>
<p>比如我们定位<strong>“资讯”：</strong></p>
<p><img src="xpath.png" alt="img"></p>
<p>可以在console中输入JS代码：<code>$x(&#39;//*[@id=&quot;s_tab&quot;]//a[1]&#39;)</code></p>
<p>这样就可以找到资讯对应的元素：</p>
<p><img src="js.png" alt="img"></p>
<p>python代码：</p>
<p>element = self.driver.find_element_by_xpath(‘//*[@id=”s_tab”]//a[1]’)</p>
<h1 id="CSS-Selector定位"><a href="#CSS-Selector定位" class="headerlink" title="CSS Selector定位"></a>CSS Selector定位</h1><p>CSS选择器是一种字符串模式，基于HTML标签，id，类和属性的组合来标识元素。</p>
<p>具体语法参见：<a href="https://www.runoob.com/cssref/css-selectors.html">https://www.runoob.com/cssref/css-selectors.html</a></p>
<p>我们依然定位<strong>“资讯”：</strong></p>
<p>在console中输入：<code>$(&#39;#s_tab a:nth-child(2)&#39;)</code></p>
<p><img src="css_selector.png" alt="img"></p>
<p>python代码：</p>
<p>element = self.driver.find_element_by_css_selector(“#s_tab a:nth-child(2)”)</p>
<h1 id="完整测试代码"><a href="#完整测试代码" class="headerlink" title="完整测试代码"></a>完整测试代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLocator</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># self.driver.maximize_window()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_id</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        element = self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">        element.send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        <span class="comment"># self.driver.find_element(By.ID,&quot;kw&quot;).send_keys(&quot;test&quot;)</span></span><br><span class="line">        <span class="keyword">assert</span> element.get_attribute(<span class="string">&quot;value&quot;</span>) == <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        element = self.driver.find_element_by_name(<span class="string">&quot;wd&quot;</span>)</span><br><span class="line">        element.send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> element.get_attribute(<span class="string">&quot;value&quot;</span>) == <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_linktext</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        element = self.driver.find_element_by_link_text(<span class="string">&quot;学术&quot;</span>)</span><br><span class="line">        element.click()</span><br><span class="line">        sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_partial_link_text</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        element = self.driver.find_element_by_partial_link_text(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        element.click()</span><br><span class="line">        sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_xpath</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;s_tab&quot;]//a[1]&#x27;</span>)</span><br><span class="line">        element.click()</span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_css</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        element = self.driver.find_element_by_css_selector(<span class="string">&quot;#s_tab a:nth-child(2)&quot;</span>)</span><br><span class="line">        element.click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在工作中比较常用的是ID和NAME定位，用起来比较方便。但很多情况下没有ID或者ID是动态变化的（比如使用Extjs生成的web页面），需要用到CSS Selector和Xpath来定位。</p>
<p>Xpath是一种XML路径语言，定位时采用遍历页面的方式，基本上能定位到所有web元素。CSS Selector 是一种样式表语言，查找 HTML DOM 中的元素。理论上CSS Selector比Xpath效率更高，个人感觉没有显著差异。其它差异还包括：</p>
<ol>
<li>Xpath可以通过文本来定位，而CSS Selector不能。</li>
<li>Xpath可以通过子节点来定位父节点，CSS Selector是前向的，不能利用子节点定位父节点。</li>
<li>CSS Selector语法相比Xpath更加简洁</li>
</ol>
]]></content>
      <categories>
        <category>自动化测试</category>
        <category>Web自动化测试</category>
      </categories>
      <tags>
        <tag>元素定位</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Git简易教程-安装及简单使用</title>
    <url>/posts/git-install-and-guide/</url>
    <content><![CDATA[<p>Git是一种版本控制器，在项目开发中可以用来托管代码，本文介绍Git的简单使用。<br><a id="more"></a></p>
<h1 id="一、下载安装Git"><a href="#一、下载安装Git" class="headerlink" title="一、下载安装Git"></a>一、下载安装Git</h1><h2 id="1-Git下载"><a href="#1-Git下载" class="headerlink" title="1. Git下载"></a>1. Git下载</h2><p>地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<p><img src="1.png" alt="img"></p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>检验是否安装成功 电脑桌面或者其他任意文件夹下，点击鼠标右键，如果看到Git GUI和Git Bash则表示安装成功</p>
<p><img src="2.png" alt="img"></p>
<p>Git Bash是为了方便你在windows下使用git命令的模拟终端，我们可以在git bash中执行一些shell命令。</p>
<h2 id="TortoiseGit安装"><a href="#TortoiseGit安装" class="headerlink" title="TortoiseGit安装"></a>TortoiseGit安装</h2><p>git GUI客户端有很多种：<a href="https://git-scm.com/downloads/guis/">https://git-scm.com/downloads/guis/</a></p>
<p>Windows平台推荐使用TortoiseGit，可以通过图形化界面操作git，下载地址：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a></p>
<h1 id="二、Git配置"><a href="#二、Git配置" class="headerlink" title="二、Git配置"></a>二、Git配置</h1><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><h3 id="1-配置用户名和邮箱"><a href="#1-配置用户名和邮箱" class="headerlink" title="1. 配置用户名和邮箱"></a>1. 配置用户名和邮箱</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot; // 添加用户名，username为你在github上注册的用户名。  </span><br><span class="line">git config --global user.email 123456789@qq.com // github设置的邮箱地址，改成自己的邮箱。 </span><br></pre></td></tr></table></figure>
<p>添加局部用户名和邮箱<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name &quot;username&quot; </span><br><span class="line">git config user.email &quot;123456789@qq.com&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-查看是否配置成功"><a href="#2-查看是否配置成功" class="headerlink" title="2. 查看是否配置成功"></a>2. 查看是否配置成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list </span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt="img"></p>
<h2 id="初始化新的Git仓库"><a href="#初始化新的Git仓库" class="headerlink" title="初始化新的Git仓库"></a>初始化新的Git仓库</h2><ol>
<li>新建文件目录或者进入已有的文件目录下 可以通过cd的方法进入，或者直接在目录下右键-&gt;选择Git Bash Here</li>
<li>创建Git仓库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init </span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="4.png" alt="img"></p>
<p>执行成功后，当前目录下会生成一个.git的隐藏文件夹，仓库创建完成。</p>
<p><img src="5.png" alt="img"></p>
<h1 id="三、Git文件管理"><a href="#三、Git文件管理" class="headerlink" title="三、Git文件管理"></a>三、Git文件管理</h1><p><img src="Git.png" alt="img"></p>
<p>查看git帮助信息<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git help</span><br></pre></td></tr></table></figure></p>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><h3 id="1-查询状态"><a href="#1-查询状态" class="headerlink" title="1. 查询状态"></a>1. 查询状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status </span><br></pre></td></tr></table></figure>
<p><img src="status.png" alt="img"></p>
<h3 id="2-将文件添加到暂存区"><a href="#2-将文件添加到暂存区" class="headerlink" title="2. 将文件添加到暂存区"></a>2. 将文件添加到暂存区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add test.txt </span><br></pre></td></tr></table></figure>
<p><img src="gitadd.png" alt="img"><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add file //跟踪 -添加到暂存区 </span><br><span class="line">git add file1 file2 file3 </span><br><span class="line">git add folder/* </span><br><span class="line">git add folder/*.py </span><br><span class="line">git add folder </span><br><span class="line"></span><br></pre></td></tr></table></figure><br>添加所有改动文件：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add . <span class="comment"># 添加所有改变的文档，包括文件内容编辑(modified)以及新文件(new)，不包括被删除（deleted）的文件</span></span><br><span class="line">git add -u <span class="comment"># 添加编辑或者删除的文件，不包括新添加的文件。</span></span><br><span class="line">git add --all<span class="comment"># 或者git add -A，添加所有改变的文件</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-从暂存区提交到本地Git仓库"><a href="#3-从暂存区提交到本地Git仓库" class="headerlink" title="3. 从暂存区提交到本地Git仓库"></a>3. 从暂存区提交到本地Git仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;add test.txt&quot;</span><br></pre></td></tr></table></figure>
<p><img src="git_commit.png" alt="img"><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log //查看提交记录</span><br></pre></td></tr></table></figure><br>第2步和第3步可以直接使用命令:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -am &quot;提交注释”</span><br></pre></td></tr></table></figure></p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><h3 id="1-删除文件"><a href="#1-删除文件" class="headerlink" title="1. 删除文件"></a>1. 删除文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm &quot;test.txt&quot;</span><br></pre></td></tr></table></figure>
<p><img src="git_rm.png" alt="img"></p>
<p> 也可以直接手动删除文件</p>
<p>删除文件夹<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r foldername/</span><br></pre></td></tr></table></figure></p>
<h3 id="2-提交到本地Git仓库"><a href="#2-提交到本地Git仓库" class="headerlink" title="2. 提交到本地Git仓库"></a>2. 提交到本地Git仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;delete test.txt&quot;</span><br></pre></td></tr></table></figure>
<p><img src="git_rm2.png" alt="img"></p>
<h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch yourbranch  //创建分支</span><br><span class="line">git checkout yourbranch  //切换分支</span><br><span class="line">git checkout -b yourbranch  //创建并切换到分支</span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge yourbranch //合并指定分支yourbranch到当前分支master</span><br></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d yourbranch //删除本地分支</span><br><span class="line">git push origin -d yourbranch  //删除远程分支</span><br></pre></td></tr></table></figure>
<h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><p>可以将本地仓库备份到远程服务器上的git仓库，实现代码共享，下面介绍本地Git仓库和Github 远程仓库的连接。</p>
<p>如果没有GitHub账号需要先注册一个：<a href="https://github.com/">https://github.com/</a></p>
<p>本地Git仓库和GitHub仓库之间通信采用SSH协议加密，Git SSH公钥配置方法参考：<a href="https://blog.csdn.net/u010698107/article/details/113485131">同一台电脑配置Gitee、Github 的 Git SSH公钥</a>。</p>
<h3 id="1-将本地仓库同步到git远程仓库"><a href="#1-将本地仓库同步到git远程仓库" class="headerlink" title="1. 将本地仓库同步到git远程仓库"></a>1. 将本地仓库同步到git远程仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push </span><br></pre></td></tr></table></figure>
<p>如果是首次push，没有添加远程链接，在github创建新的仓库，然后复制仓库URL链接：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/xxxxx/xxxxx.git  </span><br><span class="line">git push --set-upstream origin master</span><br><span class="line">git push -u origin master </span><br><span class="line">git remote remove origin //取消远程关联</span><br></pre></td></tr></table></figure><br>Push新仓库<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M master</span><br><span class="line">git remote add origin git@github.com:ZHHAYO/vuepress-blog.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><br>Push存在的仓库<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:ZHHAYO/vuepress-blog.git</span><br><span class="line">git branch -M master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p>
<h3 id="2-将远程仓库复制到本地"><a href="#2-将远程仓库复制到本地" class="headerlink" title="2. 将远程仓库复制到本地"></a>2. 将远程仓库复制到本地</h3><p>github项目仓库地址复制： </p>
<p><img src="git_path.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure>
<p><img src="git_clone.png" alt="img"></p>
<p>下载远程仓库指定分支代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 分支名 远程仓库地址</span><br></pre></td></tr></table></figure>
<p>将远程仓库克隆到本地后，会生成一个.git的目录</p>
<p><img src="git2.png" alt="img"></p>
<p>查看.git/config文件</p>
<p><img src="git3.png" alt="img"></p>
<p>可以看到当前本地分支为master，git branch查看本地分支</p>
<p><img src="git4.png" alt="img"></p>
<p>关联的远程库为origin，可以通过<code>git remote</code>查看</p>
<p><img src="git5.png" alt="img"></p>
<p>远程库origin所在的位置为 <a href="mailto:git@github.com:ZHHAYO/python_notes.git">git@github.com:ZHHAYO/python_notes.git</a></p>
<p><img src="git6.png" alt="img"></p>
<p>.git\refs\heads\master文件内容为：</p>
<p>7cf7212890aabea789631a02881861dcd08dac46</p>
<p>表示本地仓库最新的commit id</p>
<p>.git\logs文件夹下保存的是.git\refs文件夹下相应文件的变更记录<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.git\logs\HEAD</span><br><span class="line">.git\logs\refs\remotes\origin\HEAD </span><br><span class="line">.git\logs\refs\heads\master</span><br></pre></td></tr></table></figure><br>三个文件 内容如下：</p>
<p><img src="git7.png" alt="img"></p>
<h3 id="3-本地仓库更新"><a href="#3-本地仓库更新" class="headerlink" title="3. 本地仓库更新"></a>3. 本地仓库更新</h3><p>如果远程仓库更新，可以使用<strong>git pull或者git fetch + git merge</strong>命令，将远程项目更新到本地。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin master </span><br><span class="line">git merge origin/master</span><br><span class="line"></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><br>git pull和git merge的区别参考：<a href="https://blog.csdn.net/a19881029/article/details/42245955">https://blog.csdn.net/a19881029/article/details/42245955</a></p>
<h3 id="4-查看远程仓库地址"><a href="#4-查看远程仓库地址" class="headerlink" title="4. 查看远程仓库地址"></a>4. 查看远程仓库地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v </span><br></pre></td></tr></table></figure>
<p><img src="git8.png" alt="img"></p>
<p>查看远程仓库和本地仓库之间的关系：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: https://github.com/hiyongz/PythonNotes.git</span><br><span class="line">  Push  URL: https://github.com/hiyongz/PythonNotes.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branch:</span><br><span class="line">    master tracked</span><br><span class="line">  Local branch configured <span class="keyword">for</span> <span class="string">&#x27;git pull&#x27;</span>:</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local ref configured <span class="keyword">for</span> <span class="string">&#x27;git push&#x27;</span>:</span><br><span class="line">    master pushes to master (up to date)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="四、gitignore文件"><a href="#四、gitignore文件" class="headerlink" title="四、gitignore文件"></a>四、gitignore文件</h1><p>在使用Git管理仓库时，可能有些文件不需要进行版本管理，需要忽略的文件可以使用 <code>.gitignore</code> 文件来跟踪，该文件一般放在项目仓库的根目录下。</p>
<p><code>.gitignore</code> 使用<a href="https://linux.die.net/man/7/glob">glob</a>规则来匹配文件路径，开始是在Unix系统中用来匹配文件路径的，使用通配符匹配路径，很多编程语言也实现了glob方法，比如Python的glob模块。下面举几个 <code>.gitignore</code> 语法示例：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">log</td>
<td style="text-align:left">匹配名称为log的文件和目录，包括目录下的文件及子目录</td>
</tr>
<tr>
<td style="text-align:center">log/</td>
<td style="text-align:left">匹配名称为log的目录，包括目录下的文件及子目录</td>
</tr>
<tr>
<td style="text-align:center">**/log</td>
<td style="text-align:left">匹配名称为log的任何目录</td>
</tr>
<tr>
<td style="text-align:center">**/log/test.log</td>
<td style="text-align:left">匹配名称为log的目录下的test.log文件</td>
</tr>
<tr>
<td style="text-align:center">*.log</td>
<td style="text-align:left">匹配后缀为log的所有文件</td>
</tr>
<tr>
<td style="text-align:center">/test.log</td>
<td style="text-align:left">只匹配根目录下的test.log</td>
</tr>
<tr>
<td style="text-align:center">test.log</td>
<td style="text-align:left">匹配所有test.log文件</td>
</tr>
<tr>
<td style="text-align:center">test?.log</td>
<td style="text-align:left">匹配test开头，后面只有一个字符的log文件</td>
</tr>
<tr>
<td style="text-align:center">test[0-9].log、test[a-z].log</td>
<td style="text-align:left">test后为单个数字、字母的log文件</td>
</tr>
</tbody>
</table>
</div>
<p><code>.gitignore</code> 文件使用<code>#</code> 来注释：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ignore all log</span></span><br><span class="line">*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h1 id="github访问问题"><a href="#github访问问题" class="headerlink" title="github访问问题"></a>github访问问题</h1><p>访问github经常不成功， 推荐一个代理工具dev-sidecar，地址为 <a href="https://gitee.com/docmirror/dev-sidecar">https://gitee.com/docmirror/dev-sidecar</a> 。使用方法参考说明文档。</p>
<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><h2 id="git-push报错"><a href="#git-push报错" class="headerlink" title="git push报错"></a>git push报错</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br></pre></td></tr></table></figure>
<p>解决：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure></p>
<h2 id="git-clone报错"><a href="#git-clone报错" class="headerlink" title="git clone报错"></a>git clone报错</h2><p>报错信息：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/hiyongz/GoProjects.git</span><br><span class="line">Cloning into &#x27;GoProjects&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/hiyongz/GoProjects.git/&#x27;: OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br></pre></td></tr></table></figure></p>
<p>解决方案：关闭ssl认证<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h2 id="token认证"><a href="#token认证" class="headerlink" title="token认证"></a>token认证</h2><p>2021.8.14更新：</p>
<p>现在github去除了密码认证方式，通过HTTPS访问GitHub，需要token认证。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ <span class="keyword">for</span> more information.</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/hiyongz/MyBlog.git/&#x27;</span>: The requested URL returned error: 403</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>个人token创建方法参考：<a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>
<p>生成个人token如下：</p>
<p><img src="pensonal-token.jpg" width="80%" height="80%" /></p>
<p>记得保存一下token！</p>
<p>个人访问token只支持HTTPS，如果你的远程仓库使用SSH，需要<a href="https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-ssh-to-https">切换为HTTPS</a>。使用 <code>git remote -v</code> 命令查看远程项目URL地址。</p>
<p>切换HTTPS命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git</span><br></pre></td></tr></table></figure>
<p>查看是否设置凭证<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config credential.helper</span><br><span class="line">manager-core</span><br></pre></td></tr></table></figure><br>清除凭证管理：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> url=https://github.com/account | git credential reject</span><br></pre></td></tr></table></figure><br>account为你的github用户名。</p>
<p>接下来的git操作如果要你输入用户名和密码，其中密码为前面获取的token值。</p>
<p><strong>参考：</strong></p>
<ol>
<li>git - 简明指南：<a href="http://rogerdudler.github.io/git-guide/index.zh.html">http://rogerdudler.github.io/git-guide/index.zh.html</a></li>
<li>廖雪峰git 教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>
<li><a href="https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to">Support for password authentication was removed. Please use a personal access token instead</a></li>
<li>清除凭证管理：<a href="https://git-scm.com/docs/gitfaq#http-reset-credentials">https://git-scm.com/docs/gitfaq#http-reset-credentials</a></li>
</ol>
<center><b>--THE END--<b></center>

]]></content>
      <categories>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试理论</title>
    <url>/posts/test-theory-for-software-testing/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a84b4a003356e73dae969c6630ba076fc5c75caf17a8e356c11d93107b8a487c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>测试理论</tag>
      </tags>
  </entry>
  <entry>
    <title>白盒测试方法介绍</title>
    <url>/posts/test-theory-for-white-box-testing/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="842cdd9f91d589748cdae7984cf994724e702c089febe5229a3b9a3778b987fc">b63abfd0cc043585c7f59d942442ea6d95626d0322384ef6387a416e0602e7b45e817557f1992b34b463fec15367c2bb05da955a0449e13f6ea80ccfea701c3b480350e141d0aa0b79afc142a787b2c8867f39105d8e176b1ef031e910a25c152a5810351c73ff93cbe7127ab4c461dc399f1069fcbe16614330e35940435be4f31b70898895516a6717ef10941525a99925d29effb1017a23845aa8ae377ee7a52ba5d1ecce22c74b7b91fdfcbecad9d9645ca0417df4a9841b58051b2b23f2caf397170e9ec833dfdde33074e8a5d9274be936b69ba7cd17d443d045256935a8c14cde4a578f67f75df31429921f40913581b9eb7b3aa0b3c749217cb524083472f85a9663005b20f6469440b5544b2ed05c6a52d813e1a9c8efb7991fa5862ca973ff90975e526a6c676219428e414a1d57c0d650d00d615af8abe17dca8f05cabc802b3bf74d87bc69dec2b3634a66b02b5ab54f2668d6127ec1ecd5b0b46631ca66ebcb4d276949c4e65b469be11d763d6234f3f9d00563346a283a2d86b62aa1adb508a7bc768b4ac7d2f2834b9f7b439f9385e0440fd738401575e3d952e38cdbe2c394b182af8e7686dd447e9c742699daa4f16993d3cd0a66f3420995c43e3308b3df9b622ac16e8608d928dbce10eca8fd5b2dfb059be9a5f76c810c30cf75455dc7ed5e12d32df6c004264bac518f8bbdc4622da605ea2f8c3a870c6ea8ff67bd8eaabb0a2d9bf4220032e6f38084074afe4420142f810ba7d7b07f1c72d1bc4bee9285e9305369d23ee939078ac8663e2b49c4daa3fc0954fd01324ae6fa073f8cc846da8d06150eebd6e365e8cfe67602a2f6cfa80b61b9e48ddb53567e2b861f070ee0132ac49db4038efc993801d0bbd07eba3dc90009167a44a6a8abe40cc1506f5f7c026995803f8ea613fde29a6e499564553f556d2c1797501b386175019f6c102cfa7d7235f310dfe58eb9a1d44457e9f17414782fc3de94c2f95b84c8c9759725fc6a41bfcd13d32c37a9408a31ba5e16bc0cda6bcbab854a4803b9cc957458f771ad4356f15745c1000505e6c3a91e401f89f83661ffb63f9c89a5f4142de79d1d958907edf46d1ef4c14df84b627a96e898c6208de784f7e25da21ed03978b9fc0244402241f165e263642b6fc329dd20bd3de70d67d75353a8a05a875053dc8b313074ae2f11c76cdc5f29a039b10ab4254449ec2bc6e248895ee5ee008be43b9cc194119cd52cca4d9732e8a3d5193247c9038ef48958a8a2c69ff00362785003ec3d6e6bb44646b22d1cd1fe5393c1b5943d416011faa9c885b3c9e0438888765cc61ebf70632f42c3b9a5a02099a54b96262e05e1b4435c1324c062574face6147d5b8bf6038d8075f7370f3095097f0493284792c3dfe22c4028dbde01dc94fb0582e73fc22234abbdf2f87e684ad65f2f35391a4cce1eb8e4c746d09fc133ffe5f460cba06a18e36ee378171676846760ec0ce9cc47f97d64335a3d5085da23e9fe7bb9ff1c590834153c6c5fb6e4a2a8c35a3ca17ced4ee87142e6f434bb3a8b75dca3738cde192131f1e6605482014947b9975ba52d877f35c902992ffab20a6af662cdff8a6ff8e8373687508581f7ad9716e687d1e58f5cff5c9c585668db81b55fff58f30d6fde755ec7d494e3e98000c0ff36b6382ca29eecd6fda331338d94c0eb41d9ecf693ebb55fa9392f8bd23b76d3f8ff5b20fa71cbf5cb0b66e90600068ad78d47522d80e7a60b66d73ee01c9e014cacccb5e846e2a992fda98b602b77c4839316a696daddb0d907f9690477ac795c616ec15a67ebf4c0791e4347858a5d38ba00e76e99434e230e0b977e96c70fb785d1224a561475780038976b3ed94954efb906bccdeea2f1a123d3aa3f0d3a7a04f7af5bae2697c688975855ee88d966ab9a6d2902709c12fa12ff2986a79e805542bb6c52dc55a1b69fd08774dbb8fae704f0f7bcec1cdc7c1d558c7581612e7ae0e571bd323dc4f9cc29440b479e7d927b8800d9d597b188cfeb55ec3d9175bf332ea99c694cc3edec64af1bfb305fe79d0a24527adedf802209de48951d4ce146862c669dfac28fbdbd0fbf9615998128b14be7dde48c151081b80d60a576d605cb155f826c9e223cdcc04f859d2a8785f3fd281e7eb9320f07bd0203cccf3ef1772599a696e0ba6c8f5e79b2a0d77a49d28ad46841a3b697723a5cdab5ade45d22fdc5d821dc6cbc12a497e8a0f507051d88a2d53d750c68bf09f402f3d3933cb0b415a3588995f44c493b157ce932fe60bf1b7970a39d01e81ff72448182e6a86e3803a6c623de2b93795882b2a0fe050721264807341ea04c68702b987905d7cb8f6587fb9e02ba3326ac5fc44db4028c5dc034beafc8e1329351bdd24006f9259aa2f49eb2c33139779e92434bf3ba8b1ed2c347d281540effc43c0055c4f40a1f25d43b6b930ab98c1f0e580012d50eacaef0bba44a0e49912ce060ea41ee4f40869a6f477324307384c6c20bec31971059aba9610ab037e336cde04f4075ac2974524ee704264bbc308e8073e128afd5e57abda50fd3fcad27647f39e2a7d3f234e9fec90cddedd66f76768c0b25e5648dff31b9efd3dc21c6872cc2f05f150547a26fa2b3c88fbade5f1bbb5e2d6dc8d3142f65bfc3c794ea2bfd6e91dea2eb69c3a0691a1befb95709276a05fe0b2e7ecdc3d45790ad61d6f4cc0017c37c77ee32d8ab6febd47e94bf11ced5a1a41210a41b42eb6b4cf350cb0ec73a0e0e8720c5b3d9c5c45c085f4d92601efc8339321cd65585afab330b88bed889f749384366d7375d967eb79502cbf17dbad56e5ba23ed1cab8027bb3f5b35117d5ec5307e346adabfdb4deb82a733d57cb0ffd031dce4bbefda72c8e8bdef1e3605b6739d6acb838cf478eac600c9113f70695f0ffcd0ad78f90e295e9ebf0105d7fd78273babcc25b8d5761f1b335020e4ea82a5255afdef5f481c48917d30ec07850f0247ced0879293f29a73684d4d22362d5539fd4bffc7fb4bfdc64cf7a382e7735084cfd560768f5a98dcf672942d9b13ea394f3249ec648ce79cf50a4f344e11e14f2189d973ea913e76ff9fe09b0d727e88380eb9c15838535868863daff9882287854bbc47ebb5b33b2c2ed7233c55e8e03936527304a46e679480df5e9efecafa6d25054da64b924d5fa2f3cfeaf119a0b681fb438756e545d10e9ca7a70e2c798cb848254212153615893130a7e19a5d3d57cc5b24204a1a07fb4e1fb1b53b29aaaab72424a00c15d6ea850d3bd4a497dde7e937db0b3b726676a2820f908ba07aacbe5be7617d0c258ca709a151246ca5b846649bd57d2148fd3f2876a3a7b74831f14964ea9b6dd3ef124e967c70e47badba4e9679872bd4e388a7d91d7840bd836e47e4e9167f9c9d6f316cdc85addceea63217fe2b8132ebde0e99d08e0d2047f8b33f852cabc29bd229590fd17e68869130ff03be32989cf6054f57ba53f6fa886c2b8b20220b241d0b961fcd17c9c1b907cfd64d614d0cd44e08fff308e6fccfcbb4cc2bf6c2739ea37e3495fd17064b5b328e7179e5d24490315bda168b984a4af8b4a7a5af07103c7785fa32eb7097b0b0209a2587894b000e22276ae7b36dbe0895ae244dd7b8b647248353fddbb5cacea72f04a136c97187c88bb2294f35c18420e0651bb8fb9e379d0f5da53974a07ad83cd85a583d22632d8fe23f7b75b807a8ae3bd82358d971cb1aabd79f7173dbd20a8ddf6d3f1e48ab5aab0928359bb4af4aee8ca682894b604f03dda5fc536328164ba6d8fcf6ba11fc1a8fb73bddffe2c2bfcdc6b8ef0fb57a30c94a622bbfdf70dfb17d72a620f612e9b26568163fd5586767023732674cf92337ae276a00052e0cc53d5a7d56acced032d00d13f7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>白盒测试方法</tag>
      </tags>
  </entry>
  <entry>
    <title>黑盒测试方法介绍</title>
    <url>/posts/test-theory-for-black-box-testing/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1974f554da45a7988467af4876b28ff2fb83e73e6138d7a6e3d2b988716cacb9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>黑盒测试</tag>
        <tag>测试技术</tag>
      </tags>
  </entry>
  <entry>
    <title>常用测试平台</title>
    <url>/posts/test-theory-for-testing-platform/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bb58186e8bb61d5ecf7435952ef175bf45dabde887fa31148abdb1c399e8607a">b63abfd0cc043585c7f59d942442ea6d95626d0322384ef6387a416e0602e7b45e817557f1992b34b463fec15367c2bb05da955a0449e13f6ea80ccfea701c3b480350e141d0aa0b79afc142a787b2c8fa6f6ab157248da45d590e316b708788c01043c17f3e28214881b859b0236b678939bd04073824f50ac689fde8d316c4a31faf38b03cdb8130fb17ef6940c3fcfcc105cb0a8ca8cfa8e03d6b8e9922c85d271566cf1930a69945b328d6a4a43b1ce37f23567dcb3fa90a8f26c33da4fb5095a533108d3626c75b39c04f018ca6799cb7832e89fabdc121132520ef9f2f451bd2862893a2f485ebe03cc4947952062e8a03d9a5c8a3251caf5da732794faf3af904739605a33f40bd23a6487ae9c57b5670a2fca8aac6af957dbe7f38448b4c5854b50a1bd8b506861099cc22e2c8a31789ece3a2b99d89a546b41521218e703453b1b00c1b90b6e2265290dcbfbd2e1c19baa194537e7d8d1cde830f79de62dbf54d78a817bfc583e920fdb2b14fe32b46ac5fc20bbbee52d2e0d5f31e8b510fd9b16adb7ca15ce60f2bd12382ff82d831937527513ac037e3d44b74b8ea39ae0d93224bb474e27fa34928f9bb047c97d3459dfb0a9840aaaf0a5f4907465d211842a7a65716326becd82e6a8e877c65498be5656b8f6afd3badeb99606ce08c2f1294d73b8417bc3911bd8830caf2dc2a85e8bdb92595b4dbd817823313fc18e5cfa47d169b5e48d13121c956ed1f6a5d11d8a4b94aae6b4f92f64a3fa6a3f2e2d7bd7233ab2bda6a8dcab3df0cf7e6421e4981036f5b7188becd09b26e2867d5f1f844973b9c11be469e834cdd8e866b2a47db5607c03b35397d5338085998d21439fa76f6aa1376bef45a6dd7fa2e790a8e127121365fa04b423e637fda63943b8e75471c5d17edc6c56eb3c6d84b9e13663087cefe808e5fd80fe2f7d79ff38409264504f4d8d2b68fcbaec262e3a9e8d7e16e29faa0248305022436701e747b671998961fc05083d8c9ffe3ebaa28b180588b8f682a0391a01f5a82137ccdd54ae33ea8ad167e5be5722a262c6e4e1aab19bd20f1f73bea83b7fd6e24dc0bca1486b7dbaa4af8661bb02eaf0847e29e0de5fc46c603deca2d0984343991850353e0e319dfc7d466dd1f8f6cd4116a4a1b384654b085459a45dcdf09cdf4a6579521c52cebf4dbb1eefe5b6570c94ca9763daff8080b7bdd3f73be59d7bb161167f479998b707224cd97d3443443ec2e30e70fb931f2ce5050aa90e3f36501f4e405594abcf46d225c4d8fb36e6312747cd96c50c9e39d2a68c302d611334faa9951adc4319ac9e39904deaf297173040e55746ab7bcb06c05e974b7382da46d54a5659c539faa121325f64f0e8bff1997bc5bac0ef49726f37190fbd5d1a7616fea3de80325b286e50940041e7191168392962f8f89702a226cdfeb9db3a11b6da6679bb721bee20ffcc6d06ccaedab73d0a97c27374ad1a9f1d671331145fc740634677ca8a049042a5762d5159191fe4defe4da45cd5383eac4724fe9d284346ea499eecef384f20f6fcf9cf029bc079c0f43c3d5b2a9280d5d9363205e85f72ff98544ca4c8deaa00566cf9c6172771c46195c8f06158482a3f25b596c19782073888fb13fa0b7de1af16032f2692142f0656a21cf8ff5609d2c4354f99ca4948486e6065bda0f20ae433250135ea4485d5be0a327d4da118b3c780f6f88a3e8c87489ee762204ccdcfae4681f0d5f673227e264f1f711618edb7a5cf850b9c1ffd767e182c380cedc4c60c6a08b2991172ddc4fc40ab156307c0d7f8e5169ee9aee5c2a859cc03d8a1efb1ae02718889941e5f6982860badb88e5f7ea0cde36c2f3851c320798dec99f1f1c33108310d40e6fdf5ccdd6762c9ac2a9819be16ad0e36ca2d5c71a8535a344f12e957fc3cfe83606315b59552e29ca9b945da51761520ebb5e9078588cc8eb35f81152dc9c0599f887852ab73939912ed83758a8fadcddafdf9a50cd4bd9741fe55ff8bf2f5237a00198255726989823439e846c6497ae1d65366b6c6a80563b35823b9f126d554b33daf2f67fd3a11159e649897187e4e677a0dd87cf2ebe1b6172fd9b364f5c9a3c22b815c01e14052e0366bc90d16a6a5362f8658a98740e71555b753924049b14cdcfb6d6d62158aa6e6f312d26bd5b3d7c21b57440de97143cbc9c38a28a634a264649e6fefe169bec729caf4e08a34ead4e4527054752b4b0538915091a71b154d8ff318ede84c6bf8e46d643f1dc7d103a6c8d8f9d286bb014d8ea0f2678ca9756bda46bc50282f5260b1df1e31bd7e32a11b58b6f180dfd39dd4525a8587b65fb29f2828bab700b30d087c4f89b86741034f363544c48b991c8c2d0aa7272b370bdc067750d5f56d441e5b947d280e4fd5749d8843937b6429949c950337ccbb05bc60af223174dbc270c62d53bd0c4b96af030024a3573fce630561a88c3396eb0c021511a946e76e2dc9bcc574c36717c786ee8ee5918e400f1cafef102c9d9138b9edbe9762dc92eb987fe11e2f7157bba26b3983f8d2b95f0a32a0c7c74fb9552eee30f6eb9143189b9037f6cfde3edf632d5f970c754d7ede846ce642b9c523f855f85124115edd3a5436f37ac345dc99501a4639ab235771412b31df7028bc4bf62c0912361a33000f3c405fb600c387b66ac9115b069e6b7ae2b1bc213546692ba98301cc124877f7f873d2a9eb6fac9d2a406bebe79e88cf8daa30ecfd570c385ada7797d23b18e7d6d48ba676b3607bfcb62d991148c817c77a5c93130d8ca0e6189690f0ef2c22deafb0006e16778ece6d2f31da8ff3d6d594b63c68ad1aa373323b107106b44f065cb945c8084663018eeddd55de8a2f50e59ef6a69922576f73e97ef73f5be8229d761fb243008b1fdc17251f13e7a35b6e76788f68b9b68d09f5d361bcf093d5fcc143b42b224145f2894a226c1b112a693af243f1a28bb9a9ceffb386e18e3446592089d6cfcfd5fb3374d920c8f089d52648a3a68ac94bfb69684f327cfe4c3150284d535f49c2f25ce8f99989d4944e71021d735f90ce76bf623de15d57ce8bf24a494f4d865ca8e55e4ba27f8538cbaa9151594c1b168b6efa5c289d83197f818275d5386cea840946a12ad90c124641a0294e3df50bc2bd4cf9b0c15f8c31b42630cc9c2c90c83c890692404a882a6b078c46e551ac4520ea6c19605c44bfd8f85648c203ecb3f09a00a06f41cfb6b5ee57b54ffdadd190c25e7f0c605f6da191a70cd128893faaaff9e67e6d033624582ab89ad17f62c2afc8af0d8b89a3da6fbadac0cdcc2659126c6ac7390c0a4e55d6b67a37d74453e0b3dc18ce44fd62295d6f9104902587e264539adc93a99fbe5d9825390b92caa1ea95fcc6038f9f3594ce287a0b4052557146da390454bdda845e426fcef97c7b2fb986a1fce0bf78953fd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>用例管理平台</tag>
        <tag>bug管理平台</tag>
        <tag>持续集成管理平台</tag>
      </tags>
  </entry>
  <entry>
    <title>测试技术介绍</title>
    <url>/posts/test-theory-for-testing-technology/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1fdfdf659fdc3f559b77202f49b97b820644186934e32e72adaac74542295e41"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>测试技术</tag>
        <tag>测试分类</tag>
      </tags>
  </entry>
  <entry>
    <title>测试流程介绍</title>
    <url>/posts/test-theory-for-testing-process/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dc8d7e5e78d2326dbe55a5d777c7ab6b936cb631eb3f4a62aa2b8de905ef8d1f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>测试流程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发流程与项目管理</title>
    <url>/posts/test-theory-for-software-develop-management/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0b9c25cda8c9233c93d955e64849308a446575f32ed88bca33cd1085c11cba74"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>自动化测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>软件开发流程</tag>
        <tag>项目管理</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
</search>
