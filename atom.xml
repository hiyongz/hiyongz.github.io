<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HiYong</title>
  <icon>https://hiyongz.github.io/icon.png</icon>
  <subtitle>此时 此地 此身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hiyongz.github.io/"/>
  <updated>2021-06-16T15:07:57.243Z</updated>
  <id>https://hiyongz.github.io/</id>
  
  <author>
    <name>HiYo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python协程</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-coroutines/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-coroutines/</id>
    <published>2021-06-15T04:12:00.000Z</published>
    <updated>2021-06-16T15:07:57.243Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;文章&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/117265796&quot;&gt;Python多线程与多进程&lt;/a&gt;中介绍了并行，并发，多线程和多进程的概念。多线程 / 多进程是解决并发问题的模型之一，本文要介绍的协程也是实现并发编程的一种方式。协程使用的异步IO (asynchronous IO)不是多线程或者多进程的，它是一种单线程、单进程的设计。也就是说，协程可以实现并发调度，但它本身并不是并发的（单线程下的”并发“）。相比多线程和多进程，协程没有进程上下文切换导致的资源占用，运行效率更高。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="协程" scheme="https://hiyongz.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="asyncio" scheme="https://hiyongz.github.io/tags/asyncio/"/>
    
      <category term="爬虫" scheme="https://hiyongz.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>文章导航</title>
    <link href="https://hiyongz.github.io/posts/blog-navigation/"/>
    <id>https://hiyongz.github.io/posts/blog-navigation/</id>
    <published>2021-06-13T04:12:00.000Z</published>
    <updated>2021-06-13T14:28:18.752Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;文章导航&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown基本语法介绍</title>
    <link href="https://hiyongz.github.io/posts/markdown-basic-syntax/"/>
    <id>https://hiyongz.github.io/posts/markdown-basic-syntax/</id>
    <published>2021-06-12T04:12:00.000Z</published>
    <updated>2021-06-14T07:03:31.155Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;主要经常使用typora进行笔记整理，Hexo博客就是使用MarkDown编写的，本文整理常用的Markdown基本语法以及HTML语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://hiyongz.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="markdown" scheme="https://hiyongz.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Python中的闭包</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-function-closures/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-function-closures/</id>
    <published>2021-06-10T04:12:00.000Z</published>
    <updated>2021-06-12T11:35:11.658Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;闭包 (closure) 是函数式编程中的一个概念，Python虽然不是纯粹的是函数式编程语言，但它仍然具有函数式编程的一些特性。在以前的文章&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/114716537&quot;&gt;Python笔记：Python装饰器&lt;/a&gt;中介绍的装饰器其实就使用了闭包，本文来介绍一下Python中的闭包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="闭包" scheme="https://hiyongz.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：位运算</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-bitwise-operation/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-bitwise-operation/</id>
    <published>2021-06-08T00:06:00.000Z</published>
    <updated>2021-06-12T11:37:39.419Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;计算机中的数据都是以二进制的形式存储在设备中，虽然十进制比二进制所需要的存储空间少，但二进制在硬件实现上要简单很多，而且在数模转换上也更加容易，因为只需要两种状态，所以计算机的底层运算都采用二进制。位运算就是对二进制数据进行的运算。使用合理的位运算可以提高代码在机器上的执行效率，本文将介绍常见的位运算以及Python中的位运算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="位运算" scheme="https://hiyongz.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>常见搜索算法（二）：二分查找</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-binary-search/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-binary-search/</id>
    <published>2021-06-03T04:12:00.000Z</published>
    <updated>2021-06-07T13:45:17.977Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;搜索具有n个元素有序数组的某个元素时，最直接的方法就是对每个元素进行遍历，也就是线性搜索，时间复杂度为O(n)。 还有一种更高效的搜索方法就是本文要介绍的二分查找，时间复杂度为O(logn)，本文介绍使用Python实现二分查找。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="二分查找" scheme="https://hiyongz.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python对象及内存管理机制</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-object-and-copy/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-object-and-copy/</id>
    <published>2021-06-01T04:12:00.000Z</published>
    <updated>2021-06-02T23:44:28.432Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Python是一门面向对象的编程语言，python中一切皆为对象，对每一个对象分配内存空间，python的内存管理机制主要包括引用计数、垃圾回收和内存池机制。本文简要介绍python对象及内存管理机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="内存管理" scheme="https://hiyongz.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>常见搜索算法（一）：深度优先和广度优先搜索</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-dfs-bfs/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-dfs-bfs/</id>
    <published>2021-05-27T04:12:00.000Z</published>
    <updated>2021-05-28T06:59:30.597Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;搜索算法是非常常用的算法，用于检索存储在某些数据结构中的信息。最简单直接的就是暴力搜索，也就是线性搜索，但它的时间复杂度较高，在实际工程应用中很少使用，需要对它进行优化。&lt;/p&gt;
&lt;p&gt;比如二分查找，贪心算法等搜索算法，在&lt;a href=&quot;&quot;&gt;算法笔记：树、堆和图&lt;/a&gt;中，提到了对图和二叉树的搜索算法：深度优先搜索（DFS）和广度优先搜索（BFS），如果知道起点和终点状态的情况下，还可以使用双向BFS。DFS和BFS根据特定的顺序进行依次搜索，效率也不高，启发式搜索（heuristic search）也就是A*算法引入估价函数进一步提升了搜索效率，这些算法应用于各种场景中，本文介绍在树和图中常用的深度优先和广度优先搜索算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="DFS" scheme="https://hiyongz.github.io/tags/DFS/"/>
    
      <category term="BFS" scheme="https://hiyongz.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程与多进程</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-multi-process/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-multi-process/</id>
    <published>2021-05-25T04:12:00.000Z</published>
    <updated>2021-05-28T06:59:30.658Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;进程(process)和线程(thread)是操作系统的基本概念，是操作系统程序运行的基本单元，本文简要介绍进程和线程的概念以及Python中的多进程和多线程。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="多线程" scheme="https://hiyongz.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="https://hiyongz.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库进阶知识点</title>
    <link href="https://hiyongz.github.io/posts/database-for-mysql-advance/"/>
    <id>https://hiyongz.github.io/posts/database-for-mysql-advance/</id>
    <published>2021-05-23T04:12:00.000Z</published>
    <updated>2021-06-06T14:31:15.474Z</updated>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="测试开发" scheme="https://hiyongz.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
      <category term="数据库" scheme="https://hiyongz.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://hiyongz.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：树、堆和图</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-graph-tree-and-heap/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-graph-tree-and-heap/</id>
    <published>2021-05-20T04:12:00.000Z</published>
    <updated>2021-05-28T06:59:30.598Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前面的文章介绍过链表，它其实就是特殊化的树，而树是特殊化的图，堆是一种特殊的树。本文将介绍这几种数据结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="数据结构与算法" scheme="https://hiyongz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="https://hiyongz.github.io/tags/%E6%A0%91/"/>
    
      <category term="二叉树" scheme="https://hiyongz.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="堆" scheme="https://hiyongz.github.io/tags/%E5%A0%86/"/>
    
      <category term="图" scheme="https://hiyongz.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>typora主题配置：公众号一键排版</title>
    <link href="https://hiyongz.github.io/posts/front-end-for-typora-css/"/>
    <id>https://hiyongz.github.io/posts/front-end-for-typora-css/</id>
    <published>2021-05-18T04:12:00.000Z</published>
    <updated>2021-05-16T14:20:55.535Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;typora是一个非常易用且免费的markdown编辑器，是我最常用的文档编辑器。它支持实时渲染，不用打开两个窗口（源码窗口和预览窗口），真正实现了沉浸式写作，所谓所见即所得。它的界面简洁，操作简单，非常容易上手，这里就不介绍了。本文主要介绍Typora的主题配置，实现公众号一键排版。&lt;br&gt;
    
    </summary>
    
    
      <category term="个人博客" scheme="https://hiyongz.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="typora" scheme="https://hiyongz.github.io/tags/typora/"/>
    
      <category term="markdown" scheme="https://hiyongz.github.io/tags/markdown/"/>
    
      <category term="CSS" scheme="https://hiyongz.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：哈希表、映射和集合</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-hash-table/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-hash-table/</id>
    <published>2021-05-13T04:12:00.000Z</published>
    <updated>2021-06-03T23:37:25.103Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;hash函数是根据关键字key计算出应该存储地址的位置，哈希函数把key转成哈希值来定位数据存储的位置，是基于哈希函数建立的一种查找表，Python 中的字典就是用哈希表来实现的。本文主要介绍哈希表、映射和集合这三种数据结构以及他们在python中用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="数据结构与算法" scheme="https://hiyongz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希表" scheme="https://hiyongz.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="映射" scheme="https://hiyongz.github.io/tags/%E6%98%A0%E5%B0%84/"/>
    
      <category term="集合" scheme="https://hiyongz.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="Hash table" scheme="https://hiyongz.github.io/tags/Hash-table/"/>
    
      <category term="字典" scheme="https://hiyongz.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>投资理财-商誉</title>
    <link href="https://hiyongz.github.io/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E5%95%86%E8%AA%89/"/>
    <id>https://hiyongz.github.io/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E5%95%86%E8%AA%89/</id>
    <published>2021-05-11T14:22:00.000Z</published>
    <updated>2021-05-20T23:39:55.377Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近，文化产业又引来一次税务风暴，记得上一次还是2018年的范冰冰事件，导致华谊兄弟市值大幅缩水，当时作为一个吃瓜群众，倒是喜闻乐见。这次由郑爽引起的税务风暴让我无法淡定了，先来回顾一下这个所谓的“郑爽天价片酬事件”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="投资理财" scheme="https://hiyongz.github.io/categories/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="金融小知识" scheme="https://hiyongz.github.io/tags/%E9%87%91%E8%9E%8D%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
      <category term="投资理财" scheme="https://hiyongz.github.io/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>《时间简史》- 广义相对论</title>
    <link href="https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/"/>
    <id>https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA/</id>
    <published>2021-05-11T14:22:00.000Z</published>
    <updated>2021-05-20T23:39:00.857Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;广义相对论&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="时间简史" scheme="https://hiyongz.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>《时间简史》- 空间和时间</title>
    <link href="https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4/"/>
    <id>https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E7%A9%BA%E9%97%B4%E5%92%8C%E6%97%B6%E9%97%B4/</id>
    <published>2021-05-11T14:22:00.000Z</published>
    <updated>2021-05-20T23:39:21.558Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;牛顿运动定律使空间中绝对位置的观念告终，相对论摆脱了绝对时间的观念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="时间简史" scheme="https://hiyongz.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Linux Bash之getopt命令行参数解析</title>
    <link href="https://hiyongz.github.io/posts/linux-shell-for-getopt/"/>
    <id>https://hiyongz.github.io/posts/linux-shell-for-getopt/</id>
    <published>2021-05-11T04:12:00.000Z</published>
    <updated>2021-05-12T14:15:14.770Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Unix shell 中内置了命令行参数解析函数getopts，但它仅支持简单的参数解析，不支持长参数，getopt是getopts的增强版，支持长参数。在&lt;a href=&quot;https://hiyongz.github.io/posts/python-notes-for-getopt/&quot;&gt;Python笔记：命令行参数解析&lt;/a&gt;中介绍了Python中的命令行参数解析方法getopt()，本文介绍shell中如何使用getopt进行命令行参数解析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
      <category term="getopt" scheme="https://hiyongz.github.io/tags/getopt/"/>
    
  </entry>
  
  <entry>
    <title>金融小知识：通货膨胀</title>
    <link href="https://hiyongz.github.io/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80/"/>
    <id>https://hiyongz.github.io/posts/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2-%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80/</id>
    <published>2021-05-05T14:26:00.000Z</published>
    <updated>2021-05-20T23:40:07.101Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通货膨胀指整体物价水平上升，货币贬值、购买力下降。通货膨胀率一般通过&lt;strong&gt;居民消费价格指数CPI&lt;/strong&gt;来反映，今年三月我国的CPI同比上涨0.4%，由于疫情原因，去年3月CPI上涨达到了4.3%，物价飞涨。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="金融小知识" scheme="https://hiyongz.github.io/tags/%E9%87%91%E8%9E%8D%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
      <category term="投资理财" scheme="https://hiyongz.github.io/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记：《时间简史》- 哈勃红移</title>
    <link href="https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%93%88%E5%8B%83%E7%BA%A2%E7%A7%BB/"/>
    <id>https://hiyongz.github.io/posts/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2-%E5%93%88%E5%8B%83%E7%BA%A2%E7%A7%BB/</id>
    <published>2021-05-05T14:22:00.000Z</published>
    <updated>2021-05-20T23:39:12.234Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《时间简史》 - 哈勃红移&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="时间简史" scheme="https://hiyongz.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记：命令行参数解析</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-getopt/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-getopt/</id>
    <published>2021-05-05T04:12:00.000Z</published>
    <updated>2021-05-28T06:59:30.655Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有些时候我们需要通过命令行将参数传递给脚本，C语言中有个getopt()方法，python中也有个类似的命令行参数解析方法getopt()。python也提供了比getopt()更简洁的argparse方法。另外，sys模块也可以实现简单的参数解析，本文将对这3种命令行参数解析方法简要介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="getopt" scheme="https://hiyongz.github.io/tags/getopt/"/>
    
      <category term="命令行参数" scheme="https://hiyongz.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
</feed>
