<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HiYong</title>
  <icon>https://hiyongz.github.io/icon.png</icon>
  <subtitle>此时 此地 此身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hiyongz.github.io/"/>
  <updated>2021-07-22T14:10:10.077Z</updated>
  <id>https://hiyongz.github.io/</id>
  
  <author>
    <name>HiYo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python内存驻留机制</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-string-interning/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-string-interning/</id>
    <published>2021-07-22T04:12:00.000Z</published>
    <updated>2021-07-22T14:10:10.077Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;字符串驻留机制在许多面向对象编程语言中都支持，比如Java、python、Ruby、PHP等，它是一种数据缓存机制，对不可变数据类型使用同一个内存地址，有效的节省了空间，本文主要介绍Python的内存驻留机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="内存驻留" scheme="https://hiyongz.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%BB%E7%95%99/"/>
    
  </entry>
  
  <entry>
    <title>Linux和Windows创建指定大小文件方法</title>
    <link href="https://hiyongz.github.io/posts/linux-and-windows-create-files-certain-size/"/>
    <id>https://hiyongz.github.io/posts/linux-and-windows-create-files-certain-size/</id>
    <published>2021-07-20T04:02:00.000Z</published>
    <updated>2021-07-22T14:09:24.129Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在测试中有时需要创建不同大小的测试文件，用于测试上传下载性能以及以及其它文件传输功能，本文介绍几种Liunx和Windows系统下创建指定大小文件的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果安装笔记</title>
    <link href="https://hiyongz.github.io/posts/macos-bigsur-hackintosh-installation-tutorial/"/>
    <id>https://hiyongz.github.io/posts/macos-bigsur-hackintosh-installation-tutorial/</id>
    <published>2021-07-17T04:12:00.000Z</published>
    <updated>2021-07-21T14:18:09.787Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文记录黑苹果安装过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://hiyongz.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="黑苹果" scheme="https://hiyongz.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>App�Զ������Թ���Uiautomator2</title>
    <link href="https://hiyongz.github.io/posts/app-testing-tools-for-uiautomator2/"/>
    <id>https://hiyongz.github.io/posts/app-testing-tools-for-uiautomator2/</id>
    <published>2021-07-15T04:12:00.000Z</published>
    <updated>2021-07-24T01:40:34.321Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.android.com/training/testing/ui-automator.html&quot;&gt;UI Automator&lt;/a&gt;�� google �� Android4.1 �汾����ʱ�Ƴ���һ����Java��д��Android UI �Զ������Թ��ߣ�����Android Accessibility ����Accessibility �������ڰ����м��û�ʹ��Android�豸��Ӧ�á��ں�̨���У�����accesbilityevents����ʱ����ϵͳ�ص���&lt;/p&gt;
&lt;p&gt;UI Automator���Կ���̲���������Ӧ�ú�UiAutomator�����������Ľ��̣������ԶԵ�����App���в��ԣ���ȡ��Ļ������һ��APP������һ���ؼ����ԣ�������������������&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;���Խű�ֻ��ʹ��Java����&lt;/li&gt;
&lt;li&gt;ִ��ʱ��Ҫ���ű������jar����apk���ϴ����豸�ϲ�������&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;python UIAutomator2��һ������ʹ��Python��Android�豸����UI�Զ��������Ŀ⣬�ײ����Google Ui Automator����ԭ�������ֻ���ʹ��http rpc����UiAutomator�еĹ��ܿ��ų�����Ȼ���ٽ���Щhttp�ӿڷ�װ��Python�⡣���ĵ�����UIAutomator2��ʹ�÷�����&lt;/p&gt;
    
    </summary>
    
    
      <category term="�Զ�������" scheme="https://hiyongz.github.io/categories/%EF%BF%BD%D4%B6%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD/"/>
    
      <category term="App�Զ�������" scheme="https://hiyongz.github.io/categories/%EF%BF%BD%D4%B6%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD/App%EF%BF%BD%D4%B6%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD/"/>
    
    
      <category term="Uiautomator2" scheme="https://hiyongz.github.io/tags/Uiautomator2/"/>
    
  </entry>
  
  <entry>
    <title>Python yaml文件读写</title>
    <link href="https://hiyongz.github.io/posts/python-library-for-pyyaml/"/>
    <id>https://hiyongz.github.io/posts/python-library-for-pyyaml/</id>
    <published>2021-07-13T04:12:00.000Z</published>
    <updated>2021-07-13T12:28:13.391Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;yaml相比json来说数据表示更加简洁，特别适合用来读取/更新配置文件，和json一样，也是一种数据串行化格式。本文介绍在Python中PyYAML库解析、保存yaml文件的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="yaml" scheme="https://hiyongz.github.io/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>Python json文件读写</title>
    <link href="https://hiyongz.github.io/posts/python-library-for-json/"/>
    <id>https://hiyongz.github.io/posts/python-library-for-json/</id>
    <published>2021-07-08T04:12:00.000Z</published>
    <updated>2021-07-08T13:39:14.115Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JSON (JavaScript Object Notation)是一个受 JavaScript 的对象字面量语法启发的轻量级数据交换格式，本文介绍Python json库的使用，也就是json的序列化和反序列化方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="yaml" scheme="https://hiyongz.github.io/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>App自动化测试工具Airtest</title>
    <link href="https://hiyongz.github.io/posts/app-testing-tools-for-airtestproject/"/>
    <id>https://hiyongz.github.io/posts/app-testing-tools-for-airtestproject/</id>
    <published>2021-07-06T04:12:00.000Z</published>
    <updated>2021-07-06T14:23:02.398Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;AirtestProject是由网易游戏推出的一款跨平台的UI自动化测试框架，主要是面向游戏的UI自动化测试，比如Unity3D、cocos2dx-*游戏框架，也支持Android原生app、iOS app、微信小程序的UI测试。本文主要介绍如何使用AirtestProject进行Android APP自动化测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Airtest" scheme="https://hiyongz.github.io/tags/Airtest/"/>
    
  </entry>
  
  <entry>
    <title>Python函数的参数类型</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-passing-arguments-in-function/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-passing-arguments-in-function/</id>
    <published>2021-07-01T04:12:00.000Z</published>
    <updated>2021-07-01T23:36:43.699Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;python函数的参数类型主要包括必选参数、可选参数、可变参数、位置参数和关键字参数，本文介绍一下他们的定义以及可变数据类型参数传递需要注意的地方。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="参数类型" scheme="https://hiyongz.github.io/tags/%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 命令行参数解析之 Click</title>
    <link href="https://hiyongz.github.io/posts/python-library-for-click/"/>
    <id>https://hiyongz.github.io/posts/python-library-for-click/</id>
    <published>2021-06-29T04:12:00.000Z</published>
    <updated>2021-06-30T13:58:41.556Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/116346563&quot;&gt;Python笔记：命令行参数解析&lt;/a&gt;中介绍了sys.argv、getopt 和 argparse三种命令行参数解析方法，今天来分享另外一个python命令行工具click，它是用来支持 Web开发框架 Flask的，都由&lt;a href=&quot;https://palletsprojects.com/&quot;&gt;Pallets 项目&lt;/a&gt;组织开发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="click" scheme="https://hiyongz.github.io/tags/click/"/>
    
      <category term="命令行参数" scheme="https://hiyongz.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记：lambda匿名函数</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-anonymous-function/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-anonymous-function/</id>
    <published>2021-06-24T04:12:00.000Z</published>
    <updated>2021-06-30T13:58:05.103Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Python中，一般使用def关键字来定义普通函数。顾名思义，匿名函数意味着函数没有名称，Python使用lambda关键字定义匿名函数。在某些情况下，使用匿名函数可以简化代码，提高代码的可读性。本文介绍python匿名函数的使用方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="匿名函数" scheme="https://hiyongz.github.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python中的__new__、__init__以及metaclass</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-new-and-init/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-new-and-init/</id>
    <published>2021-06-22T04:12:00.000Z</published>
    <updated>2021-06-23T13:02:35.435Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Python的面向对象编程中，首先得创建实例对象，然后初始化实例对象，Python中&lt;code&gt;__new__&lt;/code&gt;负责创建实例对象，&lt;code&gt;__init__&lt;/code&gt; 负责初始化对象，本文介绍&lt;code&gt;__new__&lt;/code&gt;和&lt;code&gt;__init__&lt;/code&gt; 的区别以及Python中的元类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="单例模式" scheme="https://hiyongz.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="metaclass" scheme="https://hiyongz.github.io/tags/metaclass/"/>
    
  </entry>
  
  <entry>
    <title>Python反射介绍</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-reflection/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-reflection/</id>
    <published>2021-06-17T04:12:00.000Z</published>
    <updated>2021-06-17T14:22:03.329Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;反射机制是面向对象编程语言中比较重要的功能，可以动态获取对象信息以及动态调用对象，Python作为一门动态编程语言，当然也有反射机制，本文介绍Python反射函数使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="反射机制" scheme="https://hiyongz.github.io/tags/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python协程</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-coroutines/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-coroutines/</id>
    <published>2021-06-15T04:12:00.000Z</published>
    <updated>2021-06-16T15:07:57.243Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;文章&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/117265796&quot;&gt;Python多线程与多进程&lt;/a&gt;中介绍了并行，并发，多线程和多进程的概念。多线程 / 多进程是解决并发问题的模型之一，本文要介绍的协程也是实现并发编程的一种方式。协程使用的异步IO (asynchronous IO)不是多线程或者多进程的，它是一种单线程、单进程的设计。也就是说，协程可以实现并发调度，但它本身并不是并发的（单线程下的”并发“）。相比多线程和多进程，协程没有进程上下文切换导致的资源占用，运行效率更高。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="协程" scheme="https://hiyongz.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="asyncio" scheme="https://hiyongz.github.io/tags/asyncio/"/>
    
      <category term="爬虫" scheme="https://hiyongz.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>文章导航</title>
    <link href="https://hiyongz.github.io/posts/blog-navigation/"/>
    <id>https://hiyongz.github.io/posts/blog-navigation/</id>
    <published>2021-06-13T04:12:00.000Z</published>
    <updated>2021-06-13T14:28:18.752Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;文章导航&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown基本语法介绍</title>
    <link href="https://hiyongz.github.io/posts/markdown-basic-syntax/"/>
    <id>https://hiyongz.github.io/posts/markdown-basic-syntax/</id>
    <published>2021-06-12T04:12:00.000Z</published>
    <updated>2021-06-14T07:03:31.155Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;主要经常使用typora进行笔记整理，Hexo博客就是使用MarkDown编写的，本文整理常用的Markdown基本语法以及HTML语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://hiyongz.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="markdown" scheme="https://hiyongz.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Python中的闭包</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-function-closures/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-function-closures/</id>
    <published>2021-06-10T04:12:00.000Z</published>
    <updated>2021-06-23T14:45:57.372Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;闭包 (closure) 是函数式编程中的一个概念，Python虽然不是纯粹的是函数式编程语言，但它仍然具有函数式编程的一些特性。在以前的文章&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/114716537&quot;&gt;Python笔记：Python装饰器&lt;/a&gt;中介绍的装饰器其实就使用了闭包，本文来介绍一下Python中的闭包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="闭包" scheme="https://hiyongz.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：位运算</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-bitwise-operation/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-bitwise-operation/</id>
    <published>2021-06-08T00:06:00.000Z</published>
    <updated>2021-06-12T11:37:39.419Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;计算机中的数据都是以二进制的形式存储在设备中，虽然十进制比二进制所需要的存储空间少，但二进制在硬件实现上要简单很多，而且在数模转换上也更加容易，因为只需要两种状态，所以计算机的底层运算都采用二进制。位运算就是对二进制数据进行的运算。使用合理的位运算可以提高代码在机器上的执行效率，本文将介绍常见的位运算以及Python中的位运算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="位运算" scheme="https://hiyongz.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>常见搜索算法（二）：二分查找</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-binary-search/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-binary-search/</id>
    <published>2021-06-03T04:12:00.000Z</published>
    <updated>2021-06-07T13:45:17.977Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;搜索具有n个元素有序数组的某个元素时，最直接的方法就是对每个元素进行遍历，也就是线性搜索，时间复杂度为O(n)。 还有一种更高效的搜索方法就是本文要介绍的二分查找，时间复杂度为O(logn)，本文介绍使用Python实现二分查找。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="二分查找" scheme="https://hiyongz.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python对象及内存管理机制</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-object-and-copy/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-object-and-copy/</id>
    <published>2021-06-01T04:12:00.000Z</published>
    <updated>2021-06-02T23:44:28.432Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Python是一门面向对象的编程语言，python中一切皆为对象，对每一个对象分配内存空间，python的内存管理机制主要包括引用计数、垃圾回收和内存池机制。本文简要介绍python对象及内存管理机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="内存管理" scheme="https://hiyongz.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>常见搜索算法（一）：深度优先和广度优先搜索</title>
    <link href="https://hiyongz.github.io/posts/algorithm-notes-for-dfs-bfs/"/>
    <id>https://hiyongz.github.io/posts/algorithm-notes-for-dfs-bfs/</id>
    <published>2021-05-27T04:12:00.000Z</published>
    <updated>2021-05-28T06:59:30.597Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;搜索算法是非常常用的算法，用于检索存储在某些数据结构中的信息。最简单直接的就是暴力搜索，也就是线性搜索，但它的时间复杂度较高，在实际工程应用中很少使用，需要对它进行优化。&lt;/p&gt;
&lt;p&gt;比如二分查找，贪心算法等搜索算法，在&lt;a href=&quot;&quot;&gt;算法笔记：树、堆和图&lt;/a&gt;中，提到了对图和二叉树的搜索算法：深度优先搜索（DFS）和广度优先搜索（BFS），如果知道起点和终点状态的情况下，还可以使用双向BFS。DFS和BFS根据特定的顺序进行依次搜索，效率也不高，启发式搜索（heuristic search）也就是A*算法引入估价函数进一步提升了搜索效率，这些算法应用于各种场景中，本文介绍在树和图中常用的深度优先和广度优先搜索算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="DFS" scheme="https://hiyongz.github.io/tags/DFS/"/>
    
      <category term="BFS" scheme="https://hiyongz.github.io/tags/BFS/"/>
    
  </entry>
  
</feed>
