<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HiYong</title>
  <icon>https://hiyongz.github.io/icon.png</icon>
  <subtitle>此时 此地 此身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hiyongz.github.io/"/>
  <updated>2021-11-16T14:03:47.981Z</updated>
  <id>https://hiyongz.github.io/</id>
  
  <author>
    <name>HiYo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github shields徽章配置方法介绍</title>
    <link href="https://hiyongz.github.io/posts/github-skills-for-shields-build/"/>
    <id>https://hiyongz.github.io/posts/github-skills-for-shields-build/</id>
    <published>2021-11-16T12:06:00.000Z</published>
    <updated>2021-11-16T14:03:47.981Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;你可能会注意到很多GitHub项目有很漂亮的徽章，它们可以用来显示项目的进度，版本等信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;github-shields.jpg&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;
&lt;p&gt;本文介绍shields徽章配置方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://hiyongz.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="github" scheme="https://hiyongz.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Web自动化测试之playwright：Web元素定位</title>
    <link href="https://hiyongz.github.io/posts/web-testing-with-playwright-for-locator/"/>
    <id>https://hiyongz.github.io/posts/web-testing-with-playwright-for-locator/</id>
    <published>2021-11-11T09:30:36.000Z</published>
    <updated>2021-11-16T14:03:48.073Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;要对web页面进行控制，首先需要定位到页面对应的元素，和Selenium一样，playwright也支持多种元素定位方法，下面来介绍它支持的元素选择器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="playwright" scheme="https://hiyongz.github.io/tags/playwright/"/>
    
      <category term="元素定位" scheme="https://hiyongz.github.io/tags/%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>电子书创建：Sphinx + Github + ReadTheDocs</title>
    <link href="https://hiyongz.github.io/posts/personal-blog-for-sphinx-readthedocs-and-github-guide/"/>
    <id>https://hiyongz.github.io/posts/personal-blog-for-sphinx-readthedocs-and-github-guide/</id>
    <published>2021-11-09T09:52:00.000Z</published>
    <updated>2021-11-16T14:03:48.005Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我写博客的初衷是为了系统的构建自己的知识体系，目前使用的平台有微信公众号，CSDN，博客园，GitHub Pages和Gitee Pages，他们都各有优缺点，整理的笔记多了之后发现这些平台不是很方便，比如公众号，CSDN和博客园，每次写完文章后，还需要再平台上进行编辑再发布，比较麻烦；GitHub Pages和Gitee Pages虽然可以快速发布，但是在文章系统管理上不是很方便。我希望将笔记整理成类似电子书一样，方便搜索和管理，经过查询资料，发现了ReadTheDocs这个文档管理工具，比较符合我的需求。可以使用 Sphinx 生成文档，GitHub 托管文档，然后导入到 ReadtheDocs进行展示，本文记录一下搭建过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://hiyongz.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="Hexo" scheme="https://hiyongz.github.io/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="https://hiyongz.github.io/tags/GitHub-Pages/"/>
    
      <category term="Gitee Pages" scheme="https://hiyongz.github.io/tags/Gitee-Pages/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 | “错误”的行为</title>
    <link href="https://hiyongz.github.io/posts/reading-notes-for-misbehaving-the-making-of-behavioral/"/>
    <id>https://hiyongz.github.io/posts/reading-notes-for-misbehaving-the-making-of-behavioral/</id>
    <published>2021-11-06T09:26:00.000Z</published>
    <updated>2021-11-16T14:03:48.029Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《“错误”的行为》是理查德·塞勒的个人学术自传，展现了行为经济学的大致发展脉络。如果想大致了解他关于行为经济学的主要工作，阅读这本书就可以了。下面整理一下这本书的部分内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python3 PIL库问题：ImageChops.difference返回None</title>
    <link href="https://hiyongz.github.io/posts/python-notes-for-pil-problem/"/>
    <id>https://hiyongz.github.io/posts/python-notes-for-pil-problem/</id>
    <published>2021-11-05T15:16:00.000Z</published>
    <updated>2021-11-16T14:03:48.025Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;遇到一个关于python PIL库的问题：在python3中，两张明显不同的图片，使用&lt;code&gt;ImageChops.difference&lt;/code&gt; 方法计算他们的差异，diff.getbbox()返回值为None，相同的代码在python2中运行就没有问题：&lt;br&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="PIL" scheme="https://hiyongz.github.io/tags/PIL/"/>
    
  </entry>
  
  <entry>
    <title>一些windows批处理脚本</title>
    <link href="https://hiyongz.github.io/posts/windows-notes-for-bat-script/"/>
    <id>https://hiyongz.github.io/posts/windows-notes-for-bat-script/</id>
    <published>2021-11-04T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:48.077Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文记录一些平时使用到的bat语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/tags/Windows/"/>
    
      <category term="bat" scheme="https://hiyongz.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>selenium URL重定向检查</title>
    <link href="https://hiyongz.github.io/posts/web-testing-with-selenium-for-redirect-check/"/>
    <id>https://hiyongz.github.io/posts/web-testing-with-selenium-for-redirect-check/</id>
    <published>2021-11-03T18:12:00.000Z</published>
    <updated>2021-11-16T14:03:48.077Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有时候需要测试URL重定向是否正确，本文介绍一种使用selenium测试URL重定向的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium" scheme="https://hiyongz.github.io/tags/selenium/"/>
    
      <category term="URL重定向" scheme="https://hiyongz.github.io/tags/URL%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Web自动化测试之playwright：概述</title>
    <link href="https://hiyongz.github.io/posts/web-testing-with-playwright-introduction/"/>
    <id>https://hiyongz.github.io/posts/web-testing-with-playwright-introduction/</id>
    <published>2021-11-02T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:48.077Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;playwright是由微软开发的Web UI自动化测试工具， 支持Node.js、Python、C# 和 Java语言，本文将介绍playwright的特性以及它的简单使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="playwright" scheme="https://hiyongz.github.io/tags/playwright/"/>
    
  </entry>
  
  <entry>
    <title>通过bat脚本配置系统环境变量</title>
    <link href="https://hiyongz.github.io/posts/windows-notes-for-environment-variables-setting/"/>
    <id>https://hiyongz.github.io/posts/windows-notes-for-environment-variables-setting/</id>
    <published>2021-10-30T08:12:00.000Z</published>
    <updated>2021-11-16T14:03:48.077Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍使用bat脚本添加系统环境变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/tags/Windows/"/>
    
      <category term="bat" scheme="https://hiyongz.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>Windows上实现iOS APP自动化测试：tidevice + WDA +  airtest</title>
    <link href="https://hiyongz.github.io/posts/app-testing-for-ios-app-testing-on-windows-with-airtest/"/>
    <id>https://hiyongz.github.io/posts/app-testing-for-ios-app-testing-on-windows-with-airtest/</id>
    <published>2021-10-28T08:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.905Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/119492403&quot;&gt;Windows上实现iOS APP自动化测试：tidevice + WDA + facebook-wda / appium&lt;/a&gt;中介绍了使用阿里开源的tidevice 和 facebook-wda实现在Windows上进行iOS APP自动化测试。本文介绍如何使用tidevice + WDA +  airtest进行iOS APP自动化测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="https://hiyongz.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：上下文Context</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-context/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-context/</id>
    <published>2021-10-26T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.981Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;context.Context类型是在 Go 1.7 版本引入到标准库的，上下文Context主要用来在goroutine之间传递截止日期、停止信号等上下文信息，并且它是并发安全的，可以控制多个goroutine，因此它可以很方便的用于并发控制和超时控制，标准库中的一些代码包也引入了Context参数，比如os/exec包、net包、database/sql包，等等。下面来介绍Context类型的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式实现跨行匹配</title>
    <link href="https://hiyongz.github.io/posts/linux-regular-expression-for-multiple-lines/"/>
    <id>https://hiyongz.github.io/posts/linux-regular-expression-for-multiple-lines/</id>
    <published>2021-10-21T12:02:00.000Z</published>
    <updated>2021-11-16T14:03:47.985Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式（Regular expression）可用来检查文本中是否包含指定模式的字符串，通常是按行来处理（POSIX标准），因为&lt;code&gt;.&lt;/code&gt;操作符通常不匹配换行符，如果要匹配多行怎么处理呢？本文介绍正则表达式跨行匹配实现方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
      <category term="正则表达式" scheme="https://hiyongz.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：WaitGroup</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-waitgroup/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-waitgroup/</id>
    <published>2021-10-19T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.981Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，在并发编程中，主要线程需要等待子线程运行结束后才能退出，go语言中，主 goroutine 等待其他 goroutine 运行结束可以使用通道来解决，具体实现可以参考文章&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/120248679&quot;&gt;Go语言并发编程：互斥锁&lt;/a&gt;中的例子。使用通道可能不是很简洁，本文介绍另一种方法，也就是sync包中的WaitGroup类型来等待 goroutine执行完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用facebook-wda进行iOS APP自动化测试</title>
    <link href="https://hiyongz.github.io/posts/app-testing-tools-for-facebook-wda/"/>
    <id>https://hiyongz.github.io/posts/app-testing-tools-for-facebook-wda/</id>
    <published>2021-10-16T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.917Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;facebook-wda 是一个基于Python的测试库，通过HTTP协议与WebDriverAgent通信，本文介绍如何使用 facebook-wda 进行iOS APP自动化测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="https://hiyongz.github.io/tags/iOS/"/>
    
      <category term="facebook-wda" scheme="https://hiyongz.github.io/tags/facebook-wda/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：sync.Once</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-sync-once/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-sync-once/</id>
    <published>2021-10-14T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.981Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;sync.Once用于保证某个动作只被执行一次，可用于单例模式中，比如初始化配置。我们知道init()函数也只会执行一次，不过它是在main()函数之前执行，如果想要在代码执行过程中只运行某个动作一次，可以使用sync.Once，下面来介绍一下它的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>VBSscript实现后台运行Windows bat脚本</title>
    <link href="https://hiyongz.github.io/posts/windows-notes-for-running-a-bat-file-in-background/"/>
    <id>https://hiyongz.github.io/posts/windows-notes-for-running-a-bat-file-in-background/</id>
    <published>2021-10-12T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:48.077Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;VBScript 是Visual Basic 语言的轻量级版本，本文介绍使用VBS实现在后台运行bat脚本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/tags/Windows/"/>
    
      <category term="bat" scheme="https://hiyongz.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 | 助推</title>
    <link href="https://hiyongz.github.io/posts/reading-notes-for-nudge/"/>
    <id>https://hiyongz.github.io/posts/reading-notes-for-nudge/</id>
    <published>2021-10-10T12:52:00.000Z</published>
    <updated>2021-11-16T14:03:48.033Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《助推》是诺贝尔经济学奖得主理查德·塞勒的著作，副标题为“如何做出有关健康、财富与幸福的最佳决策”，由于我们可能无法做出完全理性的选择，通过使用助推，可以引导人们做出更好的选择。任何能够显著改变社会人行为的因素都可以被称为“助推”。&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP自动化：class chain定位方法</title>
    <link href="https://hiyongz.github.io/posts/app-testing-for-ios-location-with-classChain/"/>
    <id>https://hiyongz.github.io/posts/app-testing-for-ios-location-with-classChain/</id>
    <published>2021-10-08T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.909Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/120318075&quot;&gt;iOS APP自动化：predicate定位&lt;/a&gt;中介绍了iOS APP的predicate定位方法，本文介绍与XPath语法比较类似的class chain定位方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="https://hiyongz.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：互斥锁</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-mutex/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-mutex/</id>
    <published>2021-10-06T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.981Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在并发编程中，多个Goroutine访问同一块内存资源时可能会出现竞态条件，我们需要在临界区中使用适当的同步操作来以避免竞态条件。Go 语言中提供了很多同步工具，本文将介绍互斥锁Mutex和读写锁RWMutex的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础语法（三）：结构体及方法</title>
    <link href="https://hiyongz.github.io/posts/golang-notes-for-struct-and-method/"/>
    <id>https://hiyongz.github.io/posts/golang-notes-for-struct-and-method/</id>
    <published>2021-09-28T12:12:00.000Z</published>
    <updated>2021-11-16T14:03:47.981Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;结构体类型可以用来保存不同类型的数据，也可以通过方法的形式来声明它的行为。本文将介绍go语言中的结构体和方法，以及“继承”的实现方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
</feed>
