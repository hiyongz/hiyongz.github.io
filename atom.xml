<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HiYong</title>
  <icon>https://hiyongz.github.io/icon.png</icon>
  <subtitle>此时 此地 此身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hiyongz.github.io/"/>
  <updated>2021-10-25T14:36:57.870Z</updated>
  <id>https://hiyongz.github.io/</id>
  
  <author>
    <name>HiYo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式实现跨行匹配</title>
    <link href="https://hiyongz.github.io/posts/linux-regular-expression-for-multiple-lines/"/>
    <id>https://hiyongz.github.io/posts/linux-regular-expression-for-multiple-lines/</id>
    <published>2021-10-21T12:02:00.000Z</published>
    <updated>2021-10-25T14:36:57.870Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式（Regular expression）可用来检查文本中是否包含指定模式的字符串，通常是按行来处理（POSIX标准），因为&lt;code&gt;.&lt;/code&gt;操作符通常不匹配换行符，如果要匹配多行怎么处理呢？本文介绍正则表达式跨行匹配实现方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
      <category term="python" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
      <category term="Python" scheme="https://hiyongz.github.io/tags/Python/"/>
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
      <category term="正则表达式" scheme="https://hiyongz.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：WaitGroup</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-waitgroup/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-waitgroup/</id>
    <published>2021-10-19T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，在并发编程中，主要线程需要等待子线程运行结束后才能退出，go语言中，主 goroutine 等待其他 goroutine 运行结束可以使用通道来解决，具体实现可以参考文章&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/120248679&quot;&gt;Go语言并发编程：互斥锁&lt;/a&gt;中的例子。使用通道可能不是很简洁，本文介绍另一种方法，也就是sync包中的WaitGroup类型来等待 goroutine执行完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用facebook-wda进行iOS APP自动化测试</title>
    <link href="https://hiyongz.github.io/posts/app-testing-tools-for-facebook-wda/"/>
    <id>https://hiyongz.github.io/posts/app-testing-tools-for-facebook-wda/</id>
    <published>2021-10-16T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.798Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;facebook-wda 是一个基于Python的测试库，通过HTTP协议与WebDriverAgent通信，本文介绍如何使用 facebook-wda 进行iOS APP自动化测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="https://hiyongz.github.io/tags/iOS/"/>
    
      <category term="facebook-wda" scheme="https://hiyongz.github.io/tags/facebook-wda/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：sync.Once</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-sync-once/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-sync-once/</id>
    <published>2021-10-14T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;sync.Once用于保证某个动作只被执行一次，可用于单例模式中，比如初始化配置。我们知道init()函数也只会执行一次，不过它是在main()函数之前执行，如果想要在代码执行过程中只运行某个动作一次，可以使用sync.Once，下面来介绍一下它的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>VBSscript实现后台运行Windows bat脚本</title>
    <link href="https://hiyongz.github.io/posts/windows-notes-for-running-a-bat-file-in-background/"/>
    <id>https://hiyongz.github.io/posts/windows-notes-for-running-a-bat-file-in-background/</id>
    <published>2021-10-12T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.966Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;VBScript 是Visual Basic 语言的轻量级版本，本文介绍使用VBS实现在后台运行bat脚本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://hiyongz.github.io/tags/Windows/"/>
    
      <category term="bat" scheme="https://hiyongz.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 | 助推</title>
    <link href="https://hiyongz.github.io/posts/reading-notes-for-nudge/"/>
    <id>https://hiyongz.github.io/posts/reading-notes-for-nudge/</id>
    <published>2021-10-10T12:52:00.000Z</published>
    <updated>2021-10-25T14:36:57.918Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《助推》是诺贝尔经济学奖得主理查德·塞勒的著作，副标题为“如何做出有关健康、财富与幸福的最佳决策”，由于我们可能无法做出完全理性的选择，通过使用助推，可以引导人们做出更好的选择。任何能够显著改变社会人行为的因素都可以被称为“助推”。&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP自动化：class chain定位方法</title>
    <link href="https://hiyongz.github.io/posts/app-testing-for-ios-location-with-classChain/"/>
    <id>https://hiyongz.github.io/posts/app-testing-for-ios-location-with-classChain/</id>
    <published>2021-10-08T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.786Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/120318075&quot;&gt;iOS APP自动化：predicate定位&lt;/a&gt;中介绍了iOS APP的predicate定位方法，本文介绍与XPath语法比较类似的class chain定位方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="https://hiyongz.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：互斥锁</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-mutex/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-mutex/</id>
    <published>2021-10-06T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在并发编程中，多个Goroutine访问同一块内存资源时可能会出现竞态条件，我们需要在临界区中使用适当的同步操作来以避免竞态条件。Go 语言中提供了很多同步工具，本文将介绍互斥锁Mutex和读写锁RWMutex的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础语法（三）：结构体及方法</title>
    <link href="https://hiyongz.github.io/posts/golang-notes-for-struct-and-method/"/>
    <id>https://hiyongz.github.io/posts/golang-notes-for-struct-and-method/</id>
    <published>2021-09-28T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;结构体类型可以用来保存不同类型的数据，也可以通过方法的形式来声明它的行为。本文将介绍go语言中的结构体和方法，以及“继承”的实现方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用GitHub Actions实现Hexo博客自动发布</title>
    <link href="https://hiyongz.github.io/posts/continuous-integration-for-blog-build-with-github-actions/"/>
    <id>https://hiyongz.github.io/posts/continuous-integration-for-blog-build-with-github-actions/</id>
    <published>2021-09-26T22:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.822Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/115888855&quot;&gt;使用jenkins实现hexo博客自动发布&lt;/a&gt;中介绍了可以使用jenkins实现博客自动发布，其实还有一种更简单的方法，就是GitHub提供的持续集成服务：GitHub Actions。下面就来介绍一下如何使用GitHub Actions来实现将hexo博客自动编译及发布到GitHub Pages和Gitee pages上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="测试开发" scheme="https://hiyongz.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
      <category term="持续集成" scheme="https://hiyongz.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="其它" scheme="https://hiyongz.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="Jenkins" scheme="https://hiyongz.github.io/tags/Jenkins/"/>
    
      <category term="Hexo" scheme="https://hiyongz.github.io/tags/Hexo/"/>
    
      <category term="GitHub Actions" scheme="https://hiyongz.github.io/tags/GitHub-Actions/"/>
    
  </entry>
  
  <entry>
    <title>Linux Bash编程：Fisher–Yates shuffle 洗牌算法</title>
    <link href="https://hiyongz.github.io/posts/linux-shell-bash-fisher-yates-shuffle-algorithm/"/>
    <id>https://hiyongz.github.io/posts/linux-shell-bash-fisher-yates-shuffle-algorithm/</id>
    <published>2021-09-24T12:02:00.000Z</published>
    <updated>2021-10-25T14:36:57.870Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍使用shell语法来实现Fisher–Yates shuffle 洗牌算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Go语言并发编程：原子操作</title>
    <link href="https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-atomic-operation/"/>
    <id>https://hiyongz.github.io/posts/golang-concurrent-synchronization-for-atomic-operation/</id>
    <published>2021-09-22T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在程序执行过程中，操作系统会进行线程调度，同一时刻能同时执行的程序数量跟CPU的内核线程数有关，比如4核CPU，同时最多只能有4个线程。Go 语言中的运行时系统也会对goroutine进行调度，调度器会频繁地让goroutine处于中断或者运行状态，这就不能保证代码执行的原子性（atomicity），即使使用互斥锁也不能保证原子性操作。Go语言中的atomic包提供了原子操作方法，下面来介绍它的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 | 赢家的诅咒</title>
    <link href="https://hiyongz.github.io/posts/reading-notes-for-the-winner-curse/"/>
    <id>https://hiyongz.github.io/posts/reading-notes-for-the-winner-curse/</id>
    <published>2021-09-21T18:26:00.000Z</published>
    <updated>2021-10-25T14:36:57.918Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《赢家的诅咒》是诺贝尔经济学奖得主理查德·塞勒的经典著作，副标题是“经济生活中的悖论与反常现象”，主要探讨了我们现实生活中广泛存在的一些”反常“现象，所谓”反常“是指与标准经济学理论的分析和预测不一致的现象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://hiyongz.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="https://hiyongz.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux Bash编程：将整数分解为n个随机数</title>
    <link href="https://hiyongz.github.io/posts/linux-shell-bash-splitinteger/"/>
    <id>https://hiyongz.github.io/posts/linux-shell-bash-splitinteger/</id>
    <published>2021-09-18T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.870Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍使用shell实现将一个整数m随机分解为n个数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
      <category term="算法" scheme="https://hiyongz.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP自动化：predicate定位</title>
    <link href="https://hiyongz.github.io/posts/app-testing-for-ios-location-with-predicate-locator/"/>
    <id>https://hiyongz.github.io/posts/app-testing-for-ios-location-with-predicate-locator/</id>
    <published>2021-09-16T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.786Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在iOS APP自动化测试中，最基本的操作就是元素定位了。与Android APP自动化测试一样，iOS也支持 ( XCUITest 或 UIAutomation测试框架) 使用属性值定位，比如id、className等元素属性，然而，有时候属性值并不是唯一的，&lt;a href=&quot;http://appium.io/&quot;&gt;appium&lt;/a&gt;、&lt;a href=&quot;https://github.com/openatx/facebook-wda&quot;&gt;facebook-wda&lt;/a&gt;等框架也封装了XPath定位方法，使用XPath和属性值定位方法基本可以定位到99%的元素。但是在性能方面，XPath的定位速度相对较慢，我们可以选择iOS特有的定位策略： predicate 和 class chain定位方法。本文介绍predicate定位方法， class chain定位将在下一篇文章中介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="App自动化测试" scheme="https://hiyongz.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="iOS" scheme="https://hiyongz.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的通道</title>
    <link href="https://hiyongz.github.io/posts/golang-notes-for-channel-sync/"/>
    <id>https://hiyongz.github.io/posts/golang-notes-for-channel-sync/</id>
    <published>2021-09-14T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通道（channel）是Go 语言中一种特殊的数据类型，通道本身就是并发安全的，可以通过它在多个 goroutine 之间传递数据。通道是Go 语言编程理念：“&lt;em&gt;Do not communicate by sharing memory; instead, share memory by communicating&lt;/em&gt;”（不要通过共享数据来通信，而应该通过通信来共享数据。）的完美实现，在并发编程中经常会遇到它。下面来介绍一下通道的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Linux Bash编程：随机数生成、对浮点数进行四舍五入运算</title>
    <link href="https://hiyongz.github.io/posts/linux-shell-bash-generate-random-numbers/"/>
    <id>https://hiyongz.github.io/posts/linux-shell-bash-generate-random-numbers/</id>
    <published>2021-09-09T12:02:00.000Z</published>
    <updated>2021-10-25T14:36:57.870Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍使用shell实现随机数生成以及对浮点数进行四舍五入运算&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的字符串拼接方法介绍</title>
    <link href="https://hiyongz.github.io/posts/golang-notes-for-string-concatenation/"/>
    <id>https://hiyongz.github.io/posts/golang-notes-for-string-concatenation/</id>
    <published>2021-09-07T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Go语言中的string类型、strings包和bytes.Buffer类型，介绍几种字符串拼接方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Linux Bash编程二：shell语法及实用技巧</title>
    <link href="https://hiyongz.github.io/posts/linux-shell-bash-programing2/"/>
    <id>https://hiyongz.github.io/posts/linux-shell-bash-programing2/</id>
    <published>2021-08-31T12:02:00.000Z</published>
    <updated>2021-10-25T14:36:57.870Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/112254528&quot;&gt;Linux Bash编程&lt;/a&gt;中，介绍了Bash编程基本语法，本文记录一下Bash编程中使用到的相关shell 语法技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hiyongz.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://hiyongz.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础语法（二）：函数</title>
    <link href="https://hiyongz.github.io/posts/golang-notes-for-basic-syntax-function/"/>
    <id>https://hiyongz.github.io/posts/golang-notes-for-basic-syntax-function/</id>
    <published>2021-08-26T12:12:00.000Z</published>
    <updated>2021-10-25T14:36:57.866Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;函数是一等（first-class）公民，可用来封装代码。在&lt;a href=&quot;https://blog.csdn.net/u010698107/article/details/119741912&quot;&gt;Go语言基础语法（一）&lt;/a&gt;中介绍了函数也是一种数据类型，函数的值也可以在其他函数间传递、赋予变量、做类型判断和转换等。下面来介绍Go语言中的函数定义和使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Go" scheme="https://hiyongz.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go/"/>
    
    
      <category term="Go" scheme="https://hiyongz.github.io/tags/Go/"/>
    
  </entry>
  
</feed>
